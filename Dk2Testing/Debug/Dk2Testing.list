
Dk2Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e28  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0801109c  0801109c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801119c  0801119c  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  0801119c  0801119c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111a4  080111a4  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111a4  080111a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080111a8  080111a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080111ac  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf8  2000000c  080111b8  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d04  080111b8  00013d04  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031801  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d01  00000000  00000000  00044843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a78  00000000  00000000  00049548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002150  00000000  00000000  0004bfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004729b  00000000  00000000  0004e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000358df  00000000  00000000  000953ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc7ed  00000000  00000000  000cac8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc98  00000000  00000000  002874bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00293154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	08011084 	.word	0x08011084

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	08011084 	.word	0x08011084

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f002 f8e6 	bl	80027a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f882 	bl	80006dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005d8:	f000 f8f2 	bl	80007c0 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005dc:	f000 f927 	bl	800082e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fe44 	bl	800126c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e4:	f000 fb22 	bl	8000c2c <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005e8:	f000 fae2 	bl	8000bb0 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ec:	f000 fb56 	bl	8000c9c <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f0:	f000 fbd2 	bl	8000d98 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f4:	f000 fc10 	bl	8000e18 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005f8:	f000 fc22 	bl	8000e40 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fc:	f000 fca0 	bl	8000f40 <MX_RTC_Init>
  MX_TIM3_Init();
 8000600:	f000 fd58 	bl	80010b4 <MX_TIM3_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000604:	f000 fe04 	bl	8001210 <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 8000608:	f000 f920 	bl	800084c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060c:	f000 fdb4 	bl	8001178 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000610:	f000 fce4 	bl	8000fdc <MX_SAI2_Init>
  MX_ADC4_Init();
 8000614:	f000 fa52 	bl	8000abc <MX_ADC4_Init>
  MX_I2C1_Init();
 8000618:	f000 fb7e 	bl	8000d18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SAI_Receive_DMA(&hsai_BlockB2,pcmVals,DIM(pcmVals));
 800061c:	2208      	movs	r2, #8
 800061e:	4928      	ldr	r1, [pc, #160]	@ (80006c0 <main+0xf4>)
 8000620:	4828      	ldr	r0, [pc, #160]	@ (80006c4 <main+0xf8>)
 8000622:	f00d fde5 	bl	800e1f0 <HAL_SAI_Receive_DMA>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2104      	movs	r1, #4
 800062a:	4827      	ldr	r0, [pc, #156]	@ (80006c8 <main+0xfc>)
 800062c:	f006 ff68 	bl	8007500 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Vals, DIM(adc1Vals));
 8000630:	220d      	movs	r2, #13
 8000632:	4926      	ldr	r1, [pc, #152]	@ (80006cc <main+0x100>)
 8000634:	4826      	ldr	r0, [pc, #152]	@ (80006d0 <main+0x104>)
 8000636:	f002 ffff 	bl	8003638 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4Vals, DIM(adc4Vals));
 800063a:	2202      	movs	r2, #2
 800063c:	4925      	ldr	r1, [pc, #148]	@ (80006d4 <main+0x108>)
 800063e:	4826      	ldr	r0, [pc, #152]	@ (80006d8 <main+0x10c>)
 8000640:	f002 fffa 	bl	8003638 <HAL_ADC_Start_DMA>



  //Set to "Awake" state
  I2C_Transmit(ADCAddress, 0x02, 0x81);
 8000644:	2281      	movs	r2, #129	@ 0x81
 8000646:	2102      	movs	r1, #2
 8000648:	2090      	movs	r0, #144	@ 0x90
 800064a:	f000 ff45 	bl	80014d8 <I2C_Transmit>

  //Reset all settings
  I2C_Transmit(ADCAddress, 0x01, 0xFF);
 800064e:	22ff      	movs	r2, #255	@ 0xff
 8000650:	2101      	movs	r1, #1
 8000652:	2090      	movs	r0, #144	@ 0x90
 8000654:	f000 ff40 	bl	80014d8 <I2C_Transmit>

  //Config ASI
  I2C_Transmit(ADCAddress, 0x07, 0x70);
 8000658:	2270      	movs	r2, #112	@ 0x70
 800065a:	2107      	movs	r1, #7
 800065c:	2090      	movs	r0, #144	@ 0x90
 800065e:	f000 ff3b 	bl	80014d8 <I2C_Transmit>

  //Slave Config
  I2C_Transmit(ADCAddress, 0x13, 0x07);
 8000662:	2207      	movs	r2, #7
 8000664:	2113      	movs	r1, #19
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f000 ff36 	bl	80014d8 <I2C_Transmit>

  //power down mic bias and ADC channels on fault
  I2C_Transmit(ADCAddress, 0x28, 0x10);
 800066c:	2210      	movs	r2, #16
 800066e:	2128      	movs	r1, #40	@ 0x28
 8000670:	2090      	movs	r0, #144	@ 0x90
 8000672:	f000 ff31 	bl	80014d8 <I2C_Transmit>

  //Set Micbias = 5V
  I2C_Transmit(ADCAddress, 0x3B, 0x70);
 8000676:	2270      	movs	r2, #112	@ 0x70
 8000678:	213b      	movs	r1, #59	@ 0x3b
 800067a:	2090      	movs	r0, #144	@ 0x90
 800067c:	f000 ff2c 	bl	80014d8 <I2C_Transmit>

  //config channel 1
  I2C_Transmit(ADCAddress, 0x3C, 0xA8);
 8000680:	22a8      	movs	r2, #168	@ 0xa8
 8000682:	213c      	movs	r1, #60	@ 0x3c
 8000684:	2090      	movs	r0, #144	@ 0x90
 8000686:	f000 ff27 	bl	80014d8 <I2C_Transmit>

  //config channel 2
  I2C_Transmit(ADCAddress, 0x41, 0xA8);
 800068a:	22a8      	movs	r2, #168	@ 0xa8
 800068c:	2141      	movs	r1, #65	@ 0x41
 800068e:	2090      	movs	r0, #144	@ 0x90
 8000690:	f000 ff22 	bl	80014d8 <I2C_Transmit>

  //config channel 3
  I2C_Transmit(ADCAddress, 0x46, 0xA8);
 8000694:	22a8      	movs	r2, #168	@ 0xa8
 8000696:	2146      	movs	r1, #70	@ 0x46
 8000698:	2090      	movs	r0, #144	@ 0x90
 800069a:	f000 ff1d 	bl	80014d8 <I2C_Transmit>

  //config channel 4
  I2C_Transmit(ADCAddress, 0x4B, 0xA8);
 800069e:	22a8      	movs	r2, #168	@ 0xa8
 80006a0:	214b      	movs	r1, #75	@ 0x4b
 80006a2:	2090      	movs	r0, #144	@ 0x90
 80006a4:	f000 ff18 	bl	80014d8 <I2C_Transmit>

  //enable input channel 1 to 4 I2C
  I2C_Transmit(ADCAddress, 0x73, 0xF0);
 80006a8:	22f0      	movs	r2, #240	@ 0xf0
 80006aa:	2173      	movs	r1, #115	@ 0x73
 80006ac:	2090      	movs	r0, #144	@ 0x90
 80006ae:	f000 ff13 	bl	80014d8 <I2C_Transmit>

  //enable output channel 1 to 4 ASI
  I2C_Transmit(ADCAddress, 0x74, 0xF0);
 80006b2:	22f0      	movs	r2, #240	@ 0xf0
 80006b4:	2174      	movs	r1, #116	@ 0x74
 80006b6:	2090      	movs	r0, #144	@ 0x90
 80006b8:	f000 ff0e 	bl	80014d8 <I2C_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <main+0xf0>
 80006c0:	20000cf4 	.word	0x20000cf4
 80006c4:	2000054c 	.word	0x2000054c
 80006c8:	42021000 	.word	0x42021000
 80006cc:	20000cd4 	.word	0x20000cd4
 80006d0:	20000028 	.word	0x20000028
 80006d4:	20000cf0 	.word	0x20000cf0
 80006d8:	200000b4 	.word	0x200000b4

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09e      	sub	sp, #120	@ 0x78
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2260      	movs	r2, #96	@ 0x60
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f010 fc9d 	bl	801102a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
 80006fe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000700:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000704:	f008 fe30 	bl	8009368 <HAL_PWREx_ControlVoltageScaling>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800070e:	f000 ff01 	bl	8001514 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000712:	f008 fe19 	bl	8009348 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemClock_Config+0xe0>)
 8000718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800071c:	4a27      	ldr	r2, [pc, #156]	@ (80007bc <SystemClock_Config+0xe0>)
 800071e:	f023 0318 	bic.w	r3, r3, #24
 8000722:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000726:	2317      	movs	r3, #23
 8000728:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000730:	2381      	movs	r3, #129	@ 0x81
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2310      	movs	r3, #16
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073e:	2301      	movs	r3, #1
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000742:	2310      	movs	r3, #16
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000746:	2300      	movs	r3, #0
 8000748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	2303      	movs	r3, #3
 8000750:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800075a:	2308      	movs	r3, #8
 800075c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800075e:	2308      	movs	r3, #8
 8000760:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800076a:	230c      	movs	r3, #12
 800076c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0318 	add.w	r3, r7, #24
 8000776:	4618      	mov	r0, r3
 8000778:	f008 ff20 	bl	80095bc <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000782:	f000 fec7 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	231f      	movs	r3, #31
 8000788:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	2103      	movs	r1, #3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f009 fde6 	bl	800a374 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007ae:	f000 feb1 	bl	8001514 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3778      	adds	r7, #120	@ 0x78
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	46020c00 	.word	0x46020c00

080007c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0b8      	sub	sp, #224	@ 0xe0
 80007c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	22e0      	movs	r2, #224	@ 0xe0
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f010 fc2c 	bl	801102a <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80007d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d6:	f04f 0301 	mov.w	r3, #1
 80007da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80007e4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80007e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80007ec:	2303      	movs	r3, #3
 80007ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80007f4:	230c      	movs	r3, #12
 80007f6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000804:	230c      	movs	r3, #12
 8000806:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 800080e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4618      	mov	r0, r3
 8000818:	f00a f97c 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000822:	f000 fe77 	bl	8001514 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	37e0      	adds	r7, #224	@ 0xe0
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000832:	f008 fe85 	bl	8009540 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000836:	2002      	movs	r0, #2
 8000838:	f008 fe22 	bl	8009480 <HAL_PWREx_ConfigSupply>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000842:	f000 fe67 	bl	8001514 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2220      	movs	r2, #32
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f010 fbe6 	bl	801102a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085e:	4b88      	ldr	r3, [pc, #544]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000860:	4a88      	ldr	r2, [pc, #544]	@ (8000a84 <MX_ADC1_Init+0x238>)
 8000862:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000864:	4b86      	ldr	r3, [pc, #536]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800086a:	4b85      	ldr	r3, [pc, #532]	@ (8000a80 <MX_ADC1_Init+0x234>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000870:	4b83      	ldr	r3, [pc, #524]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b82      	ldr	r3, [pc, #520]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800087c:	4b80      	ldr	r3, [pc, #512]	@ (8000a80 <MX_ADC1_Init+0x234>)
 800087e:	2201      	movs	r2, #1
 8000880:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b7f      	ldr	r3, [pc, #508]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000884:	2204      	movs	r2, #4
 8000886:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000888:	4b7d      	ldr	r3, [pc, #500]	@ (8000a80 <MX_ADC1_Init+0x234>)
 800088a:	2201      	movs	r2, #1
 800088c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800088e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000896:	4b7a      	ldr	r3, [pc, #488]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000898:	220d      	movs	r2, #13
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089c:	4b78      	ldr	r3, [pc, #480]	@ (8000a80 <MX_ADC1_Init+0x234>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b76      	ldr	r3, [pc, #472]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b75      	ldr	r3, [pc, #468]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008b0:	4b73      	ldr	r3, [pc, #460]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008b8:	4b71      	ldr	r3, [pc, #452]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008be:	4b70      	ldr	r3, [pc, #448]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008c4:	4b6e      	ldr	r3, [pc, #440]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008cc:	2203      	movs	r2, #3
 80008ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d8:	4869      	ldr	r0, [pc, #420]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80008da:	f002 fbc5 	bl	8003068 <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80008e4:	f000 fe16 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e8:	4b67      	ldr	r3, [pc, #412]	@ (8000a88 <MX_ADC1_Init+0x23c>)
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ec:	2306      	movs	r3, #6
 80008ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fa:	2304      	movs	r3, #4
 80008fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	485e      	ldr	r0, [pc, #376]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000908:	f003 fadc 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000912:	f000 fdff 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000916:	4b5d      	ldr	r3, [pc, #372]	@ (8000a8c <MX_ADC1_Init+0x240>)
 8000918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800091a:	230c      	movs	r3, #12
 800091c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4857      	ldr	r0, [pc, #348]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000924:	f003 face 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800092e:	f000 fdf1 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000932:	4b57      	ldr	r3, [pc, #348]	@ (8000a90 <MX_ADC1_Init+0x244>)
 8000934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000936:	2312      	movs	r3, #18
 8000938:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4850      	ldr	r0, [pc, #320]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000940:	f003 fac0 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800094a:	f000 fde3 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800094e:	4b51      	ldr	r3, [pc, #324]	@ (8000a94 <MX_ADC1_Init+0x248>)
 8000950:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000952:	2318      	movs	r3, #24
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4849      	ldr	r0, [pc, #292]	@ (8000a80 <MX_ADC1_Init+0x234>)
 800095c:	f003 fab2 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000966:	f000 fdd5 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800096a:	4b4b      	ldr	r3, [pc, #300]	@ (8000a98 <MX_ADC1_Init+0x24c>)
 800096c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800096e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4841      	ldr	r0, [pc, #260]	@ (8000a80 <MX_ADC1_Init+0x234>)
 800097a:	f003 faa3 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000984:	f000 fdc6 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000988:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <MX_ADC1_Init+0x250>)
 800098a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800098c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	483a      	ldr	r0, [pc, #232]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000998:	f003 fa94 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80009a2:	f000 fdb7 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009a6:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa0 <MX_ADC1_Init+0x254>)
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009aa:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4832      	ldr	r0, [pc, #200]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80009b6:	f003 fa85 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 80009c0:	f000 fda8 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009c4:	4b37      	ldr	r3, [pc, #220]	@ (8000aa4 <MX_ADC1_Init+0x258>)
 80009c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009c8:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80009d4:	f003 fa76 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 80009de:	f000 fd99 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009e2:	4b31      	ldr	r3, [pc, #196]	@ (8000aa8 <MX_ADC1_Init+0x25c>)
 80009e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80009e6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80009ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4823      	ldr	r0, [pc, #140]	@ (8000a80 <MX_ADC1_Init+0x234>)
 80009f2:	f003 fa67 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 80009fc:	f000 fd8a 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	@ (8000aac <MX_ADC1_Init+0x260>)
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	481c      	ldr	r0, [pc, #112]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000a10:	f003 fa58 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8000a1a:	f000 fd7b 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	@ (8000ab0 <MX_ADC1_Init+0x264>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000a22:	f240 2306 	movw	r3, #518	@ 0x206
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000a2e:	f003 fa49 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8000a38:	f000 fd6c 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_ADC1_Init+0x268>)
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000a40:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000a44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000a4c:	f003 fa3a 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000a56:	f000 fd5d 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_ADC1_Init+0x26c>)
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000a5e:	f240 2312 	movw	r3, #530	@ 0x212
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_ADC1_Init+0x234>)
 8000a6a:	f003 fa2b 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8000a74:	f000 fd4e 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000028 	.word	0x20000028
 8000a84:	42028000 	.word	0x42028000
 8000a88:	04000002 	.word	0x04000002
 8000a8c:	08000004 	.word	0x08000004
 8000a90:	0c000008 	.word	0x0c000008
 8000a94:	10000010 	.word	0x10000010
 8000a98:	14000020 	.word	0x14000020
 8000a9c:	1c000080 	.word	0x1c000080
 8000aa0:	20000100 	.word	0x20000100
 8000aa4:	2a000400 	.word	0x2a000400
 8000aa8:	2e000800 	.word	0x2e000800
 8000aac:	32001000 	.word	0x32001000
 8000ab0:	3e008000 	.word	0x3e008000
 8000ab4:	42010000 	.word	0x42010000
 8000ab8:	ce080000 	.word	0xce080000

08000abc <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f010 faae 	bl	801102a <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ace:	4b34      	ldr	r3, [pc, #208]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000ad0:	4a34      	ldr	r2, [pc, #208]	@ (8000ba4 <MX_ADC4_Init+0xe8>)
 8000ad2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad4:	4b32      	ldr	r3, [pc, #200]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000ada:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000ae8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000aec:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aee:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000af4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b24:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b28:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000b44:	4816      	ldr	r0, [pc, #88]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b46:	f002 fa8f 	bl	8003068 <HAL_ADC_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000b50:	f000 fce0 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_ADC4_Init+0xec>)
 8000b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b60:	2304      	movs	r3, #4
 8000b62:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b6e:	f003 f9a9 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000b78:	f000 fccc 	bl	8001514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_ADC4_Init+0xf0>)
 8000b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000b80:	2304      	movs	r3, #4
 8000b82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_ADC4_Init+0xe4>)
 8000b8a:	f003 f99b 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000b94:	f000 fcbe 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000b4 	.word	0x200000b4
 8000ba4:	46021000 	.word	0x46021000
 8000ba8:	1c000080 	.word	0x1c000080
 8000bac:	20000100 	.word	0x20000100

08000bb0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <MX_DMA2D_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000bfc:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000bfe:	f005 f8eb 	bl	8005dd8 <HAL_DMA2D_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000c08:	f000 fc84 	bl	8001514 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_DMA2D_Init+0x74>)
 8000c10:	f005 f944 	bl	8005e9c <HAL_DMA2D_ConfigLayer>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 fc7b 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000026c 	.word	0x2000026c
 8000c28:	4002b000 	.word	0x4002b000

08000c2c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_GPDMA1_Init+0x6c>)
 8000c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c38:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <MX_GPDMA1_Init+0x6c>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_GPDMA1_Init+0x6c>)
 8000c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	201d      	movs	r0, #29
 8000c56:	f004 f961 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c5a:	201d      	movs	r0, #29
 8000c5c:	f004 f978 	bl	8004f50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	201e      	movs	r0, #30
 8000c66:	f004 f959 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000c6a:	201e      	movs	r0, #30
 8000c6c:	f004 f970 	bl	8004f50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	201f      	movs	r0, #31
 8000c76:	f004 f951 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000c7a:	201f      	movs	r0, #31
 8000c7c:	f004 f968 	bl	8004f50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2020      	movs	r0, #32
 8000c86:	f004 f949 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	f004 f960 	bl	8004f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	46020c00 	.word	0x46020c00

08000c9c <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_HSPI1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cb8:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cbc:	221a      	movs	r2, #26
 8000cbe:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_HSPI1_Init+0x74>)
 8000cfe:	f00f fd2d 	bl	801075c <HAL_XSPI_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000d08:	f000 fc04 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200002d4 	.word	0x200002d4
 8000d14:	420d3400 	.word	0x420d3400

08000d18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <MX_I2C1_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <MX_I2C1_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d54:	f006 fc28 	bl	80075a8 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 fbd9 	bl	8001514 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d66:	f007 fdb3 	bl	80088d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 fbd0 	bl	8001514 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d78:	f007 fdf5 	bl	8008966 <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 fbc7 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000334 	.word	0x20000334
 8000d90:	40005400 	.word	0x40005400
 8000d94:	20a0c4df 	.word	0x20a0c4df

08000d98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <MX_I2C2_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000da4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <MX_I2C2_Init+0x7c>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dd2:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000dd4:	f006 fbe8 	bl	80075a8 <HAL_I2C_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dde:	f000 fb99 	bl	8001514 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000de6:	f007 fd73 	bl	80088d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f000 fb90 	bl	8001514 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_I2C2_Init+0x74>)
 8000df8:	f007 fdb5 	bl	8008966 <HAL_I2CEx_ConfigDigitalFilter>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f000 fb87 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000388 	.word	0x20000388
 8000e10:	40005800 	.word	0x40005800
 8000e14:	20a0c4df 	.word	0x20a0c4df

08000e18 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f007 fdef 	bl	8008a00 <HAL_ICACHE_ConfigAssociativityMode>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000e28:	f000 fb74 	bl	8001514 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000e2c:	f007 fe08 	bl	8008a40 <HAL_ICACHE_Enable>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000e36:	f000 fb6d 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	@ 0x38
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2234      	movs	r2, #52	@ 0x34
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f010 f8ec 	bl	801102a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e52:	4b39      	ldr	r3, [pc, #228]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e54:	4a39      	ldr	r2, [pc, #228]	@ (8000f3c <MX_LTDC_Init+0xfc>)
 8000e56:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e58:	4b37      	ldr	r3, [pc, #220]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e64:	4b34      	ldr	r3, [pc, #208]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e6a:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000e70:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e72:	2203      	movs	r2, #3
 8000e74:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000e76:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e78:	2203      	movs	r2, #3
 8000e7a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e7e:	220b      	movs	r2, #11
 8000e80:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e84:	220b      	movs	r2, #11
 8000e86:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e8a:	f240 322b 	movw	r2, #811	@ 0x32b
 8000e8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000e90:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e92:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000e98:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000e9a:	f240 3233 	movw	r2, #819	@ 0x333
 8000e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000ea2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ec0:	481d      	ldr	r0, [pc, #116]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000ec2:	f007 fdcd 	bl	8008a60 <HAL_LTDC_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ecc:	f000 fb22 	bl	8001514 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000ed4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ed8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000ede:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000ee2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ee8:	23ff      	movs	r3, #255	@ 0xff
 8000eea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ef0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ef4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <MX_LTDC_Init+0xf8>)
 8000f20:	f007 ff30 	bl	8008d84 <HAL_LTDC_ConfigLayer>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000f2a:	f000 faf3 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	@ 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200003dc 	.word	0x200003dc
 8000f3c:	40016800 	.word	0x40016800

08000f40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd8 <MX_RTC_Init+0x98>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f66:	227f      	movs	r2, #127	@ 0x7f
 8000f68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f6c:	22ff      	movs	r2, #255	@ 0xff
 8000f6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f88:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f96:	480f      	ldr	r0, [pc, #60]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000f98:	f00c fdb8 	bl	800db0c <HAL_RTC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000fa2:	f000 fab7 	bl	8001514 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_RTC_Init+0x94>)
 8000fbc:	f00c fed4 	bl	800dd68 <HAL_RTCEx_PrivilegeModeSet>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000fc6:	f000 faa5 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000484 	.word	0x20000484
 8000fd8:	46007800 	.word	0x46007800

08000fdc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8000fe2:	4a30      	ldr	r2, [pc, #192]	@ (80010a4 <MX_SAI2_Init+0xc8>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fec:	4b2c      	ldr	r3, [pc, #176]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ffe:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001004:	4b26      	ldr	r3, [pc, #152]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8001006:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <MX_SAI2_Init+0xcc>)
 8001008:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800100a:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001010:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8001012:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001016:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800101e:	4b20      	ldr	r3, [pc, #128]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8001026:	2210      	movs	r2, #16
 8001028:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800102a:	2302      	movs	r3, #2
 800102c:	2202      	movs	r2, #2
 800102e:	2101      	movs	r1, #1
 8001030:	481b      	ldr	r0, [pc, #108]	@ (80010a0 <MX_SAI2_Init+0xc4>)
 8001032:	f00c fec7 	bl	800ddc4 <HAL_SAI_InitProtocol>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 800103c:	f000 fa6a 	bl	8001514 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_SAI2_Init+0xd0>)
 8001042:	4a1b      	ldr	r2, [pc, #108]	@ (80010b0 <MX_SAI2_Init+0xd4>)
 8001044:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_SAI2_Init+0xd0>)
 8001048:	2201      	movs	r2, #1
 800104a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_SAI2_Init+0xd0>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_SAI2_Init+0xd0>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_SAI2_Init+0xd0>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_SAI2_Init+0xd0>)
 8001060:	2202      	movs	r2, #2
 8001062:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_SAI2_Init+0xd0>)
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <MX_SAI2_Init+0xcc>)
 8001068:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_SAI2_Init+0xd0>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_SAI2_Init+0xd0>)
 8001072:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001076:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_SAI2_Init+0xd0>)
 800107a:	2200      	movs	r2, #0
 800107c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_SAI2_Init+0xd0>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 4) != HAL_OK)
 8001084:	2304      	movs	r3, #4
 8001086:	2202      	movs	r2, #2
 8001088:	2100      	movs	r1, #0
 800108a:	4808      	ldr	r0, [pc, #32]	@ (80010ac <MX_SAI2_Init+0xd0>)
 800108c:	f00c fe9a 	bl	800ddc4 <HAL_SAI_InitProtocol>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 8001096:	f000 fa3d 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200004b4 	.word	0x200004b4
 80010a4:	40015804 	.word	0x40015804
 80010a8:	00017700 	.word	0x00017700
 80010ac:	2000054c 	.word	0x2000054c
 80010b0:	40015824 	.word	0x40015824

080010b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d8:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <MX_TIM3_Init+0xbc>)
 80010da:	4a26      	ldr	r2, [pc, #152]	@ (8001174 <MX_TIM3_Init+0xc0>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <MX_TIM3_Init+0xbc>)
 80010e0:	22a0      	movs	r2, #160	@ 0xa0
 80010e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <MX_TIM3_Init+0xbc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_TIM3_Init+0xbc>)
 80010ec:	2264      	movs	r2, #100	@ 0x64
 80010ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_TIM3_Init+0xbc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <MX_TIM3_Init+0xbc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010fc:	481c      	ldr	r0, [pc, #112]	@ (8001170 <MX_TIM3_Init+0xbc>)
 80010fe:	f00d fb81 	bl	800e804 <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001108:	f000 fa04 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4815      	ldr	r0, [pc, #84]	@ (8001170 <MX_TIM3_Init+0xbc>)
 800111c:	f00e f9ba 	bl	800f494 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001126:	f000 f9f5 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	@ 0x60
 800112c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 800112e:	234b      	movs	r3, #75	@ 0x4b
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	220c      	movs	r2, #12
 800113e:	4619      	mov	r1, r3
 8001140:	480b      	ldr	r0, [pc, #44]	@ (8001170 <MX_TIM3_Init+0xbc>)
 8001142:	f00d fbb7 	bl	800e8b4 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800114c:	f000 f9e2 	bl	8001514 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_TIM3_Init+0xbc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69da      	ldr	r2, [r3, #28]
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_TIM3_Init+0xbc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800115e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <MX_TIM3_Init+0xbc>)
 8001162:	f000 ff5b 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000710 	.word	0x20000710
 8001174:	40000400 	.word	0x40000400

08001178 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <MX_USART1_UART_Init+0x94>)
 8001180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c0:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011c2:	f00e fa29 	bl	800f618 <HAL_UART_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011cc:	f000 f9a2 	bl	8001514 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011d4:	f00f f9f7 	bl	80105c6 <HAL_UARTEx_SetTxFifoThreshold>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011de:	f000 f999 	bl	8001514 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011e6:	f00f fa2c 	bl	8010642 <HAL_UARTEx_SetRxFifoThreshold>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f000 f990 	bl	8001514 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011f6:	f00f f9ad 	bl	8010554 <HAL_UARTEx_DisableFifoMode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001200:	f000 f988 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2000075c 	.word	0x2000075c
 800120c:	40013800 	.word	0x40013800

08001210 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001216:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001218:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800121c:	2209      	movs	r2, #9
 800121e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001222:	2200      	movs	r2, #0
 8001224:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001228:	2203      	movs	r2, #3
 800122a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800122c:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800122e:	2200      	movs	r2, #0
 8001230:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001234:	2200      	movs	r2, #0
 8001236:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800123a:	2200      	movs	r2, #0
 800123c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001240:	2200      	movs	r2, #0
 8001242:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800124c:	2200      	movs	r2, #0
 800124e:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001252:	f007 ff48 	bl	80090e6 <HAL_PCD_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 800125c:	f000 f95a 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200007f0 	.word	0x200007f0
 8001268:	42040000 	.word	0x42040000

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	@ 0x38
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	4b8c      	ldr	r3, [pc, #560]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001288:	4a8a      	ldr	r2, [pc, #552]	@ (80014b4 <MX_GPIO_Init+0x248>)
 800128a:	f043 0310 	orr.w	r3, r3, #16
 800128e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001292:	4b88      	ldr	r3, [pc, #544]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	623b      	str	r3, [r7, #32]
 800129e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	4b84      	ldr	r3, [pc, #528]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a6:	4a83      	ldr	r2, [pc, #524]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b0:	4b80      	ldr	r3, [pc, #512]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012be:	4b7d      	ldr	r3, [pc, #500]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c4:	4a7b      	ldr	r2, [pc, #492]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ce:	4b79      	ldr	r3, [pc, #484]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012dc:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e2:	4a74      	ldr	r2, [pc, #464]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ec:	4b71      	ldr	r3, [pc, #452]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b6e      	ldr	r3, [pc, #440]	@ (80014b4 <MX_GPIO_Init+0x248>)
 80012fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001300:	4a6c      	ldr	r2, [pc, #432]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <MX_GPIO_Init+0x248>)
 800130c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b66      	ldr	r3, [pc, #408]	@ (80014b4 <MX_GPIO_Init+0x248>)
 800131a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131e:	4a65      	ldr	r2, [pc, #404]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001328:	4b62      	ldr	r3, [pc, #392]	@ (80014b4 <MX_GPIO_Init+0x248>)
 800132a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001336:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	4a5d      	ldr	r2, [pc, #372]	@ (80014b4 <MX_GPIO_Init+0x248>)
 800133e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001346:	4b5b      	ldr	r3, [pc, #364]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	4b57      	ldr	r3, [pc, #348]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135a:	4a56      	ldr	r2, [pc, #344]	@ (80014b4 <MX_GPIO_Init+0x248>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001364:	4b53      	ldr	r3, [pc, #332]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001372:	4b50      	ldr	r3, [pc, #320]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001378:	4a4e      	ldr	r2, [pc, #312]	@ (80014b4 <MX_GPIO_Init+0x248>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001382:	4b4c      	ldr	r3, [pc, #304]	@ (80014b4 <MX_GPIO_Init+0x248>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2104      	movs	r1, #4
 8001394:	4848      	ldr	r0, [pc, #288]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001396:	f006 f8b3 	bl	8007500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2110      	movs	r1, #16
 800139e:	4846      	ldr	r0, [pc, #280]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80013a0:	f006 f8ae 	bl	8007500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2114      	movs	r1, #20
 80013a8:	4844      	ldr	r0, [pc, #272]	@ (80014bc <MX_GPIO_Init+0x250>)
 80013aa:	f006 f8a9 	bl	8007500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 80013ae:	2314      	movs	r3, #20
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	483c      	ldr	r0, [pc, #240]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80013c6:	f005 fec3 	bl	8007150 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80013ca:	2320      	movs	r3, #32
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ce:	4b3c      	ldr	r3, [pc, #240]	@ (80014c0 <MX_GPIO_Init+0x254>)
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	4836      	ldr	r0, [pc, #216]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80013de:	f005 feb7 	bl	8007150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80013e2:	2302      	movs	r3, #2
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013e6:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <MX_GPIO_Init+0x258>)
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4834      	ldr	r0, [pc, #208]	@ (80014c8 <MX_GPIO_Init+0x25c>)
 80013f6:	f005 feab 	bl	8007150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80013fa:	2310      	movs	r3, #16
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <MX_GPIO_Init+0x260>)
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001402:	2301      	movs	r3, #1
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	482e      	ldr	r0, [pc, #184]	@ (80014c8 <MX_GPIO_Init+0x25c>)
 800140e:	f005 fe9f 	bl	8007150 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001412:	2314      	movs	r3, #20
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4824      	ldr	r0, [pc, #144]	@ (80014bc <MX_GPIO_Init+0x250>)
 800142a:	f005 fe91 	bl	8007150 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	481e      	ldr	r0, [pc, #120]	@ (80014bc <MX_GPIO_Init+0x250>)
 8001442:	f005 fe85 	bl	8007150 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001446:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	481d      	ldr	r0, [pc, #116]	@ (80014d0 <MX_GPIO_Init+0x264>)
 800145c:	f005 fe78 	bl	8007150 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001460:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <MX_GPIO_Init+0x268>)
 8001476:	f005 fe6b 	bl	8007150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	200c      	movs	r0, #12
 8001480:	f003 fd4c 	bl	8004f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001484:	200c      	movs	r0, #12
 8001486:	f003 fd63 	bl	8004f50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200f      	movs	r0, #15
 8001490:	f003 fd44 	bl	8004f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001494:	200f      	movs	r0, #15
 8001496:	f003 fd5b 	bl	8004f50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2010      	movs	r0, #16
 80014a0:	f003 fd3c 	bl	8004f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80014a4:	2010      	movs	r0, #16
 80014a6:	f003 fd53 	bl	8004f50 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3738      	adds	r7, #56	@ 0x38
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	46020c00 	.word	0x46020c00
 80014b8:	42021000 	.word	0x42021000
 80014bc:	42020c00 	.word	0x42020c00
 80014c0:	10110000 	.word	0x10110000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	42020000 	.word	0x42020000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	42021800 	.word	0x42021800
 80014d4:	42020400 	.word	0x42020400

080014d8 <I2C_Transmit>:

/* USER CODE BEGIN 4 */

static uint8_t I2C_Transmit(uint16_t DevAddress, uint8_t targetRegister, uint8_t command)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	460b      	mov	r3, r1
 80014e4:	717b      	strb	r3, [r7, #5]
 80014e6:	4613      	mov	r3, r2
 80014e8:	713b      	strb	r3, [r7, #4]
	uint8_t pData[2] = {targetRegister, command};
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	733b      	strb	r3, [r7, #12]
 80014ee:	793b      	ldrb	r3, [r7, #4]
 80014f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData, DIM(pData), 100);
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	88f9      	ldrh	r1, [r7, #6]
 80014f8:	2364      	movs	r3, #100	@ 0x64
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2302      	movs	r3, #2
 80014fe:	4804      	ldr	r0, [pc, #16]	@ (8001510 <I2C_Transmit+0x38>)
 8001500:	f006 f8ee 	bl	80076e0 <HAL_I2C_Master_Transmit>
	return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000334 	.word	0x20000334

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <Error_Handler+0x8>

08001520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_MspInit+0x30>)
 8001528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800152c:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <HAL_MspInit+0x30>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_MspInit+0x30>)
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001544:	f008 f80c 	bl	8009560 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	46020c00 	.word	0x46020c00

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0e0      	sub	sp, #384	@ 0x180
 8001558:	af00      	add	r7, sp, #0
 800155a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800155e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001562:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001578:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800157c:	4618      	mov	r0, r3
 800157e:	23e0      	movs	r3, #224	@ 0xe0
 8001580:	461a      	mov	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f00f fd51 	bl	801102a <memset>
  if(hadc->Instance==ADC1)
 8001588:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800158c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a9d      	ldr	r2, [pc, #628]	@ (800180c <HAL_ADC_MspInit+0x2b8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	f040 814a 	bne.w	8001830 <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800159c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015a0:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80015a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80015b0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015b4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f009 faa5 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80015d0:	f7ff ffa0 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 80015d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015da:	4a8d      	ldr	r2, [pc, #564]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 80015dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 80015e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ea:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80015ee:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015f2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001600:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4b83      	ldr	r3, [pc, #524]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001608:	4a81      	ldr	r2, [pc, #516]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001612:	4b7f      	ldr	r3, [pc, #508]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001618:	f003 0204 	and.w	r2, r3, #4
 800161c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001620:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800162a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800162e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b77      	ldr	r3, [pc, #476]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001636:	4a76      	ldr	r2, [pc, #472]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001640:	4b73      	ldr	r3, [pc, #460]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800164e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001658:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800165c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b6c      	ldr	r3, [pc, #432]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001664:	4a6a      	ldr	r2, [pc, #424]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800166e:	4b68      	ldr	r3, [pc, #416]	@ (8001810 <HAL_ADC_MspInit+0x2bc>)
 8001670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001674:	f003 0202 	and.w	r2, r3, #2
 8001678:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800167c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001686:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800168a:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 800168c:	230f      	movs	r3, #15
 800168e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80016a2:	4619      	mov	r1, r3
 80016a4:	485b      	ldr	r0, [pc, #364]	@ (8001814 <HAL_ADC_MspInit+0x2c0>)
 80016a6:	f005 fd53 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80016aa:	23ed      	movs	r3, #237	@ 0xed
 80016ac:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80016c0:	4619      	mov	r1, r3
 80016c2:	4855      	ldr	r0, [pc, #340]	@ (8001818 <HAL_ADC_MspInit+0x2c4>)
 80016c4:	f005 fd44 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80016de:	4619      	mov	r1, r3
 80016e0:	484e      	ldr	r0, [pc, #312]	@ (800181c <HAL_ADC_MspInit+0x2c8>)
 80016e2:	f005 fd35 	bl	8007150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80016e6:	2321      	movs	r3, #33	@ 0x21
 80016e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001704:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001708:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001712:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001716:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001726:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800172a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 800174c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001750:	4933      	ldr	r1, [pc, #204]	@ (8001820 <HAL_ADC_MspInit+0x2cc>)
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fe10 	bl	8006378 <HAL_DMAEx_List_BuildNode>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 800175e:	f7ff fed9 	bl	8001514 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001762:	4a2f      	ldr	r2, [pc, #188]	@ (8001820 <HAL_ADC_MspInit+0x2cc>)
 8001764:	2100      	movs	r1, #0
 8001766:	482f      	ldr	r0, [pc, #188]	@ (8001824 <HAL_ADC_MspInit+0x2d0>)
 8001768:	f004 fe32 	bl	80063d0 <HAL_DMAEx_List_InsertNode>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 8001772:	f7ff fecf 	bl	8001514 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001776:	482b      	ldr	r0, [pc, #172]	@ (8001824 <HAL_ADC_MspInit+0x2d0>)
 8001778:	f004 fef3 	bl	8006562 <HAL_DMAEx_List_SetCircularMode>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 8001782:	f7ff fec7 	bl	8001514 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 8001788:	4a28      	ldr	r2, [pc, #160]	@ (800182c <HAL_ADC_MspInit+0x2d8>)
 800178a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800178c:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 800178e:	2200      	movs	r2, #0
 8001790:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 800179a:	2200      	movs	r2, #0
 800179c:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80017a4:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 80017a6:	2281      	movs	r2, #129	@ 0x81
 80017a8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80017aa:	481f      	ldr	r0, [pc, #124]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 80017ac:	f004 fc24 	bl	8005ff8 <HAL_DMAEx_List_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 80017b6:	f7ff fead 	bl	8001514 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80017ba:	491a      	ldr	r1, [pc, #104]	@ (8001824 <HAL_ADC_MspInit+0x2d0>)
 80017bc:	481a      	ldr	r0, [pc, #104]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 80017be:	f004 ff31 	bl	8006624 <HAL_DMAEx_List_LinkQ>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 80017c8:	f7ff fea4 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 80017cc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017d0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 80017d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80017da:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 80017dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017e0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017e8:	2110      	movs	r1, #16
 80017ea:	480f      	ldr	r0, [pc, #60]	@ (8001828 <HAL_ADC_MspInit+0x2d4>)
 80017ec:	f004 f812 	bl	8005814 <HAL_DMA_ConfigChannelAttributes>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 80017f6:	f7ff fe8d 	bl	8001514 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2025      	movs	r0, #37	@ 0x25
 8001800:	f003 fb8c 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001804:	2025      	movs	r0, #37	@ 0x25
 8001806:	f003 fba3 	bl	8004f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800180a:	e0bf      	b.n	800198c <HAL_ADC_MspInit+0x438>
 800180c:	42028000 	.word	0x42028000
 8001810:	46020c00 	.word	0x46020c00
 8001814:	42020800 	.word	0x42020800
 8001818:	42020000 	.word	0x42020000
 800181c:	42020400 	.word	0x42020400
 8001820:	20000140 	.word	0x20000140
 8001824:	20000164 	.word	0x20000164
 8001828:	2000017c 	.word	0x2000017c
 800182c:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001830:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001834:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a56      	ldr	r2, [pc, #344]	@ (8001998 <HAL_ADC_MspInit+0x444>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f040 80a4 	bne.w	800198c <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001844:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001848:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 800184c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001858:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800185c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001860:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001864:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f009 f951 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_ADC_MspInit+0x328>
      Error_Handler();
 8001878:	f7ff fe4c 	bl	8001514 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 800187c:	4b47      	ldr	r3, [pc, #284]	@ (800199c <HAL_ADC_MspInit+0x448>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001882:	4a46      	ldr	r2, [pc, #280]	@ (800199c <HAL_ADC_MspInit+0x448>)
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800188c:	4b43      	ldr	r3, [pc, #268]	@ (800199c <HAL_ADC_MspInit+0x448>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001892:	f003 0220 	and.w	r2, r3, #32
 8001896:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800189a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018a4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018a8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018aa:	4b3c      	ldr	r3, [pc, #240]	@ (800199c <HAL_ADC_MspInit+0x448>)
 80018ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b0:	4a3a      	ldr	r2, [pc, #232]	@ (800199c <HAL_ADC_MspInit+0x448>)
 80018b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ba:	4b38      	ldr	r3, [pc, #224]	@ (800199c <HAL_ADC_MspInit+0x448>)
 80018bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c0:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80018c4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018d2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80018d6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 80018d8:	2303      	movs	r3, #3
 80018da:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018de:	2303      	movs	r3, #3
 80018e0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ea:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018ee:	4619      	mov	r1, r3
 80018f0:	482b      	ldr	r0, [pc, #172]	@ (80019a0 <HAL_ADC_MspInit+0x44c>)
 80018f2:	f005 fc2d 	bl	8007150 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 80018f8:	4a2b      	ldr	r2, [pc, #172]	@ (80019a8 <HAL_ADC_MspInit+0x454>)
 80018fa:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 80018fc:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 80018fe:	2201      	movs	r2, #1
 8001900:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001902:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001908:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800190e:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001914:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001916:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800191a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800191c:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800191e:	2201      	movs	r2, #1
 8001920:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001924:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001928:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001932:	2201      	movs	r2, #1
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001936:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001938:	2201      	movs	r2, #1
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800194a:	2200      	movs	r2, #0
 800194c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800194e:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 8001950:	f003 fbc0 	bl	80050d4 <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 800195a:	f7ff fddb 	bl	8001514 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 800195e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001962:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800196a:	671a      	str	r2, [r3, #112]	@ 0x70
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800196e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001972:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800197a:	2110      	movs	r1, #16
 800197c:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <HAL_ADC_MspInit+0x450>)
 800197e:	f003 ff49 	bl	8005814 <HAL_DMA_ConfigChannelAttributes>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_ADC_MspInit+0x438>
      Error_Handler();
 8001988:	f7ff fdc4 	bl	8001514 <Error_Handler>
}
 800198c:	bf00      	nop
 800198e:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	46021000 	.word	0x46021000
 800199c:	46020c00 	.word	0x46020c00
 80019a0:	42021800 	.word	0x42021800
 80019a4:	200001f4 	.word	0x200001f4
 80019a8:	40020150 	.word	0x40020150

080019ac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <HAL_DMA2D_MspInit+0x3c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10e      	bne.n	80019dc <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_DMA2D_MspInit+0x40>)
 80019c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c4:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <HAL_DMA2D_MspInit+0x40>)
 80019c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <HAL_DMA2D_MspInit+0x40>)
 80019d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	4002b000 	.word	0x4002b000
 80019ec:	46020c00 	.word	0x46020c00

080019f0 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <HAL_XSPI_MspInit+0xc8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d14d      	bne.n	8001aae <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001a12:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a18:	4a28      	ldr	r2, [pc, #160]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a36:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a54:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a5e:	4b17      	ldr	r3, [pc, #92]	@ (8001abc <HAL_XSPI_MspInit+0xcc>)
 8001a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001a6c:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001a70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001a7e:	2308      	movs	r3, #8
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <HAL_XSPI_MspInit+0xd0>)
 8001a8a:	f005 fb61 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4806      	ldr	r0, [pc, #24]	@ (8001ac4 <HAL_XSPI_MspInit+0xd4>)
 8001aaa:	f005 fb51 	bl	8007150 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	@ 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	420d3400 	.word	0x420d3400
 8001abc:	46020c00 	.word	0x46020c00
 8001ac0:	42021c00 	.word	0x42021c00
 8001ac4:	42022000 	.word	0x42022000

08001ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0c4      	sub	sp, #272	@ 0x110
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ad2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ad6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	22e0      	movs	r2, #224	@ 0xe0
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00f fa9a 	bl	801102a <memset>
  if(hi2c->Instance==I2C1)
 8001af6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001afa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a63      	ldr	r2, [pc, #396]	@ (8001c90 <HAL_I2C_MspInit+0x1c8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d14f      	bne.n	8001ba8 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b08:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f008 fff8 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001b2a:	f7ff fcf3 	bl	8001514 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2e:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b34:	4a57      	ldr	r2, [pc, #348]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b3e:	4b55      	ldr	r3, [pc, #340]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b4c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b54:	2312      	movs	r3, #18
 8001b56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b66:	2304      	movs	r3, #4
 8001b68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b6c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001b70:	4619      	mov	r1, r3
 8001b72:	4849      	ldr	r0, [pc, #292]	@ (8001c98 <HAL_I2C_MspInit+0x1d0>)
 8001b74:	f005 faec 	bl	8007150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b78:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b7e:	4a45      	ldr	r2, [pc, #276]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001b80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b88:	4b42      	ldr	r3, [pc, #264]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b8e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001b92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ba0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ba4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ba6:	e06e      	b.n	8001c86 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001ba8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	@ (8001c9c <HAL_I2C_MspInit+0x1d4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d165      	bne.n	8001c86 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bba:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bcc:	f107 0318 	add.w	r3, r7, #24
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f008 ff9f 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001bdc:	f7ff fc9a 	bl	8001514 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001be6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001be8:	f043 0320 	orr.w	r3, r3, #32
 8001bec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf0:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf6:	f003 0220 	and.w	r2, r3, #32
 8001bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c0c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c26:	2304      	movs	r3, #4
 8001c28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c2c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001c30:	4619      	mov	r1, r3
 8001c32:	481b      	ldr	r0, [pc, #108]	@ (8001ca0 <HAL_I2C_MspInit+0x1d8>)
 8001c34:	f005 fa8c 	bl	8007150 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c3e:	4a15      	ldr	r2, [pc, #84]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c44:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_I2C_MspInit+0x1cc>)
 8001c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c4e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c64:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2039      	movs	r0, #57	@ 0x39
 8001c6c:	f003 f956 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001c70:	2039      	movs	r0, #57	@ 0x39
 8001c72:	f003 f96d 	bl	8004f50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	203a      	movs	r0, #58	@ 0x3a
 8001c7c:	f003 f94e 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001c80:	203a      	movs	r0, #58	@ 0x3a
 8001c82:	f003 f965 	bl	8004f50 <HAL_NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40005400 	.word	0x40005400
 8001c94:	46020c00 	.word	0x46020c00
 8001c98:	42021800 	.word	0x42021800
 8001c9c:	40005800 	.word	0x40005800
 8001ca0:	42021400 	.word	0x42021400

08001ca4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0c6      	sub	sp, #280	@ 0x118
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cb2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	22e0      	movs	r2, #224	@ 0xe0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f00f f9ac 	bl	801102a <memset>
  if(hltdc->Instance==LTDC)
 8001cd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a92      	ldr	r2, [pc, #584]	@ (8001f28 <HAL_LTDC_MspInit+0x284>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	f040 811b 	bne.w	8001f1c <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0302 	mov.w	r3, #2
 8001cee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001d00:	2332      	movs	r3, #50	@ 0x32
 8001d02:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001d18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	4618      	mov	r0, r3
 8001d24:	f008 fef6 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001d2e:	f7ff fbf1 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d32:	4b7e      	ldr	r3, [pc, #504]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d38:	4a7c      	ldr	r2, [pc, #496]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d3e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d42:	4b7a      	ldr	r3, [pc, #488]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b76      	ldr	r3, [pc, #472]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d56:	4a75      	ldr	r2, [pc, #468]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d60:	4b72      	ldr	r3, [pc, #456]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d66:	f003 0202 	and.w	r2, r3, #2
 8001d6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d6e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d7c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d7e:	4b6b      	ldr	r3, [pc, #428]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d84:	4a69      	ldr	r2, [pc, #420]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d8e:	4b67      	ldr	r3, [pc, #412]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d94:	f003 0210 	and.w	r2, r3, #16
 8001d98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001daa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dac:	4b5f      	ldr	r3, [pc, #380]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc2:	f003 0208 	and.w	r2, r3, #8
 8001dc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dd8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	4b54      	ldr	r3, [pc, #336]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de0:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dea:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <HAL_LTDC_MspInit+0x288>)
 8001dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df0:	f003 0204 	and.w	r2, r3, #4
 8001df4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001df8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e06:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001e20:	2308      	movs	r3, #8
 8001e22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4840      	ldr	r0, [pc, #256]	@ (8001f30 <HAL_LTDC_MspInit+0x28c>)
 8001e2e:	f005 f98f 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e32:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8001e36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e52:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e56:	4619      	mov	r1, r3
 8001e58:	4836      	ldr	r0, [pc, #216]	@ (8001f34 <HAL_LTDC_MspInit+0x290>)
 8001e5a:	f005 f979 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e5e:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8001e62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e82:	4619      	mov	r1, r3
 8001e84:	482c      	ldr	r0, [pc, #176]	@ (8001f38 <HAL_LTDC_MspInit+0x294>)
 8001e86:	f005 f963 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e8a:	23c0      	movs	r3, #192	@ 0xc0
 8001e8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001eac:	4619      	mov	r1, r3
 8001eae:	4823      	ldr	r0, [pc, #140]	@ (8001f3c <HAL_LTDC_MspInit+0x298>)
 8001eb0:	f005 f94e 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4818      	ldr	r0, [pc, #96]	@ (8001f3c <HAL_LTDC_MspInit+0x298>)
 8001edc:	f005 f938 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001efa:	2307      	movs	r3, #7
 8001efc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f04:	4619      	mov	r1, r3
 8001f06:	480a      	ldr	r0, [pc, #40]	@ (8001f30 <HAL_LTDC_MspInit+0x28c>)
 8001f08:	f005 f922 	bl	8007150 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2087      	movs	r0, #135	@ 0x87
 8001f12:	f003 f803 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f16:	2087      	movs	r0, #135	@ 0x87
 8001f18:	f003 f81a 	bl	8004f50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f1c:	bf00      	nop
 8001f1e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40016800 	.word	0x40016800
 8001f2c:	46020c00 	.word	0x46020c00
 8001f30:	42020400 	.word	0x42020400
 8001f34:	42021000 	.word	0x42021000
 8001f38:	42020c00 	.word	0x42020c00
 8001f3c:	42020800 	.word	0x42020800

08001f40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0bc      	sub	sp, #240	@ 0xf0
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	22e0      	movs	r2, #224	@ 0xe0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00f f86a 	bl	801102a <memset>
  if(hrtc->Instance==RTC)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <HAL_RTC_MspInit+0x90>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d132      	bne.n	8001fc6 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f60:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f008 fdcb 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001f84:	f7ff fac6 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_RTC_MspInit+0x94>)
 8001f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_RTC_MspInit+0x94>)
 8001f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_RTC_MspInit+0x94>)
 8001f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <HAL_RTC_MspInit+0x94>)
 8001fa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_RTC_MspInit+0x94>)
 8001faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <HAL_RTC_MspInit+0x94>)
 8001fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fbc:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <HAL_RTC_MspInit+0x94>)
 8001fbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001fc6:	bf00      	nop
 8001fc8:	37f0      	adds	r7, #240	@ 0xf0
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	46007800 	.word	0x46007800
 8001fd4:	46020c00 	.word	0x46020c00

08001fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_TIM_PWM_MspInit+0x40>)
 8001fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ff0:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <HAL_TIM_PWM_MspInit+0x40>)
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <HAL_TIM_PWM_MspInit+0x40>)
 8001ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40000400 	.word	0x40000400
 8002018:	46020c00 	.word	0x46020c00

0800201c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <HAL_TIM_MspPostInit+0x68>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d11e      	bne.n	800207c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800203e:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002044:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 800205c:	2340      	movs	r3, #64	@ 0x40
 800205e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206c:	2302      	movs	r3, #2
 800206e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4619      	mov	r1, r3
 8002076:	4805      	ldr	r0, [pc, #20]	@ (800208c <HAL_TIM_MspPostInit+0x70>)
 8002078:	f005 f86a 	bl	8007150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40000400 	.word	0x40000400
 8002088:	46020c00 	.word	0x46020c00
 800208c:	42021000 	.word	0x42021000

08002090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0c2      	sub	sp, #264	@ 0x108
 8002094:	af00      	add	r7, sp, #0
 8002096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800209a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800209e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	22e0      	movs	r2, #224	@ 0xe0
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00e ffb6 	bl	801102a <memset>
  if(huart->Instance==USART1)
 80020be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002188 <HAL_UART_MspInit+0xf8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d155      	bne.n	800217c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020d0:	f04f 0201 	mov.w	r2, #1
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020dc:	2300      	movs	r3, #0
 80020de:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4618      	mov	r0, r3
 80020e6:	f008 fd15 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80020f0:	f7ff fa10 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020f4:	4b25      	ldr	r3, [pc, #148]	@ (800218c <HAL_UART_MspInit+0xfc>)
 80020f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020fa:	4a24      	ldr	r2, [pc, #144]	@ (800218c <HAL_UART_MspInit+0xfc>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002100:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002104:	4b21      	ldr	r3, [pc, #132]	@ (800218c <HAL_UART_MspInit+0xfc>)
 8002106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800210a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <HAL_UART_MspInit+0xfc>)
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002118:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <HAL_UART_MspInit+0xfc>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <HAL_UART_MspInit+0xfc>)
 8002124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002128:	f003 0201 	and.w	r2, r3, #1
 800212c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002130:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800213a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800213e:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002140:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002144:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800215a:	2307      	movs	r3, #7
 800215c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002164:	4619      	mov	r1, r3
 8002166:	480a      	ldr	r0, [pc, #40]	@ (8002190 <HAL_UART_MspInit+0x100>)
 8002168:	f004 fff2 	bl	8007150 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	203d      	movs	r0, #61	@ 0x3d
 8002172:	f002 fed3 	bl	8004f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002176:	203d      	movs	r0, #61	@ 0x3d
 8002178:	f002 feea 	bl	8004f50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800217c:	bf00      	nop
 800217e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40013800 	.word	0x40013800
 800218c:	46020c00 	.word	0x46020c00
 8002190:	42020000 	.word	0x42020000

08002194 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0be      	sub	sp, #248	@ 0xf8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	22e0      	movs	r2, #224	@ 0xe0
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00e ff40 	bl	801102a <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002298 <HAL_PCD_MspInit+0x104>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d16d      	bne.n	8002290 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b4:	4b39      	ldr	r3, [pc, #228]	@ (800229c <HAL_PCD_MspInit+0x108>)
 80021b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021ba:	4a38      	ldr	r2, [pc, #224]	@ (800229c <HAL_PCD_MspInit+0x108>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <HAL_PCD_MspInit+0x108>)
 80021c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0308 	mov.w	r3, #8
 80021da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80021de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f008 fc92 	bl	800ab14 <HAL_RCCEx_PeriphCLKConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80021f6:	f7ff f98d 	bl	8001514 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80021fa:	200c      	movs	r0, #12
 80021fc:	f000 fbce 	bl	800299c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002200:	4b26      	ldr	r3, [pc, #152]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002206:	4a25      	ldr	r2, [pc, #148]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002210:	4b22      	ldr	r3, [pc, #136]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 800221e:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800222a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <HAL_PCD_MspInit+0x108>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11b      	bne.n	8002282 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <HAL_PCD_MspInit+0x108>)
 800224c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002250:	4a12      	ldr	r2, [pc, #72]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_PCD_MspInit+0x108>)
 800225c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002268:	f007 f95a 	bl	8009520 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800226c:	f007 f988 	bl	8009580 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002270:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002276:	4a09      	ldr	r2, [pc, #36]	@ (800229c <HAL_PCD_MspInit+0x108>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002280:	e003      	b.n	800228a <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002282:	f007 f94d 	bl	8009520 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002286:	f007 f97b 	bl	8009580 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 fb72 	bl	8002974 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002290:	bf00      	nop
 8002292:	37f8      	adds	r7, #248	@ 0xf8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	42040000 	.word	0x42040000
 800229c:	46020c00 	.word	0x46020c00

080022a0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0a4      	sub	sp, #144	@ 0x90
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4aae      	ldr	r2, [pc, #696]	@ (8002568 <HAL_SAI_MspInit+0x2c8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f040 8086 	bne.w	80023c0 <HAL_SAI_MspInit+0x120>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80022b4:	4bad      	ldr	r3, [pc, #692]	@ (800256c <HAL_SAI_MspInit+0x2cc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10e      	bne.n	80022da <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80022bc:	4bac      	ldr	r3, [pc, #688]	@ (8002570 <HAL_SAI_MspInit+0x2d0>)
 80022be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022c2:	4aab      	ldr	r2, [pc, #684]	@ (8002570 <HAL_SAI_MspInit+0x2d0>)
 80022c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022c8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022cc:	4ba8      	ldr	r3, [pc, #672]	@ (8002570 <HAL_SAI_MspInit+0x2d0>)
 80022ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80022da:	4ba4      	ldr	r3, [pc, #656]	@ (800256c <HAL_SAI_MspInit+0x2cc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4aa2      	ldr	r2, [pc, #648]	@ (800256c <HAL_SAI_MspInit+0x2cc>)
 80022e2:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022e4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80022e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80022fc:	230d      	movs	r3, #13
 80022fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002306:	4619      	mov	r1, r3
 8002308:	489a      	ldr	r0, [pc, #616]	@ (8002574 <HAL_SAI_MspInit+0x2d4>)
 800230a:	f004 ff21 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800230e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002312:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002326:	230d      	movs	r3, #13
 8002328:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800232c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002330:	4619      	mov	r1, r3
 8002332:	4891      	ldr	r0, [pc, #580]	@ (8002578 <HAL_SAI_MspInit+0x2d8>)
 8002334:	f004 ff0c 	bl	8007150 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002338:	4b90      	ldr	r3, [pc, #576]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 800233a:	4a91      	ldr	r2, [pc, #580]	@ (8002580 <HAL_SAI_MspInit+0x2e0>)
 800233c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_A;
 800233e:	4b8f      	ldr	r3, [pc, #572]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002340:	2226      	movs	r2, #38	@ 0x26
 8002342:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002344:	4b8d      	ldr	r3, [pc, #564]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800234a:	4b8c      	ldr	r3, [pc, #560]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 800234c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002350:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002352:	4b8a      	ldr	r3, [pc, #552]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002354:	2208      	movs	r2, #8
 8002356:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8002358:	4b88      	ldr	r3, [pc, #544]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800235e:	4b87      	ldr	r3, [pc, #540]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002360:	2202      	movs	r2, #2
 8002362:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002364:	4b85      	ldr	r3, [pc, #532]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800236a:	4b84      	ldr	r3, [pc, #528]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 800236c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002370:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8002372:	4b82      	ldr	r3, [pc, #520]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002374:	2201      	movs	r2, #1
 8002376:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8002378:	4b80      	ldr	r3, [pc, #512]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 800237a:	2201      	movs	r2, #1
 800237c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800237e:	4b7f      	ldr	r3, [pc, #508]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002380:	2200      	movs	r2, #0
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002384:	4b7d      	ldr	r3, [pc, #500]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002386:	2200      	movs	r2, #0
 8002388:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 800238a:	4b7c      	ldr	r3, [pc, #496]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 800238c:	2200      	movs	r2, #0
 800238e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002390:	487a      	ldr	r0, [pc, #488]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 8002392:	f002 fe9f 	bl	80050d4 <HAL_DMA_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 800239c:	f7ff f8ba 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a76      	ldr	r2, [pc, #472]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 80023a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80023a8:	4a74      	ldr	r2, [pc, #464]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80023ae:	2110      	movs	r1, #16
 80023b0:	4872      	ldr	r0, [pc, #456]	@ (800257c <HAL_SAI_MspInit+0x2dc>)
 80023b2:	f003 fa2f 	bl	8005814 <HAL_DMA_ConfigChannelAttributes>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 80023bc:	f7ff f8aa 	bl	8001514 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6f      	ldr	r2, [pc, #444]	@ (8002584 <HAL_SAI_MspInit+0x2e4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f040 80ca 	bne.w	8002560 <HAL_SAI_MspInit+0x2c0>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80023cc:	4b67      	ldr	r3, [pc, #412]	@ (800256c <HAL_SAI_MspInit+0x2cc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <HAL_SAI_MspInit+0x152>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80023d4:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <HAL_SAI_MspInit+0x2d0>)
 80023d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023da:	4a65      	ldr	r2, [pc, #404]	@ (8002570 <HAL_SAI_MspInit+0x2d0>)
 80023dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023e0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023e4:	4b62      	ldr	r3, [pc, #392]	@ (8002570 <HAL_SAI_MspInit+0x2d0>)
 80023e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80023f2:	4b5e      	ldr	r3, [pc, #376]	@ (800256c <HAL_SAI_MspInit+0x2cc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	4a5c      	ldr	r2, [pc, #368]	@ (800256c <HAL_SAI_MspInit+0x2cc>)
 80023fa:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002400:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002414:	230d      	movs	r3, #13
 8002416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800241e:	4619      	mov	r1, r3
 8002420:	4859      	ldr	r0, [pc, #356]	@ (8002588 <HAL_SAI_MspInit+0x2e8>)
 8002422:	f004 fe95 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002426:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800242a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800243e:	230d      	movs	r3, #13
 8002440:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002444:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002448:	4619      	mov	r1, r3
 800244a:	4850      	ldr	r0, [pc, #320]	@ (800258c <HAL_SAI_MspInit+0x2ec>)
 800244c:	f004 fe80 	bl	8007150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002454:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002468:	230d      	movs	r3, #13
 800246a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002472:	4619      	mov	r1, r3
 8002474:	4845      	ldr	r0, [pc, #276]	@ (800258c <HAL_SAI_MspInit+0x2ec>)
 8002476:	f004 fe6b 	bl	8007150 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800247a:	2321      	movs	r3, #33	@ 0x21
 800247c:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 800247e:	2327      	movs	r3, #39	@ 0x27
 8002480:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800248e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002494:	2302      	movs	r3, #2
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002498:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80024aa:	2300      	movs	r3, #0
 80024ac:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80024b2:	2300      	movs	r3, #0
 80024b4:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80024ba:	2300      	movs	r3, #0
 80024bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4933      	ldr	r1, [pc, #204]	@ (8002590 <HAL_SAI_MspInit+0x2f0>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 ff57 	bl	8006378 <HAL_DMAEx_List_BuildNode>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_SAI_MspInit+0x234>
    {
      Error_Handler();
 80024d0:	f7ff f820 	bl	8001514 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80024d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002590 <HAL_SAI_MspInit+0x2f0>)
 80024d6:	2100      	movs	r1, #0
 80024d8:	482e      	ldr	r0, [pc, #184]	@ (8002594 <HAL_SAI_MspInit+0x2f4>)
 80024da:	f003 ff79 	bl	80063d0 <HAL_DMAEx_List_InsertNode>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_SAI_MspInit+0x248>
    {
      Error_Handler();
 80024e4:	f7ff f816 	bl	8001514 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80024e8:	482a      	ldr	r0, [pc, #168]	@ (8002594 <HAL_SAI_MspInit+0x2f4>)
 80024ea:	f004 f83a 	bl	8006562 <HAL_DMAEx_List_SetCircularMode>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 80024f4:	f7ff f80e 	bl	8001514 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80024f8:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 80024fa:	4a28      	ldr	r2, [pc, #160]	@ (800259c <HAL_SAI_MspInit+0x2fc>)
 80024fc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80024fe:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 8002500:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002504:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002506:	4b24      	ldr	r3, [pc, #144]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 8002508:	2200      	movs	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800250c:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 800250e:	2200      	movs	r2, #0
 8002510:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002512:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 800251a:	2281      	movs	r2, #129	@ 0x81
 800251c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800251e:	481e      	ldr	r0, [pc, #120]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 8002520:	f003 fd6a 	bl	8005ff8 <HAL_DMAEx_List_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_SAI_MspInit+0x28e>
    {
      Error_Handler();
 800252a:	f7fe fff3 	bl	8001514 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 800252e:	4919      	ldr	r1, [pc, #100]	@ (8002594 <HAL_SAI_MspInit+0x2f4>)
 8002530:	4819      	ldr	r0, [pc, #100]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 8002532:	f004 f877 	bl	8006624 <HAL_DMAEx_List_LinkQ>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 800253c:	f7fe ffea 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 8002544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002548:	4a13      	ldr	r2, [pc, #76]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800254e:	2110      	movs	r1, #16
 8002550:	4811      	ldr	r0, [pc, #68]	@ (8002598 <HAL_SAI_MspInit+0x2f8>)
 8002552:	f003 f95f 	bl	8005814 <HAL_DMA_ConfigChannelAttributes>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_SAI_MspInit+0x2c0>
    {
      Error_Handler();
 800255c:	f7fe ffda 	bl	8001514 <Error_Handler>
    }

    }
}
 8002560:	bf00      	nop
 8002562:	3790      	adds	r7, #144	@ 0x90
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40015804 	.word	0x40015804
 800256c:	20000cfc 	.word	0x20000cfc
 8002570:	46020c00 	.word	0x46020c00
 8002574:	42020400 	.word	0x42020400
 8002578:	42021800 	.word	0x42021800
 800257c:	200005e4 	.word	0x200005e4
 8002580:	400201d0 	.word	0x400201d0
 8002584:	40015824 	.word	0x40015824
 8002588:	42020000 	.word	0x42020000
 800258c:	42020800 	.word	0x42020800
 8002590:	2000065c 	.word	0x2000065c
 8002594:	20000680 	.word	0x20000680
 8002598:	20000698 	.word	0x20000698
 800259c:	400200d0 	.word	0x400200d0

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <NMI_Handler+0x4>

080025a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <MemManage_Handler+0x4>

080025b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f000 f979 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}

080025fe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002602:	2002      	movs	r0, #2
 8002604:	f004 ff94 	bl	8007530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002610:	2010      	movs	r0, #16
 8002612:	f004 ff8d 	bl	8007530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}

0800261a <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800261e:	2020      	movs	r0, #32
 8002620:	f004 ff86 	bl	8007530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <GPDMA1_Channel0_IRQHandler+0x10>)
 800262e:	f002 ff82 	bl	8005536 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000017c 	.word	0x2000017c

0800263c <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002640:	4802      	ldr	r0, [pc, #8]	@ (800264c <GPDMA1_Channel1_IRQHandler+0x10>)
 8002642:	f002 ff78 	bl	8005536 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000698 	.word	0x20000698

08002650 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002654:	4802      	ldr	r0, [pc, #8]	@ (8002660 <GPDMA1_Channel2_IRQHandler+0x10>)
 8002656:	f002 ff6e 	bl	8005536 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200001f4 	.word	0x200001f4

08002664 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002668:	4802      	ldr	r0, [pc, #8]	@ (8002674 <GPDMA1_Channel3_IRQHandler+0x10>)
 800266a:	f002 ff64 	bl	8005536 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200005e4 	.word	0x200005e4

08002678 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800267c:	4802      	ldr	r0, [pc, #8]	@ (8002688 <ADC1_2_IRQHandler+0x10>)
 800267e:	f001 f925 	bl	80038cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000028 	.word	0x20000028

0800268c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <I2C2_EV_IRQHandler+0x10>)
 8002692:	f005 f919 	bl	80078c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000388 	.word	0x20000388

080026a0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <I2C2_ER_IRQHandler+0x10>)
 80026a6:	f005 f929 	bl	80078fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000388 	.word	0x20000388

080026b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <USART1_IRQHandler+0x10>)
 80026ba:	f00c fffd 	bl	800f6b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000075c 	.word	0x2000075c

080026c8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <LTDC_IRQHandler+0x10>)
 80026ce:	f006 fa97 	bl	8008c00 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200003dc 	.word	0x200003dc

080026dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026e0:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <SystemInit+0x68>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e6:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <SystemInit+0x68>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80026f0:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <SystemInit+0x6c>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <SystemInit+0x6c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <SystemInit+0x6c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002702:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <SystemInit+0x6c>)
 8002704:	2200      	movs	r2, #0
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <SystemInit+0x6c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <SystemInit+0x6c>)
 800270e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002712:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002716:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <SystemInit+0x6c>)
 800271a:	2200      	movs	r2, #0
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800271e:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <SystemInit+0x6c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a09      	ldr	r2, [pc, #36]	@ (8002748 <SystemInit+0x6c>)
 8002724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002728:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <SystemInit+0x6c>)
 800272c:	2200      	movs	r2, #0
 800272e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <SystemInit+0x68>)
 8002732:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002736:	609a      	str	r2, [r3, #8]
  #endif
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00
 8002748:	46020c00 	.word	0x46020c00

0800274c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800274c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002784 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002750:	f7ff ffc4 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002754:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002756:	e003      	b.n	8002760 <LoopCopyDataInit>

08002758 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800275a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800275c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800275e:	3104      	adds	r1, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002760:	480a      	ldr	r0, [pc, #40]	@ (800278c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002762:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002764:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002766:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002768:	d3f6      	bcc.n	8002758 <CopyDataInit>
	ldr	r2, =_sbss
 800276a:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <LoopForever+0x12>)
	b	LoopFillZerobss
 800276c:	e002      	b.n	8002774 <LoopFillZerobss>

0800276e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800276e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002770:	f842 3b04 	str.w	r3, [r2], #4

08002774 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <LoopForever+0x16>)
	cmp	r2, r3
 8002776:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002778:	d3f9      	bcc.n	800276e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800277a:	f00e fc5f 	bl	801103c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800277e:	f7fd ff25 	bl	80005cc <main>

08002782 <LoopForever>:

LoopForever:
    b LoopForever
 8002782:	e7fe      	b.n	8002782 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002784:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002788:	080111ac 	.word	0x080111ac
	ldr	r0, =_sdata
 800278c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002790:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002794:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002798:	20000d04 	.word	0x20000d04

0800279c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC4_IRQHandler>
	...

080027a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_Init+0x50>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a11      	ldr	r2, [pc, #68]	@ (80027f0 <HAL_Init+0x50>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f002 fba8 	bl	8004f06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027b6:	f007 ffcf 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <HAL_Init+0x54>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	490c      	ldr	r1, [pc, #48]	@ (80027f8 <HAL_Init+0x58>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	4a0b      	ldr	r2, [pc, #44]	@ (80027fc <HAL_Init+0x5c>)
 80027ce:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80027d0:	2004      	movs	r0, #4
 80027d2:	f002 fbed 	bl	8004fb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d6:	200f      	movs	r0, #15
 80027d8:	f000 f812 	bl	8002800 <HAL_InitTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e002      	b.n	80027ec <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027e6:	f7fe fe9b 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40022000 	.word	0x40022000
 80027f4:	46020c00 	.word	0x46020c00
 80027f8:	0801109c 	.word	0x0801109c
 80027fc:	20000000 	.word	0x20000000

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800280c:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <HAL_InitTick+0xdc>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e05c      	b.n	80028d2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002818:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <HAL_InitTick+0xe0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b04      	cmp	r3, #4
 8002822:	d10c      	bne.n	800283e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002824:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <HAL_InitTick+0xe4>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <HAL_InitTick+0xdc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e037      	b.n	80028ae <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800283e:	f002 fc0f 	bl	8005060 <HAL_SYSTICK_GetCLKSourceConfig>
 8002842:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d023      	beq.n	8002892 <HAL_InitTick+0x92>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d82d      	bhi.n	80028ac <HAL_InitTick+0xac>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_InitTick+0x5e>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d00d      	beq.n	8002878 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800285c:	e026      	b.n	80028ac <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800285e:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <HAL_InitTick+0xe4>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <HAL_InitTick+0xdc>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800286c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	60fb      	str	r3, [r7, #12]
        break;
 8002876:	e01a      	b.n	80028ae <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002878:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <HAL_InitTick+0xdc>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002882:	fbb3 f3f2 	udiv	r3, r3, r2
 8002886:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
        break;
 8002890:	e00d      	b.n	80028ae <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002892:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <HAL_InitTick+0xdc>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800289c:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	60fb      	str	r3, [r7, #12]
        break;
 80028aa:	e000      	b.n	80028ae <HAL_InitTick+0xae>
        break;
 80028ac:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f002 fb5c 	bl	8004f6c <HAL_SYSTICK_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e009      	b.n	80028d2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028be:	2200      	movs	r2, #0
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	f04f 30ff 	mov.w	r0, #4294967295
 80028c6:	f002 fb29 	bl	8004f1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80028ca:	4a07      	ldr	r2, [pc, #28]	@ (80028e8 <HAL_InitTick+0xe8>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000008 	.word	0x20000008
 80028e0:	e000e010 	.word	0xe000e010
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	@ (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000008 	.word	0x20000008
 8002910:	20000d00 	.word	0x20000d00

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000d00 	.word	0x20000d00

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff ffee 	bl	8002914 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_Delay+0x44>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002952:	bf00      	nop
 8002954:	f7ff ffde 	bl	8002914 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000008 	.word	0x20000008

08002974 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	f023 0201 	bic.w	r2, r3, #1
 8002984:	4904      	ldr	r1, [pc, #16]	@ (8002998 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4313      	orrs	r3, r2
 800298a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	46000400 	.word	0x46000400

0800299c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80029a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a8:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80029ac:	4904      	ldr	r1, [pc, #16]	@ (80029c0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	46000400 	.word	0x46000400

080029c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <LL_ADC_SetResolution+0x3c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d104      	bne.n	8002a4c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f023 020c 	bic.w	r2, r3, #12
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	46021000 	.word	0x46021000

08002a6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3360      	adds	r3, #96	@ 0x60
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3360      	adds	r3, #96	@ 0x60
 8002abc:	461a      	mov	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b087      	sub	sp, #28
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3360      	adds	r3, #96	@ 0x60
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	601a      	str	r2, [r3, #0]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3360      	adds	r3, #96	@ 0x60
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3360      	adds	r3, #96	@ 0x60
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	2a00      	cmp	r2, #0
 8002ba6:	d002      	beq.n	8002bae <LL_ADC_SetGainCompensation+0x32>
 8002ba8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002bac:	e000      	b.n	8002bb0 <LL_ADC_SetGainCompensation+0x34>
 8002bae:	2200      	movs	r2, #0
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2107      	movs	r1, #7
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	401a      	ands	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	@ 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce4 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d020      	beq.n	8002c7e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3330      	adds	r3, #48	@ 0x30
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	211f      	movs	r1, #31
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	401a      	ands	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	f003 011f 	and.w	r1, r3, #31
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002c7c:	e02b      	b.n	8002cd6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	210f      	movs	r1, #15
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	e010      	b.n	8002cc8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	613b      	str	r3, [r7, #16]
  return result;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e003      	b.n	8002cc8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	f001 011f 	and.w	r1, r1, #31
 8002cce:	408b      	lsls	r3, r1
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cd6:	bf00      	nop
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	46021000 	.word	0x46021000

08002ce8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2201      	movs	r2, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	e015      	b.n	8002d38 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	60fb      	str	r3, [r7, #12]
  return result;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e003      	b.n	8002d2e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2201      	movs	r2, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b08b      	sub	sp, #44	@ 0x2c
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d042      	beq.n	8002e5a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <LL_ADC_SetChannelSamplingTime+0x28>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 021f 	and.w	r2, r3, #31
 8002de6:	e011      	b.n	8002e0c <LL_ADC_SetChannelSamplingTime+0x4c>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	617b      	str	r3, [r7, #20]
  return result;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0e5b      	lsrs	r3, r3, #25
 8002e10:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002e14:	460b      	mov	r3, r1
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	1ad2      	subs	r2, r2, r3
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	0e5b      	lsrs	r3, r3, #25
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2107      	movs	r1, #7
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	401a      	ands	r2, r3
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	431a      	orrs	r2, r3
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002e58:	e00e      	b.n	8002e78 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	0219      	lsls	r1, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e72:	431a      	orrs	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	615a      	str	r2, [r3, #20]
}
 8002e78:	bf00      	nop
 8002e7a:	372c      	adds	r7, #44	@ 0x2c
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	46021000 	.word	0x46021000

08002e88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0318 	and.w	r3, r3, #24
 8002eaa:	4908      	ldr	r1, [pc, #32]	@ (8002ecc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002eac:	40d9      	lsrs	r1, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	000fffff 	.word	0x000fffff

08002ed0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 031f 	and.w	r3, r3, #31
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6093      	str	r3, [r2, #8]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f90:	d101      	bne.n	8002f96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fb8:	f043 0201 	orr.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <LL_ADC_IsEnabled+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_ADC_IsEnabled+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003002:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003006:	f043 0204 	orr.w	r2, r3, #4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d101      	bne.n	8003032 <LL_ADC_REG_IsConversionOngoing+0x18>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b08      	cmp	r3, #8
 8003052:	d101      	bne.n	8003058 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08b      	sub	sp, #44	@ 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e2ce      	b.n	8003626 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a95      	ldr	r2, [pc, #596]	@ (80032ec <HAL_ADC_Init+0x284>)
 8003096:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fe fa57 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff37 	bl	8002f2c <LL_ADC_IsDeepPowerDownEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff1d 	bl	8002f08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff52 	bl	8002f7c <LL_ADC_IsInternalRegulatorEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d115      	bne.n	800310a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff36 	bl	8002f54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e8:	4b81      	ldr	r3, [pc, #516]	@ (80032f0 <HAL_ADC_Init+0x288>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	4a81      	ldr	r2, [pc, #516]	@ (80032f4 <HAL_ADC_Init+0x28c>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030fc:	e002      	b.n	8003104 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3b01      	subs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f9      	bne.n	80030fe <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff34 	bl	8002f7c <LL_ADC_IsInternalRegulatorEnabled>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10e      	bne.n	8003138 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800311e:	f043 0210 	orr.w	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff6c 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 8003142:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 825f 	bne.w	8003610 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 825b 	bne.w	8003610 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800315e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff2c 	bl	8002fcc <LL_ADC_IsEnabled>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d14f      	bne.n	800321a <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_ADC_Init+0x284>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d037      	beq.n	80031f4 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5b      	ldr	r2, [pc, #364]	@ (80032f8 <HAL_ADC_Init+0x290>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_ADC_Init+0x130>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5a      	ldr	r2, [pc, #360]	@ (80032fc <HAL_ADC_Init+0x294>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10e      	bne.n	80031b6 <HAL_ADC_Init+0x14e>
 8003198:	4857      	ldr	r0, [pc, #348]	@ (80032f8 <HAL_ADC_Init+0x290>)
 800319a:	f7ff ff17 	bl	8002fcc <LL_ADC_IsEnabled>
 800319e:	4604      	mov	r4, r0
 80031a0:	4856      	ldr	r0, [pc, #344]	@ (80032fc <HAL_ADC_Init+0x294>)
 80031a2:	f7ff ff13 	bl	8002fcc <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4323      	orrs	r3, r4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e008      	b.n	80031c8 <HAL_ADC_Init+0x160>
 80031b6:	484d      	ldr	r0, [pc, #308]	@ (80032ec <HAL_ADC_Init+0x284>)
 80031b8:	f7ff ff08 	bl	8002fcc <LL_ADC_IsEnabled>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d026      	beq.n	800321a <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a49      	ldr	r2, [pc, #292]	@ (80032f8 <HAL_ADC_Init+0x290>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_ADC_Init+0x178>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a48      	ldr	r2, [pc, #288]	@ (80032fc <HAL_ADC_Init+0x294>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_Init+0x17c>
 80031e0:	4a47      	ldr	r2, [pc, #284]	@ (8003300 <HAL_ADC_Init+0x298>)
 80031e2:	e000      	b.n	80031e6 <HAL_ADC_Init+0x17e>
 80031e4:	4a47      	ldr	r2, [pc, #284]	@ (8003304 <HAL_ADC_Init+0x29c>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7ff fbe9 	bl	80029c4 <LL_ADC_SetCommonClock>
 80031f2:	e012      	b.n	800321a <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7ff fc14 	bl	8002a2c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003204:	4b3f      	ldr	r3, [pc, #252]	@ (8003304 <HAL_ADC_Init+0x29c>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003214:	493b      	ldr	r1, [pc, #236]	@ (8003304 <HAL_ADC_Init+0x29c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a33      	ldr	r2, [pc, #204]	@ (80032ec <HAL_ADC_Init+0x284>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d010      	beq.n	8003246 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800322a:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003230:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003236:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800323e:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003240:	4313      	orrs	r3, r2
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	e035      	b.n	80032b2 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7f1b      	ldrb	r3, [r3, #28]
 800324a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003252:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003254:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800325a:	2a00      	cmp	r2, #0
 800325c:	d002      	beq.n	8003264 <HAL_ADC_Init+0x1fc>
 800325e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003262:	e000      	b.n	8003266 <HAL_ADC_Init+0x1fe>
 8003264:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003266:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800326c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	da04      	bge.n	8003280 <HAL_ADC_Init+0x218>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800327e:	e001      	b.n	8003284 <HAL_ADC_Init+0x21c>
 8003280:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003284:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	491b      	ldr	r1, [pc, #108]	@ (80032f8 <HAL_ADC_Init+0x290>)
 800328c:	428b      	cmp	r3, r1
 800328e:	d004      	beq.n	800329a <HAL_ADC_Init+0x232>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4919      	ldr	r1, [pc, #100]	@ (80032fc <HAL_ADC_Init+0x294>)
 8003296:	428b      	cmp	r3, r1
 8003298:	d103      	bne.n	80032a2 <HAL_ADC_Init+0x23a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032a0:	e003      	b.n	80032aa <HAL_ADC_Init+0x242>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032a8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80032aa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d131      	bne.n	8003320 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <HAL_ADC_Init+0x284>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	3b01      	subs	r3, #1
 80032cc:	045b      	lsls	r3, r3, #17
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	623b      	str	r3, [r7, #32]
 80032d4:	e024      	b.n	8003320 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d113      	bne.n	8003308 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	e01a      	b.n	8003320 <HAL_ADC_Init+0x2b8>
 80032ea:	bf00      	nop
 80032ec:	46021000 	.word	0x46021000
 80032f0:	20000000 	.word	0x20000000
 80032f4:	053e2d63 	.word	0x053e2d63
 80032f8:	42028000 	.word	0x42028000
 80032fc:	42028100 	.word	0x42028100
 8003300:	42028300 	.word	0x42028300
 8003304:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a75      	ldr	r2, [pc, #468]	@ (80034fc <HAL_ADC_Init+0x494>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d018      	beq.n	800335c <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003336:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	4313      	orrs	r3, r2
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	4313      	orrs	r3, r2
 8003344:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	4b6c      	ldr	r3, [pc, #432]	@ (8003500 <HAL_ADC_Init+0x498>)
 800334e:	4013      	ands	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	6a39      	ldr	r1, [r7, #32]
 8003356:	430b      	orrs	r3, r1
 8003358:	60d3      	str	r3, [r2, #12]
 800335a:	e031      	b.n	80033c0 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003368:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	4313      	orrs	r3, r2
 8003372:	6a3a      	ldr	r2, [r7, #32]
 8003374:	4313      	orrs	r3, r2
 8003376:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b61      	ldr	r3, [pc, #388]	@ (8003504 <HAL_ADC_Init+0x49c>)
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	6a39      	ldr	r1, [r7, #32]
 8003388:	430b      	orrs	r3, r1
 800338a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a4d      	ldr	r2, [pc, #308]	@ (80034fc <HAL_ADC_Init+0x494>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	f000 80a4 	beq.w	8003514 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fe22 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 80033d6:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fe2f 	bl	8003040 <LL_ADC_INJ_IsConversionOngoing>
 80033e2:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d166      	bne.n	80034b8 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d163      	bne.n	80034b8 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7f1b      	ldrb	r3, [r3, #28]
 80033f4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4943      	ldr	r1, [pc, #268]	@ (8003508 <HAL_ADC_Init+0x4a0>)
 80033fc:	428b      	cmp	r3, r1
 80033fe:	d004      	beq.n	800340a <HAL_ADC_Init+0x3a2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4941      	ldr	r1, [pc, #260]	@ (800350c <HAL_ADC_Init+0x4a4>)
 8003406:	428b      	cmp	r3, r1
 8003408:	d102      	bne.n	8003410 <HAL_ADC_Init+0x3a8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340e:	e002      	b.n	8003416 <HAL_ADC_Init+0x3ae>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003416:	4313      	orrs	r3, r2
 8003418:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003424:	f023 0303 	bic.w	r3, r3, #3
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	6a39      	ldr	r1, [r7, #32]
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f7ff fb99 	bl	8002b7c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003450:	2b01      	cmp	r3, #1
 8003452:	d11e      	bne.n	8003492 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_ADC_Init+0x4a8>)
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003468:	0411      	lsls	r1, r2, #16
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003480:	0892      	lsrs	r2, r2, #2
 8003482:	430a      	orrs	r2, r1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	611a      	str	r2, [r3, #16]
 8003490:	e007      	b.n	80034a2 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10c      	bne.n	80034da <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	f023 010f 	bic.w	r1, r3, #15
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d8:	e007      	b.n	80034ea <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 020f 	bic.w	r2, r2, #15
 80034e8:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034fa:	e092      	b.n	8003622 <HAL_ADC_Init+0x5ba>
 80034fc:	46021000 	.word	0x46021000
 8003500:	fff0c013 	.word	0xfff0c013
 8003504:	ffde800d 	.word	0xffde800d
 8003508:	42028000 	.word	0x42028000
 800350c:	42028100 	.word	0x42028100
 8003510:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800351a:	2b01      	cmp	r3, #1
 800351c:	d111      	bne.n	8003542 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003526:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800352c:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003532:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	4313      	orrs	r3, r2
 8003538:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_ADC_Init+0x5c8>)
 800354a:	4013      	ands	r3, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	69f9      	ldr	r1, [r7, #28]
 8003552:	430b      	orrs	r3, r1
 8003554:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355e:	461a      	mov	r2, r3
 8003560:	2100      	movs	r1, #0
 8003562:	f7ff fb2e 	bl	8002bc2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	461a      	mov	r2, r3
 8003570:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003574:	f7ff fb25 	bl	8002bc2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d108      	bne.n	8003592 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f062 020f 	orn	r2, r2, #15
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003590:	e018      	b.n	80035c4 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800359a:	d113      	bne.n	80035c4 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	f003 031c 	and.w	r3, r3, #28
 80035ae:	f06f 020f 	mvn.w	r2, #15
 80035b2:	fa02 f103 	lsl.w	r1, r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003634 <HAL_ADC_Init+0x5cc>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d10b      	bne.n	80035ec <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035ea:	e01a      	b.n	8003622 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035f0:	f023 0312 	bic.w	r3, r3, #18
 80035f4:	f043 0210 	orr.w	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800360e:	e008      	b.n	8003622 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003626:	4618      	mov	r0, r3
 8003628:	372c      	adds	r7, #44	@ 0x2c
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	bf00      	nop
 8003630:	f7fffc02 	.word	0xf7fffc02
 8003634:	833ffff3 	.word	0x833ffff3

08003638 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b0a2      	sub	sp, #136	@ 0x88
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a98      	ldr	r2, [pc, #608]	@ (80038ac <HAL_ADC_Start_DMA+0x274>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_ADC_Start_DMA+0x20>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a97      	ldr	r2, [pc, #604]	@ (80038b0 <HAL_ADC_Start_DMA+0x278>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_ADC_Start_DMA+0x24>
 8003658:	4b96      	ldr	r3, [pc, #600]	@ (80038b4 <HAL_ADC_Start_DMA+0x27c>)
 800365a:	e000      	b.n	800365e <HAL_ADC_Start_DMA+0x26>
 800365c:	4b96      	ldr	r3, [pc, #600]	@ (80038b8 <HAL_ADC_Start_DMA+0x280>)
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fc36 	bl	8002ed0 <LL_ADC_GetMultimode>
 8003664:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fcd5 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8111 	bne.w	800389a <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_ADC_Start_DMA+0x4e>
 8003682:	2302      	movs	r3, #2
 8003684:	e10e      	b.n	80038a4 <HAL_ADC_Start_DMA+0x26c>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800368e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003694:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003696:	2b05      	cmp	r3, #5
 8003698:	d003      	beq.n	80036a2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800369a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800369c:	2b09      	cmp	r3, #9
 800369e:	f040 80f4 	bne.w	800388a <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f001 fa2c 	bl	8004b00 <ADC_Enable>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80036ae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 80e4 	bne.w	8003880 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a7a      	ldr	r2, [pc, #488]	@ (80038bc <HAL_ADC_Start_DMA+0x284>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d026      	beq.n	8003724 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a75      	ldr	r2, [pc, #468]	@ (80038b0 <HAL_ADC_Start_DMA+0x278>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d002      	beq.n	80036e6 <HAL_ADC_Start_DMA+0xae>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	e000      	b.n	80036e8 <HAL_ADC_Start_DMA+0xb0>
 80036e6:	4b71      	ldr	r3, [pc, #452]	@ (80038ac <HAL_ADC_Start_DMA+0x274>)
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d002      	beq.n	80036f6 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d006      	beq.n	800371c <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003712:	f023 0206 	bic.w	r2, r3, #6
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	67da      	str	r2, [r3, #124]	@ 0x7c
 800371a:	e006      	b.n	800372a <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003722:	e002      	b.n	800372a <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	4a64      	ldr	r2, [pc, #400]	@ (80038c0 <HAL_ADC_Start_DMA+0x288>)
 8003730:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	4a63      	ldr	r2, [pc, #396]	@ (80038c4 <HAL_ADC_Start_DMA+0x28c>)
 8003738:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	4a62      	ldr	r2, [pc, #392]	@ (80038c8 <HAL_ADC_Start_DMA+0x290>)
 8003740:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	221c      	movs	r2, #28
 8003748:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0210 	orr.w	r2, r2, #16
 8003760:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a55      	ldr	r2, [pc, #340]	@ (80038bc <HAL_ADC_Start_DMA+0x284>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d107      	bne.n	800377c <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04f      	beq.n	800382a <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003790:	2b00      	cmp	r3, #0
 8003792:	d046      	beq.n	8003822 <HAL_ADC_Start_DMA+0x1ea>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d040      	beq.n	8003822 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 fdf8 	bl	80063a4 <HAL_DMAEx_List_GetNodeConfig>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e072      	b.n	80038a4 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d104      	bne.n	80037ce <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037cc:	e00a      	b.n	80037e4 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d104      	bne.n	80037de <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037dc:	e002      	b.n	80037e4 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037f0:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	4618      	mov	r0, r3
 8003816:	f002 fd1b 	bl	8006250 <HAL_DMAEx_List_Start_IT>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003820:	e028      	b.n	8003874 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003828:	e024      	b.n	8003874 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d104      	bne.n	800383e <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800383c:	e00c      	b.n	8003858 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d104      	bne.n	8003852 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003850:	e002      	b.n	8003858 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3340      	adds	r3, #64	@ 0x40
 8003862:	4619      	mov	r1, r3
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800386a:	f001 fd5f 	bl	800532c <HAL_DMA_Start_IT>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fbba 	bl	8002ff2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800387e:	e00f      	b.n	80038a0 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003888:	e00a      	b.n	80038a0 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003898:	e002      	b.n	80038a0 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800389a:	2302      	movs	r3, #2
 800389c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80038a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3788      	adds	r7, #136	@ 0x88
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	42028000 	.word	0x42028000
 80038b0:	42028100 	.word	0x42028100
 80038b4:	42028300 	.word	0x42028300
 80038b8:	46021300 	.word	0x46021300
 80038bc:	46021000 	.word	0x46021000
 80038c0:	08004c35 	.word	0x08004c35
 80038c4:	08004d0d 	.word	0x08004d0d
 80038c8:	08004d29 	.word	0x08004d29

080038cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a77      	ldr	r2, [pc, #476]	@ (8003acc <HAL_ADC_IRQHandler+0x200>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_ADC_IRQHandler+0x30>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a76      	ldr	r2, [pc, #472]	@ (8003ad0 <HAL_ADC_IRQHandler+0x204>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_IRQHandler+0x34>
 80038fc:	4b75      	ldr	r3, [pc, #468]	@ (8003ad4 <HAL_ADC_IRQHandler+0x208>)
 80038fe:	e000      	b.n	8003902 <HAL_ADC_IRQHandler+0x36>
 8003900:	4b75      	ldr	r3, [pc, #468]	@ (8003ad8 <HAL_ADC_IRQHandler+0x20c>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fae4 	bl	8002ed0 <LL_ADC_GetMultimode>
 8003908:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d017      	beq.n	8003944 <HAL_ADC_IRQHandler+0x78>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800392e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f001 fa2e 	bl	8004d98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2202      	movs	r2, #2
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <HAL_ADC_IRQHandler+0x8c>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80d1 	beq.w	8003b06 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80cb 	beq.w	8003b06 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003980:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a53      	ldr	r2, [pc, #332]	@ (8003adc <HAL_ADC_IRQHandler+0x210>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d06c      	beq.n	8003a6c <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f932 	bl	8002c00 <LL_ADC_REG_IsTriggerSourceSWStart>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80aa 	beq.w	8003af8 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a49      	ldr	r2, [pc, #292]	@ (8003ad0 <HAL_ADC_IRQHandler+0x204>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d002      	beq.n	80039b4 <HAL_ADC_IRQHandler+0xe8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_IRQHandler+0xea>
 80039b4:	4b45      	ldr	r3, [pc, #276]	@ (8003acc <HAL_ADC_IRQHandler+0x200>)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d008      	beq.n	80039d0 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d002      	beq.n	80039d0 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d104      	bne.n	80039da <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	623b      	str	r3, [r7, #32]
 80039d8:	e00c      	b.n	80039f4 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad0 <HAL_ADC_IRQHandler+0x204>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_IRQHandler+0x11e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	e000      	b.n	80039ec <HAL_ADC_IRQHandler+0x120>
 80039ea:	4b38      	ldr	r3, [pc, #224]	@ (8003acc <HAL_ADC_IRQHandler+0x200>)
 80039ec:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d17c      	bne.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d175      	bne.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fb02 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11a      	bne.n	8003a52 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 020c 	bic.w	r2, r2, #12
 8003a2a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d159      	bne.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003a50:	e052      	b.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a6a:	e045      	b.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff f8c5 	bl	8002c00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d03d      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d138      	bne.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d131      	bne.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fabe 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11d      	bne.n	8003ae0 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020c 	bic.w	r2, r2, #12
 8003ab2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	679a      	str	r2, [r3, #120]	@ 0x78
 8003ac8:	e016      	b.n	8003af8 <HAL_ADC_IRQHandler+0x22c>
 8003aca:	bf00      	nop
 8003acc:	42028000 	.word	0x42028000
 8003ad0:	42028100 	.word	0x42028100
 8003ad4:	42028300 	.word	0x42028300
 8003ad8:	46021300 	.word	0x46021300
 8003adc:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f99d 	bl	8003e38 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	220c      	movs	r2, #12
 8003b04:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a8c      	ldr	r2, [pc, #560]	@ (8003d3c <HAL_ADC_IRQHandler+0x470>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f000 8095 	beq.w	8003c3c <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_ADC_IRQHandler+0x25a>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8085 	beq.w	8003c3c <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d07f      	beq.n	8003c3c <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f91e 	bl	8002d9a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003b5e:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f84b 	bl	8002c00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b6a:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a73      	ldr	r2, [pc, #460]	@ (8003d40 <HAL_ADC_IRQHandler+0x474>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d002      	beq.n	8003b7c <HAL_ADC_IRQHandler+0x2b0>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	e000      	b.n	8003b7e <HAL_ADC_IRQHandler+0x2b2>
 8003b7c:	4b71      	ldr	r3, [pc, #452]	@ (8003d44 <HAL_ADC_IRQHandler+0x478>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d008      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d002      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b07      	cmp	r3, #7
 8003b96:	d104      	bne.n	8003ba2 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	623b      	str	r3, [r7, #32]
 8003ba0:	e00c      	b.n	8003bbc <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a66      	ldr	r2, [pc, #408]	@ (8003d40 <HAL_ADC_IRQHandler+0x474>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d002      	beq.n	8003bb2 <HAL_ADC_IRQHandler+0x2e6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADC_IRQHandler+0x2e8>
 8003bb2:	4b64      	ldr	r3, [pc, #400]	@ (8003d44 <HAL_ADC_IRQHandler+0x478>)
 8003bb4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d035      	beq.n	8003c2e <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_ADC_IRQHandler+0x310>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02d      	beq.n	8003c2e <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d128      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	d121      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fa26 	bl	8003040 <LL_ADC_INJ_IsConversionOngoing>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d119      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c08:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c26:	f043 0201 	orr.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f001 f894 	bl	8004d5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2260      	movs	r2, #96	@ 0x60
 8003c3a:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d011      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x39e>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00c      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8ff 	bl	8003e60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2280      	movs	r2, #128	@ 0x80
 8003c68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d012      	beq.n	8003c9a <HAL_ADC_IRQHandler+0x3ce>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f001 f870 	bl	8004d70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_ADC_IRQHandler+0x3fe>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cb2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 f862 	bl	8004d84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05d      	beq.n	8003d90 <HAL_ADC_IRQHandler+0x4c4>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d058      	beq.n	8003d90 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cea:	e03b      	b.n	8003d64 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <HAL_ADC_IRQHandler+0x470>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d02c      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a10      	ldr	r2, [pc, #64]	@ (8003d44 <HAL_ADC_IRQHandler+0x478>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_ADC_IRQHandler+0x444>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <HAL_ADC_IRQHandler+0x474>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d101      	bne.n	8003d14 <HAL_ADC_IRQHandler+0x448>
 8003d10:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <HAL_ADC_IRQHandler+0x47c>)
 8003d12:	e000      	b.n	8003d16 <HAL_ADC_IRQHandler+0x44a>
 8003d14:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_ADC_IRQHandler+0x480>)
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff f8e8 	bl	8002eec <LL_ADC_GetMultiDMATransfer>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d020      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003d22:	2301      	movs	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d26:	e01d      	b.n	8003d64 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003d36:	2301      	movs	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3a:	e013      	b.n	8003d64 <HAL_ADC_IRQHandler+0x498>
 8003d3c:	46021000 	.word	0x46021000
 8003d40:	42028100 	.word	0x42028100
 8003d44:	42028000 	.word	0x42028000
 8003d48:	42028300 	.word	0x42028300
 8003d4c:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff f812 	bl	8002d7e <LL_ADC_REG_GetDMATransfer>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003d60:	2301      	movs	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10e      	bne.n	8003d88 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d6e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f876 	bl	8003e74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01b      	beq.n	8003dd2 <HAL_ADC_IRQHandler+0x506>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d016      	beq.n	8003dd2 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f877 	bl	8003eb0 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <HAL_ADC_IRQHandler+0x568>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d126      	bne.n	8003e2a <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_ADC_IRQHandler+0x534>
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f849 	bl	8003e88 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00f      	beq.n	8003e2a <HAL_ADC_IRQHandler+0x55e>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f841 	bl	8003e9c <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e28:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	3728      	adds	r7, #40	@ 0x28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	46021000 	.word	0x46021000

08003e38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b0b7      	sub	sp, #220	@ 0xdc
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4aa8      	ldr	r2, [pc, #672]	@ (8004180 <HAL_ADC_ConfigChannel+0x2bc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d103      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x36>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f000 bdfe 	b.w	8004af6 <HAL_ADC_ConfigChannel+0xc32>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff f887 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 85c1 	bne.w	8004a96 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a99      	ldr	r2, [pc, #612]	@ (8004180 <HAL_ADC_ConfigChannel+0x2bc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	f000 8409 	beq.w	8004732 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d108      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x7a>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2201      	movs	r2, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	e01d      	b.n	8003f7a <HAL_ADC_ConfigChannel+0xb6>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e004      	b.n	8003f70 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003f66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2201      	movs	r2, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	69d1      	ldr	r1, [r2, #28]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	f7fe fe47 	bl	8002c28 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f83b 	bl	800301a <LL_ADC_REG_IsConversionOngoing>
 8003fa4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff f847 	bl	8003040 <LL_ADC_INJ_IsConversionOngoing>
 8003fb2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 81df 	bne.w	800437e <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 81da 	bne.w	800437e <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7fe fef2 	bl	8002dc0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d046      	beq.n	800408c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6919      	ldr	r1, [r3, #16]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800400e:	f7fe fd2d 	bl	8002a6c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6919      	ldr	r1, [r3, #16]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	461a      	mov	r2, r3
 8004020:	f7fe fd5b 	bl	8002ada <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	7e9b      	ldrb	r3, [r3, #26]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d11e      	bne.n	800406a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x17e>
 800403c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004040:	e000      	b.n	8004044 <HAL_ADC_ConfigChannel+0x180>
 8004042:	2300      	movs	r3, #0
 8004044:	461a      	mov	r2, r3
 8004046:	f7fe fd7e 	bl	8002b46 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004056:	2b01      	cmp	r3, #1
 8004058:	d102      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x19c>
 800405a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800405e:	e000      	b.n	8004062 <HAL_ADC_ConfigChannel+0x19e>
 8004060:	2300      	movs	r3, #0
 8004062:	461a      	mov	r2, r3
 8004064:	f7fe fd54 	bl	8002b10 <LL_ADC_SetOffsetSignedSaturation>
 8004068:	e189      	b.n	800437e <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2200      	movs	r2, #0
 8004074:	4619      	mov	r1, r3
 8004076:	f7fe fd66 	bl	8002b46 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2200      	movs	r2, #0
 8004084:	4619      	mov	r1, r3
 8004086:	f7fe fd43 	bl	8002b10 <LL_ADC_SetOffsetSignedSaturation>
 800408a:	e178      	b.n	800437e <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fd0b 	bl	8002aae <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x1f4>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fd00 	bl	8002aae <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	e01e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x232>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fcf5 	bl	8002aae <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80040d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80040de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e004      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80040ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_ADC_ConfigChannel+0x24a>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	e018      	b.n	8004140 <HAL_ADC_ConfigChannel+0x27c>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004122:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800412a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004132:	2320      	movs	r3, #32
 8004134:	e004      	b.n	8004140 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004140:	429a      	cmp	r2, r3
 8004142:	d107      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	2300      	movs	r3, #0
 800414e:	2100      	movs	r1, #0
 8004150:	f7fe fc8c 	bl	8002a6c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fca7 	bl	8002aae <LL_ADC_GetOffsetChannel>
 8004160:	4603      	mov	r3, r0
 8004162:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10c      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x2c0>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2101      	movs	r1, #1
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe fc9c 	bl	8002aae <LL_ADC_GetOffsetChannel>
 8004176:	4603      	mov	r3, r0
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	f003 021f 	and.w	r2, r3, #31
 800417e:	e020      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x2fe>
 8004180:	46021000 	.word	0x46021000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fc8f 	bl	8002aae <LL_ADC_GetOffsetChannel>
 8004190:	4603      	mov	r3, r0
 8004192:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80041a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80041aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80041b2:	2320      	movs	r3, #32
 80041b4:	e004      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80041b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_ADC_ConfigChannel+0x316>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	0e9b      	lsrs	r3, r3, #26
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	e018      	b.n	800420c <HAL_ADC_ConfigChannel+0x348>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80041ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80041f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80041fe:	2320      	movs	r3, #32
 8004200:	e004      	b.n	800420c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800420c:	429a      	cmp	r2, r3
 800420e:	d107      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	2300      	movs	r3, #0
 800421a:	2101      	movs	r1, #1
 800421c:	f7fe fc26 	bl	8002a6c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fc41 	bl	8002aae <LL_ADC_GetOffsetChannel>
 800422c:	4603      	mov	r3, r0
 800422e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <HAL_ADC_ConfigChannel+0x388>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fc36 	bl	8002aae <LL_ADC_GetOffsetChannel>
 8004242:	4603      	mov	r3, r0
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	f003 021f 	and.w	r2, r3, #31
 800424a:	e01a      	b.n	8004282 <HAL_ADC_ConfigChannel+0x3be>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fc2b 	bl	8002aae <LL_ADC_GetOffsetChannel>
 8004258:	4603      	mov	r3, r0
 800425a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800426a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004272:	2320      	movs	r3, #32
 8004274:	e004      	b.n	8004280 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004276:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_ADC_ConfigChannel+0x3d6>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0e9b      	lsrs	r3, r3, #26
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	e011      	b.n	80042be <HAL_ADC_ConfigChannel+0x3fa>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80042a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80042ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80042b2:	2320      	movs	r3, #32
 80042b4:	e003      	b.n	80042be <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80042b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b8:	fab3 f383 	clz	r3, r3
 80042bc:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042be:	429a      	cmp	r2, r3
 80042c0:	d107      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	2300      	movs	r3, #0
 80042cc:	2102      	movs	r1, #2
 80042ce:	f7fe fbcd 	bl	8002a6c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2103      	movs	r1, #3
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe fbe8 	bl	8002aae <LL_ADC_GetOffsetChannel>
 80042de:	4603      	mov	r3, r0
 80042e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x43a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2103      	movs	r1, #3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fbdd 	bl	8002aae <LL_ADC_GetOffsetChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	0e9b      	lsrs	r3, r3, #26
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	e017      	b.n	800432e <HAL_ADC_ConfigChannel+0x46a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2103      	movs	r1, #3
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fbd2 	bl	8002aae <LL_ADC_GetOffsetChannel>
 800430a:	4603      	mov	r3, r0
 800430c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004318:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800431a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004320:	2320      	movs	r3, #32
 8004322:	e003      	b.n	800432c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x482>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0e9b      	lsrs	r3, r3, #26
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	e011      	b.n	800436a <HAL_ADC_ConfigChannel+0x4a6>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004356:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004358:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e003      	b.n	800436a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800436a:	429a      	cmp	r2, r3
 800436c:	d107      	bne.n	800437e <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2300      	movs	r3, #0
 8004378:	2103      	movs	r1, #3
 800437a:	f7fe fb77 	bl	8002a6c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fe22 	bl	8002fcc <LL_ADC_IsEnabled>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 83ad 	bne.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f7fe fd73 	bl	8002e88 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043aa:	f040 80d6 	bne.w	800455a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x50e>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	0e9b      	lsrs	r3, r3, #26
 80043c0:	3301      	adds	r3, #1
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	bf94      	ite	ls
 80043ca:	2301      	movls	r3, #1
 80043cc:	2300      	movhi	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	e019      	b.n	8004406 <HAL_ADC_ConfigChannel+0x542>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80043e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80043e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e003      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80043ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2b09      	cmp	r3, #9
 80043fe:	bf94      	ite	ls
 8004400:	2301      	movls	r3, #1
 8004402:	2300      	movhi	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d04d      	beq.n	80044a6 <HAL_ADC_ConfigChannel+0x5e2>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x562>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	3301      	adds	r3, #1
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004424:	e015      	b.n	8004452 <HAL_ADC_ConfigChannel+0x58e>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004436:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800443e:	2320      	movs	r3, #32
 8004440:	e003      	b.n	800444a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	3301      	adds	r3, #1
 800444c:	069b      	lsls	r3, r3, #26
 800444e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x5ae>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0e9b      	lsrs	r3, r3, #26
 8004464:	3301      	adds	r3, #1
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	e017      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x5de>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e003      	b.n	8004496 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	fab3 f383 	clz	r3, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3301      	adds	r3, #1
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	e04e      	b.n	8004544 <HAL_ADC_ConfigChannel+0x680>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x5fe>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	0e9b      	lsrs	r3, r3, #26
 80044b8:	3301      	adds	r3, #1
 80044ba:	069b      	lsls	r3, r3, #26
 80044bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044c0:	e015      	b.n	80044ee <HAL_ADC_ConfigChannel+0x62a>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	fa93 f3a3 	rbit	r3, r3
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80044da:	2320      	movs	r3, #32
 80044dc:	e003      	b.n	80044e6 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80044de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e0:	fab3 f383 	clz	r3, r3
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	069b      	lsls	r3, r3, #26
 80044ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_ADC_ConfigChannel+0x64a>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0e9b      	lsrs	r3, r3, #26
 8004500:	3301      	adds	r3, #1
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	e017      	b.n	800453e <HAL_ADC_ConfigChannel+0x67a>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	61bb      	str	r3, [r7, #24]
  return result;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004526:	2320      	movs	r3, #32
 8004528:	e003      	b.n	8004532 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	3301      	adds	r3, #1
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f303 	lsl.w	r3, r1, r3
 800453e:	4313      	orrs	r3, r2
 8004540:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	461a      	mov	r2, r3
 8004552:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004556:	f7fe fc33 	bl	8002dc0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f280 82c3 	bge.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a92      	ldr	r2, [pc, #584]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_ADC_ConfigChannel+0x6b4>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a91      	ldr	r2, [pc, #580]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_ADC_ConfigChannel+0x6b8>
 8004578:	4b90      	ldr	r3, [pc, #576]	@ (80047bc <HAL_ADC_ConfigChannel+0x8f8>)
 800457a:	e000      	b.n	800457e <HAL_ADC_ConfigChannel+0x6ba>
 800457c:	4b90      	ldr	r3, [pc, #576]	@ (80047c0 <HAL_ADC_ConfigChannel+0x8fc>)
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fa46 	bl	8002a10 <LL_ADC_GetCommonPathInternalCh>
 8004584:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a89      	ldr	r2, [pc, #548]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_ADC_ConfigChannel+0x6d8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a88      	ldr	r2, [pc, #544]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10e      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x6f6>
 800459c:	4885      	ldr	r0, [pc, #532]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800459e:	f7fe fd15 	bl	8002fcc <LL_ADC_IsEnabled>
 80045a2:	4604      	mov	r4, r0
 80045a4:	4884      	ldr	r0, [pc, #528]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 80045a6:	f7fe fd11 	bl	8002fcc <LL_ADC_IsEnabled>
 80045aa:	4603      	mov	r3, r0
 80045ac:	4323      	orrs	r3, r4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e008      	b.n	80045cc <HAL_ADC_ConfigChannel+0x708>
 80045ba:	4882      	ldr	r0, [pc, #520]	@ (80047c4 <HAL_ADC_ConfigChannel+0x900>)
 80045bc:	f7fe fd06 	bl	8002fcc <LL_ADC_IsEnabled>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a6 	beq.w	800471e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7c      	ldr	r2, [pc, #496]	@ (80047c8 <HAL_ADC_ConfigChannel+0x904>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d13c      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d136      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a71      	ldr	r2, [pc, #452]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00a      	beq.n	8004608 <HAL_ADC_ConfigChannel+0x744>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a70      	ldr	r2, [pc, #448]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d005      	beq.n	8004608 <HAL_ADC_ConfigChannel+0x744>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a70      	ldr	r2, [pc, #448]	@ (80047c4 <HAL_ADC_ConfigChannel+0x900>)
 8004602:	4293      	cmp	r3, r2
 8004604:	f040 826e 	bne.w	8004ae4 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a69      	ldr	r2, [pc, #420]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_ADC_ConfigChannel+0x758>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a68      	ldr	r2, [pc, #416]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x75c>
 800461c:	4a67      	ldr	r2, [pc, #412]	@ (80047bc <HAL_ADC_ConfigChannel+0x8f8>)
 800461e:	e000      	b.n	8004622 <HAL_ADC_ConfigChannel+0x75e>
 8004620:	4a67      	ldr	r2, [pc, #412]	@ (80047c0 <HAL_ADC_ConfigChannel+0x8fc>)
 8004622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004626:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f7fe f9dc 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004632:	4b66      	ldr	r3, [pc, #408]	@ (80047cc <HAL_ADC_ConfigChannel+0x908>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a65      	ldr	r2, [pc, #404]	@ (80047d0 <HAL_ADC_ConfigChannel+0x90c>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	3301      	adds	r3, #1
 8004642:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004644:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004646:	e002      	b.n	800464e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f9      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004654:	e246      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5e      	ldr	r2, [pc, #376]	@ (80047d4 <HAL_ADC_ConfigChannel+0x910>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d12b      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004668:	2b00      	cmp	r3, #0
 800466a:	d125      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a50      	ldr	r2, [pc, #320]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00a      	beq.n	800468c <HAL_ADC_ConfigChannel+0x7c8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4f      	ldr	r2, [pc, #316]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d005      	beq.n	800468c <HAL_ADC_ConfigChannel+0x7c8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a4f      	ldr	r2, [pc, #316]	@ (80047c4 <HAL_ADC_ConfigChannel+0x900>)
 8004686:	4293      	cmp	r3, r2
 8004688:	f040 822e 	bne.w	8004ae8 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a48      	ldr	r2, [pc, #288]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0x7dc>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a47      	ldr	r2, [pc, #284]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x7e0>
 80046a0:	4a46      	ldr	r2, [pc, #280]	@ (80047bc <HAL_ADC_ConfigChannel+0x8f8>)
 80046a2:	e000      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x7e2>
 80046a4:	4a46      	ldr	r2, [pc, #280]	@ (80047c0 <HAL_ADC_ConfigChannel+0x8fc>)
 80046a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe f99a 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046b6:	e217      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a46      	ldr	r2, [pc, #280]	@ (80047d8 <HAL_ADC_ConfigChannel+0x914>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	f040 8213 	bne.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 820c 	bne.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a37      	ldr	r2, [pc, #220]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00a      	beq.n	80046f2 <HAL_ADC_ConfigChannel+0x82e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a35      	ldr	r2, [pc, #212]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d005      	beq.n	80046f2 <HAL_ADC_ConfigChannel+0x82e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a36      	ldr	r2, [pc, #216]	@ (80047c4 <HAL_ADC_ConfigChannel+0x900>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	f040 81fc 	bne.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2f      	ldr	r2, [pc, #188]	@ (80047b4 <HAL_ADC_ConfigChannel+0x8f0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_ADC_ConfigChannel+0x842>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2d      	ldr	r2, [pc, #180]	@ (80047b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_ADC_ConfigChannel+0x846>
 8004706:	4a2d      	ldr	r2, [pc, #180]	@ (80047bc <HAL_ADC_ConfigChannel+0x8f8>)
 8004708:	e000      	b.n	800470c <HAL_ADC_ConfigChannel+0x848>
 800470a:	4a2d      	ldr	r2, [pc, #180]	@ (80047c0 <HAL_ADC_ConfigChannel+0x8fc>)
 800470c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004710:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f7fe f967 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 800471c:	e1e5      	b.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004722:	f043 0220 	orr.w	r2, r3, #32
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004730:	e1db      	b.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	f000 811b 	beq.w	800497a <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800474c:	d004      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004752:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <HAL_ADC_ConfigChannel+0x918>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d107      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe fac1 	bl	8002ce8 <LL_ADC_REG_SetSequencerChAdd>
 8004766:	e059      	b.n	800481c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	210f      	movs	r1, #15
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	401a      	ands	r2, r3
 8004780:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004784:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x8d4>
 800478c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	e027      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x924>
 8004798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800479c:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	60fb      	str	r3, [r7, #12]
  return result;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d117      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80047b0:	2320      	movs	r3, #32
 80047b2:	e019      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x924>
 80047b4:	42028000 	.word	0x42028000
 80047b8:	42028100 	.word	0x42028100
 80047bc:	42028300 	.word	0x42028300
 80047c0:	46021300 	.word	0x46021300
 80047c4:	46021000 	.word	0x46021000
 80047c8:	ce080000 	.word	0xce080000
 80047cc:	20000000 	.word	0x20000000
 80047d0:	053e2d63 	.word	0x053e2d63
 80047d4:	ca040000 	.word	0xca040000
 80047d8:	80000001 	.word	0x80000001
 80047dc:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	6849      	ldr	r1, [r1, #4]
 80047ec:	f001 011f 	and.w	r1, r1, #31
 80047f0:	408b      	lsls	r3, r1
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	429a      	cmp	r2, r3
 8004808:	d808      	bhi.n	800481c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004816:	4619      	mov	r1, r3
 8004818:	f7fe fa06 	bl	8002c28 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	461a      	mov	r2, r3
 8004826:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800482a:	f7fe fac9 	bl	8002dc0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f280 8159 	bge.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a9b      	ldr	r2, [pc, #620]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_ADC_ConfigChannel+0x988>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a9a      	ldr	r2, [pc, #616]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x98c>
 800484c:	4b99      	ldr	r3, [pc, #612]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 800484e:	e000      	b.n	8004852 <HAL_ADC_ConfigChannel+0x98e>
 8004850:	4b99      	ldr	r3, [pc, #612]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe f8dc 	bl	8002a10 <LL_ADC_GetCommonPathInternalCh>
 8004858:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a96      	ldr	r2, [pc, #600]	@ (8004abc <HAL_ADC_ConfigChannel+0xbf8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d12b      	bne.n	80048be <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d125      	bne.n	80048be <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a8d      	ldr	r2, [pc, #564]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_ADC_ConfigChannel+0x9c2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a8b      	ldr	r2, [pc, #556]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_ADC_ConfigChannel+0x9c6>
 8004886:	4a8b      	ldr	r2, [pc, #556]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004888:	e000      	b.n	800488c <HAL_ADC_ConfigChannel+0x9c8>
 800488a:	4a8b      	ldr	r2, [pc, #556]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 800488c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004890:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f7fe f8a7 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800489c:	4b88      	ldr	r3, [pc, #544]	@ (8004ac0 <HAL_ADC_ConfigChannel+0xbfc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	4a88      	ldr	r2, [pc, #544]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xc00>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	099b      	lsrs	r3, r3, #6
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80048ae:	e002      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f9      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80048bc:	e045      	b.n	800494a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a81      	ldr	r2, [pc, #516]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xc04>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d11b      	bne.n	8004900 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d115      	bne.n	8004900 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a74      	ldr	r2, [pc, #464]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_ADC_ConfigChannel+0xa24>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a73      	ldr	r2, [pc, #460]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0xa28>
 80048e8:	4a72      	ldr	r2, [pc, #456]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 80048ea:	e000      	b.n	80048ee <HAL_ADC_ConfigChannel+0xa2a>
 80048ec:	4a72      	ldr	r2, [pc, #456]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 80048ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f7fe f876 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 80048fe:	e024      	b.n	800494a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a71      	ldr	r2, [pc, #452]	@ (8004acc <HAL_ADC_ConfigChannel+0xc08>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d11f      	bne.n	800494a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800490a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800490e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d115      	bne.n	8004942 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a64      	ldr	r2, [pc, #400]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_ADC_ConfigChannel+0xa66>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a62      	ldr	r2, [pc, #392]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <HAL_ADC_ConfigChannel+0xa6a>
 800492a:	4a62      	ldr	r2, [pc, #392]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 800492c:	e000      	b.n	8004930 <HAL_ADC_ConfigChannel+0xa6c>
 800492e:	4a62      	ldr	r2, [pc, #392]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004934:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fe f855 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 8004940:	e003      	b.n	800494a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a62      	ldr	r2, [pc, #392]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xc0c>)
 8004948:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a61      	ldr	r2, [pc, #388]	@ (8004ad4 <HAL_ADC_ConfigChannel+0xc10>)
 8004950:	4293      	cmp	r3, r2
 8004952:	f040 80ca 	bne.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800495a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 80c3 	bne.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004978:	e0b7      	b.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004982:	d004      	beq.n	800498e <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004988:	4a53      	ldr	r2, [pc, #332]	@ (8004ad8 <HAL_ADC_ConfigChannel+0xc14>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d106      	bne.n	800499c <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe f9d9 	bl	8002d4e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f280 80a2 	bge.w	8004aea <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a40      	ldr	r2, [pc, #256]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_ADC_ConfigChannel+0xaf6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0xafa>
 80049ba:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 80049bc:	e000      	b.n	80049c0 <HAL_ADC_ConfigChannel+0xafc>
 80049be:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe f825 	bl	8002a10 <LL_ADC_GetCommonPathInternalCh>
 80049c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a43      	ldr	r2, [pc, #268]	@ (8004adc <HAL_ADC_ConfigChannel+0xc18>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d115      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a34      	ldr	r2, [pc, #208]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_ADC_ConfigChannel+0xb24>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a33      	ldr	r2, [pc, #204]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_ADC_ConfigChannel+0xb28>
 80049e8:	4a32      	ldr	r2, [pc, #200]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 80049ea:	e000      	b.n	80049ee <HAL_ADC_ConfigChannel+0xb2a>
 80049ec:	4a32      	ldr	r2, [pc, #200]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 80049ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f7fd fff6 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 80049fe:	e034      	b.n	8004a6a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a36      	ldr	r2, [pc, #216]	@ (8004ae0 <HAL_ADC_ConfigChannel+0xc1c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d115      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a27      	ldr	r2, [pc, #156]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0xb5a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a25      	ldr	r2, [pc, #148]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0xb5e>
 8004a1e:	4a25      	ldr	r2, [pc, #148]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004a20:	e000      	b.n	8004a24 <HAL_ADC_ConfigChannel+0xb60>
 8004a22:	4a25      	ldr	r2, [pc, #148]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f7fd ffdb 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 8004a34:	e019      	b.n	8004a6a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a24      	ldr	r2, [pc, #144]	@ (8004acc <HAL_ADC_ConfigChannel+0xc08>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d114      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a19      	ldr	r2, [pc, #100]	@ (8004aac <HAL_ADC_ConfigChannel+0xbe8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0xb90>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a18      	ldr	r2, [pc, #96]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xbec>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0xb94>
 8004a54:	4a17      	ldr	r2, [pc, #92]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004a56:	e000      	b.n	8004a5a <HAL_ADC_ConfigChannel+0xb96>
 8004a58:	4a17      	ldr	r2, [pc, #92]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a5e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fd ffc0 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <HAL_ADC_ConfigChannel+0xc10>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d13a      	bne.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d134      	bne.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004a94:	e029      	b.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004aa8:	e01f      	b.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
 8004aaa:	bf00      	nop
 8004aac:	42028000 	.word	0x42028000
 8004ab0:	42028100 	.word	0x42028100
 8004ab4:	42028300 	.word	0x42028300
 8004ab8:	46021300 	.word	0x46021300
 8004abc:	b6002000 	.word	0xb6002000
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	053e2d63 	.word	0x053e2d63
 8004ac8:	ba004000 	.word	0xba004000
 8004acc:	80000001 	.word	0x80000001
 8004ad0:	b2001000 	.word	0xb2001000
 8004ad4:	d7200000 	.word	0xd7200000
 8004ad8:	80000010 	.word	0x80000010
 8004adc:	ce080000 	.word	0xce080000
 8004ae0:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae8:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004af2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	37dc      	adds	r7, #220	@ 0xdc
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}
 8004afe:	bf00      	nop

08004b00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fa5d 	bl	8002fcc <LL_ADC_IsEnabled>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d17b      	bne.n	8004c10 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c1c <ADC_Enable+0x11c>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b2a:	f043 0210 	orr.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e067      	b.n	8004c12 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fa28 	bl	8002fa4 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <ADC_Enable+0x66>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2f      	ldr	r2, [pc, #188]	@ (8004c20 <ADC_Enable+0x120>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d054      	beq.n	8004c10 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004b66:	f7fd fed5 	bl	8002914 <HAL_GetTick>
 8004b6a:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a2c      	ldr	r2, [pc, #176]	@ (8004c24 <ADC_Enable+0x124>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <ADC_Enable+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c28 <ADC_Enable+0x128>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d101      	bne.n	8004b84 <ADC_Enable+0x84>
 8004b80:	4b2a      	ldr	r3, [pc, #168]	@ (8004c2c <ADC_Enable+0x12c>)
 8004b82:	e000      	b.n	8004b86 <ADC_Enable+0x86>
 8004b84:	4b2a      	ldr	r3, [pc, #168]	@ (8004c30 <ADC_Enable+0x130>)
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe f9a2 	bl	8002ed0 <LL_ADC_GetMultimode>
 8004b8c:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a25      	ldr	r2, [pc, #148]	@ (8004c28 <ADC_Enable+0x128>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d002      	beq.n	8004b9e <ADC_Enable+0x9e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	e000      	b.n	8004ba0 <ADC_Enable+0xa0>
 8004b9e:	4b21      	ldr	r3, [pc, #132]	@ (8004c24 <ADC_Enable+0x124>)
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d02c      	beq.n	8004c02 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d130      	bne.n	8004c10 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bae:	e028      	b.n	8004c02 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fa09 	bl	8002fcc <LL_ADC_IsEnabled>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe f9ed 	bl	8002fa4 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bca:	f7fd fea3 	bl	8002914 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d914      	bls.n	8004c02 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d00d      	beq.n	8004c02 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bea:	f043 0210 	orr.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e007      	b.n	8004c12 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d1cf      	bne.n	8004bb0 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	8000003f 	.word	0x8000003f
 8004c20:	46021000 	.word	0x46021000
 8004c24:	42028000 	.word	0x42028000
 8004c28:	42028100 	.word	0x42028100
 8004c2c:	42028300 	.word	0x42028300
 8004c30:	46021300 	.word	0x46021300

08004c34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c46:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d14b      	bne.n	8004ce6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d021      	beq.n	8004cac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fd ffc7 	bl	8002c00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d032      	beq.n	8004cde <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d12b      	bne.n	8004cde <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11f      	bne.n	8004cde <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca2:	f043 0201 	orr.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	679a      	str	r2, [r3, #120]	@ 0x78
 8004caa:	e018      	b.n	8004cde <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d111      	bne.n	8004cde <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cbe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d105      	bne.n	8004cde <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff f8aa 	bl	8003e38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ce4:	e00e      	b.n	8004d04 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff f8be 	bl	8003e74 <HAL_ADC_ErrorCallback>
}
 8004cf8:	e004      	b.n	8004d04 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff f896 	bl	8003e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d46:	f043 0204 	orr.w	r2, r3, #4
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff f890 	bl	8003e74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dde:	4a04      	ldr	r2, [pc, #16]	@ (8004df0 <__NVIC_SetPriorityGrouping+0x44>)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	60d3      	str	r3, [r2, #12]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df8:	4b04      	ldr	r3, [pc, #16]	@ (8004e0c <__NVIC_GetPriorityGrouping+0x18>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f003 0307 	and.w	r3, r3, #7
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	db0b      	blt.n	8004e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	f003 021f 	and.w	r2, r3, #31
 8004e28:	4907      	ldr	r1, [pc, #28]	@ (8004e48 <__NVIC_EnableIRQ+0x38>)
 8004e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2001      	movs	r0, #1
 8004e32:	fa00 f202 	lsl.w	r2, r0, r2
 8004e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000e100 	.word	0xe000e100

08004e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	db0a      	blt.n	8004e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	490c      	ldr	r1, [pc, #48]	@ (8004e98 <__NVIC_SetPriority+0x4c>)
 8004e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6a:	0112      	lsls	r2, r2, #4
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e74:	e00a      	b.n	8004e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4908      	ldr	r1, [pc, #32]	@ (8004e9c <__NVIC_SetPriority+0x50>)
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	3b04      	subs	r3, #4
 8004e84:	0112      	lsls	r2, r2, #4
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	440b      	add	r3, r1
 8004e8a:	761a      	strb	r2, [r3, #24]
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000e100 	.word	0xe000e100
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	@ 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f1c3 0307 	rsb	r3, r3, #7
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	bf28      	it	cs
 8004ebe:	2304      	movcs	r3, #4
 8004ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2b06      	cmp	r3, #6
 8004ec8:	d902      	bls.n	8004ed0 <NVIC_EncodePriority+0x30>
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3b03      	subs	r3, #3
 8004ece:	e000      	b.n	8004ed2 <NVIC_EncodePriority+0x32>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	43d9      	mvns	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef8:	4313      	orrs	r3, r2
         );
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3724      	adds	r7, #36	@ 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ff4c 	bl	8004dac <__NVIC_SetPriorityGrouping>
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f2a:	f7ff ff63 	bl	8004df4 <__NVIC_GetPriorityGrouping>
 8004f2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	6978      	ldr	r0, [r7, #20]
 8004f36:	f7ff ffb3 	bl	8004ea0 <NVIC_EncodePriority>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ff82 	bl	8004e4c <__NVIC_SetPriority>
}
 8004f48:	bf00      	nop
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ff56 	bl	8004e10 <__NVIC_EnableIRQ>
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f7c:	d301      	bcc.n	8004f82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e00d      	b.n	8004f9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004f82:	4a0a      	ldr	r2, [pc, #40]	@ (8004fac <HAL_SYSTICK_Config+0x40>)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004f8a:	4b08      	ldr	r3, [pc, #32]	@ (8004fac <HAL_SYSTICK_Config+0x40>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004f90:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <HAL_SYSTICK_Config+0x40>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a05      	ldr	r2, [pc, #20]	@ (8004fac <HAL_SYSTICK_Config+0x40>)
 8004f96:	f043 0303 	orr.w	r3, r3, #3
 8004f9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	e000e010 	.word	0xe000e010

08004fb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d844      	bhi.n	8005048 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc4:	08004fe7 	.word	0x08004fe7
 8004fc8:	08005005 	.word	0x08005005
 8004fcc:	08005027 	.word	0x08005027
 8004fd0:	08005049 	.word	0x08005049
 8004fd4:	08004fd9 	.word	0x08004fd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fde:	f043 0304 	orr.w	r3, r3, #4
 8004fe2:	6013      	str	r3, [r2, #0]
      break;
 8004fe4:	e031      	b.n	800504a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1b      	ldr	r2, [pc, #108]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800505c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ff8:	4a18      	ldr	r2, [pc, #96]	@ (800505c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ffa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005002:	e022      	b.n	800504a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005004:	4b14      	ldr	r3, [pc, #80]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a13      	ldr	r2, [pc, #76]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800500a:	f023 0304 	bic.w	r3, r3, #4
 800500e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005010:	4b12      	ldr	r3, [pc, #72]	@ (800505c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005016:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800501a:	4a10      	ldr	r2, [pc, #64]	@ (800505c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800501c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005024:	e011      	b.n	800504a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005026:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a0b      	ldr	r2, [pc, #44]	@ (8005058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800502c:	f023 0304 	bic.w	r3, r3, #4
 8005030:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005032:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005038:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800503c:	4a07      	ldr	r2, [pc, #28]	@ (800505c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800503e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005046:	e000      	b.n	800504a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005048:	bf00      	nop
  }
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000e010 	.word	0xe000e010
 800505c:	46020c00 	.word	0x46020c00

08005060 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005066:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005072:	2304      	movs	r3, #4
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e021      	b.n	80050bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005078:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800507a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800507e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005082:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800508a:	d011      	beq.n	80050b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005092:	d810      	bhi.n	80050b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050a0:	d003      	beq.n	80050aa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80050a2:	e008      	b.n	80050b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80050a4:	2300      	movs	r3, #0
 80050a6:	607b      	str	r3, [r7, #4]
        break;
 80050a8:	e008      	b.n	80050bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80050aa:	2301      	movs	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
        break;
 80050ae:	e005      	b.n	80050bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80050b0:	2302      	movs	r3, #2
 80050b2:	607b      	str	r3, [r7, #4]
        break;
 80050b4:	e002      	b.n	80050bc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
        break;
 80050ba:	bf00      	nop
    }
  }
  return systick_source;
 80050bc:	687b      	ldr	r3, [r7, #4]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000e010 	.word	0xe000e010
 80050d0:	46020c00 	.word	0x46020c00

080050d4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80050dc:	f7fd fc1a 	bl	8002914 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0db      	b.n	80052a4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6e      	ldr	r2, [pc, #440]	@ (80052ac <HAL_DMA_Init+0x1d8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	f000 809f 	beq.w	8005236 <HAL_DMA_Init+0x162>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a6c      	ldr	r2, [pc, #432]	@ (80052b0 <HAL_DMA_Init+0x1dc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	f000 8099 	beq.w	8005236 <HAL_DMA_Init+0x162>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a6a      	ldr	r2, [pc, #424]	@ (80052b4 <HAL_DMA_Init+0x1e0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	f000 8093 	beq.w	8005236 <HAL_DMA_Init+0x162>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a68      	ldr	r2, [pc, #416]	@ (80052b8 <HAL_DMA_Init+0x1e4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f000 808d 	beq.w	8005236 <HAL_DMA_Init+0x162>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a66      	ldr	r2, [pc, #408]	@ (80052bc <HAL_DMA_Init+0x1e8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	f000 8087 	beq.w	8005236 <HAL_DMA_Init+0x162>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a64      	ldr	r2, [pc, #400]	@ (80052c0 <HAL_DMA_Init+0x1ec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f000 8081 	beq.w	8005236 <HAL_DMA_Init+0x162>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a62      	ldr	r2, [pc, #392]	@ (80052c4 <HAL_DMA_Init+0x1f0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d07b      	beq.n	8005236 <HAL_DMA_Init+0x162>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a61      	ldr	r2, [pc, #388]	@ (80052c8 <HAL_DMA_Init+0x1f4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d076      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a5f      	ldr	r2, [pc, #380]	@ (80052cc <HAL_DMA_Init+0x1f8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d071      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a5e      	ldr	r2, [pc, #376]	@ (80052d0 <HAL_DMA_Init+0x1fc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d06c      	beq.n	8005236 <HAL_DMA_Init+0x162>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5c      	ldr	r2, [pc, #368]	@ (80052d4 <HAL_DMA_Init+0x200>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d067      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5b      	ldr	r2, [pc, #364]	@ (80052d8 <HAL_DMA_Init+0x204>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d062      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a59      	ldr	r2, [pc, #356]	@ (80052dc <HAL_DMA_Init+0x208>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d05d      	beq.n	8005236 <HAL_DMA_Init+0x162>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a58      	ldr	r2, [pc, #352]	@ (80052e0 <HAL_DMA_Init+0x20c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d058      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a56      	ldr	r2, [pc, #344]	@ (80052e4 <HAL_DMA_Init+0x210>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d053      	beq.n	8005236 <HAL_DMA_Init+0x162>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a55      	ldr	r2, [pc, #340]	@ (80052e8 <HAL_DMA_Init+0x214>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d04e      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a53      	ldr	r2, [pc, #332]	@ (80052ec <HAL_DMA_Init+0x218>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d049      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a52      	ldr	r2, [pc, #328]	@ (80052f0 <HAL_DMA_Init+0x21c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d044      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a50      	ldr	r2, [pc, #320]	@ (80052f4 <HAL_DMA_Init+0x220>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d03f      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a4f      	ldr	r2, [pc, #316]	@ (80052f8 <HAL_DMA_Init+0x224>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d03a      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a4d      	ldr	r2, [pc, #308]	@ (80052fc <HAL_DMA_Init+0x228>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d035      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005300 <HAL_DMA_Init+0x22c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d030      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005304 <HAL_DMA_Init+0x230>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02b      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a49      	ldr	r2, [pc, #292]	@ (8005308 <HAL_DMA_Init+0x234>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d026      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a47      	ldr	r2, [pc, #284]	@ (800530c <HAL_DMA_Init+0x238>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d021      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a46      	ldr	r2, [pc, #280]	@ (8005310 <HAL_DMA_Init+0x23c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01c      	beq.n	8005236 <HAL_DMA_Init+0x162>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a44      	ldr	r2, [pc, #272]	@ (8005314 <HAL_DMA_Init+0x240>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d017      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a43      	ldr	r2, [pc, #268]	@ (8005318 <HAL_DMA_Init+0x244>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d012      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a41      	ldr	r2, [pc, #260]	@ (800531c <HAL_DMA_Init+0x248>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00d      	beq.n	8005236 <HAL_DMA_Init+0x162>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a40      	ldr	r2, [pc, #256]	@ (8005320 <HAL_DMA_Init+0x24c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d008      	beq.n	8005236 <HAL_DMA_Init+0x162>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a3e      	ldr	r2, [pc, #248]	@ (8005324 <HAL_DMA_Init+0x250>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <HAL_DMA_Init+0x162>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a3d      	ldr	r2, [pc, #244]	@ (8005328 <HAL_DMA_Init+0x254>)
 8005234:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0206 	orr.w	r2, r2, #6
 8005254:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005256:	e00f      	b.n	8005278 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005258:	f7fd fb5c 	bl	8002914 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b05      	cmp	r3, #5
 8005264:	d908      	bls.n	8005278 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2210      	movs	r2, #16
 800526a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2203      	movs	r2, #3
 8005270:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e015      	b.n	80052a4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e8      	bne.n	8005258 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fb26 	bl	80058d8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40020050 	.word	0x40020050
 80052b0:	50020050 	.word	0x50020050
 80052b4:	400200d0 	.word	0x400200d0
 80052b8:	500200d0 	.word	0x500200d0
 80052bc:	40020150 	.word	0x40020150
 80052c0:	50020150 	.word	0x50020150
 80052c4:	400201d0 	.word	0x400201d0
 80052c8:	500201d0 	.word	0x500201d0
 80052cc:	40020250 	.word	0x40020250
 80052d0:	50020250 	.word	0x50020250
 80052d4:	400202d0 	.word	0x400202d0
 80052d8:	500202d0 	.word	0x500202d0
 80052dc:	40020350 	.word	0x40020350
 80052e0:	50020350 	.word	0x50020350
 80052e4:	400203d0 	.word	0x400203d0
 80052e8:	500203d0 	.word	0x500203d0
 80052ec:	40020450 	.word	0x40020450
 80052f0:	50020450 	.word	0x50020450
 80052f4:	400204d0 	.word	0x400204d0
 80052f8:	500204d0 	.word	0x500204d0
 80052fc:	40020550 	.word	0x40020550
 8005300:	50020550 	.word	0x50020550
 8005304:	400205d0 	.word	0x400205d0
 8005308:	500205d0 	.word	0x500205d0
 800530c:	40020650 	.word	0x40020650
 8005310:	50020650 	.word	0x50020650
 8005314:	400206d0 	.word	0x400206d0
 8005318:	500206d0 	.word	0x500206d0
 800531c:	40020750 	.word	0x40020750
 8005320:	50020750 	.word	0x50020750
 8005324:	400207d0 	.word	0x400207d0
 8005328:	500207d0 	.word	0x500207d0

0800532c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e04f      	b.n	80053e4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_DMA_Start_IT+0x26>
 800534e:	2302      	movs	r3, #2
 8005350:	e048      	b.n	80053e4 <HAL_DMA_Start_IT+0xb8>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d136      	bne.n	80053d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa86 	bl	800588c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800538e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695a      	ldr	r2, [r3, #20]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053be:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e007      	b.n	80053e4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2240      	movs	r2, #64	@ 0x40
 80053d8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80053f4:	f7fd fa8e 	bl	8002914 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e06b      	b.n	80054dc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d008      	beq.n	8005422 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e05c      	b.n	80054dc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0204 	orr.w	r2, r2, #4
 8005430:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2205      	movs	r2, #5
 8005436:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800543a:	e020      	b.n	800547e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800543c:	f7fd fa6a 	bl	8002914 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b05      	cmp	r3, #5
 8005448:	d919      	bls.n	800547e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f043 0210 	orr.w	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2203      	movs	r2, #3
 800545a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546e:	2201      	movs	r2, #1
 8005470:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e02e      	b.n	80054dc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0d7      	beq.n	800543c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0202 	orr.w	r2, r2, #2
 800549a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2204      	movs	r2, #4
 80054a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80054ac:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c6:	2201      	movs	r2, #1
 80054c8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e019      	b.n	800552a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d004      	beq.n	800550c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e00e      	b.n	800552a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2204      	movs	r2, #4
 8005510:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005522:	f043 0304 	orr.w	r3, r3, #4
 8005526:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005546:	f023 030f 	bic.w	r3, r3, #15
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005554:	3b50      	subs	r3, #80	@ 0x50
 8005556:	09db      	lsrs	r3, r3, #7
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2201      	movs	r2, #1
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 813b 	beq.w	80057ec <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d011      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800559a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a0:	f043 0201 	orr.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d011      	beq.n	80055da <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	f043 0202 	orr.w	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d011      	beq.n	800560c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80055fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005604:	f043 0204 	orr.w	r2, r3, #4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d011      	beq.n	800563e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005630:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005636:	f043 0208 	orr.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005662:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d04c      	beq.n	800571c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d045      	beq.n	800571c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005698:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d12e      	bne.n	8005704 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056b4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0202 	orr.w	r2, r2, #2
 80056c4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056de:	2201      	movs	r2, #1
 80056e0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d07a      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
        }

        return;
 8005702:	e075      	b.n	80057f0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2205      	movs	r2, #5
 8005708:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d039      	beq.n	800579e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d032      	beq.n	800579e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	d012      	beq.n	800576a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d116      	bne.n	800577c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005754:	2b00      	cmp	r3, #0
 8005756:	d111      	bne.n	800577c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005764:	2201      	movs	r2, #1
 8005766:	731a      	strb	r2, [r3, #12]
 8005768:	e008      	b.n	800577c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005784:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d025      	beq.n	80057f2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0202 	orr.w	r2, r2, #2
 80057b4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ce:	2201      	movs	r2, #1
 80057d0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
 80057ea:	e002      	b.n	80057f2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80057f0:	bf00      	nop
    }
  }
}
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005806:	b2db      	uxtb	r3, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e02b      	b.n	8005880 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005830:	f023 030f 	bic.w	r3, r3, #15
 8005834:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583e:	3b50      	subs	r3, #80	@ 0x50
 8005840:	09db      	lsrs	r3, r3, #7
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	2201      	movs	r2, #1
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d012      	beq.n	800587e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f003 0311 	and.w	r3, r3, #17
 800585e:	2b11      	cmp	r3, #17
 8005860:	d106      	bne.n	8005870 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	e006      	b.n	800587e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	43db      	mvns	r3, r3
 8005878:	401a      	ands	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	b291      	uxth	r1, r2
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80058b8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a53      	ldr	r2, [pc, #332]	@ (8005a64 <DMA_Init+0x18c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	f000 80a0 	beq.w	8005a5e <DMA_Init+0x186>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a51      	ldr	r2, [pc, #324]	@ (8005a68 <DMA_Init+0x190>)
 8005924:	4293      	cmp	r3, r2
 8005926:	f000 809a 	beq.w	8005a5e <DMA_Init+0x186>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a4f      	ldr	r2, [pc, #316]	@ (8005a6c <DMA_Init+0x194>)
 8005930:	4293      	cmp	r3, r2
 8005932:	f000 8094 	beq.w	8005a5e <DMA_Init+0x186>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a4d      	ldr	r2, [pc, #308]	@ (8005a70 <DMA_Init+0x198>)
 800593c:	4293      	cmp	r3, r2
 800593e:	f000 808e 	beq.w	8005a5e <DMA_Init+0x186>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a4b      	ldr	r2, [pc, #300]	@ (8005a74 <DMA_Init+0x19c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	f000 8088 	beq.w	8005a5e <DMA_Init+0x186>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a49      	ldr	r2, [pc, #292]	@ (8005a78 <DMA_Init+0x1a0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	f000 8082 	beq.w	8005a5e <DMA_Init+0x186>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a47      	ldr	r2, [pc, #284]	@ (8005a7c <DMA_Init+0x1a4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d07c      	beq.n	8005a5e <DMA_Init+0x186>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a45      	ldr	r2, [pc, #276]	@ (8005a80 <DMA_Init+0x1a8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d077      	beq.n	8005a5e <DMA_Init+0x186>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a44      	ldr	r2, [pc, #272]	@ (8005a84 <DMA_Init+0x1ac>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d072      	beq.n	8005a5e <DMA_Init+0x186>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a42      	ldr	r2, [pc, #264]	@ (8005a88 <DMA_Init+0x1b0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d06d      	beq.n	8005a5e <DMA_Init+0x186>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a41      	ldr	r2, [pc, #260]	@ (8005a8c <DMA_Init+0x1b4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d068      	beq.n	8005a5e <DMA_Init+0x186>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a3f      	ldr	r2, [pc, #252]	@ (8005a90 <DMA_Init+0x1b8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d063      	beq.n	8005a5e <DMA_Init+0x186>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3e      	ldr	r2, [pc, #248]	@ (8005a94 <DMA_Init+0x1bc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d05e      	beq.n	8005a5e <DMA_Init+0x186>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005a98 <DMA_Init+0x1c0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d059      	beq.n	8005a5e <DMA_Init+0x186>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a3b      	ldr	r2, [pc, #236]	@ (8005a9c <DMA_Init+0x1c4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d054      	beq.n	8005a5e <DMA_Init+0x186>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a39      	ldr	r2, [pc, #228]	@ (8005aa0 <DMA_Init+0x1c8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d04f      	beq.n	8005a5e <DMA_Init+0x186>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a38      	ldr	r2, [pc, #224]	@ (8005aa4 <DMA_Init+0x1cc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d04a      	beq.n	8005a5e <DMA_Init+0x186>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a36      	ldr	r2, [pc, #216]	@ (8005aa8 <DMA_Init+0x1d0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d045      	beq.n	8005a5e <DMA_Init+0x186>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a35      	ldr	r2, [pc, #212]	@ (8005aac <DMA_Init+0x1d4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d040      	beq.n	8005a5e <DMA_Init+0x186>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a33      	ldr	r2, [pc, #204]	@ (8005ab0 <DMA_Init+0x1d8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d03b      	beq.n	8005a5e <DMA_Init+0x186>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a32      	ldr	r2, [pc, #200]	@ (8005ab4 <DMA_Init+0x1dc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d036      	beq.n	8005a5e <DMA_Init+0x186>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a30      	ldr	r2, [pc, #192]	@ (8005ab8 <DMA_Init+0x1e0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d031      	beq.n	8005a5e <DMA_Init+0x186>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2f      	ldr	r2, [pc, #188]	@ (8005abc <DMA_Init+0x1e4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d02c      	beq.n	8005a5e <DMA_Init+0x186>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac0 <DMA_Init+0x1e8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d027      	beq.n	8005a5e <DMA_Init+0x186>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac4 <DMA_Init+0x1ec>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d022      	beq.n	8005a5e <DMA_Init+0x186>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac8 <DMA_Init+0x1f0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01d      	beq.n	8005a5e <DMA_Init+0x186>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a29      	ldr	r2, [pc, #164]	@ (8005acc <DMA_Init+0x1f4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d018      	beq.n	8005a5e <DMA_Init+0x186>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a27      	ldr	r2, [pc, #156]	@ (8005ad0 <DMA_Init+0x1f8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <DMA_Init+0x186>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a26      	ldr	r2, [pc, #152]	@ (8005ad4 <DMA_Init+0x1fc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <DMA_Init+0x186>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a24      	ldr	r2, [pc, #144]	@ (8005ad8 <DMA_Init+0x200>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <DMA_Init+0x186>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a23      	ldr	r2, [pc, #140]	@ (8005adc <DMA_Init+0x204>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <DMA_Init+0x186>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a21      	ldr	r2, [pc, #132]	@ (8005ae0 <DMA_Init+0x208>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d142      	bne.n	8005ae4 <DMA_Init+0x20c>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e041      	b.n	8005ae6 <DMA_Init+0x20e>
 8005a62:	bf00      	nop
 8005a64:	40020050 	.word	0x40020050
 8005a68:	50020050 	.word	0x50020050
 8005a6c:	400200d0 	.word	0x400200d0
 8005a70:	500200d0 	.word	0x500200d0
 8005a74:	40020150 	.word	0x40020150
 8005a78:	50020150 	.word	0x50020150
 8005a7c:	400201d0 	.word	0x400201d0
 8005a80:	500201d0 	.word	0x500201d0
 8005a84:	40020250 	.word	0x40020250
 8005a88:	50020250 	.word	0x50020250
 8005a8c:	400202d0 	.word	0x400202d0
 8005a90:	500202d0 	.word	0x500202d0
 8005a94:	40020350 	.word	0x40020350
 8005a98:	50020350 	.word	0x50020350
 8005a9c:	400203d0 	.word	0x400203d0
 8005aa0:	500203d0 	.word	0x500203d0
 8005aa4:	40020450 	.word	0x40020450
 8005aa8:	50020450 	.word	0x50020450
 8005aac:	400204d0 	.word	0x400204d0
 8005ab0:	500204d0 	.word	0x500204d0
 8005ab4:	40020550 	.word	0x40020550
 8005ab8:	50020550 	.word	0x50020550
 8005abc:	400205d0 	.word	0x400205d0
 8005ac0:	500205d0 	.word	0x500205d0
 8005ac4:	40020650 	.word	0x40020650
 8005ac8:	50020650 	.word	0x50020650
 8005acc:	400206d0 	.word	0x400206d0
 8005ad0:	500206d0 	.word	0x500206d0
 8005ad4:	40020750 	.word	0x40020750
 8005ad8:	50020750 	.word	0x50020750
 8005adc:	400207d0 	.word	0x400207d0
 8005ae0:	500207d0 	.word	0x500207d0
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d012      	beq.n	8005b10 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	3b01      	subs	r3, #1
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005afa:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	3b01      	subs	r3, #1
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005b08:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b42:	f040 80b0 	bne.w	8005ca6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a82      	ldr	r2, [pc, #520]	@ (8005d54 <DMA_Init+0x47c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	f000 80a0 	beq.w	8005c92 <DMA_Init+0x3ba>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a80      	ldr	r2, [pc, #512]	@ (8005d58 <DMA_Init+0x480>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	f000 809a 	beq.w	8005c92 <DMA_Init+0x3ba>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a7e      	ldr	r2, [pc, #504]	@ (8005d5c <DMA_Init+0x484>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	f000 8094 	beq.w	8005c92 <DMA_Init+0x3ba>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d60 <DMA_Init+0x488>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	f000 808e 	beq.w	8005c92 <DMA_Init+0x3ba>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a7a      	ldr	r2, [pc, #488]	@ (8005d64 <DMA_Init+0x48c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	f000 8088 	beq.w	8005c92 <DMA_Init+0x3ba>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a78      	ldr	r2, [pc, #480]	@ (8005d68 <DMA_Init+0x490>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	f000 8082 	beq.w	8005c92 <DMA_Init+0x3ba>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a76      	ldr	r2, [pc, #472]	@ (8005d6c <DMA_Init+0x494>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d07c      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a74      	ldr	r2, [pc, #464]	@ (8005d70 <DMA_Init+0x498>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d077      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a73      	ldr	r2, [pc, #460]	@ (8005d74 <DMA_Init+0x49c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d072      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a71      	ldr	r2, [pc, #452]	@ (8005d78 <DMA_Init+0x4a0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d06d      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a70      	ldr	r2, [pc, #448]	@ (8005d7c <DMA_Init+0x4a4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d068      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8005d80 <DMA_Init+0x4a8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d063      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a6d      	ldr	r2, [pc, #436]	@ (8005d84 <DMA_Init+0x4ac>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d05e      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8005d88 <DMA_Init+0x4b0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d059      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a6a      	ldr	r2, [pc, #424]	@ (8005d8c <DMA_Init+0x4b4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d054      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a68      	ldr	r2, [pc, #416]	@ (8005d90 <DMA_Init+0x4b8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d04f      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a67      	ldr	r2, [pc, #412]	@ (8005d94 <DMA_Init+0x4bc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d04a      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a65      	ldr	r2, [pc, #404]	@ (8005d98 <DMA_Init+0x4c0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d045      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a64      	ldr	r2, [pc, #400]	@ (8005d9c <DMA_Init+0x4c4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d040      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a62      	ldr	r2, [pc, #392]	@ (8005da0 <DMA_Init+0x4c8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d03b      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a61      	ldr	r2, [pc, #388]	@ (8005da4 <DMA_Init+0x4cc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d036      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a5f      	ldr	r2, [pc, #380]	@ (8005da8 <DMA_Init+0x4d0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d031      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a5e      	ldr	r2, [pc, #376]	@ (8005dac <DMA_Init+0x4d4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d02c      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5c      	ldr	r2, [pc, #368]	@ (8005db0 <DMA_Init+0x4d8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d027      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a5b      	ldr	r2, [pc, #364]	@ (8005db4 <DMA_Init+0x4dc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a59      	ldr	r2, [pc, #356]	@ (8005db8 <DMA_Init+0x4e0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a58      	ldr	r2, [pc, #352]	@ (8005dbc <DMA_Init+0x4e4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a56      	ldr	r2, [pc, #344]	@ (8005dc0 <DMA_Init+0x4e8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a55      	ldr	r2, [pc, #340]	@ (8005dc4 <DMA_Init+0x4ec>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a53      	ldr	r2, [pc, #332]	@ (8005dc8 <DMA_Init+0x4f0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a52      	ldr	r2, [pc, #328]	@ (8005dcc <DMA_Init+0x4f4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <DMA_Init+0x3ba>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a50      	ldr	r2, [pc, #320]	@ (8005dd0 <DMA_Init+0x4f8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d101      	bne.n	8005c96 <DMA_Init+0x3be>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <DMA_Init+0x3c0>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e008      	b.n	8005cb8 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cae:	d103      	bne.n	8005cb8 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cb6:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cbe:	4b45      	ldr	r3, [pc, #276]	@ (8005dd4 <DMA_Init+0x4fc>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a36      	ldr	r2, [pc, #216]	@ (8005db4 <DMA_Init+0x4dc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d022      	beq.n	8005d24 <DMA_Init+0x44c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a35      	ldr	r2, [pc, #212]	@ (8005db8 <DMA_Init+0x4e0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d01d      	beq.n	8005d24 <DMA_Init+0x44c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a33      	ldr	r2, [pc, #204]	@ (8005dbc <DMA_Init+0x4e4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d018      	beq.n	8005d24 <DMA_Init+0x44c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a32      	ldr	r2, [pc, #200]	@ (8005dc0 <DMA_Init+0x4e8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <DMA_Init+0x44c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a30      	ldr	r2, [pc, #192]	@ (8005dc4 <DMA_Init+0x4ec>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00e      	beq.n	8005d24 <DMA_Init+0x44c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc8 <DMA_Init+0x4f0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <DMA_Init+0x44c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2d      	ldr	r2, [pc, #180]	@ (8005dcc <DMA_Init+0x4f4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <DMA_Init+0x44c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd0 <DMA_Init+0x4f8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d101      	bne.n	8005d28 <DMA_Init+0x450>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <DMA_Init+0x452>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2200      	movs	r2, #0
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40020050 	.word	0x40020050
 8005d58:	50020050 	.word	0x50020050
 8005d5c:	400200d0 	.word	0x400200d0
 8005d60:	500200d0 	.word	0x500200d0
 8005d64:	40020150 	.word	0x40020150
 8005d68:	50020150 	.word	0x50020150
 8005d6c:	400201d0 	.word	0x400201d0
 8005d70:	500201d0 	.word	0x500201d0
 8005d74:	40020250 	.word	0x40020250
 8005d78:	50020250 	.word	0x50020250
 8005d7c:	400202d0 	.word	0x400202d0
 8005d80:	500202d0 	.word	0x500202d0
 8005d84:	40020350 	.word	0x40020350
 8005d88:	50020350 	.word	0x50020350
 8005d8c:	400203d0 	.word	0x400203d0
 8005d90:	500203d0 	.word	0x500203d0
 8005d94:	40020450 	.word	0x40020450
 8005d98:	50020450 	.word	0x50020450
 8005d9c:	400204d0 	.word	0x400204d0
 8005da0:	500204d0 	.word	0x500204d0
 8005da4:	40020550 	.word	0x40020550
 8005da8:	50020550 	.word	0x50020550
 8005dac:	400205d0 	.word	0x400205d0
 8005db0:	500205d0 	.word	0x500205d0
 8005db4:	40020650 	.word	0x40020650
 8005db8:	50020650 	.word	0x50020650
 8005dbc:	400206d0 	.word	0x400206d0
 8005dc0:	500206d0 	.word	0x500206d0
 8005dc4:	40020750 	.word	0x40020750
 8005dc8:	50020750 	.word	0x50020750
 8005dcc:	400207d0 	.word	0x400207d0
 8005dd0:	500207d0 	.word	0x500207d0
 8005dd4:	3c803180 	.word	0x3c803180

08005dd8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e053      	b.n	8005e92 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb fdd4 	bl	80019ac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6851      	ldr	r1, [r2, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	69d2      	ldr	r2, [r2, #28]
 8005e22:	4311      	orrs	r1, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e32:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6891      	ldr	r1, [r2, #8]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6992      	ldr	r2, [r2, #24]
 8005e42:	4311      	orrs	r1, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	0c1b      	lsrs	r3, r3, #16
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68d1      	ldr	r1, [r2, #12]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e68:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	051a      	lsls	r2, r3, #20
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	055b      	lsls	r3, r3, #21
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_DMA2D_ConfigLayer+0x24>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e092      	b.n	8005fe6 <HAL_DMA2D_ConfigLayer+0x14a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	3328      	adds	r3, #40	@ 0x28
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005ef4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005f00:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff4 <HAL_DMA2D_ConfigLayer+0x158>)
 8005f02:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b0a      	cmp	r3, #10
 8005f0a:	d003      	beq.n	8005f14 <HAL_DMA2D_ConfigLayer+0x78>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b09      	cmp	r3, #9
 8005f12:	d107      	bne.n	8005f24 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e005      	b.n	8005f30 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	061b      	lsls	r3, r3, #24
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d120      	bne.n	8005f78 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	ea02 0103 	and.w	r1, r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b0a      	cmp	r3, #10
 8005f5e:	d003      	beq.n	8005f68 <HAL_DMA2D_ConfigLayer+0xcc>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b09      	cmp	r3, #9
 8005f66:	d135      	bne.n	8005fd4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005f74:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f76:	e02d      	b.n	8005fd4 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b0b      	cmp	r3, #11
 8005f7e:	d109      	bne.n	8005f94 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	049b      	lsls	r3, r3, #18
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005f92:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	ea02 0103 	and.w	r1, r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b0a      	cmp	r3, #10
 8005fbc:	d003      	beq.n	8005fc6 <HAL_DMA2D_ConfigLayer+0x12a>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d106      	bne.n	8005fd4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005fd2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	ff33000f 	.word	0xff33000f

08005ff8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006000:	f7fc fc88 	bl	8002914 <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0db      	b.n	80061c8 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a6e      	ldr	r2, [pc, #440]	@ (80061d0 <HAL_DMAEx_List_Init+0x1d8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	f000 809f 	beq.w	800615a <HAL_DMAEx_List_Init+0x162>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a6c      	ldr	r2, [pc, #432]	@ (80061d4 <HAL_DMAEx_List_Init+0x1dc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f000 8099 	beq.w	800615a <HAL_DMAEx_List_Init+0x162>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6a      	ldr	r2, [pc, #424]	@ (80061d8 <HAL_DMAEx_List_Init+0x1e0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	f000 8093 	beq.w	800615a <HAL_DMAEx_List_Init+0x162>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a68      	ldr	r2, [pc, #416]	@ (80061dc <HAL_DMAEx_List_Init+0x1e4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	f000 808d 	beq.w	800615a <HAL_DMAEx_List_Init+0x162>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a66      	ldr	r2, [pc, #408]	@ (80061e0 <HAL_DMAEx_List_Init+0x1e8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	f000 8087 	beq.w	800615a <HAL_DMAEx_List_Init+0x162>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a64      	ldr	r2, [pc, #400]	@ (80061e4 <HAL_DMAEx_List_Init+0x1ec>)
 8006052:	4293      	cmp	r3, r2
 8006054:	f000 8081 	beq.w	800615a <HAL_DMAEx_List_Init+0x162>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a62      	ldr	r2, [pc, #392]	@ (80061e8 <HAL_DMAEx_List_Init+0x1f0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d07b      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a61      	ldr	r2, [pc, #388]	@ (80061ec <HAL_DMAEx_List_Init+0x1f4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d076      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a5f      	ldr	r2, [pc, #380]	@ (80061f0 <HAL_DMAEx_List_Init+0x1f8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d071      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a5e      	ldr	r2, [pc, #376]	@ (80061f4 <HAL_DMAEx_List_Init+0x1fc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d06c      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a5c      	ldr	r2, [pc, #368]	@ (80061f8 <HAL_DMAEx_List_Init+0x200>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d067      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a5b      	ldr	r2, [pc, #364]	@ (80061fc <HAL_DMAEx_List_Init+0x204>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d062      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a59      	ldr	r2, [pc, #356]	@ (8006200 <HAL_DMAEx_List_Init+0x208>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d05d      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a58      	ldr	r2, [pc, #352]	@ (8006204 <HAL_DMAEx_List_Init+0x20c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d058      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a56      	ldr	r2, [pc, #344]	@ (8006208 <HAL_DMAEx_List_Init+0x210>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d053      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a55      	ldr	r2, [pc, #340]	@ (800620c <HAL_DMAEx_List_Init+0x214>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d04e      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a53      	ldr	r2, [pc, #332]	@ (8006210 <HAL_DMAEx_List_Init+0x218>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d049      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a52      	ldr	r2, [pc, #328]	@ (8006214 <HAL_DMAEx_List_Init+0x21c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d044      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a50      	ldr	r2, [pc, #320]	@ (8006218 <HAL_DMAEx_List_Init+0x220>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d03f      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a4f      	ldr	r2, [pc, #316]	@ (800621c <HAL_DMAEx_List_Init+0x224>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d03a      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a4d      	ldr	r2, [pc, #308]	@ (8006220 <HAL_DMAEx_List_Init+0x228>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d035      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a4c      	ldr	r2, [pc, #304]	@ (8006224 <HAL_DMAEx_List_Init+0x22c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d030      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a4a      	ldr	r2, [pc, #296]	@ (8006228 <HAL_DMAEx_List_Init+0x230>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d02b      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a49      	ldr	r2, [pc, #292]	@ (800622c <HAL_DMAEx_List_Init+0x234>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d026      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a47      	ldr	r2, [pc, #284]	@ (8006230 <HAL_DMAEx_List_Init+0x238>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d021      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a46      	ldr	r2, [pc, #280]	@ (8006234 <HAL_DMAEx_List_Init+0x23c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d01c      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a44      	ldr	r2, [pc, #272]	@ (8006238 <HAL_DMAEx_List_Init+0x240>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d017      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a43      	ldr	r2, [pc, #268]	@ (800623c <HAL_DMAEx_List_Init+0x244>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d012      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a41      	ldr	r2, [pc, #260]	@ (8006240 <HAL_DMAEx_List_Init+0x248>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00d      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a40      	ldr	r2, [pc, #256]	@ (8006244 <HAL_DMAEx_List_Init+0x24c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d008      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a3e      	ldr	r2, [pc, #248]	@ (8006248 <HAL_DMAEx_List_Init+0x250>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <HAL_DMAEx_List_Init+0x162>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a3d      	ldr	r2, [pc, #244]	@ (800624c <HAL_DMAEx_List_Init+0x254>)
 8006158:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695a      	ldr	r2, [r3, #20]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0206 	orr.w	r2, r2, #6
 8006178:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800617a:	e00f      	b.n	800619c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800617c:	f7fc fbca 	bl	8002914 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b05      	cmp	r3, #5
 8006188:	d908      	bls.n	800619c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2210      	movs	r2, #16
 800618e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2203      	movs	r2, #3
 8006194:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e015      	b.n	80061c8 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e8      	bne.n	800617c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fae0 	bl	8006770 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40020050 	.word	0x40020050
 80061d4:	50020050 	.word	0x50020050
 80061d8:	400200d0 	.word	0x400200d0
 80061dc:	500200d0 	.word	0x500200d0
 80061e0:	40020150 	.word	0x40020150
 80061e4:	50020150 	.word	0x50020150
 80061e8:	400201d0 	.word	0x400201d0
 80061ec:	500201d0 	.word	0x500201d0
 80061f0:	40020250 	.word	0x40020250
 80061f4:	50020250 	.word	0x50020250
 80061f8:	400202d0 	.word	0x400202d0
 80061fc:	500202d0 	.word	0x500202d0
 8006200:	40020350 	.word	0x40020350
 8006204:	50020350 	.word	0x50020350
 8006208:	400203d0 	.word	0x400203d0
 800620c:	500203d0 	.word	0x500203d0
 8006210:	40020450 	.word	0x40020450
 8006214:	50020450 	.word	0x50020450
 8006218:	400204d0 	.word	0x400204d0
 800621c:	500204d0 	.word	0x500204d0
 8006220:	40020550 	.word	0x40020550
 8006224:	50020550 	.word	0x50020550
 8006228:	400205d0 	.word	0x400205d0
 800622c:	500205d0 	.word	0x500205d0
 8006230:	40020650 	.word	0x40020650
 8006234:	50020650 	.word	0x50020650
 8006238:	400206d0 	.word	0x400206d0
 800623c:	500206d0 	.word	0x500206d0
 8006240:	40020750 	.word	0x40020750
 8006244:	50020750 	.word	0x50020750
 8006248:	400207d0 	.word	0x400207d0
 800624c:	500207d0 	.word	0x500207d0

08006250 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_DMAEx_List_Start_IT+0x16>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e082      	b.n	8006370 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006270:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800627c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d005      	beq.n	8006290 <HAL_DMAEx_List_Start_IT+0x40>
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d16a      	bne.n	8006360 <HAL_DMAEx_List_Start_IT+0x110>
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d067      	beq.n	8006360 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d157      	bne.n	800634c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_DMAEx_List_Start_IT+0x5a>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e062      	b.n	8006370 <HAL_DMAEx_List_Start_IT+0x120>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062be:	2202      	movs	r2, #2
 80062c0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062cc:	2200      	movs	r2, #0
 80062ce:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80062de:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800630e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f107 010c 	add.w	r1, r7, #12
 800631a:	2200      	movs	r2, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fe47 	bl	8006fb0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4619      	mov	r1, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	0c0b      	lsrs	r3, r1, #16
 8006330:	041b      	lsls	r3, r3, #16
 8006332:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006340:	4013      	ands	r3, r2
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	430b      	orrs	r3, r1
 800634a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0201 	orr.w	r2, r2, #1
 800635a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	e007      	b.n	8006370 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2240      	movs	r2, #64	@ 0x40
 8006364:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_DMAEx_List_BuildNode+0x16>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e004      	b.n	800639c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fb43 	bl	8006a20 <DMA_List_BuildNode>

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_DMAEx_List_GetNodeConfig+0x16>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e004      	b.n	80063c8 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc7f 	bl	8006cc4 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	@ 0x30
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_DMAEx_List_InsertNode+0x18>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e0b6      	b.n	800655a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d104      	bne.n	80063fe <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2204      	movs	r2, #4
 80063f8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e0ad      	b.n	800655a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fd66 	bl	8006ed8 <DMA_List_CheckNodesBaseAddresses>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2205      	movs	r2, #5
 8006416:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e09e      	b.n	800655a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fd87 	bl	8006f38 <DMA_List_CheckNodesTypes>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2204      	movs	r2, #4
 8006434:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e08f      	b.n	800655a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2202      	movs	r2, #2
 800643e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006446:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800644a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fdad 	bl	8006fb0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d11a      	bne.n	8006494 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	e06c      	b.n	800654c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800647e:	4013      	ands	r3, r2
 8006480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006484:	4319      	orrs	r1, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2202      	movs	r2, #2
 8006490:	609a      	str	r2, [r3, #8]
 8006492:	e05b      	b.n	800654c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10f      	bne.n	80064ba <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80064a4:	4013      	ands	r3, r2
 80064a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064aa:	4319      	orrs	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e043      	b.n	8006542 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80064be:	f107 0314 	add.w	r3, r7, #20
 80064c2:	461a      	mov	r2, r3
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fda2 	bl	8007010 <DMA_List_FindNode>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d132      	bne.n	8006538 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d11a      	bne.n	8006512 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	461a      	mov	r2, r3
 80064ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80064ee:	4013      	ands	r3, r2
 80064f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064f4:	4319      	orrs	r1, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006502:	4013      	ands	r3, r2
 8006504:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006508:	4319      	orrs	r1, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006510:	e017      	b.n	8006542 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006528:	4013      	ands	r3, r2
 800652a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800652c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800652e:	4319      	orrs	r1, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006536:	e004      	b.n	8006542 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2206      	movs	r2, #6
 800653c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e00b      	b.n	800655a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3730      	adds	r7, #48	@ 0x30
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b08a      	sub	sp, #40	@ 0x28
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e052      	b.n	800661a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e049      	b.n	800661a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d101      	bne.n	800659e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	e03d      	b.n	800661a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2204      	movs	r2, #4
 80065a2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e038      	b.n	800661a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d104      	bne.n	80065ba <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2204      	movs	r2, #4
 80065b4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e02f      	b.n	800661a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f107 0220 	add.w	r2, r7, #32
 80065ce:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fcec 	bl	8006fb0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80065dc:	f107 030c 	add.w	r3, r7, #12
 80065e0:	461a      	mov	r2, r3
 80065e2:	2100      	movs	r1, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fd13 	bl	8007010 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80065f4:	4013      	ands	r3, r2
 80065f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4610      	mov	r0, r2
 80065fc:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80065fe:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006600:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3728      	adds	r7, #40	@ 0x28
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_DMAEx_List_LinkQ+0x16>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e072      	b.n	8006724 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006644:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d002      	beq.n	8006658 <HAL_DMAEx_List_LinkQ+0x34>
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b05      	cmp	r3, #5
 8006656:	d108      	bne.n	800666a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2240      	movs	r2, #64	@ 0x40
 800665c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e05c      	b.n	8006724 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	7b1b      	ldrb	r3, [r3, #12]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d104      	bne.n	800667e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2201      	movs	r2, #1
 8006678:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e052      	b.n	8006724 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2b      	ldr	r2, [pc, #172]	@ (8006730 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d022      	beq.n	80066ce <HAL_DMAEx_List_LinkQ+0xaa>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a29      	ldr	r2, [pc, #164]	@ (8006734 <HAL_DMAEx_List_LinkQ+0x110>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d01d      	beq.n	80066ce <HAL_DMAEx_List_LinkQ+0xaa>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a28      	ldr	r2, [pc, #160]	@ (8006738 <HAL_DMAEx_List_LinkQ+0x114>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d018      	beq.n	80066ce <HAL_DMAEx_List_LinkQ+0xaa>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a26      	ldr	r2, [pc, #152]	@ (800673c <HAL_DMAEx_List_LinkQ+0x118>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d013      	beq.n	80066ce <HAL_DMAEx_List_LinkQ+0xaa>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a25      	ldr	r2, [pc, #148]	@ (8006740 <HAL_DMAEx_List_LinkQ+0x11c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00e      	beq.n	80066ce <HAL_DMAEx_List_LinkQ+0xaa>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a23      	ldr	r2, [pc, #140]	@ (8006744 <HAL_DMAEx_List_LinkQ+0x120>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d009      	beq.n	80066ce <HAL_DMAEx_List_LinkQ+0xaa>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a22      	ldr	r2, [pc, #136]	@ (8006748 <HAL_DMAEx_List_LinkQ+0x124>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d004      	beq.n	80066ce <HAL_DMAEx_List_LinkQ+0xaa>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a20      	ldr	r2, [pc, #128]	@ (800674c <HAL_DMAEx_List_LinkQ+0x128>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d101      	bne.n	80066d2 <HAL_DMAEx_List_LinkQ+0xae>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <HAL_DMAEx_List_LinkQ+0xb0>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d004      	beq.n	80066f0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2203      	movs	r2, #3
 80066ea:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e019      	b.n	8006724 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	2b81      	cmp	r3, #129	@ 0x81
 80066f6:	d108      	bne.n	800670a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10d      	bne.n	800671c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2204      	movs	r2, #4
 8006704:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e00c      	b.n	8006724 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2204      	movs	r2, #4
 8006716:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e003      	b.n	8006724 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40020650 	.word	0x40020650
 8006734:	50020650 	.word	0x50020650
 8006738:	400206d0 	.word	0x400206d0
 800673c:	500206d0 	.word	0x500206d0
 8006740:	40020750 	.word	0x40020750
 8006744:	50020750 	.word	0x50020750
 8006748:	400207d0 	.word	0x400207d0
 800674c:	500207d0 	.word	0x500207d0

08006750 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	0c1b      	lsrs	r3, r3, #16
 8006760:	b2db      	uxtb	r3, r3
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a85      	ldr	r2, [pc, #532]	@ (80069a0 <DMA_List_Init+0x230>)
 800678a:	4293      	cmp	r3, r2
 800678c:	f000 80a0 	beq.w	80068d0 <DMA_List_Init+0x160>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a83      	ldr	r2, [pc, #524]	@ (80069a4 <DMA_List_Init+0x234>)
 8006796:	4293      	cmp	r3, r2
 8006798:	f000 809a 	beq.w	80068d0 <DMA_List_Init+0x160>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a81      	ldr	r2, [pc, #516]	@ (80069a8 <DMA_List_Init+0x238>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	f000 8094 	beq.w	80068d0 <DMA_List_Init+0x160>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a7f      	ldr	r2, [pc, #508]	@ (80069ac <DMA_List_Init+0x23c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	f000 808e 	beq.w	80068d0 <DMA_List_Init+0x160>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a7d      	ldr	r2, [pc, #500]	@ (80069b0 <DMA_List_Init+0x240>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f000 8088 	beq.w	80068d0 <DMA_List_Init+0x160>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7b      	ldr	r2, [pc, #492]	@ (80069b4 <DMA_List_Init+0x244>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	f000 8082 	beq.w	80068d0 <DMA_List_Init+0x160>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a79      	ldr	r2, [pc, #484]	@ (80069b8 <DMA_List_Init+0x248>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d07c      	beq.n	80068d0 <DMA_List_Init+0x160>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a78      	ldr	r2, [pc, #480]	@ (80069bc <DMA_List_Init+0x24c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d077      	beq.n	80068d0 <DMA_List_Init+0x160>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a76      	ldr	r2, [pc, #472]	@ (80069c0 <DMA_List_Init+0x250>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d072      	beq.n	80068d0 <DMA_List_Init+0x160>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a75      	ldr	r2, [pc, #468]	@ (80069c4 <DMA_List_Init+0x254>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d06d      	beq.n	80068d0 <DMA_List_Init+0x160>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a73      	ldr	r2, [pc, #460]	@ (80069c8 <DMA_List_Init+0x258>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d068      	beq.n	80068d0 <DMA_List_Init+0x160>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a72      	ldr	r2, [pc, #456]	@ (80069cc <DMA_List_Init+0x25c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d063      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a70      	ldr	r2, [pc, #448]	@ (80069d0 <DMA_List_Init+0x260>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d05e      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a6f      	ldr	r2, [pc, #444]	@ (80069d4 <DMA_List_Init+0x264>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d059      	beq.n	80068d0 <DMA_List_Init+0x160>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a6d      	ldr	r2, [pc, #436]	@ (80069d8 <DMA_List_Init+0x268>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d054      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6c      	ldr	r2, [pc, #432]	@ (80069dc <DMA_List_Init+0x26c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d04f      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a6a      	ldr	r2, [pc, #424]	@ (80069e0 <DMA_List_Init+0x270>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d04a      	beq.n	80068d0 <DMA_List_Init+0x160>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a69      	ldr	r2, [pc, #420]	@ (80069e4 <DMA_List_Init+0x274>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d045      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a67      	ldr	r2, [pc, #412]	@ (80069e8 <DMA_List_Init+0x278>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d040      	beq.n	80068d0 <DMA_List_Init+0x160>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a66      	ldr	r2, [pc, #408]	@ (80069ec <DMA_List_Init+0x27c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d03b      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a64      	ldr	r2, [pc, #400]	@ (80069f0 <DMA_List_Init+0x280>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d036      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a63      	ldr	r2, [pc, #396]	@ (80069f4 <DMA_List_Init+0x284>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d031      	beq.n	80068d0 <DMA_List_Init+0x160>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a61      	ldr	r2, [pc, #388]	@ (80069f8 <DMA_List_Init+0x288>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d02c      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a60      	ldr	r2, [pc, #384]	@ (80069fc <DMA_List_Init+0x28c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d027      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a5e      	ldr	r2, [pc, #376]	@ (8006a00 <DMA_List_Init+0x290>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d022      	beq.n	80068d0 <DMA_List_Init+0x160>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a5d      	ldr	r2, [pc, #372]	@ (8006a04 <DMA_List_Init+0x294>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d01d      	beq.n	80068d0 <DMA_List_Init+0x160>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a5b      	ldr	r2, [pc, #364]	@ (8006a08 <DMA_List_Init+0x298>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d018      	beq.n	80068d0 <DMA_List_Init+0x160>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a5a      	ldr	r2, [pc, #360]	@ (8006a0c <DMA_List_Init+0x29c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <DMA_List_Init+0x160>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a58      	ldr	r2, [pc, #352]	@ (8006a10 <DMA_List_Init+0x2a0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <DMA_List_Init+0x160>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a57      	ldr	r2, [pc, #348]	@ (8006a14 <DMA_List_Init+0x2a4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <DMA_List_Init+0x160>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a55      	ldr	r2, [pc, #340]	@ (8006a18 <DMA_List_Init+0x2a8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <DMA_List_Init+0x160>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a54      	ldr	r2, [pc, #336]	@ (8006a1c <DMA_List_Init+0x2ac>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d101      	bne.n	80068d4 <DMA_List_Init+0x164>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <DMA_List_Init+0x166>
 80068d4:	2300      	movs	r3, #0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2200      	movs	r2, #0
 8006910:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2200      	movs	r2, #0
 8006920:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a36      	ldr	r2, [pc, #216]	@ (8006a00 <DMA_List_Init+0x290>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <DMA_List_Init+0x202>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a34      	ldr	r2, [pc, #208]	@ (8006a04 <DMA_List_Init+0x294>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01d      	beq.n	8006972 <DMA_List_Init+0x202>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a33      	ldr	r2, [pc, #204]	@ (8006a08 <DMA_List_Init+0x298>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <DMA_List_Init+0x202>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a31      	ldr	r2, [pc, #196]	@ (8006a0c <DMA_List_Init+0x29c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <DMA_List_Init+0x202>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a30      	ldr	r2, [pc, #192]	@ (8006a10 <DMA_List_Init+0x2a0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <DMA_List_Init+0x202>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2e      	ldr	r2, [pc, #184]	@ (8006a14 <DMA_List_Init+0x2a4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <DMA_List_Init+0x202>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2d      	ldr	r2, [pc, #180]	@ (8006a18 <DMA_List_Init+0x2a8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <DMA_List_Init+0x202>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2b      	ldr	r2, [pc, #172]	@ (8006a1c <DMA_List_Init+0x2ac>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <DMA_List_Init+0x206>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <DMA_List_Init+0x208>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2200      	movs	r2, #0
 800698a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	40020050 	.word	0x40020050
 80069a4:	50020050 	.word	0x50020050
 80069a8:	400200d0 	.word	0x400200d0
 80069ac:	500200d0 	.word	0x500200d0
 80069b0:	40020150 	.word	0x40020150
 80069b4:	50020150 	.word	0x50020150
 80069b8:	400201d0 	.word	0x400201d0
 80069bc:	500201d0 	.word	0x500201d0
 80069c0:	40020250 	.word	0x40020250
 80069c4:	50020250 	.word	0x50020250
 80069c8:	400202d0 	.word	0x400202d0
 80069cc:	500202d0 	.word	0x500202d0
 80069d0:	40020350 	.word	0x40020350
 80069d4:	50020350 	.word	0x50020350
 80069d8:	400203d0 	.word	0x400203d0
 80069dc:	500203d0 	.word	0x500203d0
 80069e0:	40020450 	.word	0x40020450
 80069e4:	50020450 	.word	0x50020450
 80069e8:	400204d0 	.word	0x400204d0
 80069ec:	500204d0 	.word	0x500204d0
 80069f0:	40020550 	.word	0x40020550
 80069f4:	50020550 	.word	0x50020550
 80069f8:	400205d0 	.word	0x400205d0
 80069fc:	500205d0 	.word	0x500205d0
 8006a00:	40020650 	.word	0x40020650
 8006a04:	50020650 	.word	0x50020650
 8006a08:	400206d0 	.word	0x400206d0
 8006a0c:	500206d0 	.word	0x500206d0
 8006a10:	40020750 	.word	0x40020750
 8006a14:	50020750 	.word	0x50020750
 8006a18:	400207d0 	.word	0x400207d0
 8006a1c:	500207d0 	.word	0x500207d0

08006a20 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006a32:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006a38:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006a3e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006a44:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d017      	beq.n	8006a86 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	051b      	lsls	r3, r3, #20
 8006a6c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006a70:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	3b01      	subs	r3, #1
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006a7e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006a80:	431a      	orrs	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	f240 237f 	movw	r3, #639	@ 0x27f
 8006a92:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006a94:	431a      	orrs	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa2:	d10c      	bne.n	8006abe <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	605a      	str	r2, [r3, #4]
 8006abc:	e00a      	b.n	8006ad4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac6:	d105      	bne.n	8006ad4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00f      	beq.n	8006afc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006af4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006af6:	431a      	orrs	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d04e      	beq.n	8006bb0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	0419      	lsls	r1, r3, #16
 8006b1e:	4b67      	ldr	r3, [pc, #412]	@ (8006cbc <DMA_List_BuildNode+0x29c>)
 8006b20:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006b22:	431a      	orrs	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	da06      	bge.n	8006b3e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	e005      	b.n	8006b4a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da06      	bge.n	8006b60 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	609a      	str	r2, [r3, #8]
 8006b5e:	e005      	b.n	8006b6c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da06      	bge.n	8006b82 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	e005      	b.n	8006b8e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da06      	bge.n	8006ba4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	609a      	str	r2, [r3, #8]
 8006ba2:	e005      	b.n	8006bb0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d059      	beq.n	8006c80 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da09      	bge.n	8006be8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd8:	425b      	negs	r3, r3
 8006bda:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	615a      	str	r2, [r3, #20]
 8006be6:	e005      	b.n	8006bf4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bec:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da0d      	bge.n	8006c18 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c00:	425b      	negs	r3, r3
 8006c02:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695a      	ldr	r2, [r3, #20]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	0419      	lsls	r1, r3, #16
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <DMA_List_BuildNode+0x2a0>)
 8006c0e:	400b      	ands	r3, r1
 8006c10:	431a      	orrs	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	615a      	str	r2, [r3, #20]
 8006c16:	e009      	b.n	8006c2c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c20:	0419      	lsls	r1, r3, #16
 8006c22:	4b27      	ldr	r3, [pc, #156]	@ (8006cc0 <DMA_List_BuildNode+0x2a0>)
 8006c24:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006c26:	431a      	orrs	r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da08      	bge.n	8006c46 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c38:	425b      	negs	r3, r3
 8006c3a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	619a      	str	r2, [r3, #24]
 8006c44:	e004      	b.n	8006c50 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da0b      	bge.n	8006c70 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5c:	425b      	negs	r3, r3
 8006c5e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	619a      	str	r2, [r3, #24]
 8006c6e:	e007      	b.n	8006c80 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c78:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d006      	beq.n	8006ca2 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006ca0:	e005      	b.n	8006cae <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	07ff0000 	.word	0x07ff0000
 8006cc0:	1fff0000 	.word	0x1fff0000

08006cc4 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0208 	and.w	r2, r3, #8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0203 	and.w	r2, r3, #3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d12:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006d1c:	0d1b      	lsrs	r3, r3, #20
 8006d1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d22:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	4b66      	ldr	r3, [pc, #408]	@ (8006ed4 <DMA_List_GetNodeConfig+0x210>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d5e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d66:	60da      	str	r2, [r3, #12]
 8006d68:	e013      	b.n	8006d92 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	e002      	b.n	8006d92 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d008      	beq.n	8006df8 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	0c1b      	lsrs	r3, r3, #16
 8006dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006df0:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006df6:	e002      	b.n	8006dfe <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d04a      	beq.n	8006eb0 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e24:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006e26:	89fa      	ldrh	r2, [r7, #14]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e38:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006e3a:	89fa      	ldrh	r2, [r7, #14]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	425a      	negs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e66:	425a      	negs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006e72:	89fa      	ldrh	r2, [r7, #14]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006e80:	89fa      	ldrh	r2, [r7, #14]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e96:	425a      	negs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	da11      	bge.n	8006ec8 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea8:	425a      	negs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006eae:	e00b      	b.n	8006ec8 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	0c002000 	.word	0x0c002000

08006ed8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	0c1b      	lsrs	r3, r3, #16
 8006ef0:	041b      	lsls	r3, r3, #16
 8006ef2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e00a      	b.n	8006f1a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	e004      	b.n	8006f1a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d001      	beq.n	8006f2a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	e00e      	b.n	8006f76 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e006      	b.n	8006f76 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d001      	beq.n	8006f8c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e00b      	b.n	8006fa4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d001      	beq.n	8006fa2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e000      	b.n	8006fa4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00c      	beq.n	8006fe2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8007008 <DMA_List_GetCLLRNodeInfo+0x58>)
 8006fd2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00f      	beq.n	8006ffa <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2207      	movs	r2, #7
 8006fde:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006fe0:	e00b      	b.n	8006ffa <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4a08      	ldr	r2, [pc, #32]	@ (800700c <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006fec:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2205      	movs	r2, #5
 8006ff8:	601a      	str	r2, [r3, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	fe010000 	.word	0xfe010000
 800700c:	f8010000 	.word	0xf8010000

08007010 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007010:	b480      	push	{r7}
 8007012:	b089      	sub	sp, #36	@ 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d142      	bne.n	80070ba <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007034:	e01d      	b.n	8007072 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d107      	bne.n	800704c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007046:	4013      	ands	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	e00f      	b.n	800706c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	0c1b      	lsrs	r3, r3, #16
 8007056:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4413      	add	r3, r2
 800705c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007064:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007068:	4013      	ands	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	3301      	adds	r3, #1
 8007070:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	429a      	cmp	r2, r3
 800707a:	d3dc      	bcc.n	8007036 <DMA_List_FindNode+0x26>
 800707c:	e029      	b.n	80070d2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d107      	bne.n	8007094 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800708e:	4013      	ands	r3, r2
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e00f      	b.n	80070b4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	4413      	add	r3, r2
 80070a4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80070ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070b0:	4013      	ands	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	3301      	adds	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d206      	bcs.n	80070d2 <DMA_List_FindNode+0xc2>
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070ca:	4013      	ands	r3, r2
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d1d5      	bne.n	800707e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070de:	4013      	ands	r3, r2
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d001      	beq.n	80070ea <DMA_List_FindNode+0xda>
    {
      return 1U;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e02b      	b.n	8007142 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	0c1b      	lsrs	r3, r3, #16
 80070f6:	041b      	lsls	r3, r3, #16
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	461a      	mov	r2, r3
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	461a      	mov	r2, r3
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007130:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3724      	adds	r7, #36	@ 0x24
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007150:	b480      	push	{r7}
 8007152:	b089      	sub	sp, #36	@ 0x24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007162:	e1ba      	b.n	80074da <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	2101      	movs	r1, #1
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	fa01 f303 	lsl.w	r3, r1, r3
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 81aa 	beq.w	80074d4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a55      	ldr	r2, [pc, #340]	@ (80072d8 <HAL_GPIO_Init+0x188>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d15d      	bne.n	8007244 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800718e:	2201      	movs	r2, #1
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	fa02 f303 	lsl.w	r3, r2, r3
 8007196:	43db      	mvns	r3, r3
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	4013      	ands	r3, r2
 800719c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f003 0201 	and.w	r2, r3, #1
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80071b8:	4a48      	ldr	r2, [pc, #288]	@ (80072dc <HAL_GPIO_Init+0x18c>)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071c0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80071c2:	4a46      	ldr	r2, [pc, #280]	@ (80072dc <HAL_GPIO_Init+0x18c>)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4413      	add	r3, r2
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	08da      	lsrs	r2, r3, #3
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	3208      	adds	r2, #8
 80071d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	220f      	movs	r2, #15
 80071e6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ea:	43db      	mvns	r3, r3
 80071ec:	69fa      	ldr	r2, [r7, #28]
 80071ee:	4013      	ands	r3, r2
 80071f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	220b      	movs	r2, #11
 80071fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	4313      	orrs	r3, r2
 8007204:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	08da      	lsrs	r2, r3, #3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	3208      	adds	r2, #8
 800720e:	69f9      	ldr	r1, [r7, #28]
 8007210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	2203      	movs	r2, #3
 8007220:	fa02 f303 	lsl.w	r3, r2, r3
 8007224:	43db      	mvns	r3, r3
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	4013      	ands	r3, r2
 800722a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	2202      	movs	r2, #2
 8007232:	fa02 f303 	lsl.w	r3, r2, r3
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	4313      	orrs	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e067      	b.n	8007314 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d003      	beq.n	8007254 <HAL_GPIO_Init+0x104>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b12      	cmp	r3, #18
 8007252:	d145      	bne.n	80072e0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	08da      	lsrs	r2, r3, #3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3208      	adds	r2, #8
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	220f      	movs	r2, #15
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	4013      	ands	r3, r2
 8007276:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	4313      	orrs	r3, r2
 8007290:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	08da      	lsrs	r2, r3, #3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3208      	adds	r2, #8
 800729a:	69f9      	ldr	r1, [r7, #28]
 800729c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	2203      	movs	r2, #3
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	43db      	mvns	r3, r3
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	4013      	ands	r3, r2
 80072b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f003 0203 	and.w	r2, r3, #3
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e01e      	b.n	8007314 <HAL_GPIO_Init+0x1c4>
 80072d6:	bf00      	nop
 80072d8:	46020000 	.word	0x46020000
 80072dc:	080110f4 	.word	0x080110f4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	2203      	movs	r2, #3
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	4013      	ands	r3, r2
 80072f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 0203 	and.w	r2, r3, #3
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	4313      	orrs	r3, r2
 800730c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d00b      	beq.n	8007334 <HAL_GPIO_Init+0x1e4>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d007      	beq.n	8007334 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007328:	2b11      	cmp	r3, #17
 800732a:	d003      	beq.n	8007334 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b12      	cmp	r3, #18
 8007332:	d130      	bne.n	8007396 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	2203      	movs	r2, #3
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	43db      	mvns	r3, r3
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	4013      	ands	r3, r2
 800734a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	4313      	orrs	r3, r2
 800735c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800736a:	2201      	movs	r2, #1
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	fa02 f303 	lsl.w	r3, r2, r3
 8007372:	43db      	mvns	r3, r3
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	4013      	ands	r3, r2
 8007378:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	091b      	lsrs	r3, r3, #4
 8007380:	f003 0201 	and.w	r2, r3, #1
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	fa02 f303 	lsl.w	r3, r2, r3
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	4313      	orrs	r3, r2
 800738e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d017      	beq.n	80073ce <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	2203      	movs	r2, #3
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	43db      	mvns	r3, r3
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	4013      	ands	r3, r2
 80073b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d07c      	beq.n	80074d4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80073da:	4a47      	ldr	r2, [pc, #284]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	089b      	lsrs	r3, r3, #2
 80073e0:	3318      	adds	r3, #24
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	220f      	movs	r2, #15
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	43db      	mvns	r3, r3
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	4013      	ands	r3, r2
 80073fc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	0a9a      	lsrs	r2, r3, #10
 8007402:	4b3e      	ldr	r3, [pc, #248]	@ (80074fc <HAL_GPIO_Init+0x3ac>)
 8007404:	4013      	ands	r3, r2
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	f002 0203 	and.w	r2, r2, #3
 800740c:	00d2      	lsls	r2, r2, #3
 800740e:	4093      	lsls	r3, r2
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	4313      	orrs	r3, r2
 8007414:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007416:	4938      	ldr	r1, [pc, #224]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	089b      	lsrs	r3, r3, #2
 800741c:	3318      	adds	r3, #24
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007424:	4b34      	ldr	r3, [pc, #208]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	43db      	mvns	r3, r3
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	4013      	ands	r3, r2
 8007432:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4313      	orrs	r3, r2
 8007446:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007448:	4a2b      	ldr	r2, [pc, #172]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800744e:	4b2a      	ldr	r3, [pc, #168]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	43db      	mvns	r3, r3
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	4013      	ands	r3, r2
 800745c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007472:	4a21      	ldr	r2, [pc, #132]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007478:	4b1f      	ldr	r3, [pc, #124]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 800747a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800747e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	43db      	mvns	r3, r3
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	4013      	ands	r3, r2
 8007488:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800749e:	4a16      	ldr	r2, [pc, #88]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80074a6:	4b14      	ldr	r3, [pc, #80]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 80074a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	4013      	ands	r3, r2
 80074b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80074cc:	4a0a      	ldr	r2, [pc, #40]	@ (80074f8 <HAL_GPIO_Init+0x3a8>)
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	3301      	adds	r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	fa22 f303 	lsr.w	r3, r2, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f47f ae3d 	bne.w	8007164 <HAL_GPIO_Init+0x14>
  }
}
 80074ea:	bf00      	nop
 80074ec:	bf00      	nop
 80074ee:	3724      	adds	r7, #36	@ 0x24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	46022000 	.word	0x46022000
 80074fc:	002f7f7f 	.word	0x002f7f7f

08007500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	807b      	strh	r3, [r7, #2]
 800750c:	4613      	mov	r3, r2
 800750e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007510:	787b      	ldrb	r3, [r7, #1]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007516:	887a      	ldrh	r2, [r7, #2]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800751c:	e002      	b.n	8007524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800751e:	887a      	ldrh	r2, [r7, #2]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800753a:	4b0f      	ldr	r3, [pc, #60]	@ (8007578 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	4013      	ands	r3, r2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d006      	beq.n	8007554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007546:	4a0c      	ldr	r2, [pc, #48]	@ (8007578 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f814 	bl	800757c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007554:	4b08      	ldr	r3, [pc, #32]	@ (8007578 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d006      	beq.n	800756e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007560:	4a05      	ldr	r2, [pc, #20]	@ (8007578 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f812 	bl	8007592 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	46022000 	.word	0x46022000

0800757c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	4603      	mov	r3, r0
 800759a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e08d      	b.n	80076d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fa fa7a 	bl	8001ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2224      	movs	r2, #36	@ 0x24
 80075d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80075f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007608:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d107      	bne.n	8007622 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	e006      	b.n	8007630 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800762e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d108      	bne.n	800764a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007646:	605a      	str	r2, [r3, #4]
 8007648:	e007      	b.n	800765a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007658:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800767c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	69d9      	ldr	r1, [r3, #28]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1a      	ldr	r2, [r3, #32]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	461a      	mov	r2, r3
 80076ec:	460b      	mov	r3, r1
 80076ee:	817b      	strh	r3, [r7, #10]
 80076f0:	4613      	mov	r3, r2
 80076f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	f040 80da 	bne.w	80078b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_I2C_Master_Transmit+0x30>
 800770c:	2302      	movs	r3, #2
 800770e:	e0d3      	b.n	80078b8 <HAL_I2C_Master_Transmit+0x1d8>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007718:	f7fb f8fc 	bl	8002914 <HAL_GetTick>
 800771c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	2319      	movs	r3, #25
 8007724:	2201      	movs	r2, #1
 8007726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fe7d 	bl	800842a <I2C_WaitOnFlagUntilTimeout>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e0be      	b.n	80078b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2221      	movs	r2, #33	@ 0x21
 800773e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2210      	movs	r2, #16
 8007746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	893a      	ldrh	r2, [r7, #8]
 800775a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	2bff      	cmp	r3, #255	@ 0xff
 800776a:	d90e      	bls.n	800778a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	22ff      	movs	r2, #255	@ 0xff
 8007770:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007776:	b2da      	uxtb	r2, r3
 8007778:	8979      	ldrh	r1, [r7, #10]
 800777a:	4b51      	ldr	r3, [pc, #324]	@ (80078c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f001 f814 	bl	80087b0 <I2C_TransferConfig>
 8007788:	e06c      	b.n	8007864 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007798:	b2da      	uxtb	r2, r3
 800779a:	8979      	ldrh	r1, [r7, #10]
 800779c:	4b48      	ldr	r3, [pc, #288]	@ (80078c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 f803 	bl	80087b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80077aa:	e05b      	b.n	8007864 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	6a39      	ldr	r1, [r7, #32]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fe93 	bl	80084dc <I2C_WaitOnTXISFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e07b      	b.n	80078b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	781a      	ldrb	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d034      	beq.n	8007864 <HAL_I2C_Master_Transmit+0x184>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d130      	bne.n	8007864 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2200      	movs	r2, #0
 800780a:	2180      	movs	r1, #128	@ 0x80
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fe0c 	bl	800842a <I2C_WaitOnFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e04d      	b.n	80078b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2bff      	cmp	r3, #255	@ 0xff
 8007824:	d90e      	bls.n	8007844 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	22ff      	movs	r2, #255	@ 0xff
 800782a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007830:	b2da      	uxtb	r2, r3
 8007832:	8979      	ldrh	r1, [r7, #10]
 8007834:	2300      	movs	r3, #0
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 ffb7 	bl	80087b0 <I2C_TransferConfig>
 8007842:	e00f      	b.n	8007864 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007852:	b2da      	uxtb	r2, r3
 8007854:	8979      	ldrh	r1, [r7, #10]
 8007856:	2300      	movs	r3, #0
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 ffa6 	bl	80087b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d19e      	bne.n	80077ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	6a39      	ldr	r1, [r7, #32]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fe79 	bl	800856a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e01a      	b.n	80078b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2220      	movs	r2, #32
 8007888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6859      	ldr	r1, [r3, #4]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8007896:	400b      	ands	r3, r1
 8007898:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e000      	b.n	80078b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80078b6:	2302      	movs	r3, #2
  }
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	80002000 	.word	0x80002000
 80078c4:	fe00e800 	.word	0xfe00e800

080078c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	4798      	blx	r3
  }
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00f      	beq.n	800793e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792c:	f043 0201 	orr.w	r2, r3, #1
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800793c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00f      	beq.n	8007968 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007956:	f043 0208 	orr.w	r2, r3, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007966:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00f      	beq.n	8007992 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007980:	f043 0202 	orr.w	r2, r3, #2
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007990:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007996:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f003 030b 	and.w	r3, r3, #11
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fbe7 	bl	8008178 <I2C_ITError>
  }
}
 80079aa:	bf00      	nop
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70fb      	strb	r3, [r7, #3]
 80079e6:	4613      	mov	r3, r2
 80079e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b086      	sub	sp, #24
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <I2C_Slave_ISR_IT+0x24>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e0e2      	b.n	8007c1c <I2C_Slave_ISR_IT+0x1ea>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007a72:	6939      	ldr	r1, [r7, #16]
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f9b5 	bl	8007de4 <I2C_ITSlaveCplt>
 8007a7a:	e0ca      	b.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d04b      	beq.n	8007b1e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d046      	beq.n	8007b1e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d128      	bne.n	8007aec <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b28      	cmp	r3, #40	@ 0x28
 8007aa4:	d108      	bne.n	8007ab8 <I2C_Slave_ISR_IT+0x86>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aac:	d104      	bne.n	8007ab8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007aae:	6939      	ldr	r1, [r7, #16]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fb0d 	bl	80080d0 <I2C_ITListenCplt>
 8007ab6:	e031      	b.n	8007b1c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b29      	cmp	r3, #41	@ 0x29
 8007ac2:	d10e      	bne.n	8007ae2 <I2C_Slave_ISR_IT+0xb0>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007aca:	d00a      	beq.n	8007ae2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2210      	movs	r2, #16
 8007ad2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fc66 	bl	80083a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 f926 	bl	8007d2c <I2C_ITSlaveSeqCplt>
 8007ae0:	e01c      	b.n	8007b1c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007aea:	e08f      	b.n	8007c0c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2210      	movs	r2, #16
 8007af2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af8:	f043 0204 	orr.w	r2, r3, #4
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <I2C_Slave_ISR_IT+0xdc>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b0c:	d17e      	bne.n	8007c0c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b12:	4619      	mov	r1, r3
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fb2f 	bl	8008178 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007b1a:	e077      	b.n	8007c0c <I2C_Slave_ISR_IT+0x1da>
 8007b1c:	e076      	b.n	8007c0c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d02f      	beq.n	8007b88 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d02a      	beq.n	8007b88 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d018      	beq.n	8007b6e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b46:	b2d2      	uxtb	r2, r2
 8007b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d14b      	bne.n	8007c10 <I2C_Slave_ISR_IT+0x1de>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b7e:	d047      	beq.n	8007c10 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f8d3 	bl	8007d2c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007b86:	e043      	b.n	8007c10 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d009      	beq.n	8007ba6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007b9c:	6939      	ldr	r1, [r7, #16]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f840 	bl	8007c24 <I2C_ITAddrCplt>
 8007ba4:	e035      	b.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d030      	beq.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d02b      	beq.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d018      	beq.n	8007bf6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007bf4:	e00d      	b.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bfc:	d002      	beq.n	8007c04 <I2C_Slave_ISR_IT+0x1d2>
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d106      	bne.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f891 	bl	8007d2c <I2C_ITSlaveSeqCplt>
 8007c0a:	e002      	b.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007c0c:	bf00      	nop
 8007c0e:	e000      	b.n	8007c12 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007c10:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c3a:	2b28      	cmp	r3, #40	@ 0x28
 8007c3c:	d16a      	bne.n	8007d14 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	0c1b      	lsrs	r3, r3, #16
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	0c1b      	lsrs	r3, r3, #16
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007c5c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c6a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007c78:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d138      	bne.n	8007cf4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007c82:	897b      	ldrh	r3, [r7, #10]
 8007c84:	09db      	lsrs	r3, r3, #7
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	89bb      	ldrh	r3, [r7, #12]
 8007c8a:	4053      	eors	r3, r2
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f003 0306 	and.w	r3, r3, #6
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d11c      	bne.n	8007cd0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007c96:	897b      	ldrh	r3, [r7, #10]
 8007c98:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d13b      	bne.n	8007d24 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007cc2:	89ba      	ldrh	r2, [r7, #12]
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fe86 	bl	80079da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007cce:	e029      	b.n	8007d24 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007cd0:	893b      	ldrh	r3, [r7, #8]
 8007cd2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fd9b 	bl	8008814 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ce6:	89ba      	ldrh	r2, [r7, #12]
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fe74 	bl	80079da <HAL_I2C_AddrCallback>
}
 8007cf2:	e017      	b.n	8007d24 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fd8b 	bl	8008814 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d06:	89ba      	ldrh	r2, [r7, #12]
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fe64 	bl	80079da <HAL_I2C_AddrCallback>
}
 8007d12:	e007      	b.n	8007d24 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e00c      	b.n	8007d7a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d78:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b29      	cmp	r3, #41	@ 0x29
 8007d84:	d112      	bne.n	8007dac <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2228      	movs	r2, #40	@ 0x28
 8007d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2221      	movs	r2, #33	@ 0x21
 8007d92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007d94:	2101      	movs	r1, #1
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fd3c 	bl	8008814 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff fe04 	bl	80079b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007daa:	e017      	b.n	8007ddc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db6:	d111      	bne.n	8007ddc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2228      	movs	r2, #40	@ 0x28
 8007dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2222      	movs	r2, #34	@ 0x22
 8007dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007dc6:	2102      	movs	r1, #2
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fd23 	bl	8008814 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fdf5 	bl	80079c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007de4:	b590      	push	{r4, r7, lr}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e06:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	2b21      	cmp	r3, #33	@ 0x21
 8007e14:	d002      	beq.n	8007e1c <I2C_ITSlaveCplt+0x38>
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b29      	cmp	r3, #41	@ 0x29
 8007e1a:	d108      	bne.n	8007e2e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007e1c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fcf7 	bl	8008814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2221      	movs	r2, #33	@ 0x21
 8007e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e2c:	e019      	b.n	8007e62 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	2b22      	cmp	r3, #34	@ 0x22
 8007e32:	d002      	beq.n	8007e3a <I2C_ITSlaveCplt+0x56>
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e38:	d108      	bne.n	8007e4c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007e3a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fce8 	bl	8008814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2222      	movs	r2, #34	@ 0x22
 8007e48:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e4a:	e00a      	b.n	8007e62 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	2b28      	cmp	r3, #40	@ 0x28
 8007e50:	d107      	bne.n	8007e62 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007e52:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fcdc 	bl	8008814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e70:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6859      	ldr	r1, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	4b92      	ldr	r3, [pc, #584]	@ (80080c8 <I2C_ITSlaveCplt+0x2e4>)
 8007e7e:	400b      	ands	r3, r1
 8007e80:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa8f 	bl	80083a6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01c      	beq.n	8007ecc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ea0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d031      	beq.n	8007f0e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb2:	b29c      	uxth	r4, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe fc49 	bl	8006750 <HAL_DMAEx_GetFifoLevel>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	4423      	add	r3, r4
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007eca:	e020      	b.n	8007f0e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d01b      	beq.n	8007f0e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ee4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00f      	beq.n	8007f0e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef6:	b29c      	uxth	r4, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fc27 	bl	8006750 <HAL_DMAEx_GetFifoLevel>
 8007f02:	4603      	mov	r3, r0
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	4423      	add	r3, r4
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d020      	beq.n	8007f5a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f023 0304 	bic.w	r3, r3, #4
 8007f1e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00c      	beq.n	8007f5a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f44:	3b01      	subs	r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f68:	f043 0204 	orr.w	r2, r3, #4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f003 0310 	and.w	r3, r3, #16
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d049      	beq.n	800800e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d044      	beq.n	800800e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d128      	bne.n	8007fe0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b28      	cmp	r3, #40	@ 0x28
 8007f98:	d108      	bne.n	8007fac <I2C_ITSlaveCplt+0x1c8>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fa0:	d104      	bne.n	8007fac <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007fa2:	6979      	ldr	r1, [r7, #20]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f893 	bl	80080d0 <I2C_ITListenCplt>
 8007faa:	e030      	b.n	800800e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b29      	cmp	r3, #41	@ 0x29
 8007fb6:	d10e      	bne.n	8007fd6 <I2C_ITSlaveCplt+0x1f2>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fbe:	d00a      	beq.n	8007fd6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2210      	movs	r2, #16
 8007fc6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9ec 	bl	80083a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff feac 	bl	8007d2c <I2C_ITSlaveSeqCplt>
 8007fd4:	e01b      	b.n	800800e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2210      	movs	r2, #16
 8007fdc:	61da      	str	r2, [r3, #28]
 8007fde:	e016      	b.n	800800e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2210      	movs	r2, #16
 8007fe6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fec:	f043 0204 	orr.w	r2, r3, #4
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <I2C_ITSlaveCplt+0x21e>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008000:	d105      	bne.n	800800e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8b5 	bl	8008178 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f8a4 	bl	8008178 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b28      	cmp	r3, #40	@ 0x28
 800803a:	d141      	bne.n	80080c0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800803c:	6979      	ldr	r1, [r7, #20]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f846 	bl	80080d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008044:	e03c      	b.n	80080c0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800804e:	d014      	beq.n	800807a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fe6b 	bl	8007d2c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1c      	ldr	r2, [pc, #112]	@ (80080cc <I2C_ITSlaveCplt+0x2e8>)
 800805a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fcbf 	bl	80079f6 <HAL_I2C_ListenCpltCallback>
}
 8008078:	e022      	b.n	80080c0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b22      	cmp	r3, #34	@ 0x22
 8008084:	d10e      	bne.n	80080a4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff fc92 	bl	80079c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80080a2:	e00d      	b.n	80080c0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fc79 	bl	80079b2 <HAL_I2C_SlaveTxCpltCallback>
}
 80080c0:	bf00      	nop
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd90      	pop	{r4, r7, pc}
 80080c8:	fe00e800 	.word	0xfe00e800
 80080cc:	ffff0000 	.word	0xffff0000

080080d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a25      	ldr	r2, [pc, #148]	@ (8008174 <I2C_ITListenCplt+0xa4>)
 80080de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d022      	beq.n	800814c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d012      	beq.n	800814c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008144:	f043 0204 	orr.w	r2, r3, #4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800814c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb5f 	bl	8008814 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2210      	movs	r2, #16
 800815c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff fc45 	bl	80079f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	ffff0000 	.word	0xffff0000

08008178 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008188:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a6d      	ldr	r2, [pc, #436]	@ (800834c <I2C_ITError+0x1d4>)
 8008196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b28      	cmp	r3, #40	@ 0x28
 80081ae:	d005      	beq.n	80081bc <I2C_ITError+0x44>
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b29      	cmp	r3, #41	@ 0x29
 80081b4:	d002      	beq.n	80081bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ba:	d10b      	bne.n	80081d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081bc:	2103      	movs	r1, #3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fb28 	bl	8008814 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2228      	movs	r2, #40	@ 0x28
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a60      	ldr	r2, [pc, #384]	@ (8008350 <I2C_ITError+0x1d8>)
 80081d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80081d2:	e030      	b.n	8008236 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081d4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fb1b 	bl	8008814 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f8e1 	bl	80083a6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b60      	cmp	r3, #96	@ 0x60
 80081ee:	d01f      	beq.n	8008230 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b20      	cmp	r3, #32
 8008204:	d114      	bne.n	8008230 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	2b10      	cmp	r3, #16
 8008212:	d109      	bne.n	8008228 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2210      	movs	r2, #16
 800821a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008220:	f043 0204 	orr.w	r2, r3, #4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2220      	movs	r2, #32
 800822e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	2b00      	cmp	r3, #0
 8008242:	d039      	beq.n	80082b8 <I2C_ITError+0x140>
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b11      	cmp	r3, #17
 8008248:	d002      	beq.n	8008250 <I2C_ITError+0xd8>
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b21      	cmp	r3, #33	@ 0x21
 800824e:	d133      	bne.n	80082b8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800825a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800825e:	d107      	bne.n	8008270 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800826e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008274:	4618      	mov	r0, r3
 8008276:	f7fd fabf 	bl	80057f8 <HAL_DMA_GetState>
 800827a:	4603      	mov	r3, r0
 800827c:	2b01      	cmp	r3, #1
 800827e:	d017      	beq.n	80082b0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008284:	4a33      	ldr	r2, [pc, #204]	@ (8008354 <I2C_ITError+0x1dc>)
 8008286:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008294:	4618      	mov	r0, r3
 8008296:	f7fd f925 	bl	80054e4 <HAL_DMA_Abort_IT>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d04d      	beq.n	800833c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80082aa:	4610      	mov	r0, r2
 80082ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082ae:	e045      	b.n	800833c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f851 	bl	8008358 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082b6:	e041      	b.n	800833c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d039      	beq.n	8008334 <I2C_ITError+0x1bc>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b12      	cmp	r3, #18
 80082c4:	d002      	beq.n	80082cc <I2C_ITError+0x154>
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2b22      	cmp	r3, #34	@ 0x22
 80082ca:	d133      	bne.n	8008334 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082da:	d107      	bne.n	80082ec <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd fa81 	bl	80057f8 <HAL_DMA_GetState>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d017      	beq.n	800832c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008300:	4a14      	ldr	r2, [pc, #80]	@ (8008354 <I2C_ITError+0x1dc>)
 8008302:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008310:	4618      	mov	r0, r3
 8008312:	f7fd f8e7 	bl	80054e4 <HAL_DMA_Abort_IT>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d011      	beq.n	8008340 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008326:	4610      	mov	r0, r2
 8008328:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800832a:	e009      	b.n	8008340 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f813 	bl	8008358 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008332:	e005      	b.n	8008340 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f80f 	bl	8008358 <I2C_TreatErrorCallback>
  }
}
 800833a:	e002      	b.n	8008342 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800833c:	bf00      	nop
 800833e:	e000      	b.n	8008342 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008340:	bf00      	nop
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	ffff0000 	.word	0xffff0000
 8008350:	08007a33 	.word	0x08007a33
 8008354:	080083ef 	.word	0x080083ef

08008358 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b60      	cmp	r3, #96	@ 0x60
 800836a:	d10e      	bne.n	800838a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fb4b 	bl	8007a1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008388:	e009      	b.n	800839e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff fb36 	bl	8007a0a <HAL_I2C_ErrorCallback>
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d103      	bne.n	80083c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2200      	movs	r2, #0
 80083c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d007      	beq.n	80083e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	699a      	ldr	r2, [r3, #24]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0201 	orr.w	r2, r2, #1
 80083e0:	619a      	str	r2, [r3, #24]
  }
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008408:	2200      	movs	r2, #0
 800840a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008418:	2200      	movs	r2, #0
 800841a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7ff ff9b 	bl	8008358 <I2C_TreatErrorCallback>
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	603b      	str	r3, [r7, #0]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800843a:	e03b      	b.n	80084b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f8d5 	bl	80085f0 <I2C_IsErrorOccurred>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e041      	b.n	80084d4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008456:	d02d      	beq.n	80084b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008458:	f7fa fa5c 	bl	8002914 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d302      	bcc.n	800846e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d122      	bne.n	80084b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699a      	ldr	r2, [r3, #24]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	4013      	ands	r3, r2
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	429a      	cmp	r2, r3
 800847c:	bf0c      	ite	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	2300      	movne	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	429a      	cmp	r2, r3
 800848a:	d113      	bne.n	80084b4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008490:	f043 0220 	orr.w	r2, r3, #32
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e00f      	b.n	80084d4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699a      	ldr	r2, [r3, #24]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	4013      	ands	r3, r2
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bf0c      	ite	eq
 80084c4:	2301      	moveq	r3, #1
 80084c6:	2300      	movne	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d0b4      	beq.n	800843c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084e8:	e033      	b.n	8008552 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f87e 	bl	80085f0 <I2C_IsErrorOccurred>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e031      	b.n	8008562 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008504:	d025      	beq.n	8008552 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008506:	f7fa fa05 	bl	8002914 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	d302      	bcc.n	800851c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d11a      	bne.n	8008552 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b02      	cmp	r3, #2
 8008528:	d013      	beq.n	8008552 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800852e:	f043 0220 	orr.w	r2, r3, #32
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e007      	b.n	8008562 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b02      	cmp	r3, #2
 800855e:	d1c4      	bne.n	80084ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008576:	e02f      	b.n	80085d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 f837 	bl	80085f0 <I2C_IsErrorOccurred>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e02d      	b.n	80085e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858c:	f7fa f9c2 	bl	8002914 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	d302      	bcc.n	80085a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d11a      	bne.n	80085d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	f003 0320 	and.w	r3, r3, #32
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d013      	beq.n	80085d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b4:	f043 0220 	orr.w	r2, r3, #32
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2220      	movs	r2, #32
 80085c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e007      	b.n	80085e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d1c8      	bne.n	8008578 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	@ 0x28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b00      	cmp	r3, #0
 800861a:	d068      	beq.n	80086ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2210      	movs	r2, #16
 8008622:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008624:	e049      	b.n	80086ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862c:	d045      	beq.n	80086ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800862e:	f7fa f971 	bl	8002914 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	d302      	bcc.n	8008644 <I2C_IsErrorOccurred+0x54>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d13a      	bne.n	80086ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800864e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008656:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008666:	d121      	bne.n	80086ac <I2C_IsErrorOccurred+0xbc>
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800866e:	d01d      	beq.n	80086ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008670:	7cfb      	ldrb	r3, [r7, #19]
 8008672:	2b20      	cmp	r3, #32
 8008674:	d01a      	beq.n	80086ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008684:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008686:	f7fa f945 	bl	8002914 <HAL_GetTick>
 800868a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800868c:	e00e      	b.n	80086ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800868e:	f7fa f941 	bl	8002914 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b19      	cmp	r3, #25
 800869a:	d907      	bls.n	80086ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	f043 0320 	orr.w	r3, r3, #32
 80086a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80086aa:	e006      	b.n	80086ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d1e9      	bne.n	800868e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d003      	beq.n	80086d0 <I2C_IsErrorOccurred+0xe0>
 80086c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0aa      	beq.n	8008626 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2220      	movs	r2, #32
 80086de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	f043 0304 	orr.w	r3, r3, #4
 80086e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	f043 0301 	orr.w	r3, r3, #1
 8008706:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	f043 0308 	orr.w	r3, r3, #8
 8008728:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008732:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00b      	beq.n	800875c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	f043 0302 	orr.w	r3, r3, #2
 800874a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800875c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01c      	beq.n	800879e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fe1e 	bl	80083a6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6859      	ldr	r1, [r3, #4]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	4b0d      	ldr	r3, [pc, #52]	@ (80087ac <I2C_IsErrorOccurred+0x1bc>)
 8008776:	400b      	ands	r3, r1
 8008778:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	431a      	orrs	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800879e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3728      	adds	r7, #40	@ 0x28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	fe00e800 	.word	0xfe00e800

080087b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	607b      	str	r3, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	817b      	strh	r3, [r7, #10]
 80087be:	4613      	mov	r3, r2
 80087c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087c2:	897b      	ldrh	r3, [r7, #10]
 80087c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087c8:	7a7b      	ldrb	r3, [r7, #9]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	4313      	orrs	r3, r2
 80087da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	0d5b      	lsrs	r3, r3, #21
 80087ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80087ee:	4b08      	ldr	r3, [pc, #32]	@ (8008810 <I2C_TransferConfig+0x60>)
 80087f0:	430b      	orrs	r3, r1
 80087f2:	43db      	mvns	r3, r3
 80087f4:	ea02 0103 	and.w	r1, r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	430a      	orrs	r2, r1
 8008800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008802:	bf00      	nop
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	03ff63ff 	.word	0x03ff63ff

08008814 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008824:	887b      	ldrh	r3, [r7, #2]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00f      	beq.n	800884e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008834:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800883c:	b2db      	uxtb	r3, r3
 800883e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008842:	2b28      	cmp	r3, #40	@ 0x28
 8008844:	d003      	beq.n	800884e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800884c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800884e:	887b      	ldrh	r3, [r7, #2]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00f      	beq.n	8008878 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800885e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800886c:	2b28      	cmp	r3, #40	@ 0x28
 800886e:	d003      	beq.n	8008878 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008876:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800887c:	2b00      	cmp	r3, #0
 800887e:	da03      	bge.n	8008888 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008886:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008888:	887b      	ldrh	r3, [r7, #2]
 800888a:	2b10      	cmp	r3, #16
 800888c:	d103      	bne.n	8008896 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008894:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008896:	887b      	ldrh	r3, [r7, #2]
 8008898:	2b20      	cmp	r3, #32
 800889a:	d103      	bne.n	80088a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f043 0320 	orr.w	r3, r3, #32
 80088a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80088a4:	887b      	ldrh	r3, [r7, #2]
 80088a6:	2b40      	cmp	r3, #64	@ 0x40
 80088a8:	d103      	bne.n	80088b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6819      	ldr	r1, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	43da      	mvns	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	400a      	ands	r2, r1
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d138      	bne.n	8008958 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e032      	b.n	800895a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2224      	movs	r2, #36	@ 0x24
 8008900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6819      	ldr	r1, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	e000      	b.n	800895a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008958:	2302      	movs	r3, #2
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b20      	cmp	r3, #32
 800897a:	d139      	bne.n	80089f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008986:	2302      	movs	r3, #2
 8008988:	e033      	b.n	80089f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2224      	movs	r2, #36	@ 0x24
 8008996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 0201 	bic.w	r2, r2, #1
 80089a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80089b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e000      	b.n	80089f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089f0:	2302      	movs	r3, #2
  }
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
	...

08008a00 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	e007      	b.n	8008a2e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008a1e:	4b07      	ldr	r3, [pc, #28]	@ (8008a3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f023 0204 	bic.w	r2, r3, #4
 8008a26:	4905      	ldr	r1, [pc, #20]	@ (8008a3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	40030400 	.word	0x40030400

08008a40 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008a44:	4b05      	ldr	r3, [pc, #20]	@ (8008a5c <HAL_ICACHE_Enable+0x1c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a04      	ldr	r2, [pc, #16]	@ (8008a5c <HAL_ICACHE_Enable+0x1c>)
 8008a4a:	f043 0301 	orr.w	r3, r3, #1
 8008a4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	40030400 	.word	0x40030400

08008a60 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e0bf      	b.n	8008bf2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7f9 f90c 	bl	8001ca4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008aa2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6999      	ldr	r1, [r3, #24]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008ab8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6899      	ldr	r1, [r3, #8]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8008bfc <HAL_LTDC_Init+0x19c>)
 8008ad4:	400b      	ands	r3, r1
 8008ad6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6899      	ldr	r1, [r3, #8]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699a      	ldr	r2, [r3, #24]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68d9      	ldr	r1, [r3, #12]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b3e      	ldr	r3, [pc, #248]	@ (8008bfc <HAL_LTDC_Init+0x19c>)
 8008b02:	400b      	ands	r3, r1
 8008b04:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	041b      	lsls	r3, r3, #16
 8008b0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68d9      	ldr	r1, [r3, #12]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6919      	ldr	r1, [r3, #16]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	4b33      	ldr	r3, [pc, #204]	@ (8008bfc <HAL_LTDC_Init+0x19c>)
 8008b30:	400b      	ands	r3, r1
 8008b32:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b38:	041b      	lsls	r3, r3, #16
 8008b3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6919      	ldr	r1, [r3, #16]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6959      	ldr	r1, [r3, #20]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	4b27      	ldr	r3, [pc, #156]	@ (8008bfc <HAL_LTDC_Init+0x19c>)
 8008b5e:	400b      	ands	r3, r1
 8008b60:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	041b      	lsls	r3, r3, #16
 8008b68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6959      	ldr	r1, [r3, #20]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	431a      	orrs	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008b90:	041b      	lsls	r3, r3, #16
 8008b92:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0206 	orr.w	r2, r2, #6
 8008bce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	699a      	ldr	r2, [r3, #24]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	f000f800 	.word	0xf000f800

08008c00 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c16:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d023      	beq.n	8008c6a <HAL_LTDC_IRQHandler+0x6a>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01e      	beq.n	8008c6a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0204 	bic.w	r2, r2, #4
 8008c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2204      	movs	r2, #4
 8008c42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c4a:	f043 0201 	orr.w	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2204      	movs	r2, #4
 8008c58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f86f 	bl	8008d48 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d023      	beq.n	8008cbc <HAL_LTDC_IRQHandler+0xbc>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d01e      	beq.n	8008cbc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0202 	bic.w	r2, r2, #2
 8008c8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2202      	movs	r2, #2
 8008c94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c9c:	f043 0202 	orr.w	r2, r3, #2
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f846 	bl	8008d48 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d01b      	beq.n	8008cfe <HAL_LTDC_IRQHandler+0xfe>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d016      	beq.n	8008cfe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f82f 	bl	8008d5c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01b      	beq.n	8008d40 <HAL_LTDC_IRQHandler+0x140>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d016      	beq.n	8008d40 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0208 	bic.w	r2, r2, #8
 8008d20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2208      	movs	r2, #8
 8008d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f818 	bl	8008d70 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008d84:	b5b0      	push	{r4, r5, r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d101      	bne.n	8008d9e <HAL_LTDC_ConfigLayer+0x1a>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e02c      	b.n	8008df8 <HAL_LTDC_ConfigLayer+0x74>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2202      	movs	r2, #2
 8008daa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2134      	movs	r1, #52	@ 0x34
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	4413      	add	r3, r2
 8008dba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	461d      	mov	r5, r3
 8008dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	68b9      	ldr	r1, [r7, #8]
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f811 	bl	8008e00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2201      	movs	r2, #1
 8008de4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bdb0      	pop	{r4, r5, r7, pc}

08008e00 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	@ 0x24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	0c1b      	lsrs	r3, r3, #16
 8008e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e1c:	4413      	add	r3, r2
 8008e1e:	041b      	lsls	r3, r3, #16
 8008e20:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	01db      	lsls	r3, r3, #7
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3384      	adds	r3, #132	@ 0x84
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	6812      	ldr	r2, [r2, #0]
 8008e36:	4611      	mov	r1, r2
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	01d2      	lsls	r2, r2, #7
 8008e3c:	440a      	add	r2, r1
 8008e3e:	3284      	adds	r2, #132	@ 0x84
 8008e40:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008e44:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	0c1b      	lsrs	r3, r3, #16
 8008e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e56:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008e58:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	01db      	lsls	r3, r3, #7
 8008e64:	440b      	add	r3, r1
 8008e66:	3384      	adds	r3, #132	@ 0x84
 8008e68:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e6e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e7e:	4413      	add	r3, r2
 8008e80:	041b      	lsls	r3, r3, #16
 8008e82:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	01db      	lsls	r3, r3, #7
 8008e8e:	4413      	add	r3, r2
 8008e90:	3384      	adds	r3, #132	@ 0x84
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	6812      	ldr	r2, [r2, #0]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	01d2      	lsls	r2, r2, #7
 8008e9e:	440a      	add	r2, r1
 8008ea0:	3284      	adds	r2, #132	@ 0x84
 8008ea2:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008ea6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eb6:	4413      	add	r3, r2
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	01db      	lsls	r3, r3, #7
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3384      	adds	r3, #132	@ 0x84
 8008ec8:	4619      	mov	r1, r3
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	01db      	lsls	r3, r3, #7
 8008eda:	4413      	add	r3, r2
 8008edc:	3384      	adds	r3, #132	@ 0x84
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	6812      	ldr	r2, [r2, #0]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	01d2      	lsls	r2, r2, #7
 8008eea:	440a      	add	r2, r1
 8008eec:	3284      	adds	r2, #132	@ 0x84
 8008eee:	f023 0307 	bic.w	r3, r3, #7
 8008ef2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	01db      	lsls	r3, r3, #7
 8008efe:	4413      	add	r3, r2
 8008f00:	3384      	adds	r3, #132	@ 0x84
 8008f02:	461a      	mov	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008f1a:	041b      	lsls	r3, r3, #16
 8008f1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	061b      	lsls	r3, r3, #24
 8008f24:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	431a      	orrs	r2, r3
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	01db      	lsls	r3, r3, #7
 8008f40:	440b      	add	r3, r1
 8008f42:	3384      	adds	r3, #132	@ 0x84
 8008f44:	4619      	mov	r1, r3
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	01db      	lsls	r3, r3, #7
 8008f56:	4413      	add	r3, r2
 8008f58:	3384      	adds	r3, #132	@ 0x84
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	4611      	mov	r1, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	01d2      	lsls	r2, r2, #7
 8008f66:	440a      	add	r2, r1
 8008f68:	3284      	adds	r2, #132	@ 0x84
 8008f6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	01db      	lsls	r3, r3, #7
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3384      	adds	r3, #132	@ 0x84
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	01db      	lsls	r3, r3, #7
 8008f90:	4413      	add	r3, r2
 8008f92:	3384      	adds	r3, #132	@ 0x84
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	01d2      	lsls	r2, r2, #7
 8008fa0:	440a      	add	r2, r1
 8008fa2:	3284      	adds	r2, #132	@ 0x84
 8008fa4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008fa8:	f023 0307 	bic.w	r3, r3, #7
 8008fac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	69da      	ldr	r2, [r3, #28]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	68f9      	ldr	r1, [r7, #12]
 8008fb8:	6809      	ldr	r1, [r1, #0]
 8008fba:	4608      	mov	r0, r1
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	01c9      	lsls	r1, r1, #7
 8008fc0:	4401      	add	r1, r0
 8008fc2:	3184      	adds	r1, #132	@ 0x84
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	01db      	lsls	r3, r3, #7
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3384      	adds	r3, #132	@ 0x84
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fdc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d102      	bne.n	8008fec <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8008fe6:	2304      	movs	r3, #4
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	e01b      	b.n	8009024 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d102      	bne.n	8008ffa <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	e014      	b.n	8009024 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d00b      	beq.n	800901a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009006:	2b02      	cmp	r3, #2
 8009008:	d007      	beq.n	800901a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800900e:	2b03      	cmp	r3, #3
 8009010:	d003      	beq.n	800901a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009016:	2b07      	cmp	r3, #7
 8009018:	d102      	bne.n	8009020 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800901a:	2302      	movs	r3, #2
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	e001      	b.n	8009024 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009020:	2301      	movs	r3, #1
 8009022:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	01db      	lsls	r3, r3, #7
 800902e:	4413      	add	r3, r2
 8009030:	3384      	adds	r3, #132	@ 0x84
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	6812      	ldr	r2, [r2, #0]
 8009038:	4611      	mov	r1, r2
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	01d2      	lsls	r2, r2, #7
 800903e:	440a      	add	r2, r1
 8009040:	3284      	adds	r2, #132	@ 0x84
 8009042:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009046:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	fb02 f303 	mul.w	r3, r2, r3
 8009052:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6859      	ldr	r1, [r3, #4]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	1acb      	subs	r3, r1, r3
 800905e:	69f9      	ldr	r1, [r7, #28]
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	6809      	ldr	r1, [r1, #0]
 800906a:	4608      	mov	r0, r1
 800906c:	6879      	ldr	r1, [r7, #4]
 800906e:	01c9      	lsls	r1, r1, #7
 8009070:	4401      	add	r1, r0
 8009072:	3184      	adds	r1, #132	@ 0x84
 8009074:	4313      	orrs	r3, r2
 8009076:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	01db      	lsls	r3, r3, #7
 8009082:	4413      	add	r3, r2
 8009084:	3384      	adds	r3, #132	@ 0x84
 8009086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	6812      	ldr	r2, [r2, #0]
 800908c:	4611      	mov	r1, r2
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	01d2      	lsls	r2, r2, #7
 8009092:	440a      	add	r2, r1
 8009094:	3284      	adds	r2, #132	@ 0x84
 8009096:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800909a:	f023 0307 	bic.w	r3, r3, #7
 800909e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	461a      	mov	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	01db      	lsls	r3, r3, #7
 80090aa:	4413      	add	r3, r2
 80090ac:	3384      	adds	r3, #132	@ 0x84
 80090ae:	461a      	mov	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	01db      	lsls	r3, r3, #7
 80090c0:	4413      	add	r3, r2
 80090c2:	3384      	adds	r3, #132	@ 0x84
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	6812      	ldr	r2, [r2, #0]
 80090ca:	4611      	mov	r1, r2
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	01d2      	lsls	r2, r2, #7
 80090d0:	440a      	add	r2, r1
 80090d2:	3284      	adds	r2, #132	@ 0x84
 80090d4:	f043 0301 	orr.w	r3, r3, #1
 80090d8:	6013      	str	r3, [r2, #0]
}
 80090da:	bf00      	nop
 80090dc:	3724      	adds	r7, #36	@ 0x24
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af02      	add	r7, sp, #8
 80090ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0fe      	b.n	80092f6 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7f9 f841 	bl	8002194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2203      	movs	r2, #3
 8009116:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f007 fcdd 	bl	8010ade <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	7c1a      	ldrb	r2, [r3, #16]
 800912c:	f88d 2000 	strb.w	r2, [sp]
 8009130:	3304      	adds	r3, #4
 8009132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009134:	f007 fca4 	bl	8010a80 <USB_CoreInit>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2202      	movs	r2, #2
 8009142:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e0d5      	b.n	80092f6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f007 fcd5 	bl	8010b00 <USB_SetCurrentMode>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e0c6      	b.n	80092f6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
 800916c:	e04a      	b.n	8009204 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	3315      	adds	r3, #21
 800917e:	2201      	movs	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009182:	7bfa      	ldrb	r2, [r7, #15]
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	3314      	adds	r3, #20
 8009192:	7bfa      	ldrb	r2, [r7, #15]
 8009194:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009196:	7bfa      	ldrb	r2, [r7, #15]
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	b298      	uxth	r0, r3
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	4613      	mov	r3, r2
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	332e      	adds	r3, #46	@ 0x2e
 80091aa:	4602      	mov	r2, r0
 80091ac:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80091ae:	7bfa      	ldrb	r2, [r7, #15]
 80091b0:	6879      	ldr	r1, [r7, #4]
 80091b2:	4613      	mov	r3, r2
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	440b      	add	r3, r1
 80091bc:	3318      	adds	r3, #24
 80091be:	2200      	movs	r2, #0
 80091c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80091c2:	7bfa      	ldrb	r2, [r7, #15]
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	4613      	mov	r3, r2
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	440b      	add	r3, r1
 80091d0:	331c      	adds	r3, #28
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80091d6:	7bfa      	ldrb	r2, [r7, #15]
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	3320      	adds	r3, #32
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	440b      	add	r3, r1
 80091f8:	3324      	adds	r3, #36	@ 0x24
 80091fa:	2200      	movs	r2, #0
 80091fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	3301      	adds	r3, #1
 8009202:	73fb      	strb	r3, [r7, #15]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	7bfa      	ldrb	r2, [r7, #15]
 800920a:	429a      	cmp	r2, r3
 800920c:	d3af      	bcc.n	800916e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
 8009212:	e044      	b.n	800929e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009214:	7bfa      	ldrb	r2, [r7, #15]
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	4613      	mov	r3, r2
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	4413      	add	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	440b      	add	r3, r1
 8009222:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800923c:	7bfa      	ldrb	r2, [r7, #15]
 800923e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009240:	7bfa      	ldrb	r2, [r7, #15]
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	4613      	mov	r3, r2
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009256:	7bfa      	ldrb	r2, [r7, #15]
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800926c:	7bfa      	ldrb	r2, [r7, #15]
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009282:	7bfa      	ldrb	r2, [r7, #15]
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	4613      	mov	r3, r2
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	3301      	adds	r3, #1
 800929c:	73fb      	strb	r3, [r7, #15]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	791b      	ldrb	r3, [r3, #4]
 80092a2:	7bfa      	ldrb	r2, [r7, #15]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d3b5      	bcc.n	8009214 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7c1a      	ldrb	r2, [r3, #16]
 80092b0:	f88d 2000 	strb.w	r2, [sp]
 80092b4:	3304      	adds	r3, #4
 80092b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092b8:	f007 fc6e 	bl	8010b98 <USB_DevInit>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2202      	movs	r2, #2
 80092c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e013      	b.n	80092f6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7b1b      	ldrb	r3, [r3, #12]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d102      	bne.n	80092ea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f80a 	bl	80092fe <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f007 fe3b 	bl	8010f6a <USB_DevDisconnect>

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80092fe:	b480      	push	{r7}
 8009300:	b085      	sub	sp, #20
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800932c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009330:	f043 0303 	orr.w	r3, r3, #3
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
	...

08009348 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800934c:	4b05      	ldr	r3, [pc, #20]	@ (8009364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800934e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009350:	4a04      	ldr	r2, [pc, #16]	@ (8009364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009352:	f043 0301 	orr.w	r3, r3, #1
 8009356:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009358:	bf00      	nop
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	46020800 	.word	0x46020800

08009368 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009370:	4b39      	ldr	r3, [pc, #228]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009378:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d10b      	bne.n	800939a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009388:	d905      	bls.n	8009396 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800938a:	4b33      	ldr	r3, [pc, #204]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	4a32      	ldr	r2, [pc, #200]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009394:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	e057      	b.n	800944a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093a0:	d90a      	bls.n	80093b8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80093a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093b4:	60d3      	str	r3, [r2, #12]
 80093b6:	e007      	b.n	80093c8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80093b8:	4b27      	ldr	r3, [pc, #156]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80093c0:	4925      	ldr	r1, [pc, #148]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80093c8:	4b24      	ldr	r3, [pc, #144]	@ (800945c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a24      	ldr	r2, [pc, #144]	@ (8009460 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80093ce:	fba2 2303 	umull	r2, r3, r2, r3
 80093d2:	099b      	lsrs	r3, r3, #6
 80093d4:	2232      	movs	r2, #50	@ 0x32
 80093d6:	fb02 f303 	mul.w	r3, r2, r3
 80093da:	4a21      	ldr	r2, [pc, #132]	@ (8009460 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80093dc:	fba2 2303 	umull	r2, r3, r2, r3
 80093e0:	099b      	lsrs	r3, r3, #6
 80093e2:	3301      	adds	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80093e6:	e002      	b.n	80093ee <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80093ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_PWREx_ControlVoltageScaling+0x98>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1f3      	bne.n	80093e8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d01b      	beq.n	800943e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009406:	4b15      	ldr	r3, [pc, #84]	@ (800945c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a15      	ldr	r2, [pc, #84]	@ (8009460 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800940c:	fba2 2303 	umull	r2, r3, r2, r3
 8009410:	099b      	lsrs	r3, r3, #6
 8009412:	2232      	movs	r2, #50	@ 0x32
 8009414:	fb02 f303 	mul.w	r3, r2, r3
 8009418:	4a11      	ldr	r2, [pc, #68]	@ (8009460 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800941a:	fba2 2303 	umull	r2, r3, r2, r3
 800941e:	099b      	lsrs	r3, r3, #6
 8009420:	3301      	adds	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009424:	e002      	b.n	800942c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3b01      	subs	r3, #1
 800942a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800942c:	4b0a      	ldr	r3, [pc, #40]	@ (8009458 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800942e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1f3      	bne.n	8009426 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e000      	b.n	800944a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	46020800 	.word	0x46020800
 800945c:	20000000 	.word	0x20000000
 8009460:	10624dd3 	.word	0x10624dd3

08009464 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009468:	4b04      	ldr	r3, [pc, #16]	@ (800947c <HAL_PWREx_GetVoltageRange+0x18>)
 800946a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800946c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009470:	4618      	mov	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	46020800 	.word	0x46020800

08009480 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009488:	4b22      	ldr	r3, [pc, #136]	@ (8009514 <HAL_PWREx_ConfigSupply+0x94>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a22      	ldr	r2, [pc, #136]	@ (8009518 <HAL_PWREx_ConfigSupply+0x98>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	099b      	lsrs	r3, r3, #6
 8009494:	2232      	movs	r2, #50	@ 0x32
 8009496:	fb02 f303 	mul.w	r3, r2, r3
 800949a:	4a1f      	ldr	r2, [pc, #124]	@ (8009518 <HAL_PWREx_ConfigSupply+0x98>)
 800949c:	fba2 2303 	umull	r2, r3, r2, r3
 80094a0:	099b      	lsrs	r3, r3, #6
 80094a2:	3301      	adds	r3, #1
 80094a4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d113      	bne.n	80094d4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80094ac:	4b1b      	ldr	r3, [pc, #108]	@ (800951c <HAL_PWREx_ConfigSupply+0x9c>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	4a1a      	ldr	r2, [pc, #104]	@ (800951c <HAL_PWREx_ConfigSupply+0x9c>)
 80094b2:	f023 0302 	bic.w	r3, r3, #2
 80094b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80094b8:	e002      	b.n	80094c0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3b01      	subs	r3, #1
 80094be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80094c0:	4b16      	ldr	r3, [pc, #88]	@ (800951c <HAL_PWREx_ConfigSupply+0x9c>)
 80094c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d116      	bne.n	80094fa <HAL_PWREx_ConfigSupply+0x7a>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1f3      	bne.n	80094ba <HAL_PWREx_ConfigSupply+0x3a>
 80094d2:	e012      	b.n	80094fa <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80094d4:	4b11      	ldr	r3, [pc, #68]	@ (800951c <HAL_PWREx_ConfigSupply+0x9c>)
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	4a10      	ldr	r2, [pc, #64]	@ (800951c <HAL_PWREx_ConfigSupply+0x9c>)
 80094da:	f043 0302 	orr.w	r3, r3, #2
 80094de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80094e0:	e002      	b.n	80094e8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80094e8:	4b0c      	ldr	r3, [pc, #48]	@ (800951c <HAL_PWREx_ConfigSupply+0x9c>)
 80094ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <HAL_PWREx_ConfigSupply+0x7a>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1f3      	bne.n	80094e2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e000      	b.n	8009506 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000000 	.word	0x20000000
 8009518:	10624dd3 	.word	0x10624dd3
 800951c:	46020800 	.word	0x46020800

08009520 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009524:	4b05      	ldr	r3, [pc, #20]	@ (800953c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	4a04      	ldr	r2, [pc, #16]	@ (800953c <HAL_PWREx_EnableVddUSB+0x1c>)
 800952a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800952e:	6113      	str	r3, [r2, #16]
}
 8009530:	bf00      	nop
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	46020800 	.word	0x46020800

08009540 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009544:	4b05      	ldr	r3, [pc, #20]	@ (800955c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	4a04      	ldr	r2, [pc, #16]	@ (800955c <HAL_PWREx_EnableVddIO2+0x1c>)
 800954a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800954e:	6113      	str	r3, [r2, #16]
}
 8009550:	bf00      	nop
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	46020800 	.word	0x46020800

08009560 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009564:	4b05      	ldr	r3, [pc, #20]	@ (800957c <HAL_PWREx_EnableVddA+0x1c>)
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	4a04      	ldr	r2, [pc, #16]	@ (800957c <HAL_PWREx_EnableVddA+0x1c>)
 800956a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800956e:	6113      	str	r3, [r2, #16]
}
 8009570:	bf00      	nop
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	46020800 	.word	0x46020800

08009580 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009586:	f7ff ff6d 	bl	8009464 <HAL_PWREx_GetVoltageRange>
 800958a:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009592:	d003      	beq.n	800959c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800959a:	d107      	bne.n	80095ac <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800959c:	4b06      	ldr	r3, [pc, #24]	@ (80095b8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4a05      	ldr	r2, [pc, #20]	@ (80095b8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80095a2:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80095a6:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e000      	b.n	80095ae <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	46020800 	.word	0x46020800

080095bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08e      	sub	sp, #56	@ 0x38
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80095c4:	2300      	movs	r3, #0
 80095c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	f000 bec8 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095d6:	4b99      	ldr	r3, [pc, #612]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	f003 030c 	and.w	r3, r3, #12
 80095de:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095e0:	4b96      	ldr	r3, [pc, #600]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80095e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0310 	and.w	r3, r3, #16
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 816c 	beq.w	80098d0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80095f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <HAL_RCC_OscConfig+0x52>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	2b0c      	cmp	r3, #12
 8009602:	f040 80de 	bne.w	80097c2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009608:	2b01      	cmp	r3, #1
 800960a:	f040 80da 	bne.w	80097c2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d102      	bne.n	800961c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	f000 bea5 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009620:	4b86      	ldr	r3, [pc, #536]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <HAL_RCC_OscConfig+0x7a>
 800962c:	4b83      	ldr	r3, [pc, #524]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009634:	e005      	b.n	8009642 <HAL_RCC_OscConfig+0x86>
 8009636:	4b81      	ldr	r3, [pc, #516]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800963c:	041b      	lsls	r3, r3, #16
 800963e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009642:	4293      	cmp	r3, r2
 8009644:	d255      	bcs.n	80096f2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009650:	4618      	mov	r0, r3
 8009652:	f001 f9d9 	bl	800aa08 <RCC_SetFlashLatencyFromMSIRange>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	f000 be82 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009662:	4b76      	ldr	r3, [pc, #472]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	4a75      	ldr	r2, [pc, #468]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009668:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800966c:	6093      	str	r3, [r2, #8]
 800966e:	4b73      	ldr	r3, [pc, #460]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967a:	4970      	ldr	r1, [pc, #448]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800967c:	4313      	orrs	r3, r2
 800967e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009684:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009688:	d309      	bcc.n	800969e <HAL_RCC_OscConfig+0xe2>
 800968a:	4b6c      	ldr	r3, [pc, #432]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f023 021f 	bic.w	r2, r3, #31
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	4969      	ldr	r1, [pc, #420]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009698:	4313      	orrs	r3, r2
 800969a:	60cb      	str	r3, [r1, #12]
 800969c:	e07e      	b.n	800979c <HAL_RCC_OscConfig+0x1e0>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	da0a      	bge.n	80096bc <HAL_RCC_OscConfig+0x100>
 80096a6:	4b65      	ldr	r3, [pc, #404]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	015b      	lsls	r3, r3, #5
 80096b4:	4961      	ldr	r1, [pc, #388]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	60cb      	str	r3, [r1, #12]
 80096ba:	e06f      	b.n	800979c <HAL_RCC_OscConfig+0x1e0>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096c4:	d30a      	bcc.n	80096dc <HAL_RCC_OscConfig+0x120>
 80096c6:	4b5d      	ldr	r3, [pc, #372]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	029b      	lsls	r3, r3, #10
 80096d4:	4959      	ldr	r1, [pc, #356]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60cb      	str	r3, [r1, #12]
 80096da:	e05f      	b.n	800979c <HAL_RCC_OscConfig+0x1e0>
 80096dc:	4b57      	ldr	r3, [pc, #348]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	03db      	lsls	r3, r3, #15
 80096ea:	4954      	ldr	r1, [pc, #336]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60cb      	str	r3, [r1, #12]
 80096f0:	e054      	b.n	800979c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80096f2:	4b52      	ldr	r3, [pc, #328]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	4a51      	ldr	r2, [pc, #324]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80096f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80096fc:	6093      	str	r3, [r2, #8]
 80096fe:	4b4f      	ldr	r3, [pc, #316]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970a:	494c      	ldr	r1, [pc, #304]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800970c:	4313      	orrs	r3, r2
 800970e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009714:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009718:	d309      	bcc.n	800972e <HAL_RCC_OscConfig+0x172>
 800971a:	4b48      	ldr	r3, [pc, #288]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f023 021f 	bic.w	r2, r3, #31
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	4945      	ldr	r1, [pc, #276]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009728:	4313      	orrs	r3, r2
 800972a:	60cb      	str	r3, [r1, #12]
 800972c:	e028      	b.n	8009780 <HAL_RCC_OscConfig+0x1c4>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	da0a      	bge.n	800974c <HAL_RCC_OscConfig+0x190>
 8009736:	4b41      	ldr	r3, [pc, #260]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	015b      	lsls	r3, r3, #5
 8009744:	493d      	ldr	r1, [pc, #244]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009746:	4313      	orrs	r3, r2
 8009748:	60cb      	str	r3, [r1, #12]
 800974a:	e019      	b.n	8009780 <HAL_RCC_OscConfig+0x1c4>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009754:	d30a      	bcc.n	800976c <HAL_RCC_OscConfig+0x1b0>
 8009756:	4b39      	ldr	r3, [pc, #228]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	029b      	lsls	r3, r3, #10
 8009764:	4935      	ldr	r1, [pc, #212]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009766:	4313      	orrs	r3, r2
 8009768:	60cb      	str	r3, [r1, #12]
 800976a:	e009      	b.n	8009780 <HAL_RCC_OscConfig+0x1c4>
 800976c:	4b33      	ldr	r3, [pc, #204]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	03db      	lsls	r3, r3, #15
 800977a:	4930      	ldr	r1, [pc, #192]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800977c:	4313      	orrs	r3, r2
 800977e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	4618      	mov	r0, r3
 800978c:	f001 f93c 	bl	800aa08 <RCC_SetFlashLatencyFromMSIRange>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d002      	beq.n	800979c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	f000 bde5 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800979c:	f001 f8de 	bl	800a95c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80097a0:	4b27      	ldr	r3, [pc, #156]	@ (8009840 <HAL_RCC_OscConfig+0x284>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7f9 f82b 	bl	8002800 <HAL_InitTick>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80097b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 808a 	beq.w	80098ce <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80097ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097be:	f000 bdd2 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d066      	beq.n	8009898 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80097ca:	4b1c      	ldr	r3, [pc, #112]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1b      	ldr	r2, [pc, #108]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80097d0:	f043 0301 	orr.w	r3, r3, #1
 80097d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80097d6:	f7f9 f89d 	bl	8002914 <HAL_GetTick>
 80097da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80097dc:	e009      	b.n	80097f2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097de:	f7f9 f899 	bl	8002914 <HAL_GetTick>
 80097e2:	4602      	mov	r2, r0
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d902      	bls.n	80097f2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	f000 bdba 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80097f2:	4b12      	ldr	r3, [pc, #72]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0ef      	beq.n	80097de <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80097fe:	4b0f      	ldr	r3, [pc, #60]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	4a0e      	ldr	r2, [pc, #56]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009804:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009808:	6093      	str	r3, [r2, #8]
 800980a:	4b0c      	ldr	r3, [pc, #48]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009816:	4909      	ldr	r1, [pc, #36]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009818:	4313      	orrs	r3, r2
 800981a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009820:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009824:	d30e      	bcc.n	8009844 <HAL_RCC_OscConfig+0x288>
 8009826:	4b05      	ldr	r3, [pc, #20]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f023 021f 	bic.w	r2, r3, #31
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	4902      	ldr	r1, [pc, #8]	@ (800983c <HAL_RCC_OscConfig+0x280>)
 8009834:	4313      	orrs	r3, r2
 8009836:	60cb      	str	r3, [r1, #12]
 8009838:	e04a      	b.n	80098d0 <HAL_RCC_OscConfig+0x314>
 800983a:	bf00      	nop
 800983c:	46020c00 	.word	0x46020c00
 8009840:	20000004 	.word	0x20000004
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009848:	2b00      	cmp	r3, #0
 800984a:	da0a      	bge.n	8009862 <HAL_RCC_OscConfig+0x2a6>
 800984c:	4b98      	ldr	r3, [pc, #608]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	015b      	lsls	r3, r3, #5
 800985a:	4995      	ldr	r1, [pc, #596]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800985c:	4313      	orrs	r3, r2
 800985e:	60cb      	str	r3, [r1, #12]
 8009860:	e036      	b.n	80098d0 <HAL_RCC_OscConfig+0x314>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800986a:	d30a      	bcc.n	8009882 <HAL_RCC_OscConfig+0x2c6>
 800986c:	4b90      	ldr	r3, [pc, #576]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	029b      	lsls	r3, r3, #10
 800987a:	498d      	ldr	r1, [pc, #564]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800987c:	4313      	orrs	r3, r2
 800987e:	60cb      	str	r3, [r1, #12]
 8009880:	e026      	b.n	80098d0 <HAL_RCC_OscConfig+0x314>
 8009882:	4b8b      	ldr	r3, [pc, #556]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	03db      	lsls	r3, r3, #15
 8009890:	4987      	ldr	r1, [pc, #540]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009892:	4313      	orrs	r3, r2
 8009894:	60cb      	str	r3, [r1, #12]
 8009896:	e01b      	b.n	80098d0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009898:	4b85      	ldr	r3, [pc, #532]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a84      	ldr	r2, [pc, #528]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800989e:	f023 0301 	bic.w	r3, r3, #1
 80098a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80098a4:	f7f9 f836 	bl	8002914 <HAL_GetTick>
 80098a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80098aa:	e009      	b.n	80098c0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80098ac:	f7f9 f832 	bl	8002914 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d902      	bls.n	80098c0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	f000 bd53 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80098c0:	4b7b      	ldr	r3, [pc, #492]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1ef      	bne.n	80098ac <HAL_RCC_OscConfig+0x2f0>
 80098cc:	e000      	b.n	80098d0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80098ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 808b 	beq.w	80099f4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	2b08      	cmp	r3, #8
 80098e2:	d005      	beq.n	80098f0 <HAL_RCC_OscConfig+0x334>
 80098e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e6:	2b0c      	cmp	r3, #12
 80098e8:	d109      	bne.n	80098fe <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80098ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d106      	bne.n	80098fe <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d17d      	bne.n	80099f4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	f000 bd34 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009906:	d106      	bne.n	8009916 <HAL_RCC_OscConfig+0x35a>
 8009908:	4b69      	ldr	r3, [pc, #420]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a68      	ldr	r2, [pc, #416]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800990e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	e041      	b.n	800999a <HAL_RCC_OscConfig+0x3de>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800991e:	d112      	bne.n	8009946 <HAL_RCC_OscConfig+0x38a>
 8009920:	4b63      	ldr	r3, [pc, #396]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a62      	ldr	r2, [pc, #392]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009926:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	4b60      	ldr	r3, [pc, #384]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a5f      	ldr	r2, [pc, #380]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009932:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	4b5d      	ldr	r3, [pc, #372]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a5c      	ldr	r2, [pc, #368]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800993e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	e029      	b.n	800999a <HAL_RCC_OscConfig+0x3de>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800994e:	d112      	bne.n	8009976 <HAL_RCC_OscConfig+0x3ba>
 8009950:	4b57      	ldr	r3, [pc, #348]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a56      	ldr	r2, [pc, #344]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009956:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800995a:	6013      	str	r3, [r2, #0]
 800995c:	4b54      	ldr	r3, [pc, #336]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a53      	ldr	r2, [pc, #332]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	4b51      	ldr	r3, [pc, #324]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a50      	ldr	r2, [pc, #320]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800996e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	e011      	b.n	800999a <HAL_RCC_OscConfig+0x3de>
 8009976:	4b4e      	ldr	r3, [pc, #312]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a4d      	ldr	r2, [pc, #308]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 800997c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	4b4b      	ldr	r3, [pc, #300]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a4a      	ldr	r2, [pc, #296]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	4b48      	ldr	r3, [pc, #288]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a47      	ldr	r2, [pc, #284]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009994:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009998:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d014      	beq.n	80099cc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80099a2:	f7f8 ffb7 	bl	8002914 <HAL_GetTick>
 80099a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099a8:	e009      	b.n	80099be <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099aa:	f7f8 ffb3 	bl	8002914 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b64      	cmp	r3, #100	@ 0x64
 80099b6:	d902      	bls.n	80099be <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	f000 bcd4 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099be:	4b3c      	ldr	r3, [pc, #240]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0ef      	beq.n	80099aa <HAL_RCC_OscConfig+0x3ee>
 80099ca:	e013      	b.n	80099f4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80099cc:	f7f8 ffa2 	bl	8002914 <HAL_GetTick>
 80099d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80099d2:	e009      	b.n	80099e8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099d4:	f7f8 ff9e 	bl	8002914 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2b64      	cmp	r3, #100	@ 0x64
 80099e0:	d902      	bls.n	80099e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	f000 bcbf 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80099e8:	4b31      	ldr	r3, [pc, #196]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1ef      	bne.n	80099d4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d05f      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d005      	beq.n	8009a12 <HAL_RCC_OscConfig+0x456>
 8009a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a08:	2b0c      	cmp	r3, #12
 8009a0a:	d114      	bne.n	8009a36 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d111      	bne.n	8009a36 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d102      	bne.n	8009a20 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f000 bca3 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009a20:	4b23      	ldr	r3, [pc, #140]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	041b      	lsls	r3, r3, #16
 8009a2e:	4920      	ldr	r1, [pc, #128]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009a34:	e044      	b.n	8009ac0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d024      	beq.n	8009a88 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a48:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009a4a:	f7f8 ff63 	bl	8002914 <HAL_GetTick>
 8009a4e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a50:	e009      	b.n	8009a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a52:	f7f8 ff5f 	bl	8002914 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d902      	bls.n	8009a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	f000 bc80 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a66:	4b12      	ldr	r3, [pc, #72]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d0ef      	beq.n	8009a52 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009a72:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	041b      	lsls	r3, r3, #16
 8009a80:	490b      	ldr	r1, [pc, #44]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	610b      	str	r3, [r1, #16]
 8009a86:	e01b      	b.n	8009ac0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009a88:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a08      	ldr	r2, [pc, #32]	@ (8009ab0 <HAL_RCC_OscConfig+0x4f4>)
 8009a8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009a94:	f7f8 ff3e 	bl	8002914 <HAL_GetTick>
 8009a98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a9a:	e00b      	b.n	8009ab4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a9c:	f7f8 ff3a 	bl	8002914 <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d904      	bls.n	8009ab4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	f000 bc5b 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
 8009ab0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ab4:	4baf      	ldr	r3, [pc, #700]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1ed      	bne.n	8009a9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 80c8 	beq.w	8009c5e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ad4:	4ba7      	ldr	r3, [pc, #668]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ada:	f003 0304 	and.w	r3, r3, #4
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d111      	bne.n	8009b06 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ae2:	4ba4      	ldr	r3, [pc, #656]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ae8:	4aa2      	ldr	r2, [pc, #648]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009aea:	f043 0304 	orr.w	r3, r3, #4
 8009aee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009af2:	4ba0      	ldr	r3, [pc, #640]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009b06:	4b9c      	ldr	r3, [pc, #624]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d119      	bne.n	8009b46 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009b12:	4b99      	ldr	r3, [pc, #612]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b16:	4a98      	ldr	r2, [pc, #608]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009b18:	f043 0301 	orr.w	r3, r3, #1
 8009b1c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b1e:	f7f8 fef9 	bl	8002914 <HAL_GetTick>
 8009b22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009b24:	e009      	b.n	8009b3a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b26:	f7f8 fef5 	bl	8002914 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d902      	bls.n	8009b3a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	f000 bc16 	b.w	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0ef      	beq.n	8009b26 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d05f      	beq.n	8009c0e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009b4e:	4b89      	ldr	r3, [pc, #548]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b54:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699a      	ldr	r2, [r3, #24]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d037      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d006      	beq.n	8009b7c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e3f4      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01b      	beq.n	8009bbe <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009b86:	4b7b      	ldr	r3, [pc, #492]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b8c:	4a79      	ldr	r2, [pc, #484]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009b8e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009b92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009b96:	f7f8 febd 	bl	8002914 <HAL_GetTick>
 8009b9a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009b9c:	e008      	b.n	8009bb0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b9e:	f7f8 feb9 	bl	8002914 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	2b05      	cmp	r3, #5
 8009baa:	d901      	bls.n	8009bb0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e3da      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009bb0:	4b70      	ldr	r3, [pc, #448]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1ef      	bne.n	8009b9e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bc4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	4969      	ldr	r1, [pc, #420]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009bd4:	4b67      	ldr	r3, [pc, #412]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bda:	4a66      	ldr	r2, [pc, #408]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009be0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009be4:	f7f8 fe96 	bl	8002914 <HAL_GetTick>
 8009be8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bec:	f7f8 fe92 	bl	8002914 <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e3b3      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0ef      	beq.n	8009bec <HAL_RCC_OscConfig+0x630>
 8009c0c:	e01b      	b.n	8009c46 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009c0e:	4b59      	ldr	r3, [pc, #356]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c14:	4a57      	ldr	r2, [pc, #348]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c16:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009c1e:	f7f8 fe79 	bl	8002914 <HAL_GetTick>
 8009c22:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009c24:	e008      	b.n	8009c38 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c26:	f7f8 fe75 	bl	8002914 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b05      	cmp	r3, #5
 8009c32:	d901      	bls.n	8009c38 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e396      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009c38:	4b4e      	ldr	r3, [pc, #312]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1ef      	bne.n	8009c26 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c46:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d107      	bne.n	8009c5e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c4e:	4b49      	ldr	r3, [pc, #292]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c54:	4a47      	ldr	r2, [pc, #284]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c56:	f023 0304 	bic.w	r3, r3, #4
 8009c5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0304 	and.w	r3, r3, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 8111 	beq.w	8009e8e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c72:	4b40      	ldr	r3, [pc, #256]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d111      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c80:	4b3c      	ldr	r3, [pc, #240]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c86:	4a3b      	ldr	r2, [pc, #236]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c88:	f043 0304 	orr.w	r3, r3, #4
 8009c8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009c90:	4b38      	ldr	r3, [pc, #224]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	613b      	str	r3, [r7, #16]
 8009c9c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ca4:	4b34      	ldr	r3, [pc, #208]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d118      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009cb0:	4b31      	ldr	r3, [pc, #196]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb4:	4a30      	ldr	r2, [pc, #192]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cbc:	f7f8 fe2a 	bl	8002914 <HAL_GetTick>
 8009cc0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cc4:	f7f8 fe26 	bl	8002914 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e347      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009cd6:	4b28      	ldr	r3, [pc, #160]	@ (8009d78 <HAL_RCC_OscConfig+0x7bc>)
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0f0      	beq.n	8009cc4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d01f      	beq.n	8009d2e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d010      	beq.n	8009d1c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d00:	4a1c      	ldr	r2, [pc, #112]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d02:	f043 0304 	orr.w	r3, r3, #4
 8009d06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d10:	4a18      	ldr	r2, [pc, #96]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009d1a:	e018      	b.n	8009d4e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d1c:	4b15      	ldr	r3, [pc, #84]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d22:	4a14      	ldr	r2, [pc, #80]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d24:	f043 0301 	orr.w	r3, r3, #1
 8009d28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009d2c:	e00f      	b.n	8009d4e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d2e:	4b11      	ldr	r3, [pc, #68]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d34:	4a0f      	ldr	r2, [pc, #60]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d36:	f023 0301 	bic.w	r3, r3, #1
 8009d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d44:	4a0b      	ldr	r2, [pc, #44]	@ (8009d74 <HAL_RCC_OscConfig+0x7b8>)
 8009d46:	f023 0304 	bic.w	r3, r3, #4
 8009d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d057      	beq.n	8009e06 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8009d56:	f7f8 fddd 	bl	8002914 <HAL_GetTick>
 8009d5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d5c:	e00e      	b.n	8009d7c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d5e:	f7f8 fdd9 	bl	8002914 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d905      	bls.n	8009d7c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e2f8      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
 8009d74:	46020c00 	.word	0x46020c00
 8009d78:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d7c:	4b9c      	ldr	r3, [pc, #624]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0e9      	beq.n	8009d5e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01b      	beq.n	8009dce <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009d96:	4b96      	ldr	r3, [pc, #600]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d9c:	4a94      	ldr	r2, [pc, #592]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009da2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009da6:	e00a      	b.n	8009dbe <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009da8:	f7f8 fdb4 	bl	8002914 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e2d3      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009dbe:	4b8c      	ldr	r3, [pc, #560]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0ed      	beq.n	8009da8 <HAL_RCC_OscConfig+0x7ec>
 8009dcc:	e053      	b.n	8009e76 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009dce:	4b88      	ldr	r3, [pc, #544]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dd4:	4a86      	ldr	r2, [pc, #536]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009dde:	e00a      	b.n	8009df6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009de0:	f7f8 fd98 	bl	8002914 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d901      	bls.n	8009df6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e2b7      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009df6:	4b7e      	ldr	r3, [pc, #504]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1ed      	bne.n	8009de0 <HAL_RCC_OscConfig+0x824>
 8009e04:	e037      	b.n	8009e76 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009e06:	f7f8 fd85 	bl	8002914 <HAL_GetTick>
 8009e0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e0c:	e00a      	b.n	8009e24 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e0e:	f7f8 fd81 	bl	8002914 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d901      	bls.n	8009e24 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e2a0      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e24:	4b72      	ldr	r3, [pc, #456]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e2a:	f003 0302 	and.w	r3, r3, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1ed      	bne.n	8009e0e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009e32:	4b6f      	ldr	r3, [pc, #444]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01a      	beq.n	8009e76 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009e40:	4b6b      	ldr	r3, [pc, #428]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e46:	4a6a      	ldr	r2, [pc, #424]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009e50:	e00a      	b.n	8009e68 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e52:	f7f8 fd5f 	bl	8002914 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d901      	bls.n	8009e68 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e27e      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009e68:	4b61      	ldr	r3, [pc, #388]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1ed      	bne.n	8009e52 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d107      	bne.n	8009e8e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e84:	4a5a      	ldr	r2, [pc, #360]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009e86:	f023 0304 	bic.w	r3, r3, #4
 8009e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0320 	and.w	r3, r3, #32
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d036      	beq.n	8009f08 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d019      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009ea2:	4b53      	ldr	r3, [pc, #332]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a52      	ldr	r2, [pc, #328]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009eac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009eae:	f7f8 fd31 	bl	8002914 <HAL_GetTick>
 8009eb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009eb4:	e008      	b.n	8009ec8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009eb6:	f7f8 fd2d 	bl	8002914 <HAL_GetTick>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d901      	bls.n	8009ec8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e24e      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009ec8:	4b49      	ldr	r3, [pc, #292]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0f0      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x8fa>
 8009ed4:	e018      	b.n	8009f08 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009ed6:	4b46      	ldr	r3, [pc, #280]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a45      	ldr	r2, [pc, #276]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009edc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ee0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009ee2:	f7f8 fd17 	bl	8002914 <HAL_GetTick>
 8009ee6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009ee8:	e008      	b.n	8009efc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009eea:	f7f8 fd13 	bl	8002914 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d901      	bls.n	8009efc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e234      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009efc:	4b3c      	ldr	r3, [pc, #240]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1f0      	bne.n	8009eea <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d036      	beq.n	8009f82 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d019      	beq.n	8009f50 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009f1c:	4b34      	ldr	r3, [pc, #208]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a33      	ldr	r2, [pc, #204]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009f28:	f7f8 fcf4 	bl	8002914 <HAL_GetTick>
 8009f2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009f30:	f7f8 fcf0 	bl	8002914 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e211      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009f42:	4b2b      	ldr	r3, [pc, #172]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f0      	beq.n	8009f30 <HAL_RCC_OscConfig+0x974>
 8009f4e:	e018      	b.n	8009f82 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009f50:	4b27      	ldr	r3, [pc, #156]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a26      	ldr	r2, [pc, #152]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009f5c:	f7f8 fcda 	bl	8002914 <HAL_GetTick>
 8009f60:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009f64:	f7f8 fcd6 	bl	8002914 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e1f7      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009f76:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f0      	bne.n	8009f64 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d07f      	beq.n	800a08e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d062      	beq.n	800a05c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009f96:	4b16      	ldr	r3, [pc, #88]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009f9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fa0:	6093      	str	r3, [r2, #8]
 8009fa2:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fae:	4910      	ldr	r1, [pc, #64]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009fbc:	d309      	bcc.n	8009fd2 <HAL_RCC_OscConfig+0xa16>
 8009fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f023 021f 	bic.w	r2, r3, #31
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	4909      	ldr	r1, [pc, #36]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60cb      	str	r3, [r1, #12]
 8009fd0:	e02a      	b.n	800a028 <HAL_RCC_OscConfig+0xa6c>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	da0c      	bge.n	8009ff4 <HAL_RCC_OscConfig+0xa38>
 8009fda:	4b05      	ldr	r3, [pc, #20]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	015b      	lsls	r3, r3, #5
 8009fe8:	4901      	ldr	r1, [pc, #4]	@ (8009ff0 <HAL_RCC_OscConfig+0xa34>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60cb      	str	r3, [r1, #12]
 8009fee:	e01b      	b.n	800a028 <HAL_RCC_OscConfig+0xa6c>
 8009ff0:	46020c00 	.word	0x46020c00
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ffc:	d30a      	bcc.n	800a014 <HAL_RCC_OscConfig+0xa58>
 8009ffe:	4ba1      	ldr	r3, [pc, #644]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	029b      	lsls	r3, r3, #10
 800a00c:	499d      	ldr	r1, [pc, #628]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	60cb      	str	r3, [r1, #12]
 800a012:	e009      	b.n	800a028 <HAL_RCC_OscConfig+0xa6c>
 800a014:	4b9b      	ldr	r3, [pc, #620]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	03db      	lsls	r3, r3, #15
 800a022:	4998      	ldr	r1, [pc, #608]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a024:	4313      	orrs	r3, r2
 800a026:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a028:	4b96      	ldr	r3, [pc, #600]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a95      	ldr	r2, [pc, #596]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a02e:	f043 0310 	orr.w	r3, r3, #16
 800a032:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a034:	f7f8 fc6e 	bl	8002914 <HAL_GetTick>
 800a038:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a03a:	e008      	b.n	800a04e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a03c:	f7f8 fc6a 	bl	8002914 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d901      	bls.n	800a04e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e18b      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a04e:	4b8d      	ldr	r3, [pc, #564]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d0f0      	beq.n	800a03c <HAL_RCC_OscConfig+0xa80>
 800a05a:	e018      	b.n	800a08e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a05c:	4b89      	ldr	r3, [pc, #548]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a88      	ldr	r2, [pc, #544]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a062:	f023 0310 	bic.w	r3, r3, #16
 800a066:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a068:	f7f8 fc54 	bl	8002914 <HAL_GetTick>
 800a06c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a070:	f7f8 fc50 	bl	8002914 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e171      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a082:	4b80      	ldr	r3, [pc, #512]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1f0      	bne.n	800a070 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 8166 	beq.w	800a364 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a098:	2300      	movs	r3, #0
 800a09a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a09e:	4b79      	ldr	r3, [pc, #484]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	f003 030c 	and.w	r3, r3, #12
 800a0a6:	2b0c      	cmp	r3, #12
 800a0a8:	f000 80f2 	beq.w	800a290 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	f040 80c5 	bne.w	800a240 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a0b6:	4b73      	ldr	r3, [pc, #460]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a72      	ldr	r2, [pc, #456]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a0bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0c0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a0c2:	f7f8 fc27 	bl	8002914 <HAL_GetTick>
 800a0c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a0c8:	e008      	b.n	800a0dc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ca:	f7f8 fc23 	bl	8002914 <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d901      	bls.n	800a0dc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e144      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a0dc:	4b69      	ldr	r3, [pc, #420]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1f0      	bne.n	800a0ca <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0e8:	4b66      	ldr	r3, [pc, #408]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a0ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d111      	bne.n	800a11a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a0f6:	4b63      	ldr	r3, [pc, #396]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a0f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0fc:	4a61      	ldr	r2, [pc, #388]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a0fe:	f043 0304 	orr.w	r3, r3, #4
 800a102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a106:	4b5f      	ldr	r3, [pc, #380]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	60fb      	str	r3, [r7, #12]
 800a112:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a11a:	4b5b      	ldr	r3, [pc, #364]	@ (800a288 <HAL_RCC_OscConfig+0xccc>)
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a126:	d102      	bne.n	800a12e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a128:	2301      	movs	r3, #1
 800a12a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a12e:	4b56      	ldr	r3, [pc, #344]	@ (800a288 <HAL_RCC_OscConfig+0xccc>)
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	4a55      	ldr	r2, [pc, #340]	@ (800a288 <HAL_RCC_OscConfig+0xccc>)
 800a134:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a138:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a13a:	4b52      	ldr	r3, [pc, #328]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a142:	f023 0303 	bic.w	r3, r3, #3
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a14e:	3a01      	subs	r2, #1
 800a150:	0212      	lsls	r2, r2, #8
 800a152:	4311      	orrs	r1, r2
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a158:	430a      	orrs	r2, r1
 800a15a:	494a      	ldr	r1, [pc, #296]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a160:	4b48      	ldr	r3, [pc, #288]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a164:	4b49      	ldr	r3, [pc, #292]	@ (800a28c <HAL_RCC_OscConfig+0xcd0>)
 800a166:	4013      	ands	r3, r2
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a16c:	3a01      	subs	r2, #1
 800a16e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a176:	3a01      	subs	r2, #1
 800a178:	0252      	lsls	r2, r2, #9
 800a17a:	b292      	uxth	r2, r2
 800a17c:	4311      	orrs	r1, r2
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a182:	3a01      	subs	r2, #1
 800a184:	0412      	lsls	r2, r2, #16
 800a186:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a18a:	4311      	orrs	r1, r2
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a190:	3a01      	subs	r2, #1
 800a192:	0612      	lsls	r2, r2, #24
 800a194:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a198:	430a      	orrs	r2, r1
 800a19a:	493a      	ldr	r1, [pc, #232]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a1a0:	4b38      	ldr	r3, [pc, #224]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	4a37      	ldr	r2, [pc, #220]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1a6:	f023 0310 	bic.w	r3, r3, #16
 800a1aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1b0:	4a34      	ldr	r2, [pc, #208]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a1b6:	4b33      	ldr	r3, [pc, #204]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ba:	4a32      	ldr	r2, [pc, #200]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1bc:	f043 0310 	orr.w	r3, r3, #16
 800a1c0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a1c2:	4b30      	ldr	r3, [pc, #192]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c6:	f023 020c 	bic.w	r2, r3, #12
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ce:	492d      	ldr	r1, [pc, #180]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d105      	bne.n	800a1e8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a1dc:	4b2a      	ldr	r3, [pc, #168]	@ (800a288 <HAL_RCC_OscConfig+0xccc>)
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	4a29      	ldr	r2, [pc, #164]	@ (800a288 <HAL_RCC_OscConfig+0xccc>)
 800a1e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1e6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a1e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d107      	bne.n	800a200 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a1f0:	4b24      	ldr	r3, [pc, #144]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1f6:	4a23      	ldr	r2, [pc, #140]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a1f8:	f023 0304 	bic.w	r3, r3, #4
 800a1fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a200:	4b20      	ldr	r3, [pc, #128]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a1f      	ldr	r2, [pc, #124]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a20a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a20c:	f7f8 fb82 	bl	8002914 <HAL_GetTick>
 800a210:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a212:	e008      	b.n	800a226 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a214:	f7f8 fb7e 	bl	8002914 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d901      	bls.n	800a226 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e09f      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a226:	4b17      	ldr	r3, [pc, #92]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0f0      	beq.n	800a214 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a232:	4b14      	ldr	r3, [pc, #80]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a236:	4a13      	ldr	r2, [pc, #76]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a23c:	6293      	str	r3, [r2, #40]	@ 0x28
 800a23e:	e091      	b.n	800a364 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a240:	4b10      	ldr	r3, [pc, #64]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a0f      	ldr	r2, [pc, #60]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a24a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a24c:	f7f8 fb62 	bl	8002914 <HAL_GetTick>
 800a250:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a254:	f7f8 fb5e 	bl	8002914 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e07f      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a266:	4b07      	ldr	r3, [pc, #28]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f0      	bne.n	800a254 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a272:	4b04      	ldr	r3, [pc, #16]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a276:	4a03      	ldr	r2, [pc, #12]	@ (800a284 <HAL_RCC_OscConfig+0xcc8>)
 800a278:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a27c:	f023 0303 	bic.w	r3, r3, #3
 800a280:	6293      	str	r3, [r2, #40]	@ 0x28
 800a282:	e06f      	b.n	800a364 <HAL_RCC_OscConfig+0xda8>
 800a284:	46020c00 	.word	0x46020c00
 800a288:	46020800 	.word	0x46020800
 800a28c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a290:	4b37      	ldr	r3, [pc, #220]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a294:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a296:	4b36      	ldr	r3, [pc, #216]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a29a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d039      	beq.n	800a318 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f003 0203 	and.w	r2, r3, #3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d132      	bne.n	800a318 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	0a1b      	lsrs	r3, r3, #8
 800a2b6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2be:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d129      	bne.n	800a318 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d122      	bne.n	800a318 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2dc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d11a      	bne.n	800a318 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	0a5b      	lsrs	r3, r3, #9
 800a2e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d111      	bne.n	800a318 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	0c1b      	lsrs	r3, r3, #16
 800a2f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a300:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a302:	429a      	cmp	r2, r3
 800a304:	d108      	bne.n	800a318 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	0e1b      	lsrs	r3, r3, #24
 800a30a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a312:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a314:	429a      	cmp	r2, r3
 800a316:	d001      	beq.n	800a31c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e024      	b.n	800a366 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a31c:	4b14      	ldr	r3, [pc, #80]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	08db      	lsrs	r3, r3, #3
 800a322:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d01a      	beq.n	800a364 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a32e:	4b10      	ldr	r3, [pc, #64]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a332:	4a0f      	ldr	r2, [pc, #60]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a334:	f023 0310 	bic.w	r3, r3, #16
 800a338:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a33a:	f7f8 faeb 	bl	8002914 <HAL_GetTick>
 800a33e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a340:	bf00      	nop
 800a342:	f7f8 fae7 	bl	8002914 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d0f9      	beq.n	800a342 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a352:	4a07      	ldr	r2, [pc, #28]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a358:	4b05      	ldr	r3, [pc, #20]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35c:	4a04      	ldr	r2, [pc, #16]	@ (800a370 <HAL_RCC_OscConfig+0xdb4>)
 800a35e:	f043 0310 	orr.w	r3, r3, #16
 800a362:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3738      	adds	r7, #56	@ 0x38
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	46020c00 	.word	0x46020c00

0800a374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e1d9      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a388:	4b9b      	ldr	r3, [pc, #620]	@ (800a5f8 <HAL_RCC_ClockConfig+0x284>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 030f 	and.w	r3, r3, #15
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d910      	bls.n	800a3b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a396:	4b98      	ldr	r3, [pc, #608]	@ (800a5f8 <HAL_RCC_ClockConfig+0x284>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f023 020f 	bic.w	r2, r3, #15
 800a39e:	4996      	ldr	r1, [pc, #600]	@ (800a5f8 <HAL_RCC_ClockConfig+0x284>)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3a6:	4b94      	ldr	r3, [pc, #592]	@ (800a5f8 <HAL_RCC_ClockConfig+0x284>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d001      	beq.n	800a3b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e1c1      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0310 	and.w	r3, r3, #16
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	695a      	ldr	r2, [r3, #20]
 800a3c8:	4b8c      	ldr	r3, [pc, #560]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d908      	bls.n	800a3e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a3d4:	4b89      	ldr	r3, [pc, #548]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	4986      	ldr	r1, [pc, #536]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0308 	and.w	r3, r3, #8
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d012      	beq.n	800a418 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	691a      	ldr	r2, [r3, #16]
 800a3f6:	4b81      	ldr	r3, [pc, #516]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	091b      	lsrs	r3, r3, #4
 800a3fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a400:	429a      	cmp	r2, r3
 800a402:	d909      	bls.n	800a418 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a404:	4b7d      	ldr	r3, [pc, #500]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	497a      	ldr	r1, [pc, #488]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a414:	4313      	orrs	r3, r2
 800a416:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	d010      	beq.n	800a446 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68da      	ldr	r2, [r3, #12]
 800a428:	4b74      	ldr	r3, [pc, #464]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a430:	429a      	cmp	r2, r3
 800a432:	d908      	bls.n	800a446 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a434:	4b71      	ldr	r3, [pc, #452]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	496e      	ldr	r1, [pc, #440]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a442:	4313      	orrs	r3, r2
 800a444:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d010      	beq.n	800a474 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	4b69      	ldr	r3, [pc, #420]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f003 030f 	and.w	r3, r3, #15
 800a45e:	429a      	cmp	r2, r3
 800a460:	d908      	bls.n	800a474 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a462:	4b66      	ldr	r3, [pc, #408]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	f023 020f 	bic.w	r2, r3, #15
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	4963      	ldr	r1, [pc, #396]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a470:	4313      	orrs	r3, r2
 800a472:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 80d2 	beq.w	800a626 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a482:	2300      	movs	r3, #0
 800a484:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d143      	bne.n	800a516 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a48e:	4b5b      	ldr	r3, [pc, #364]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d110      	bne.n	800a4be <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a49c:	4b57      	ldr	r3, [pc, #348]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a49e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4a2:	4a56      	ldr	r2, [pc, #344]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a4a4:	f043 0304 	orr.w	r3, r3, #4
 800a4a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a4ac:	4b53      	ldr	r3, [pc, #332]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a4ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4b2:	f003 0304 	and.w	r3, r3, #4
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a4be:	f7f8 fa29 	bl	8002914 <HAL_GetTick>
 800a4c2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a4c4:	4b4e      	ldr	r3, [pc, #312]	@ (800a600 <HAL_RCC_ClockConfig+0x28c>)
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00f      	beq.n	800a4f0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a4d0:	e008      	b.n	800a4e4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a4d2:	f7f8 fa1f 	bl	8002914 <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d901      	bls.n	800a4e4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e12b      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a4e4:	4b46      	ldr	r3, [pc, #280]	@ (800a600 <HAL_RCC_ClockConfig+0x28c>)
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0f0      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d107      	bne.n	800a506 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a4f6:	4b41      	ldr	r3, [pc, #260]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a4f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a4fe:	f023 0304 	bic.w	r3, r3, #4
 800a502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a506:	4b3d      	ldr	r3, [pc, #244]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d121      	bne.n	800a556 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e112      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d107      	bne.n	800a52e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a51e:	4b37      	ldr	r3, [pc, #220]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d115      	bne.n	800a556 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e106      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d107      	bne.n	800a546 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a536:	4b31      	ldr	r3, [pc, #196]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e0fa      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a546:	4b2d      	ldr	r3, [pc, #180]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e0f2      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a556:	4b29      	ldr	r3, [pc, #164]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	f023 0203 	bic.w	r2, r3, #3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	4926      	ldr	r1, [pc, #152]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a564:	4313      	orrs	r3, r2
 800a566:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a568:	f7f8 f9d4 	bl	8002914 <HAL_GetTick>
 800a56c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b03      	cmp	r3, #3
 800a574:	d112      	bne.n	800a59c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a576:	e00a      	b.n	800a58e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a578:	f7f8 f9cc 	bl	8002914 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a586:	4293      	cmp	r3, r2
 800a588:	d901      	bls.n	800a58e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e0d6      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a58e:	4b1b      	ldr	r3, [pc, #108]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	f003 030c 	and.w	r3, r3, #12
 800a596:	2b0c      	cmp	r3, #12
 800a598:	d1ee      	bne.n	800a578 <HAL_RCC_ClockConfig+0x204>
 800a59a:	e044      	b.n	800a626 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d112      	bne.n	800a5ca <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5a4:	e00a      	b.n	800a5bc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5a6:	f7f8 f9b5 	bl	8002914 <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d901      	bls.n	800a5bc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e0bf      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a5be:	69db      	ldr	r3, [r3, #28]
 800a5c0:	f003 030c 	and.w	r3, r3, #12
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d1ee      	bne.n	800a5a6 <HAL_RCC_ClockConfig+0x232>
 800a5c8:	e02d      	b.n	800a626 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d123      	bne.n	800a61a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a5d2:	e00a      	b.n	800a5ea <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5d4:	f7f8 f99e 	bl	8002914 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d901      	bls.n	800a5ea <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e0a8      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a5ea:	4b04      	ldr	r3, [pc, #16]	@ (800a5fc <HAL_RCC_ClockConfig+0x288>)
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f003 030c 	and.w	r3, r3, #12
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1ee      	bne.n	800a5d4 <HAL_RCC_ClockConfig+0x260>
 800a5f6:	e016      	b.n	800a626 <HAL_RCC_ClockConfig+0x2b2>
 800a5f8:	40022000 	.word	0x40022000
 800a5fc:	46020c00 	.word	0x46020c00
 800a600:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a604:	f7f8 f986 	bl	8002914 <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a612:	4293      	cmp	r3, r2
 800a614:	d901      	bls.n	800a61a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e090      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a61a:	4b4a      	ldr	r3, [pc, #296]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	f003 030c 	and.w	r3, r3, #12
 800a622:	2b04      	cmp	r3, #4
 800a624:	d1ee      	bne.n	800a604 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d010      	beq.n	800a654 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	4b43      	ldr	r3, [pc, #268]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	429a      	cmp	r2, r3
 800a640:	d208      	bcs.n	800a654 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a642:	4b40      	ldr	r3, [pc, #256]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	f023 020f 	bic.w	r2, r3, #15
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	493d      	ldr	r1, [pc, #244]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a650:	4313      	orrs	r3, r2
 800a652:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a654:	4b3c      	ldr	r3, [pc, #240]	@ (800a748 <HAL_RCC_ClockConfig+0x3d4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 030f 	and.w	r3, r3, #15
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d210      	bcs.n	800a684 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a662:	4b39      	ldr	r3, [pc, #228]	@ (800a748 <HAL_RCC_ClockConfig+0x3d4>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f023 020f 	bic.w	r2, r3, #15
 800a66a:	4937      	ldr	r1, [pc, #220]	@ (800a748 <HAL_RCC_ClockConfig+0x3d4>)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	4313      	orrs	r3, r2
 800a670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a672:	4b35      	ldr	r3, [pc, #212]	@ (800a748 <HAL_RCC_ClockConfig+0x3d4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 030f 	and.w	r3, r3, #15
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d001      	beq.n	800a684 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e05b      	b.n	800a73c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d010      	beq.n	800a6b2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	4b2b      	ldr	r3, [pc, #172]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d208      	bcs.n	800a6b2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a6a0:	4b28      	ldr	r3, [pc, #160]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	4925      	ldr	r1, [pc, #148]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d012      	beq.n	800a6e4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	691a      	ldr	r2, [r3, #16]
 800a6c2:	4b20      	ldr	r3, [pc, #128]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	091b      	lsrs	r3, r3, #4
 800a6c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d209      	bcs.n	800a6e4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
 800a6d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	4919      	ldr	r1, [pc, #100]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d010      	beq.n	800a712 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	695a      	ldr	r2, [r3, #20]
 800a6f4:	4b13      	ldr	r3, [pc, #76]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d208      	bcs.n	800a712 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a700:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a704:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	490d      	ldr	r1, [pc, #52]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a712:	f000 f821 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800a716:	4602      	mov	r2, r0
 800a718:	4b0a      	ldr	r3, [pc, #40]	@ (800a744 <HAL_RCC_ClockConfig+0x3d0>)
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	f003 030f 	and.w	r3, r3, #15
 800a720:	490a      	ldr	r1, [pc, #40]	@ (800a74c <HAL_RCC_ClockConfig+0x3d8>)
 800a722:	5ccb      	ldrb	r3, [r1, r3]
 800a724:	fa22 f303 	lsr.w	r3, r2, r3
 800a728:	4a09      	ldr	r2, [pc, #36]	@ (800a750 <HAL_RCC_ClockConfig+0x3dc>)
 800a72a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a72c:	4b09      	ldr	r3, [pc, #36]	@ (800a754 <HAL_RCC_ClockConfig+0x3e0>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4618      	mov	r0, r3
 800a732:	f7f8 f865 	bl	8002800 <HAL_InitTick>
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]

  return status;
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	46020c00 	.word	0x46020c00
 800a748:	40022000 	.word	0x40022000
 800a74c:	0801109c 	.word	0x0801109c
 800a750:	20000000 	.word	0x20000000
 800a754:	20000004 	.word	0x20000004

0800a758 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a758:	b480      	push	{r7}
 800a75a:	b08b      	sub	sp, #44	@ 0x2c
 800a75c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a766:	4b78      	ldr	r3, [pc, #480]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	f003 030c 	and.w	r3, r3, #12
 800a76e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a770:	4b75      	ldr	r3, [pc, #468]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a774:	f003 0303 	and.w	r3, r3, #3
 800a778:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <HAL_RCC_GetSysClockFreq+0x34>
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	2b0c      	cmp	r3, #12
 800a784:	d121      	bne.n	800a7ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d11e      	bne.n	800a7ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a78c:	4b6e      	ldr	r3, [pc, #440]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d107      	bne.n	800a7a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a798:	4b6b      	ldr	r3, [pc, #428]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a79a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a79e:	0b1b      	lsrs	r3, r3, #12
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7a6:	e005      	b.n	800a7b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a7a8:	4b67      	ldr	r3, [pc, #412]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	0f1b      	lsrs	r3, r3, #28
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a7b4:	4a65      	ldr	r2, [pc, #404]	@ (800a94c <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7bc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d110      	bne.n	800a7e6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a7c8:	e00d      	b.n	800a7e6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7ca:	4b5f      	ldr	r3, [pc, #380]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f003 030c 	and.w	r3, r3, #12
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	d102      	bne.n	800a7dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a7d6:	4b5e      	ldr	r3, [pc, #376]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a7d8:	623b      	str	r3, [r7, #32]
 800a7da:	e004      	b.n	800a7e6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	2b08      	cmp	r3, #8
 800a7e0:	d101      	bne.n	800a7e6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a7e2:	4b5b      	ldr	r3, [pc, #364]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a7e4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b0c      	cmp	r3, #12
 800a7ea:	f040 80a5 	bne.w	800a938 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a7ee:	4b56      	ldr	r3, [pc, #344]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a7f8:	4b53      	ldr	r3, [pc, #332]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fc:	0a1b      	lsrs	r3, r3, #8
 800a7fe:	f003 030f 	and.w	r3, r3, #15
 800a802:	3301      	adds	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a806:	4b50      	ldr	r3, [pc, #320]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80a:	091b      	lsrs	r3, r3, #4
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a812:	4b4d      	ldr	r3, [pc, #308]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a816:	08db      	lsrs	r3, r3, #3
 800a818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	fb02 f303 	mul.w	r3, r2, r3
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	2b02      	cmp	r3, #2
 800a832:	d003      	beq.n	800a83c <HAL_RCC_GetSysClockFreq+0xe4>
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	2b03      	cmp	r3, #3
 800a838:	d022      	beq.n	800a880 <HAL_RCC_GetSysClockFreq+0x128>
 800a83a:	e043      	b.n	800a8c4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	ee07 3a90 	vmov	s15, r3
 800a842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a846:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a954 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84e:	4b3e      	ldr	r3, [pc, #248]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a85e:	ed97 6a01 	vldr	s12, [r7, #4]
 800a862:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x200>
 800a866:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a86e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a872:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a87e:	e046      	b.n	800a90e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	ee07 3a90 	vmov	s15, r3
 800a886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a954 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a892:	4b2d      	ldr	r3, [pc, #180]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a8a2:	ed97 6a01 	vldr	s12, [r7, #4]
 800a8a6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x200>
 800a8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a8b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8c2:	e024      	b.n	800a90e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	ee07 3a90 	vmov	s15, r3
 800a8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	ee07 3a90 	vmov	s15, r3
 800a8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a8de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e4:	ee07 3a90 	vmov	s15, r3
 800a8e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a8ec:	ed97 6a01 	vldr	s12, [r7, #4]
 800a8f0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x200>
 800a8f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a8fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a900:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a904:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a908:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a90c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a90e:	4b0e      	ldr	r3, [pc, #56]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a912:	0e1b      	lsrs	r3, r3, #24
 800a914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a918:	3301      	adds	r3, #1
 800a91a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a926:	edd7 6a07 	vldr	s13, [r7, #28]
 800a92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a932:	ee17 3a90 	vmov	r3, s15
 800a936:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a938:	6a3b      	ldr	r3, [r7, #32]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	372c      	adds	r7, #44	@ 0x2c
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	46020c00 	.word	0x46020c00
 800a94c:	080110b4 	.word	0x080110b4
 800a950:	00f42400 	.word	0x00f42400
 800a954:	4b742400 	.word	0x4b742400
 800a958:	46000000 	.word	0x46000000

0800a95c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a960:	f7ff fefa 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800a964:	4602      	mov	r2, r0
 800a966:	4b07      	ldr	r3, [pc, #28]	@ (800a984 <HAL_RCC_GetHCLKFreq+0x28>)
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	4906      	ldr	r1, [pc, #24]	@ (800a988 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a970:	5ccb      	ldrb	r3, [r1, r3]
 800a972:	fa22 f303 	lsr.w	r3, r2, r3
 800a976:	4a05      	ldr	r2, [pc, #20]	@ (800a98c <HAL_RCC_GetHCLKFreq+0x30>)
 800a978:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a97a:	4b04      	ldr	r3, [pc, #16]	@ (800a98c <HAL_RCC_GetHCLKFreq+0x30>)
 800a97c:	681b      	ldr	r3, [r3, #0]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	46020c00 	.word	0x46020c00
 800a988:	0801109c 	.word	0x0801109c
 800a98c:	20000000 	.word	0x20000000

0800a990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a994:	f7ff ffe2 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800a998:	4602      	mov	r2, r0
 800a99a:	4b05      	ldr	r3, [pc, #20]	@ (800a9b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	091b      	lsrs	r3, r3, #4
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	4903      	ldr	r1, [pc, #12]	@ (800a9b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9a6:	5ccb      	ldrb	r3, [r1, r3]
 800a9a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	46020c00 	.word	0x46020c00
 800a9b4:	080110ac 	.word	0x080110ac

0800a9b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a9bc:	f7ff ffce 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	4b05      	ldr	r3, [pc, #20]	@ (800a9d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	0a1b      	lsrs	r3, r3, #8
 800a9c8:	f003 0307 	and.w	r3, r3, #7
 800a9cc:	4903      	ldr	r1, [pc, #12]	@ (800a9dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9ce:	5ccb      	ldrb	r3, [r1, r3]
 800a9d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	46020c00 	.word	0x46020c00
 800a9dc:	080110ac 	.word	0x080110ac

0800a9e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a9e4:	f7ff ffba 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	4b05      	ldr	r3, [pc, #20]	@ (800aa00 <HAL_RCC_GetPCLK3Freq+0x20>)
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ee:	091b      	lsrs	r3, r3, #4
 800a9f0:	f003 0307 	and.w	r3, r3, #7
 800a9f4:	4903      	ldr	r1, [pc, #12]	@ (800aa04 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a9f6:	5ccb      	ldrb	r3, [r1, r3]
 800a9f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	46020c00 	.word	0x46020c00
 800aa04:	080110ac 	.word	0x080110ac

0800aa08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800aa10:	4b3e      	ldr	r3, [pc, #248]	@ (800ab0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800aa1e:	f7fe fd21 	bl	8009464 <HAL_PWREx_GetVoltageRange>
 800aa22:	6178      	str	r0, [r7, #20]
 800aa24:	e019      	b.n	800aa5a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa26:	4b39      	ldr	r3, [pc, #228]	@ (800ab0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa2c:	4a37      	ldr	r2, [pc, #220]	@ (800ab0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa2e:	f043 0304 	orr.w	r3, r3, #4
 800aa32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aa36:	4b35      	ldr	r3, [pc, #212]	@ (800ab0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800aa44:	f7fe fd0e 	bl	8009464 <HAL_PWREx_GetVoltageRange>
 800aa48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800aa4a:	4b30      	ldr	r3, [pc, #192]	@ (800ab0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa50:	4a2e      	ldr	r2, [pc, #184]	@ (800ab0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa52:	f023 0304 	bic.w	r3, r3, #4
 800aa56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa60:	d003      	beq.n	800aa6a <RCC_SetFlashLatencyFromMSIRange+0x62>
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa68:	d109      	bne.n	800aa7e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa70:	d202      	bcs.n	800aa78 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800aa72:	2301      	movs	r3, #1
 800aa74:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800aa76:	e033      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800aa78:	2300      	movs	r3, #0
 800aa7a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800aa7c:	e030      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa84:	d208      	bcs.n	800aa98 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8c:	d102      	bne.n	800aa94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800aa8e:	2303      	movs	r3, #3
 800aa90:	613b      	str	r3, [r7, #16]
 800aa92:	e025      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e035      	b.n	800ab04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa9e:	d90f      	bls.n	800aac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d109      	bne.n	800aaba <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aaac:	d902      	bls.n	800aab4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800aaae:	2300      	movs	r3, #0
 800aab0:	613b      	str	r3, [r7, #16]
 800aab2:	e015      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800aab4:	2301      	movs	r3, #1
 800aab6:	613b      	str	r3, [r7, #16]
 800aab8:	e012      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800aaba:	2300      	movs	r3, #0
 800aabc:	613b      	str	r3, [r7, #16]
 800aabe:	e00f      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aac6:	d109      	bne.n	800aadc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aace:	d102      	bne.n	800aad6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800aad0:	2301      	movs	r3, #1
 800aad2:	613b      	str	r3, [r7, #16]
 800aad4:	e004      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800aad6:	2302      	movs	r3, #2
 800aad8:	613b      	str	r3, [r7, #16]
 800aada:	e001      	b.n	800aae0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800aadc:	2301      	movs	r3, #1
 800aade:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800aae0:	4b0b      	ldr	r3, [pc, #44]	@ (800ab10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f023 020f 	bic.w	r2, r3, #15
 800aae8:	4909      	ldr	r1, [pc, #36]	@ (800ab10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800aaf0:	4b07      	ldr	r3, [pc, #28]	@ (800ab10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d001      	beq.n	800ab02 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e000      	b.n	800ab04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	46020c00 	.word	0x46020c00
 800ab10:	40022000 	.word	0x40022000

0800ab14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ab14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab18:	b0c8      	sub	sp, #288	@ 0x120
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab26:	2300      	movs	r3, #0
 800ab28:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f002 0401 	and.w	r4, r2, #1
 800ab38:	2500      	movs	r5, #0
 800ab3a:	ea54 0305 	orrs.w	r3, r4, r5
 800ab3e:	d00b      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ab40:	4bd5      	ldr	r3, [pc, #852]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab46:	f023 0103 	bic.w	r1, r3, #3
 800ab4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab50:	4ad1      	ldr	r2, [pc, #836]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab52:	430b      	orrs	r3, r1
 800ab54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f002 0802 	and.w	r8, r2, #2
 800ab64:	f04f 0900 	mov.w	r9, #0
 800ab68:	ea58 0309 	orrs.w	r3, r8, r9
 800ab6c:	d00b      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800ab6e:	4bca      	ldr	r3, [pc, #808]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab74:	f023 010c 	bic.w	r1, r3, #12
 800ab78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab7e:	4ac6      	ldr	r2, [pc, #792]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab80:	430b      	orrs	r3, r1
 800ab82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f002 0a04 	and.w	sl, r2, #4
 800ab92:	f04f 0b00 	mov.w	fp, #0
 800ab96:	ea5a 030b 	orrs.w	r3, sl, fp
 800ab9a:	d00b      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800ab9c:	4bbe      	ldr	r3, [pc, #760]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aba2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800aba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abac:	4aba      	ldr	r2, [pc, #744]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abae:	430b      	orrs	r3, r1
 800abb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800abb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	f002 0308 	and.w	r3, r2, #8
 800abc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800abc4:	2300      	movs	r3, #0
 800abc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800abca:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800abce:	460b      	mov	r3, r1
 800abd0:	4313      	orrs	r3, r2
 800abd2:	d00b      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800abd4:	4bb0      	ldr	r3, [pc, #704]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800abde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abe4:	4aac      	ldr	r2, [pc, #688]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abe6:	430b      	orrs	r3, r1
 800abe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800abec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f002 0310 	and.w	r3, r2, #16
 800abf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800abfc:	2300      	movs	r3, #0
 800abfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ac02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ac06:	460b      	mov	r3, r1
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	d00b      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800ac0c:	4ba2      	ldr	r3, [pc, #648]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac1c:	4a9e      	ldr	r2, [pc, #632]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac1e:	430b      	orrs	r3, r1
 800ac20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ac24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ac30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ac34:	2300      	movs	r3, #0
 800ac36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ac3a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4313      	orrs	r3, r2
 800ac42:	d00b      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800ac44:	4b94      	ldr	r3, [pc, #592]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ac4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac54:	4a90      	ldr	r2, [pc, #576]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac56:	430b      	orrs	r3, r1
 800ac58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f002 0320 	and.w	r3, r2, #32
 800ac68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ac72:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ac76:	460b      	mov	r3, r1
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	d00b      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800ac7c:	4b86      	ldr	r3, [pc, #536]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac82:	f023 0107 	bic.w	r1, r3, #7
 800ac86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac8c:	4a82      	ldr	r2, [pc, #520]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac8e:	430b      	orrs	r3, r1
 800ac90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aca4:	2300      	movs	r3, #0
 800aca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800acaa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800acae:	460b      	mov	r3, r1
 800acb0:	4313      	orrs	r3, r2
 800acb2:	d00b      	beq.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800acb4:	4b78      	ldr	r3, [pc, #480]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800acb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acba:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800acbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acc4:	4a74      	ldr	r2, [pc, #464]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800acc6:	430b      	orrs	r3, r1
 800acc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800accc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800acd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800acdc:	2300      	movs	r3, #0
 800acde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ace2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ace6:	460b      	mov	r3, r1
 800ace8:	4313      	orrs	r3, r2
 800acea:	d00b      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800acec:	4b6a      	ldr	r3, [pc, #424]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800acee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acfc:	4a66      	ldr	r2, [pc, #408]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800acfe:	430b      	orrs	r3, r1
 800ad00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800ad10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad14:	2300      	movs	r3, #0
 800ad16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ad1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4313      	orrs	r3, r2
 800ad22:	d00b      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800ad24:	4b5c      	ldr	r3, [pc, #368]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ad2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad34:	4a58      	ldr	r2, [pc, #352]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad36:	430b      	orrs	r3, r1
 800ad38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ad48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ad56:	460b      	mov	r3, r1
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	d00b      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800ad5c:	4b4e      	ldr	r3, [pc, #312]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad62:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800ad66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad6c:	4a4a      	ldr	r2, [pc, #296]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800ad74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ad80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad84:	2300      	movs	r3, #0
 800ad86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4313      	orrs	r3, r2
 800ad92:	d00b      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800ad94:	4b40      	ldr	r3, [pc, #256]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad9a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800ad9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ada2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ada4:	4a3c      	ldr	r2, [pc, #240]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ada6:	430b      	orrs	r3, r1
 800ada8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800adac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800adb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800adbc:	2300      	movs	r3, #0
 800adbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800adc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800adc6:	460b      	mov	r3, r1
 800adc8:	4313      	orrs	r3, r2
 800adca:	d00c      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800adcc:	4b32      	ldr	r3, [pc, #200]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800adce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800add2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800add6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adde:	4a2e      	ldr	r2, [pc, #184]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ade0:	430b      	orrs	r3, r1
 800ade2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ade6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800adf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800adf6:	2300      	movs	r3, #0
 800adf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800adfc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ae00:	460b      	mov	r3, r1
 800ae02:	4313      	orrs	r3, r2
 800ae04:	d00c      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800ae06:	4b24      	ldr	r3, [pc, #144]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae0c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800ae10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae18:	4a1f      	ldr	r2, [pc, #124]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae1a:	430b      	orrs	r3, r1
 800ae1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ae20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae28:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ae2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ae30:	2300      	movs	r3, #0
 800ae32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	d00c      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800ae40:	4b15      	ldr	r3, [pc, #84]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae46:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800ae4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae52:	4a11      	ldr	r2, [pc, #68]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae54:	430b      	orrs	r3, r1
 800ae56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800ae5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ae66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4313      	orrs	r3, r2
 800ae78:	d010      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800ae7a:	4b07      	ldr	r3, [pc, #28]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae8c:	4a02      	ldr	r2, [pc, #8]	@ (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ae94:	e002      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800ae96:	bf00      	nop
 800ae98:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ae9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800aea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aeac:	2300      	movs	r3, #0
 800aeae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aeb2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	d04c      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800aebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aec4:	2b80      	cmp	r3, #128	@ 0x80
 800aec6:	d02d      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800aec8:	2b80      	cmp	r3, #128	@ 0x80
 800aeca:	d827      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aecc:	2b60      	cmp	r3, #96	@ 0x60
 800aece:	d02b      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800aed0:	2b60      	cmp	r3, #96	@ 0x60
 800aed2:	d823      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aed4:	2b40      	cmp	r3, #64	@ 0x40
 800aed6:	d006      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800aed8:	2b40      	cmp	r3, #64	@ 0x40
 800aeda:	d81f      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d009      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800aee0:	2b20      	cmp	r3, #32
 800aee2:	d011      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800aee4:	e01a      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aee6:	4bc0      	ldr	r3, [pc, #768]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeea:	4abf      	ldr	r2, [pc, #764]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aef0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aef2:	e01a      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef8:	3308      	adds	r3, #8
 800aefa:	4618      	mov	r0, r3
 800aefc:	f002 fcd6 	bl	800d8ac <RCCEx_PLL2_Config>
 800af00:	4603      	mov	r3, r0
 800af02:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800af06:	e010      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af0c:	332c      	adds	r3, #44	@ 0x2c
 800af0e:	4618      	mov	r0, r3
 800af10:	f002 fd64 	bl	800d9dc <RCCEx_PLL3_Config>
 800af14:	4603      	mov	r3, r0
 800af16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800af1a:	e006      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af22:	e002      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800af24:	bf00      	nop
 800af26:	e000      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800af28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10d      	bne.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800af32:	4bad      	ldr	r3, [pc, #692]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af38:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800af3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af44:	4aa8      	ldr	r2, [pc, #672]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af46:	430b      	orrs	r3, r1
 800af48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800af4c:	e003      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af52:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800af56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800af62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af66:	2300      	movs	r3, #0
 800af68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800af6c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800af70:	460b      	mov	r3, r1
 800af72:	4313      	orrs	r3, r2
 800af74:	d053      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800af76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af82:	d033      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800af84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af88:	d82c      	bhi.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800af8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af8e:	d02f      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800af90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af94:	d826      	bhi.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800af96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af9a:	d008      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800af9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afa0:	d820      	bhi.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800afa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afaa:	d011      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800afac:	e01a      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800afae:	4b8e      	ldr	r3, [pc, #568]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb2:	4a8d      	ldr	r2, [pc, #564]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afb8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800afba:	e01a      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800afbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc0:	3308      	adds	r3, #8
 800afc2:	4618      	mov	r0, r3
 800afc4:	f002 fc72 	bl	800d8ac <RCCEx_PLL2_Config>
 800afc8:	4603      	mov	r3, r0
 800afca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800afce:	e010      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800afd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd4:	332c      	adds	r3, #44	@ 0x2c
 800afd6:	4618      	mov	r0, r3
 800afd8:	f002 fd00 	bl	800d9dc <RCCEx_PLL3_Config>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800afe2:	e006      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800afea:	e002      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800afec:	bf00      	nop
 800afee:	e000      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800aff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aff2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10d      	bne.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800affa:	4b7b      	ldr	r3, [pc, #492]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800affc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b000:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b00c:	4a76      	ldr	r2, [pc, #472]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b00e:	430b      	orrs	r3, r1
 800b010:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b014:	e003      	b.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b016:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b01a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b02a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b02e:	2300      	movs	r3, #0
 800b030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b034:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b038:	460b      	mov	r3, r1
 800b03a:	4313      	orrs	r3, r2
 800b03c:	d046      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b03e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b046:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b04a:	d028      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b04c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b050:	d821      	bhi.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b056:	d022      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b05c:	d81b      	bhi.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b05e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b062:	d01c      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b064:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b068:	d815      	bhi.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b06a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b06e:	d008      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b074:	d80f      	bhi.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b076:	2b00      	cmp	r3, #0
 800b078:	d011      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b07a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b07e:	d00e      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b080:	e009      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b086:	3308      	adds	r3, #8
 800b088:	4618      	mov	r0, r3
 800b08a:	f002 fc0f 	bl	800d8ac <RCCEx_PLL2_Config>
 800b08e:	4603      	mov	r3, r0
 800b090:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b094:	e004      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b09c:	e000      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0a0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10d      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b0a8:	4b4f      	ldr	r3, [pc, #316]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b0aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0ae:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b0ba:	4a4b      	ldr	r2, [pc, #300]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b0c2:	e003      	b.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0c8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b0cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b0d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	d03f      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b0ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0f4:	2b04      	cmp	r3, #4
 800b0f6:	d81e      	bhi.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b0f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b100 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b13f 	.word	0x0800b13f
 800b104:	0800b115 	.word	0x0800b115
 800b108:	0800b123 	.word	0x0800b123
 800b10c:	0800b13f 	.word	0x0800b13f
 800b110:	0800b13f 	.word	0x0800b13f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b114:	4b34      	ldr	r3, [pc, #208]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b118:	4a33      	ldr	r2, [pc, #204]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b11a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b11e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b120:	e00e      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b126:	332c      	adds	r3, #44	@ 0x2c
 800b128:	4618      	mov	r0, r3
 800b12a:	f002 fc57 	bl	800d9dc <RCCEx_PLL3_Config>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b134:	e004      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b13c:	e000      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b13e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b140:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10d      	bne.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b148:	4b27      	ldr	r3, [pc, #156]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b14a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b14e:	f023 0107 	bic.w	r1, r3, #7
 800b152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b15a:	4a23      	ldr	r2, [pc, #140]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b15c:	430b      	orrs	r3, r1
 800b15e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b162:	e003      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b164:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b168:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b17a:	2300      	movs	r3, #0
 800b17c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b17e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b182:	460b      	mov	r3, r1
 800b184:	4313      	orrs	r3, r2
 800b186:	d04c      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b18c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b190:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b194:	d02a      	beq.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b19a:	d821      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b19c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1a0:	d026      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b1a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1a6:	d81b      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b1a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1ac:	d00e      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b1ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1b2:	d815      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d01d      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b1b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1bc:	d110      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b1be:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c2:	4a09      	ldr	r2, [pc, #36]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b1c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1c8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b1ca:	e014      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d0:	332c      	adds	r3, #44	@ 0x2c
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f002 fc02 	bl	800d9dc <RCCEx_PLL3_Config>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b1de:	e00a      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b1e6:	e006      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b1e8:	46020c00 	.word	0x46020c00
        break;
 800b1ec:	bf00      	nop
 800b1ee:	e002      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b1f0:	bf00      	nop
 800b1f2:	e000      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b1f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b1f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10d      	bne.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b1fe:	4baf      	ldr	r3, [pc, #700]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b204:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b20c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b210:	4aaa      	ldr	r2, [pc, #680]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b212:	430b      	orrs	r3, r1
 800b214:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b218:	e003      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b21e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b22e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b230:	2300      	movs	r3, #0
 800b232:	677b      	str	r3, [r7, #116]	@ 0x74
 800b234:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b238:	460b      	mov	r3, r1
 800b23a:	4313      	orrs	r3, r2
 800b23c:	f000 80b5 	beq.w	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b246:	4b9d      	ldr	r3, [pc, #628]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b00      	cmp	r3, #0
 800b252:	d113      	bne.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b254:	4b99      	ldr	r3, [pc, #612]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b25a:	4a98      	ldr	r2, [pc, #608]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b25c:	f043 0304 	orr.w	r3, r3, #4
 800b260:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b264:	4b95      	ldr	r3, [pc, #596]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b272:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b276:	2301      	movs	r3, #1
 800b278:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b27c:	4b90      	ldr	r3, [pc, #576]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b280:	4a8f      	ldr	r2, [pc, #572]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b282:	f043 0301 	orr.w	r3, r3, #1
 800b286:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b288:	f7f7 fb44 	bl	8002914 <HAL_GetTick>
 800b28c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b290:	e00b      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b292:	f7f7 fb3f 	bl	8002914 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d903      	bls.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b2a8:	e005      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b2aa:	4b85      	ldr	r3, [pc, #532]	@ (800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0ed      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b2b6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d165      	bne.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b2be:	4b7f      	ldr	r3, [pc, #508]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b2cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d023      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b2dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d01b      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b2e4:	4b75      	ldr	r3, [pc, #468]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2f2:	4b72      	ldr	r3, [pc, #456]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2f8:	4a70      	ldr	r2, [pc, #448]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b302:	4b6e      	ldr	r3, [pc, #440]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b308:	4a6c      	ldr	r2, [pc, #432]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b30a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b30e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b312:	4a6a      	ldr	r2, [pc, #424]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b318:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b31c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b00      	cmp	r3, #0
 800b326:	d019      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b328:	f7f7 faf4 	bl	8002914 <HAL_GetTick>
 800b32c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b330:	e00d      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b332:	f7f7 faef 	bl	8002914 <HAL_GetTick>
 800b336:	4602      	mov	r2, r0
 800b338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b33c:	1ad2      	subs	r2, r2, r3
 800b33e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b342:	429a      	cmp	r2, r3
 800b344:	d903      	bls.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b34c:	e006      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b34e:	4b5b      	ldr	r3, [pc, #364]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d0ea      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b35c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10d      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b364:	4b55      	ldr	r3, [pc, #340]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b36a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b372:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b376:	4a51      	ldr	r2, [pc, #324]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b378:	430b      	orrs	r3, r1
 800b37a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b37e:	e008      	b.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b380:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b384:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b388:	e003      	b.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b38a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b38e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b392:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b396:	2b01      	cmp	r3, #1
 800b398:	d107      	bne.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b39a:	4b48      	ldr	r3, [pc, #288]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b39c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3a0:	4a46      	ldr	r2, [pc, #280]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b3a2:	f023 0304 	bic.w	r3, r3, #4
 800b3a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b3b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b3bc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	d042      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b3ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b3d2:	d022      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b3d4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b3d8:	d81b      	bhi.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b3da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3de:	d011      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b3e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3e4:	d815      	bhi.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d019      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b3ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b3ee:	d110      	bne.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f002 fa58 	bl	800d8ac <RCCEx_PLL2_Config>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b402:	e00d      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b404:	4b2d      	ldr	r3, [pc, #180]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b408:	4a2c      	ldr	r2, [pc, #176]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b40a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b40e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b410:	e006      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b418:	e002      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b41a:	bf00      	nop
 800b41c:	e000      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b41e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b420:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10d      	bne.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b428:	4b24      	ldr	r3, [pc, #144]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b42a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b42e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b43a:	4a20      	ldr	r2, [pc, #128]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b43c:	430b      	orrs	r3, r1
 800b43e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b442:	e003      	b.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b444:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b448:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b458:	663b      	str	r3, [r7, #96]	@ 0x60
 800b45a:	2300      	movs	r3, #0
 800b45c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b45e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b462:	460b      	mov	r3, r1
 800b464:	4313      	orrs	r3, r2
 800b466:	d031      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b46c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b474:	d00b      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b47a:	d804      	bhi.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d008      	beq.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b484:	d007      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b48c:	e004      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b48e:	bf00      	nop
 800b490:	e002      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b492:	bf00      	nop
 800b494:	e000      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b496:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b498:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d111      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b4a0:	4b06      	ldr	r3, [pc, #24]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b4a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4b2:	4a02      	ldr	r2, [pc, #8]	@ (800b4bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b4ba:	e007      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b4bc:	46020c00 	.word	0x46020c00
 800b4c0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4c8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b4d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4da:	2300      	movs	r3, #0
 800b4dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	d00c      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b4e8:	4bb2      	ldr	r3, [pc, #712]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4ee:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b4fa:	4aae      	ldr	r2, [pc, #696]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b50e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b510:	2300      	movs	r3, #0
 800b512:	657b      	str	r3, [r7, #84]	@ 0x54
 800b514:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b518:	460b      	mov	r3, r1
 800b51a:	4313      	orrs	r3, r2
 800b51c:	d019      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b52a:	d105      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b52c:	4ba1      	ldr	r3, [pc, #644]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b530:	4aa0      	ldr	r2, [pc, #640]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b536:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b538:	4b9e      	ldr	r3, [pc, #632]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b53a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b53e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b54a:	4a9a      	ldr	r2, [pc, #616]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b54c:	430b      	orrs	r3, r1
 800b54e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b560:	2300      	movs	r3, #0
 800b562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b564:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b568:	460b      	mov	r3, r1
 800b56a:	4313      	orrs	r3, r2
 800b56c:	d00c      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b56e:	4b91      	ldr	r3, [pc, #580]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b574:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b57c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b580:	4a8c      	ldr	r2, [pc, #560]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b582:	430b      	orrs	r3, r1
 800b584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b594:	643b      	str	r3, [r7, #64]	@ 0x40
 800b596:	2300      	movs	r3, #0
 800b598:	647b      	str	r3, [r7, #68]	@ 0x44
 800b59a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	d00c      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b5a4:	4b83      	ldr	r3, [pc, #524]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b5b6:	4a7f      	ldr	r2, [pc, #508]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5b8:	430b      	orrs	r3, r1
 800b5ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b5be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	d00c      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b5da:	4b76      	ldr	r3, [pc, #472]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5e0:	f023 0118 	bic.w	r1, r3, #24
 800b5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b5ec:	4a71      	ldr	r2, [pc, #452]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5ee:	430b      	orrs	r3, r1
 800b5f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b600:	633b      	str	r3, [r7, #48]	@ 0x30
 800b602:	2300      	movs	r3, #0
 800b604:	637b      	str	r3, [r7, #52]	@ 0x34
 800b606:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b60a:	460b      	mov	r3, r1
 800b60c:	4313      	orrs	r3, r2
 800b60e:	d032      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b614:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b618:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b61c:	d105      	bne.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b61e:	4b65      	ldr	r3, [pc, #404]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b622:	4a64      	ldr	r2, [pc, #400]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b628:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b62e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b632:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b636:	d108      	bne.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b63c:	3308      	adds	r3, #8
 800b63e:	4618      	mov	r0, r3
 800b640:	f002 f934 	bl	800d8ac <RCCEx_PLL2_Config>
 800b644:	4603      	mov	r3, r0
 800b646:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b64a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10d      	bne.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b652:	4b58      	ldr	r3, [pc, #352]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b654:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b658:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b660:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b664:	4a53      	ldr	r2, [pc, #332]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b666:	430b      	orrs	r3, r1
 800b668:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b66c:	e003      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b66e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b672:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	2100      	movs	r1, #0
 800b680:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b688:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b68c:	460b      	mov	r3, r1
 800b68e:	4313      	orrs	r3, r2
 800b690:	d04a      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b696:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b69a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b69e:	d01e      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b6a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b6a4:	d825      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b6a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b6aa:	d00e      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b6ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b6b0:	d81f      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d021      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b6b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6ba:	d11a      	bne.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6bc:	4b3d      	ldr	r3, [pc, #244]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c0:	4a3c      	ldr	r2, [pc, #240]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b6c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6c6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b6c8:	e018      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b6ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f002 f8eb 	bl	800d8ac <RCCEx_PLL2_Config>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b6dc:	e00e      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b6de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6e2:	332c      	adds	r3, #44	@ 0x2c
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f002 f979 	bl	800d9dc <RCCEx_PLL3_Config>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b6f0:	e004      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b6f8:	e000      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b6fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10d      	bne.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b704:	4b2b      	ldr	r3, [pc, #172]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b70a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b70e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b712:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b716:	4927      	ldr	r1, [pc, #156]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b71e:	e003      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b720:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b724:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b734:	623b      	str	r3, [r7, #32]
 800b736:	2300      	movs	r3, #0
 800b738:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b73e:	460b      	mov	r3, r1
 800b740:	4313      	orrs	r3, r2
 800b742:	d03d      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b74c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b750:	d00e      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b756:	d815      	bhi.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d017      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b75c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b760:	d110      	bne.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b762:	4b14      	ldr	r3, [pc, #80]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b766:	4a13      	ldr	r2, [pc, #76]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b76c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b76e:	e00e      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b774:	3308      	adds	r3, #8
 800b776:	4618      	mov	r0, r3
 800b778:	f002 f898 	bl	800d8ac <RCCEx_PLL2_Config>
 800b77c:	4603      	mov	r3, r0
 800b77e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b782:	e004      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b78a:	e000      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b78c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b78e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b792:	2b00      	cmp	r3, #0
 800b794:	d110      	bne.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b796:	4b07      	ldr	r3, [pc, #28]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b79c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7a8:	4902      	ldr	r1, [pc, #8]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b7b0:	e006      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b7b2:	bf00      	nop
 800b7b4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7bc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b7cc:	61bb      	str	r3, [r7, #24]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	d00c      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b7dc:	4b68      	ldr	r3, [pc, #416]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b7de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b7e2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b7e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b7ee:	4964      	ldr	r1, [pc, #400]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b7f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	2100      	movs	r1, #0
 800b800:	6139      	str	r1, [r7, #16]
 800b802:	f003 0302 	and.w	r3, r3, #2
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b80c:	460b      	mov	r3, r1
 800b80e:	4313      	orrs	r3, r2
 800b810:	d036      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800b812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b816:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00c      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b81e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b822:	d113      	bne.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b828:	3308      	adds	r3, #8
 800b82a:	4618      	mov	r0, r3
 800b82c:	f002 f83e 	bl	800d8ac <RCCEx_PLL2_Config>
 800b830:	4603      	mov	r3, r0
 800b832:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b836:	e00d      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b83c:	332c      	adds	r3, #44	@ 0x2c
 800b83e:	4618      	mov	r0, r3
 800b840:	f002 f8cc 	bl	800d9dc <RCCEx_PLL3_Config>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b84a:	e003      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b852:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b854:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10d      	bne.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800b85c:	4b48      	ldr	r3, [pc, #288]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b85e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b862:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b86e:	4944      	ldr	r1, [pc, #272]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b870:	4313      	orrs	r3, r2
 800b872:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b876:	e003      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b878:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b87c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	2100      	movs	r1, #0
 800b88a:	60b9      	str	r1, [r7, #8]
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	60fb      	str	r3, [r7, #12]
 800b892:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b896:	460b      	mov	r3, r1
 800b898:	4313      	orrs	r3, r2
 800b89a:	d024      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800b89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d108      	bne.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ac:	332c      	adds	r3, #44	@ 0x2c
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f002 f894 	bl	800d9dc <RCCEx_PLL3_Config>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800b8ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10d      	bne.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800b8c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b8c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b8c8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b8cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b8d4:	492a      	ldr	r1, [pc, #168]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b8dc:	e003      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8e2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b8e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	6039      	str	r1, [r7, #0]
 800b8f2:	f003 0308 	and.w	r3, r3, #8
 800b8f6:	607b      	str	r3, [r7, #4]
 800b8f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4313      	orrs	r3, r2
 800b900:	d036      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b906:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b90a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b90e:	d00d      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800b910:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b914:	d811      	bhi.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b916:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b91a:	d012      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b91c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b920:	d80b      	bhi.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00d      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b92a:	d106      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b92c:	4b14      	ldr	r3, [pc, #80]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b930:	4a13      	ldr	r2, [pc, #76]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b936:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800b938:	e004      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b940:	e000      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800b942:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b944:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10d      	bne.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b94c:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b94e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b952:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b95e:	4908      	ldr	r1, [pc, #32]	@ (800b980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b960:	4313      	orrs	r3, r2
 800b962:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b966:	e003      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b968:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b96c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b970:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800b974:	4618      	mov	r0, r3
 800b976:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b97a:	46bd      	mov	sp, r7
 800b97c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b980:	46020c00 	.word	0x46020c00

0800b984 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b984:	b480      	push	{r7}
 800b986:	b089      	sub	sp, #36	@ 0x24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b98c:	4ba6      	ldr	r3, [pc, #664]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b994:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b996:	4ba4      	ldr	r3, [pc, #656]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b9a0:	4ba1      	ldr	r3, [pc, #644]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a4:	0a1b      	lsrs	r3, r3, #8
 800b9a6:	f003 030f 	and.w	r3, r3, #15
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b9ae:	4b9e      	ldr	r3, [pc, #632]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b2:	091b      	lsrs	r3, r3, #4
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b9ba:	4b9b      	ldr	r3, [pc, #620]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9be:	08db      	lsrs	r3, r3, #3
 800b9c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ca:	ee07 3a90 	vmov	s15, r3
 800b9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b03      	cmp	r3, #3
 800b9da:	d062      	beq.n	800baa2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	f200 8081 	bhi.w	800bae6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d024      	beq.n	800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d17a      	bne.n	800bae6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bc2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba02:	4b89      	ldr	r3, [pc, #548]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0a:	ee07 3a90 	vmov	s15, r3
 800ba0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba12:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba16:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ba1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ba1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba26:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ba2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba32:	e08f      	b.n	800bb54 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ba34:	4b7c      	ldr	r3, [pc, #496]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800ba40:	4b79      	ldr	r3, [pc, #484]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	0f1b      	lsrs	r3, r3, #28
 800ba46:	f003 030f 	and.w	r3, r3, #15
 800ba4a:	e006      	b.n	800ba5a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800ba4c:	4b76      	ldr	r3, [pc, #472]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba52:	041b      	lsls	r3, r3, #16
 800ba54:	0f1b      	lsrs	r3, r3, #28
 800ba56:	f003 030f 	and.w	r3, r3, #15
 800ba5a:	4a76      	ldr	r2, [pc, #472]	@ (800bc34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800ba5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba60:	ee07 3a90 	vmov	s15, r3
 800ba64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	ee07 3a90 	vmov	s15, r3
 800ba6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	ee07 3a90 	vmov	s15, r3
 800ba7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba80:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba84:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ba88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba94:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ba98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baa0:	e058      	b.n	800bb54 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	ee07 3a90 	vmov	s15, r3
 800baa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab4:	4b5c      	ldr	r3, [pc, #368]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800babc:	ee07 3a90 	vmov	s15, r3
 800bac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bac4:	ed97 6a02 	vldr	s12, [r7, #8]
 800bac8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bacc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bad4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800badc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bae4:	e036      	b.n	800bb54 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bae6:	4b50      	ldr	r3, [pc, #320]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d005      	beq.n	800bafe <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800baf2:	4b4d      	ldr	r3, [pc, #308]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	0f1b      	lsrs	r3, r3, #28
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	e006      	b.n	800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800bafe:	4b4a      	ldr	r3, [pc, #296]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb04:	041b      	lsls	r3, r3, #16
 800bb06:	0f1b      	lsrs	r3, r3, #28
 800bb08:	f003 030f 	and.w	r3, r3, #15
 800bb0c:	4a49      	ldr	r2, [pc, #292]	@ (800bc34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bb0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb12:	ee07 3a90 	vmov	s15, r3
 800bb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	ee07 3a90 	vmov	s15, r3
 800bb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	ee07 3a90 	vmov	s15, r3
 800bb2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb32:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb36:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bb3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb46:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bb4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb52:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800bb54:	4b34      	ldr	r3, [pc, #208]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d017      	beq.n	800bb90 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bb60:	4b31      	ldr	r3, [pc, #196]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb64:	0a5b      	lsrs	r3, r3, #9
 800bb66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb6a:	ee07 3a90 	vmov	s15, r3
 800bb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800bb72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb76:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bb7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb86:	ee17 2a90 	vmov	r2, s15
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	e002      	b.n	800bb96 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bb96:	4b24      	ldr	r3, [pc, #144]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d017      	beq.n	800bbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bba2:	4b21      	ldr	r3, [pc, #132]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba6:	0c1b      	lsrs	r3, r3, #16
 800bba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbac:	ee07 3a90 	vmov	s15, r3
 800bbb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bbb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbb8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bbbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbc8:	ee17 2a90 	vmov	r2, s15
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	605a      	str	r2, [r3, #4]
 800bbd0:	e002      	b.n	800bbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bbd8:	4b13      	ldr	r3, [pc, #76]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bbda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d017      	beq.n	800bc14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bbe4:	4b10      	ldr	r3, [pc, #64]	@ (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bbe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbe8:	0e1b      	lsrs	r3, r3, #24
 800bbea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bbf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbfa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bbfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc0a:	ee17 2a90 	vmov	r2, s15
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc12:	e002      	b.n	800bc1a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	609a      	str	r2, [r3, #8]
}
 800bc1a:	bf00      	nop
 800bc1c:	3724      	adds	r7, #36	@ 0x24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	46020c00 	.word	0x46020c00
 800bc2c:	4b742400 	.word	0x4b742400
 800bc30:	46000000 	.word	0x46000000
 800bc34:	080110b4 	.word	0x080110b4

0800bc38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b089      	sub	sp, #36	@ 0x24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bc40:	4ba6      	ldr	r3, [pc, #664]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc48:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bc4a:	4ba4      	ldr	r3, [pc, #656]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bc54:	4ba1      	ldr	r3, [pc, #644]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc58:	0a1b      	lsrs	r3, r3, #8
 800bc5a:	f003 030f 	and.w	r3, r3, #15
 800bc5e:	3301      	adds	r3, #1
 800bc60:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bc62:	4b9e      	ldr	r3, [pc, #632]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	091b      	lsrs	r3, r3, #4
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800bc6e:	4b9b      	ldr	r3, [pc, #620]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc72:	08db      	lsrs	r3, r3, #3
 800bc74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	fb02 f303 	mul.w	r3, r2, r3
 800bc7e:	ee07 3a90 	vmov	s15, r3
 800bc82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc86:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d062      	beq.n	800bd56 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	f200 8081 	bhi.w	800bd9a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d024      	beq.n	800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d17a      	bne.n	800bd9a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bcb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb6:	4b89      	ldr	r3, [pc, #548]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bcb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bcce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bcd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bcde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bce6:	e08f      	b.n	800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800bce8:	4b7c      	ldr	r3, [pc, #496]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d005      	beq.n	800bd00 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800bcf4:	4b79      	ldr	r3, [pc, #484]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	0f1b      	lsrs	r3, r3, #28
 800bcfa:	f003 030f 	and.w	r3, r3, #15
 800bcfe:	e006      	b.n	800bd0e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800bd00:	4b76      	ldr	r3, [pc, #472]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bd02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd06:	041b      	lsls	r3, r3, #16
 800bd08:	0f1b      	lsrs	r3, r3, #28
 800bd0a:	f003 030f 	and.w	r3, r3, #15
 800bd0e:	4a76      	ldr	r2, [pc, #472]	@ (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800bd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	ee07 3a90 	vmov	s15, r3
 800bd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	ee07 3a90 	vmov	s15, r3
 800bd30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd34:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd38:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bd3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd48:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800bd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd54:	e058      	b.n	800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	ee07 3a90 	vmov	s15, r3
 800bd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd60:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bd64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd68:	4b5c      	ldr	r3, [pc, #368]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bd6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd78:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd7c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bd80:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bd84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bd90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd98:	e036      	b.n	800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bd9a:	4b50      	ldr	r3, [pc, #320]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d005      	beq.n	800bdb2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800bda6:	4b4d      	ldr	r3, [pc, #308]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	0f1b      	lsrs	r3, r3, #28
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	e006      	b.n	800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800bdb2:	4b4a      	ldr	r3, [pc, #296]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bdb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdb8:	041b      	lsls	r3, r3, #16
 800bdba:	0f1b      	lsrs	r3, r3, #28
 800bdbc:	f003 030f 	and.w	r3, r3, #15
 800bdc0:	4a49      	ldr	r2, [pc, #292]	@ (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	ee07 3a90 	vmov	s15, r3
 800bdd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bdee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bdfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be06:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800be08:	4b34      	ldr	r3, [pc, #208]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d017      	beq.n	800be44 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800be14:	4b31      	ldr	r3, [pc, #196]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be18:	0a5b      	lsrs	r3, r3, #9
 800be1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be1e:	ee07 3a90 	vmov	s15, r3
 800be22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800be26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800be2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3a:	ee17 2a90 	vmov	r2, s15
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	e002      	b.n	800be4a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800be4a:	4b24      	ldr	r3, [pc, #144]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d017      	beq.n	800be86 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800be56:	4b21      	ldr	r3, [pc, #132]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be5a:	0c1b      	lsrs	r3, r3, #16
 800be5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800be68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be6c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800be70:	edd7 6a07 	vldr	s13, [r7, #28]
 800be74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be7c:	ee17 2a90 	vmov	r2, s15
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	605a      	str	r2, [r3, #4]
 800be84:	e002      	b.n	800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800be8c:	4b13      	ldr	r3, [pc, #76]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be94:	2b00      	cmp	r3, #0
 800be96:	d017      	beq.n	800bec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800be98:	4b10      	ldr	r3, [pc, #64]	@ (800bedc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be9c:	0e1b      	lsrs	r3, r3, #24
 800be9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800beaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800beae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800beb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bebe:	ee17 2a90 	vmov	r2, s15
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bec6:	e002      	b.n	800bece <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	609a      	str	r2, [r3, #8]
}
 800bece:	bf00      	nop
 800bed0:	3724      	adds	r7, #36	@ 0x24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	46020c00 	.word	0x46020c00
 800bee0:	4b742400 	.word	0x4b742400
 800bee4:	46000000 	.word	0x46000000
 800bee8:	080110b4 	.word	0x080110b4

0800beec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800beec:	b480      	push	{r7}
 800beee:	b089      	sub	sp, #36	@ 0x24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800bef4:	4ba6      	ldr	r3, [pc, #664]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800befc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800befe:	4ba4      	ldr	r3, [pc, #656]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf02:	f003 0303 	and.w	r3, r3, #3
 800bf06:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800bf08:	4ba1      	ldr	r3, [pc, #644]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf0c:	0a1b      	lsrs	r3, r3, #8
 800bf0e:	f003 030f 	and.w	r3, r3, #15
 800bf12:	3301      	adds	r3, #1
 800bf14:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800bf16:	4b9e      	ldr	r3, [pc, #632]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf1a:	091b      	lsrs	r3, r3, #4
 800bf1c:	f003 0301 	and.w	r3, r3, #1
 800bf20:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800bf22:	4b9b      	ldr	r3, [pc, #620]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf26:	08db      	lsrs	r3, r3, #3
 800bf28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	fb02 f303 	mul.w	r3, r2, r3
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d062      	beq.n	800c00a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	f200 8081 	bhi.w	800c04e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d024      	beq.n	800bf9c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d17a      	bne.n	800c04e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	ee07 3a90 	vmov	s15, r3
 800bf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf62:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bf66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf6a:	4b89      	ldr	r3, [pc, #548]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf72:	ee07 3a90 	vmov	s15, r3
 800bf76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf7e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bf82:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bf86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bf92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf96:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800bf9a:	e08f      	b.n	800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bf9c:	4b7c      	ldr	r3, [pc, #496]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d005      	beq.n	800bfb4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800bfa8:	4b79      	ldr	r3, [pc, #484]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	0f1b      	lsrs	r3, r3, #28
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	e006      	b.n	800bfc2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800bfb4:	4b76      	ldr	r3, [pc, #472]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bfb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bfba:	041b      	lsls	r3, r3, #16
 800bfbc:	0f1b      	lsrs	r3, r3, #28
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	4a76      	ldr	r2, [pc, #472]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc8:	ee07 3a90 	vmov	s15, r3
 800bfcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	ee07 3a90 	vmov	s15, r3
 800bfd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe8:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c004:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c008:	e058      	b.n	800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	ee07 3a90 	vmov	s15, r3
 800c010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c014:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c01c:	4b5c      	ldr	r3, [pc, #368]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c01e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c024:	ee07 3a90 	vmov	s15, r3
 800c028:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c02c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c030:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c034:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c038:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c03c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c040:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c048:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c04c:	e036      	b.n	800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c04e:	4b50      	ldr	r3, [pc, #320]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c056:	2b00      	cmp	r3, #0
 800c058:	d005      	beq.n	800c066 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c05a:	4b4d      	ldr	r3, [pc, #308]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	0f1b      	lsrs	r3, r3, #28
 800c060:	f003 030f 	and.w	r3, r3, #15
 800c064:	e006      	b.n	800c074 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c066:	4b4a      	ldr	r3, [pc, #296]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c06c:	041b      	lsls	r3, r3, #16
 800c06e:	0f1b      	lsrs	r3, r3, #28
 800c070:	f003 030f 	and.w	r3, r3, #15
 800c074:	4a49      	ldr	r2, [pc, #292]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	ee07 3a90 	vmov	s15, r3
 800c088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	ee07 3a90 	vmov	s15, r3
 800c096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c09e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0ba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c0bc:	4b34      	ldr	r3, [pc, #208]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d017      	beq.n	800c0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c0c8:	4b31      	ldr	r3, [pc, #196]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c0ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0cc:	0a5b      	lsrs	r3, r3, #9
 800c0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c0da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c0e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ee:	ee17 2a90 	vmov	r2, s15
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	e002      	b.n	800c0fe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c0fe:	4b24      	ldr	r3, [pc, #144]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c106:	2b00      	cmp	r3, #0
 800c108:	d017      	beq.n	800c13a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c10a:	4b21      	ldr	r3, [pc, #132]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c10e:	0c1b      	lsrs	r3, r3, #16
 800c110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c114:	ee07 3a90 	vmov	s15, r3
 800c118:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c11c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c120:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c124:	edd7 6a07 	vldr	s13, [r7, #28]
 800c128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c12c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c130:	ee17 2a90 	vmov	r2, s15
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	605a      	str	r2, [r3, #4]
 800c138:	e002      	b.n	800c140 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c140:	4b13      	ldr	r3, [pc, #76]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c144:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d017      	beq.n	800c17c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c14c:	4b10      	ldr	r3, [pc, #64]	@ (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c14e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c150:	0e1b      	lsrs	r3, r3, #24
 800c152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c15e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c162:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c166:	edd7 6a07 	vldr	s13, [r7, #28]
 800c16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c172:	ee17 2a90 	vmov	r2, s15
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c17a:	e002      	b.n	800c182 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	609a      	str	r2, [r3, #8]
}
 800c182:	bf00      	nop
 800c184:	3724      	adds	r7, #36	@ 0x24
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	46020c00 	.word	0x46020c00
 800c194:	4b742400 	.word	0x4b742400
 800c198:	46000000 	.word	0x46000000
 800c19c:	080110b4 	.word	0x080110b4

0800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08e      	sub	sp, #56	@ 0x38
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ae:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c1b2:	430b      	orrs	r3, r1
 800c1b4:	d145      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c1b6:	4ba7      	ldr	r3, [pc, #668]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c1b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1c0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c1c2:	4ba4      	ldr	r3, [pc, #656]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c1c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1c8:	f003 0302 	and.w	r3, r3, #2
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d108      	bne.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1d6:	d104      	bne.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c1d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1de:	f001 bb5a 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c1e2:	4b9c      	ldr	r3, [pc, #624]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c1e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1f0:	d114      	bne.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1f8:	d110      	bne.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c1fa:	4b96      	ldr	r3, [pc, #600]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c1fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c204:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c208:	d103      	bne.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c20a:	23fa      	movs	r3, #250	@ 0xfa
 800c20c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c20e:	f001 bb42 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c212:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c216:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c218:	f001 bb3d 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c21c:	4b8d      	ldr	r3, [pc, #564]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c228:	d107      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c230:	d103      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c232:	4b89      	ldr	r3, [pc, #548]	@ (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
 800c236:	f001 bb2e 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c23e:	f001 bb2a 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c242:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c246:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c24a:	430b      	orrs	r3, r1
 800c24c:	d151      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c24e:	4b81      	ldr	r3, [pc, #516]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c254:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c258:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25c:	2b80      	cmp	r3, #128	@ 0x80
 800c25e:	d035      	beq.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c262:	2b80      	cmp	r3, #128	@ 0x80
 800c264:	d841      	bhi.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c268:	2b60      	cmp	r3, #96	@ 0x60
 800c26a:	d02a      	beq.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26e:	2b60      	cmp	r3, #96	@ 0x60
 800c270:	d83b      	bhi.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c274:	2b40      	cmp	r3, #64	@ 0x40
 800c276:	d009      	beq.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27a:	2b40      	cmp	r3, #64	@ 0x40
 800c27c:	d835      	bhi.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00c      	beq.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c286:	2b20      	cmp	r3, #32
 800c288:	d012      	beq.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c28a:	e02e      	b.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c28c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff fb77 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c298:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c29a:	f001 bafc 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29e:	f107 0318 	add.w	r3, r7, #24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff fcc8 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2ac:	f001 baf3 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2b0:	f107 030c 	add.w	r3, r7, #12
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff fe19 	bl	800beec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2be:	f001 baea 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c2c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c2c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2c8:	f001 bae5 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2cc:	4b61      	ldr	r3, [pc, #388]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2d8:	d103      	bne.n	800c2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c2da:	4b60      	ldr	r3, [pc, #384]	@ (800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c2dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c2de:	f001 bada 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2e6:	f001 bad6 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2ee:	f001 bad2 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c2fa:	430b      	orrs	r3, r1
 800c2fc:	d158      	bne.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c2fe:	4b55      	ldr	r3, [pc, #340]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c300:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c304:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c308:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c310:	d03b      	beq.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c318:	d846      	bhi.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c320:	d02e      	beq.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c328:	d83e      	bhi.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c32c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c330:	d00b      	beq.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c338:	d836      	bhi.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00d      	beq.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c346:	d012      	beq.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c348:	e02e      	b.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c34a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff fb18 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c358:	f001 ba9d 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c35c:	f107 0318 	add.w	r3, r7, #24
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff fc69 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c36a:	f001 ba94 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c36e:	f107 030c 	add.w	r3, r7, #12
 800c372:	4618      	mov	r0, r3
 800c374:	f7ff fdba 	bl	800beec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c37c:	f001 ba8b 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c380:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c384:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c386:	f001 ba86 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c38a:	4b32      	ldr	r3, [pc, #200]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c396:	d103      	bne.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c398:	4b30      	ldr	r3, [pc, #192]	@ (800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c39a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c39c:	f001 ba7b 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3a4:	f001 ba77 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3ac:	f001 ba73 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c3b8:	430b      	orrs	r3, r1
 800c3ba:	d126      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c3bc:	4b25      	ldr	r3, [pc, #148]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c3be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c3c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c3c8:	4b22      	ldr	r3, [pc, #136]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3d4:	d106      	bne.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d103      	bne.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c3dc:	4b1f      	ldr	r3, [pc, #124]	@ (800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c3de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3e0:	f001 ba59 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c3e4:	4b1b      	ldr	r3, [pc, #108]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3f0:	d107      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3f8:	d103      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c3fa:	4b19      	ldr	r3, [pc, #100]	@ (800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c3fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3fe:	f001 ba4a 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c402:	2300      	movs	r3, #0
 800c404:	637b      	str	r3, [r7, #52]	@ 0x34
 800c406:	f001 ba46 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c40e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c412:	430b      	orrs	r3, r1
 800c414:	d16e      	bne.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c416:	4b0f      	ldr	r3, [pc, #60]	@ (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c41c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c420:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c424:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c428:	d03d      	beq.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c430:	d85c      	bhi.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c434:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c438:	d014      	beq.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c440:	d854      	bhi.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01f      	beq.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c44e:	d012      	beq.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c450:	e04c      	b.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c452:	bf00      	nop
 800c454:	46020c00 	.word	0x46020c00
 800c458:	0007a120 	.word	0x0007a120
 800c45c:	00f42400 	.word	0x00f42400
 800c460:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff fa8b 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c472:	f001 ba10 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c476:	f107 0318 	add.w	r3, r7, #24
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff fbdc 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c484:	f001 ba07 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c488:	4ba7      	ldr	r3, [pc, #668]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c494:	d103      	bne.n	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c496:	4ba5      	ldr	r3, [pc, #660]	@ (800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c498:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c49a:	f001 b9fc 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4a2:	f001 b9f8 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c4a6:	4ba0      	ldr	r3, [pc, #640]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b20      	cmp	r3, #32
 800c4b0:	d118      	bne.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c4b2:	4b9d      	ldr	r3, [pc, #628]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d005      	beq.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c4be:	4b9a      	ldr	r3, [pc, #616]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	0e1b      	lsrs	r3, r3, #24
 800c4c4:	f003 030f 	and.w	r3, r3, #15
 800c4c8:	e006      	b.n	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c4ca:	4b97      	ldr	r3, [pc, #604]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c4cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c4d0:	041b      	lsls	r3, r3, #16
 800c4d2:	0e1b      	lsrs	r3, r3, #24
 800c4d4:	f003 030f 	and.w	r3, r3, #15
 800c4d8:	4a95      	ldr	r2, [pc, #596]	@ (800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c4e0:	f001 b9d9 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4e8:	f001 b9d5 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4f0:	f001 b9d1 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4f8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c4fc:	430b      	orrs	r3, r1
 800c4fe:	d17f      	bne.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c500:	4b89      	ldr	r3, [pc, #548]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c502:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c50a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d165      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c512:	4b85      	ldr	r3, [pc, #532]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c518:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c51c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c520:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c524:	d034      	beq.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c528:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c52c:	d853      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c534:	d00b      	beq.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c53c:	d84b      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c540:	2b00      	cmp	r3, #0
 800c542:	d016      	beq.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c54a:	d009      	beq.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c54c:	e043      	b.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c54e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff fa16 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c55c:	f001 b99b 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c560:	f107 0318 	add.w	r3, r7, #24
 800c564:	4618      	mov	r0, r3
 800c566:	f7ff fb67 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c56e:	f001 b992 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c572:	4b6d      	ldr	r3, [pc, #436]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c57a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c57e:	d103      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c580:	4b6a      	ldr	r3, [pc, #424]	@ (800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c582:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c584:	f001 b987 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c588:	2300      	movs	r3, #0
 800c58a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c58c:	f001 b983 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c590:	4b65      	ldr	r3, [pc, #404]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b20      	cmp	r3, #32
 800c59a:	d118      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c59c:	4b62      	ldr	r3, [pc, #392]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c5a8:	4b5f      	ldr	r3, [pc, #380]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	0e1b      	lsrs	r3, r3, #24
 800c5ae:	f003 030f 	and.w	r3, r3, #15
 800c5b2:	e006      	b.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c5b4:	4b5c      	ldr	r3, [pc, #368]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c5b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c5ba:	041b      	lsls	r3, r3, #16
 800c5bc:	0e1b      	lsrs	r3, r3, #24
 800c5be:	f003 030f 	and.w	r3, r3, #15
 800c5c2:	4a5b      	ldr	r2, [pc, #364]	@ (800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c5ca:	f001 b964 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c5d2:	f001 b960 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c5da:	f001 b95c 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c5e4:	d108      	bne.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7ff f9ca 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5f4:	f001 b94f 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5fc:	f001 b94b 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c604:	1e51      	subs	r1, r2, #1
 800c606:	430b      	orrs	r3, r1
 800c608:	d136      	bne.n	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c60a:	4b47      	ldr	r3, [pc, #284]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c60c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c610:	f003 0303 	and.w	r3, r3, #3
 800c614:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d104      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c61c:	f7fe f9cc 	bl	800a9b8 <HAL_RCC_GetPCLK2Freq>
 800c620:	6378      	str	r0, [r7, #52]	@ 0x34
 800c622:	f001 b938 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d104      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c62c:	f7fe f894 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c630:	6378      	str	r0, [r7, #52]	@ 0x34
 800c632:	f001 b930 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c636:	4b3c      	ldr	r3, [pc, #240]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c63e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c642:	d106      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c646:	2b02      	cmp	r3, #2
 800c648:	d103      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c64a:	4b3a      	ldr	r3, [pc, #232]	@ (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c64c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c64e:	f001 b922 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c652:	4b35      	ldr	r3, [pc, #212]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c658:	f003 0302 	and.w	r3, r3, #2
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d107      	bne.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c662:	2b03      	cmp	r3, #3
 800c664:	d104      	bne.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c66a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c66c:	f001 b913 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	637b      	str	r3, [r7, #52]	@ 0x34
 800c674:	f001 b90f 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c67c:	1e91      	subs	r1, r2, #2
 800c67e:	430b      	orrs	r3, r1
 800c680:	d136      	bne.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c682:	4b29      	ldr	r3, [pc, #164]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c688:	f003 030c 	and.w	r3, r3, #12
 800c68c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c690:	2b00      	cmp	r3, #0
 800c692:	d104      	bne.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c694:	f7fe f97c 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800c698:	6378      	str	r0, [r7, #52]	@ 0x34
 800c69a:	f001 b8fc 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a0:	2b04      	cmp	r3, #4
 800c6a2:	d104      	bne.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c6a4:	f7fe f858 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c6a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c6aa:	f001 b8f4 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c6ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6ba:	d106      	bne.n	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6be:	2b08      	cmp	r3, #8
 800c6c0:	d103      	bne.n	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c6c2:	4b1c      	ldr	r3, [pc, #112]	@ (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c6c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c6:	f001 b8e6 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c6ca:	4b17      	ldr	r3, [pc, #92]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c6cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6d0:	f003 0302 	and.w	r3, r3, #2
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d107      	bne.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6da:	2b0c      	cmp	r3, #12
 800c6dc:	d104      	bne.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c6de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6e4:	f001 b8d7 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ec:	f001 b8d3 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f4:	1f11      	subs	r1, r2, #4
 800c6f6:	430b      	orrs	r3, r1
 800c6f8:	d13f      	bne.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c6fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c700:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c704:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d104      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c70c:	f7fe f940 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800c710:	6378      	str	r0, [r7, #52]	@ 0x34
 800c712:	f001 b8c0 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c718:	2b10      	cmp	r3, #16
 800c71a:	d10d      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c71c:	f7fe f81c 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c720:	6378      	str	r0, [r7, #52]	@ 0x34
 800c722:	f001 b8b8 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c726:	bf00      	nop
 800c728:	46020c00 	.word	0x46020c00
 800c72c:	02dc6c00 	.word	0x02dc6c00
 800c730:	080110b4 	.word	0x080110b4
 800c734:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c738:	4ba8      	ldr	r3, [pc, #672]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c744:	d106      	bne.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c748:	2b20      	cmp	r3, #32
 800c74a:	d103      	bne.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c74c:	4ba4      	ldr	r3, [pc, #656]	@ (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c750:	f001 b8a1 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c754:	4ba1      	ldr	r3, [pc, #644]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c75a:	f003 0302 	and.w	r3, r3, #2
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d107      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c764:	2b30      	cmp	r3, #48	@ 0x30
 800c766:	d104      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c76c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c76e:	f001 b892 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	637b      	str	r3, [r7, #52]	@ 0x34
 800c776:	f001 b88e 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c77a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c77e:	f1a2 0108 	sub.w	r1, r2, #8
 800c782:	430b      	orrs	r3, r1
 800c784:	d136      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c786:	4b95      	ldr	r3, [pc, #596]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c78c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c790:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c794:	2b00      	cmp	r3, #0
 800c796:	d104      	bne.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c798:	f7fe f8fa 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800c79c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c79e:	f001 b87a 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a4:	2b40      	cmp	r3, #64	@ 0x40
 800c7a6:	d104      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c7a8:	f7fd ffd6 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c7ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800c7ae:	f001 b872 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c7b2:	4b8a      	ldr	r3, [pc, #552]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7be:	d106      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c2:	2b80      	cmp	r3, #128	@ 0x80
 800c7c4:	d103      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c7c6:	4b86      	ldr	r3, [pc, #536]	@ (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c7c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ca:	f001 b864 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c7ce:	4b83      	ldr	r3, [pc, #524]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c7d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d107      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7de:	2bc0      	cmp	r3, #192	@ 0xc0
 800c7e0:	d104      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c7e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7e8:	f001 b855 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f0:	f001 b851 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7f8:	f1a2 0110 	sub.w	r1, r2, #16
 800c7fc:	430b      	orrs	r3, r1
 800c7fe:	d139      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c800:	4b76      	ldr	r3, [pc, #472]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c80a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d104      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c812:	f7fe f8bd 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800c816:	6378      	str	r0, [r7, #52]	@ 0x34
 800c818:	f001 b83d 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c822:	d104      	bne.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c824:	f7fd ff98 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c828:	6378      	str	r0, [r7, #52]	@ 0x34
 800c82a:	f001 b834 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c82e:	4b6b      	ldr	r3, [pc, #428]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c83a:	d107      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c842:	d103      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c844:	4b66      	ldr	r3, [pc, #408]	@ (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c846:	637b      	str	r3, [r7, #52]	@ 0x34
 800c848:	f001 b825 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c84c:	4b63      	ldr	r3, [pc, #396]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c84e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c852:	f003 0302 	and.w	r3, r3, #2
 800c856:	2b02      	cmp	r3, #2
 800c858:	d108      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c860:	d104      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c866:	637b      	str	r3, [r7, #52]	@ 0x34
 800c868:	f001 b815 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c86c:	2300      	movs	r3, #0
 800c86e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c870:	f001 b811 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800c874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c878:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800c87c:	430b      	orrs	r3, r1
 800c87e:	d139      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c880:	4b56      	ldr	r3, [pc, #344]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c886:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c88a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d104      	bne.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c892:	f7fe f87d 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800c896:	6378      	str	r0, [r7, #52]	@ 0x34
 800c898:	f000 bffd 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8a2:	d104      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c8a4:	f7fd ff58 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c8a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c8aa:	f000 bff4 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c8ae:	4b4b      	ldr	r3, [pc, #300]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8ba:	d107      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8c2:	d103      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800c8c4:	4b46      	ldr	r3, [pc, #280]	@ (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8c8:	f000 bfe5 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c8cc:	4b43      	ldr	r3, [pc, #268]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c8ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8d2:	f003 0302 	and.w	r3, r3, #2
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d108      	bne.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c8e0:	d104      	bne.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800c8e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8e8:	f000 bfd5 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8f0:	f000 bfd1 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8f8:	f1a2 0120 	sub.w	r1, r2, #32
 800c8fc:	430b      	orrs	r3, r1
 800c8fe:	d158      	bne.n	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c900:	4b36      	ldr	r3, [pc, #216]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d104      	bne.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c912:	f7fe f865 	bl	800a9e0 <HAL_RCC_GetPCLK3Freq>
 800c916:	6378      	str	r0, [r7, #52]	@ 0x34
 800c918:	f000 bfbd 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d104      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c922:	f7fd ff19 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c926:	6378      	str	r0, [r7, #52]	@ 0x34
 800c928:	f000 bfb5 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c92c:	4b2b      	ldr	r3, [pc, #172]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c938:	d106      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d103      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800c940:	4b27      	ldr	r3, [pc, #156]	@ (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c942:	637b      	str	r3, [r7, #52]	@ 0x34
 800c944:	f000 bfa7 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c948:	4b24      	ldr	r3, [pc, #144]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c94a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c94e:	f003 0302 	and.w	r3, r3, #2
 800c952:	2b02      	cmp	r3, #2
 800c954:	d107      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	2b03      	cmp	r3, #3
 800c95a:	d104      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800c95c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c960:	637b      	str	r3, [r7, #52]	@ 0x34
 800c962:	f000 bf98 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c966:	4b1d      	ldr	r3, [pc, #116]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 0320 	and.w	r3, r3, #32
 800c96e:	2b20      	cmp	r3, #32
 800c970:	d11b      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800c972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c974:	2b04      	cmp	r3, #4
 800c976:	d118      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c978:	4b18      	ldr	r3, [pc, #96]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d005      	beq.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800c984:	4b15      	ldr	r3, [pc, #84]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	0e1b      	lsrs	r3, r3, #24
 800c98a:	f003 030f 	and.w	r3, r3, #15
 800c98e:	e006      	b.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800c990:	4b12      	ldr	r3, [pc, #72]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c996:	041b      	lsls	r3, r3, #16
 800c998:	0e1b      	lsrs	r3, r3, #24
 800c99a:	f003 030f 	and.w	r3, r3, #15
 800c99e:	4a11      	ldr	r2, [pc, #68]	@ (800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9a6:	f000 bf76 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ae:	f000 bf72 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800c9b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9b6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c9ba:	430b      	orrs	r3, r1
 800c9bc:	d172      	bne.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c9be:	4b07      	ldr	r3, [pc, #28]	@ (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c9c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c9c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c9c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9d0:	d10a      	bne.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9d2:	f7fd fec1 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800c9d6:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9d8:	f000 bf5d 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c9dc:	46020c00 	.word	0x46020c00
 800c9e0:	00f42400 	.word	0x00f42400
 800c9e4:	080110b4 	.word	0x080110b4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9ee:	d108      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9f0:	f107 0318 	add.w	r3, r7, #24
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff f91f 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9fe:	f000 bf4a 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ca02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d104      	bne.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800ca08:	f7fd ffa8 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800ca0c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca0e:	f000 bf42 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800ca12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca14:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ca18:	d122      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ca1a:	4bb0      	ldr	r3, [pc, #704]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 0320 	and.w	r3, r3, #32
 800ca22:	2b20      	cmp	r3, #32
 800ca24:	d118      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca26:	4bad      	ldr	r3, [pc, #692]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d005      	beq.n	800ca3e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800ca32:	4baa      	ldr	r3, [pc, #680]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	0e1b      	lsrs	r3, r3, #24
 800ca38:	f003 030f 	and.w	r3, r3, #15
 800ca3c:	e006      	b.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800ca3e:	4ba7      	ldr	r3, [pc, #668]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca44:	041b      	lsls	r3, r3, #16
 800ca46:	0e1b      	lsrs	r3, r3, #24
 800ca48:	f003 030f 	and.w	r3, r3, #15
 800ca4c:	4aa4      	ldr	r2, [pc, #656]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ca4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca54:	f000 bf1f 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca5c:	f000 bf1b 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ca60:	4b9e      	ldr	r3, [pc, #632]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca6c:	d107      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ca74:	d103      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ca76:	4b9b      	ldr	r3, [pc, #620]	@ (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ca78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca7a:	f000 bf0c 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ca7e:	4b97      	ldr	r3, [pc, #604]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca8a:	d107      	bne.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca92:	d103      	bne.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ca94:	4b93      	ldr	r3, [pc, #588]	@ (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ca96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca98:	f000 befd 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800caa0:	f000 bef9 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800caa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caa8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800caac:	430b      	orrs	r3, r1
 800caae:	d158      	bne.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cab0:	4b8a      	ldr	r3, [pc, #552]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cabe:	2b04      	cmp	r3, #4
 800cac0:	d84b      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800cac2:	a201      	add	r2, pc, #4	@ (adr r2, 800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800cac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac8:	0800cb01 	.word	0x0800cb01
 800cacc:	0800cadd 	.word	0x0800cadd
 800cad0:	0800caef 	.word	0x0800caef
 800cad4:	0800cb0b 	.word	0x0800cb0b
 800cad8:	0800cb15 	.word	0x0800cb15
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cadc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe ff4f 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800caea:	f000 bed4 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caee:	f107 030c 	add.w	r3, r7, #12
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff f9fa 	bl	800beec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cafc:	f000 becb 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cb00:	f7fd ff2c 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800cb04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb06:	f000 bec6 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cb0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cb0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb10:	f000 bec1 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cb14:	4b71      	ldr	r3, [pc, #452]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 0320 	and.w	r3, r3, #32
 800cb1c:	2b20      	cmp	r3, #32
 800cb1e:	d118      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb20:	4b6e      	ldr	r3, [pc, #440]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d005      	beq.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800cb2c:	4b6b      	ldr	r3, [pc, #428]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	0e1b      	lsrs	r3, r3, #24
 800cb32:	f003 030f 	and.w	r3, r3, #15
 800cb36:	e006      	b.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800cb38:	4b68      	ldr	r3, [pc, #416]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb3e:	041b      	lsls	r3, r3, #16
 800cb40:	0e1b      	lsrs	r3, r3, #24
 800cb42:	f003 030f 	and.w	r3, r3, #15
 800cb46:	4a66      	ldr	r2, [pc, #408]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb4e:	f000 bea2 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb56:	f000 be9e 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb5e:	f000 be9a 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800cb62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb66:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cb6a:	430b      	orrs	r3, r1
 800cb6c:	d167      	bne.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cb6e:	4b5b      	ldr	r3, [pc, #364]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cb78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb80:	d036      	beq.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb88:	d855      	bhi.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb90:	d029      	beq.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb98:	d84d      	bhi.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cba0:	d013      	beq.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800cba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cba8:	d845      	bhi.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d015      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbb6:	d13e      	bne.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7fe fee1 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbc6:	f000 be66 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbca:	f107 030c 	add.w	r3, r7, #12
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff f98c 	bl	800beec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbd8:	f000 be5d 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cbdc:	f7fd febe 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800cbe0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cbe2:	f000 be58 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cbe6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cbea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbec:	f000 be53 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cbf0:	4b3a      	ldr	r3, [pc, #232]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 0320 	and.w	r3, r3, #32
 800cbf8:	2b20      	cmp	r3, #32
 800cbfa:	d118      	bne.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cbfc:	4b37      	ldr	r3, [pc, #220]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d005      	beq.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cc08:	4b34      	ldr	r3, [pc, #208]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	0e1b      	lsrs	r3, r3, #24
 800cc0e:	f003 030f 	and.w	r3, r3, #15
 800cc12:	e006      	b.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cc14:	4b31      	ldr	r3, [pc, #196]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc1a:	041b      	lsls	r3, r3, #16
 800cc1c:	0e1b      	lsrs	r3, r3, #24
 800cc1e:	f003 030f 	and.w	r3, r3, #15
 800cc22:	4a2f      	ldr	r2, [pc, #188]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cc2a:	f000 be34 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc32:	f000 be30 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc3a:	f000 be2c 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cc3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc42:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cc46:	430b      	orrs	r3, r1
 800cc48:	d152      	bne.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cc4a:	4b24      	ldr	r3, [pc, #144]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cc54:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d104      	bne.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc5c:	f7fd fe98 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800cc60:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc62:	f000 be18 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc6c:	d104      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc6e:	f7fd fd73 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800cc72:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc74:	f000 be0f 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800cc78:	4b18      	ldr	r3, [pc, #96]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc84:	d107      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc8c:	d103      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800cc8e:	4b15      	ldr	r3, [pc, #84]	@ (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc92:	f000 be00 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800cc96:	4b11      	ldr	r3, [pc, #68]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 0320 	and.w	r3, r3, #32
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	d122      	bne.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800cca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cca8:	d11e      	bne.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ccaa:	4b0c      	ldr	r3, [pc, #48]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d005      	beq.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ccb6:	4b09      	ldr	r3, [pc, #36]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	0e1b      	lsrs	r3, r3, #24
 800ccbc:	f003 030f 	and.w	r3, r3, #15
 800ccc0:	e006      	b.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ccc2:	4b06      	ldr	r3, [pc, #24]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ccc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccc8:	041b      	lsls	r3, r3, #16
 800ccca:	0e1b      	lsrs	r3, r3, #24
 800cccc:	f003 030f 	and.w	r3, r3, #15
 800ccd0:	4a03      	ldr	r2, [pc, #12]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ccd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccd8:	f000 bddd 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ccdc:	46020c00 	.word	0x46020c00
 800cce0:	080110b4 	.word	0x080110b4
 800cce4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800cce8:	2300      	movs	r3, #0
 800ccea:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccec:	f000 bdd3 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ccf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ccf8:	430b      	orrs	r3, r1
 800ccfa:	d14c      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ccfc:	4ba8      	ldr	r3, [pc, #672]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cd06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800cd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d104      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd0e:	f7fd fe3f 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800cd12:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd14:	f000 bdbf 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800cd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd1e:	d104      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd20:	f7fd fd1a 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800cd24:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd26:	f000 bdb6 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800cd2a:	4b9d      	ldr	r3, [pc, #628]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd36:	d107      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd3e:	d103      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800cd40:	4b98      	ldr	r3, [pc, #608]	@ (800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cd42:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd44:	f000 bda7 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800cd48:	4b95      	ldr	r3, [pc, #596]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 0320 	and.w	r3, r3, #32
 800cd50:	2b20      	cmp	r3, #32
 800cd52:	d11c      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800cd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd5a:	d118      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd5c:	4b90      	ldr	r3, [pc, #576]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d005      	beq.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800cd68:	4b8d      	ldr	r3, [pc, #564]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	0e1b      	lsrs	r3, r3, #24
 800cd6e:	f003 030f 	and.w	r3, r3, #15
 800cd72:	e006      	b.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800cd74:	4b8a      	ldr	r3, [pc, #552]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd7a:	041b      	lsls	r3, r3, #16
 800cd7c:	0e1b      	lsrs	r3, r3, #24
 800cd7e:	f003 030f 	and.w	r3, r3, #15
 800cd82:	4a89      	ldr	r2, [pc, #548]	@ (800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd88:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd8a:	f000 bd84 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd92:	f000 bd80 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800cd96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd9a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	d158      	bne.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cda2:	4b7f      	ldr	r3, [pc, #508]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cda4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cda8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cdac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb0:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdb2:	d028      	beq.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdb8:	d848      	bhi.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800cdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdbc:	2b80      	cmp	r3, #128	@ 0x80
 800cdbe:	d00e      	beq.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc2:	2b80      	cmp	r3, #128	@ 0x80
 800cdc4:	d842      	bhi.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	2b40      	cmp	r3, #64	@ 0x40
 800cdd0:	d014      	beq.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800cdd2:	e03b      	b.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800cdd4:	f7fd fe04 	bl	800a9e0 <HAL_RCC_GetPCLK3Freq>
 800cdd8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cdda:	f000 bd5c 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cdde:	4b70      	ldr	r3, [pc, #448]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cde6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdea:	d103      	bne.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800cdec:	4b6d      	ldr	r3, [pc, #436]	@ (800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cdee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cdf0:	f000 bd51 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cdf8:	f000 bd4d 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800cdfc:	f7fd fcac 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800ce00:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce02:	f000 bd48 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce06:	4b66      	ldr	r3, [pc, #408]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 0320 	and.w	r3, r3, #32
 800ce0e:	2b20      	cmp	r3, #32
 800ce10:	d118      	bne.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce12:	4b63      	ldr	r3, [pc, #396]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d005      	beq.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800ce1e:	4b60      	ldr	r3, [pc, #384]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	0e1b      	lsrs	r3, r3, #24
 800ce24:	f003 030f 	and.w	r3, r3, #15
 800ce28:	e006      	b.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800ce2a:	4b5d      	ldr	r3, [pc, #372]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce30:	041b      	lsls	r3, r3, #16
 800ce32:	0e1b      	lsrs	r3, r3, #24
 800ce34:	f003 030f 	and.w	r3, r3, #15
 800ce38:	4a5b      	ldr	r2, [pc, #364]	@ (800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ce3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce40:	f000 bd29 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce44:	2300      	movs	r3, #0
 800ce46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce48:	f000 bd25 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce50:	f000 bd21 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ce54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce58:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800ce5c:	430b      	orrs	r3, r1
 800ce5e:	d14c      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ce60:	4b4f      	ldr	r3, [pc, #316]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ce6a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d104      	bne.n	800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ce72:	f7fd fd8d 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800ce76:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce78:	f000 bd0d 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce82:	d104      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ce84:	f7fd fc68 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800ce88:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce8a:	f000 bd04 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ce8e:	4b44      	ldr	r3, [pc, #272]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce9a:	d107      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cea2:	d103      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800cea4:	4b3f      	ldr	r3, [pc, #252]	@ (800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cea6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cea8:	f000 bcf5 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800ceac:	4b3c      	ldr	r3, [pc, #240]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f003 0320 	and.w	r3, r3, #32
 800ceb4:	2b20      	cmp	r3, #32
 800ceb6:	d11c      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cebe:	d118      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cec0:	4b37      	ldr	r3, [pc, #220]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d005      	beq.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800cecc:	4b34      	ldr	r3, [pc, #208]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	0e1b      	lsrs	r3, r3, #24
 800ced2:	f003 030f 	and.w	r3, r3, #15
 800ced6:	e006      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800ced8:	4b31      	ldr	r3, [pc, #196]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ceda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cede:	041b      	lsls	r3, r3, #16
 800cee0:	0e1b      	lsrs	r3, r3, #24
 800cee2:	f003 030f 	and.w	r3, r3, #15
 800cee6:	4a30      	ldr	r2, [pc, #192]	@ (800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceec:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceee:	f000 bcd2 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef6:	f000 bcce 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800cefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefe:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800cf02:	430b      	orrs	r3, r1
 800cf04:	d152      	bne.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800cf06:	4b26      	ldr	r3, [pc, #152]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cf0c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cf10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d104      	bne.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf18:	f7fd fd3a 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800cf1c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf1e:	f000 bcba 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf28:	d104      	bne.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cf2a:	f7fd fc15 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800cf2e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf30:	f000 bcb1 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800cf34:	4b1a      	ldr	r3, [pc, #104]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf40:	d107      	bne.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf48:	d103      	bne.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800cf4a:	4b16      	ldr	r3, [pc, #88]	@ (800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cf4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf4e:	f000 bca2 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800cf52:	4b13      	ldr	r3, [pc, #76]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0320 	and.w	r3, r3, #32
 800cf5a:	2b20      	cmp	r3, #32
 800cf5c:	d11c      	bne.n	800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cf64:	d118      	bne.n	800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf66:	4b0e      	ldr	r3, [pc, #56]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800cf72:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	0e1b      	lsrs	r3, r3, #24
 800cf78:	f003 030f 	and.w	r3, r3, #15
 800cf7c:	e006      	b.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800cf7e:	4b08      	ldr	r3, [pc, #32]	@ (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf84:	041b      	lsls	r3, r3, #16
 800cf86:	0e1b      	lsrs	r3, r3, #24
 800cf88:	f003 030f 	and.w	r3, r3, #15
 800cf8c:	4a06      	ldr	r2, [pc, #24]	@ (800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cf8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf92:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf94:	f000 bc7f 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf9c:	f000 bc7b 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cfa0:	46020c00 	.word	0x46020c00
 800cfa4:	00f42400 	.word	0x00f42400
 800cfa8:	080110b4 	.word	0x080110b4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800cfac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfb0:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800cfb4:	430b      	orrs	r3, r1
 800cfb6:	d14c      	bne.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800cfb8:	4ba6      	ldr	r3, [pc, #664]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cfba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cfbe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cfc2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800cfc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d104      	bne.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cfca:	f7fd fce1 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800cfce:	6378      	str	r0, [r7, #52]	@ 0x34
 800cfd0:	f000 bc61 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cfda:	d104      	bne.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cfdc:	f7fd fbbc 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800cfe0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cfe2:	f000 bc58 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800cfe6:	4b9b      	ldr	r3, [pc, #620]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cff2:	d107      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800cff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cffa:	d103      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800cffc:	4b96      	ldr	r3, [pc, #600]	@ (800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cffe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d000:	f000 bc49 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d004:	4b93      	ldr	r3, [pc, #588]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 0320 	and.w	r3, r3, #32
 800d00c:	2b20      	cmp	r3, #32
 800d00e:	d11c      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d012:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d016:	d118      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d018:	4b8e      	ldr	r3, [pc, #568]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d005      	beq.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d024:	4b8b      	ldr	r3, [pc, #556]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	0e1b      	lsrs	r3, r3, #24
 800d02a:	f003 030f 	and.w	r3, r3, #15
 800d02e:	e006      	b.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d030:	4b88      	ldr	r3, [pc, #544]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d036:	041b      	lsls	r3, r3, #16
 800d038:	0e1b      	lsrs	r3, r3, #24
 800d03a:	f003 030f 	and.w	r3, r3, #15
 800d03e:	4a87      	ldr	r2, [pc, #540]	@ (800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d044:	637b      	str	r3, [r7, #52]	@ 0x34
 800d046:	f000 bc26 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d04e:	f000 bc22 	b.w	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d056:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d05a:	430b      	orrs	r3, r1
 800d05c:	d164      	bne.n	800d128 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d05e:	4b7d      	ldr	r3, [pc, #500]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d068:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d120      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d070:	4b78      	ldr	r3, [pc, #480]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 0320 	and.w	r3, r3, #32
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d117      	bne.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d07c:	4b75      	ldr	r3, [pc, #468]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d088:	4b72      	ldr	r3, [pc, #456]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	0e1b      	lsrs	r3, r3, #24
 800d08e:	f003 030f 	and.w	r3, r3, #15
 800d092:	e006      	b.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d094:	4b6f      	ldr	r3, [pc, #444]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d09a:	041b      	lsls	r3, r3, #16
 800d09c:	0e1b      	lsrs	r3, r3, #24
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	4a6e      	ldr	r2, [pc, #440]	@ (800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0aa:	e3f4      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0b0:	e3f1      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d0b2:	4b68      	ldr	r3, [pc, #416]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0c0:	d112      	bne.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0c8:	d10e      	bne.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d0ca:	4b62      	ldr	r3, [pc, #392]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0d8:	d102      	bne.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d0da:	23fa      	movs	r3, #250	@ 0xfa
 800d0dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d0de:	e3da      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d0e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d0e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d0e6:	e3d6      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d0e8:	4b5a      	ldr	r3, [pc, #360]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0f4:	d106      	bne.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0fc:	d102      	bne.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d0fe:	4b56      	ldr	r3, [pc, #344]	@ (800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d100:	637b      	str	r3, [r7, #52]	@ 0x34
 800d102:	e3c8      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d104:	4b53      	ldr	r3, [pc, #332]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d10a:	f003 0302 	and.w	r3, r3, #2
 800d10e:	2b02      	cmp	r3, #2
 800d110:	d107      	bne.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d118:	d103      	bne.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d11a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d11e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d120:	e3b9      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34
 800d126:	e3b6      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d12c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d130:	430b      	orrs	r3, r1
 800d132:	d164      	bne.n	800d1fe <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d134:	4b47      	ldr	r3, [pc, #284]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d13a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d13e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d142:	2b00      	cmp	r3, #0
 800d144:	d120      	bne.n	800d188 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d146:	4b43      	ldr	r3, [pc, #268]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 0320 	and.w	r3, r3, #32
 800d14e:	2b20      	cmp	r3, #32
 800d150:	d117      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d152:	4b40      	ldr	r3, [pc, #256]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d005      	beq.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d15e:	4b3d      	ldr	r3, [pc, #244]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	0e1b      	lsrs	r3, r3, #24
 800d164:	f003 030f 	and.w	r3, r3, #15
 800d168:	e006      	b.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d16a:	4b3a      	ldr	r3, [pc, #232]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d16c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d170:	041b      	lsls	r3, r3, #16
 800d172:	0e1b      	lsrs	r3, r3, #24
 800d174:	f003 030f 	and.w	r3, r3, #15
 800d178:	4a38      	ldr	r2, [pc, #224]	@ (800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d17e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d180:	e389      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d182:	2300      	movs	r3, #0
 800d184:	637b      	str	r3, [r7, #52]	@ 0x34
 800d186:	e386      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d188:	4b32      	ldr	r3, [pc, #200]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d18a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d18e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d196:	d112      	bne.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d19e:	d10e      	bne.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d1a0:	4b2c      	ldr	r3, [pc, #176]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1ae:	d102      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d1b0:	23fa      	movs	r3, #250	@ 0xfa
 800d1b2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d1b4:	e36f      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d1b6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d1ba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d1bc:	e36b      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d1be:	4b25      	ldr	r3, [pc, #148]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1ca:	d106      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1d2:	d102      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d1d4:	4b20      	ldr	r3, [pc, #128]	@ (800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d8:	e35d      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d1da:	4b1e      	ldr	r3, [pc, #120]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1e0:	f003 0302 	and.w	r3, r3, #2
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d107      	bne.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1ee:	d103      	bne.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d1f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1f6:	e34e      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1fc:	e34b      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d202:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d206:	430b      	orrs	r3, r1
 800d208:	d14e      	bne.n	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d20a:	4b12      	ldr	r3, [pc, #72]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d20c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d210:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d214:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d103      	bne.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d21c:	f7fd fbb8 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800d220:	6378      	str	r0, [r7, #52]	@ 0x34
 800d222:	e338      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d224:	4b0b      	ldr	r3, [pc, #44]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d22a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d22e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d232:	d119      	bne.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d236:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d23a:	d115      	bne.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d23c:	4b05      	ldr	r3, [pc, #20]	@ (800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d23e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d24a:	d109      	bne.n	800d260 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d24c:	23fa      	movs	r3, #250	@ 0xfa
 800d24e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d250:	e321      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d252:	bf00      	nop
 800d254:	46020c00 	.word	0x46020c00
 800d258:	00f42400 	.word	0x00f42400
 800d25c:	080110b4 	.word	0x080110b4
      }
      else
      {
        frequency = LSI_VALUE;
 800d260:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d264:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d266:	e316      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d268:	4ba8      	ldr	r3, [pc, #672]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d274:	d106      	bne.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d278:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d27c:	d102      	bne.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d27e:	4ba4      	ldr	r3, [pc, #656]	@ (800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d280:	637b      	str	r3, [r7, #52]	@ 0x34
 800d282:	e308      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d284:	4ba1      	ldr	r3, [pc, #644]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d107      	bne.n	800d2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d294:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d298:	d103      	bne.n	800d2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d29a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2a0:	e2f9      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2a6:	e2f6      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ac:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d2b0:	430b      	orrs	r3, r1
 800d2b2:	d12d      	bne.n	800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d2b4:	4b95      	ldr	r3, [pc, #596]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d2b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2ba:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d2be:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d2c0:	4b92      	ldr	r3, [pc, #584]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2cc:	d105      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d2d4:	4b8e      	ldr	r3, [pc, #568]	@ (800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d2d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d8:	e2dd      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2e0:	d107      	bne.n	800d2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fb4c 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2f0:	e2d1      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2f8:	d107      	bne.n	800d30a <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2fa:	f107 0318 	add.w	r3, r7, #24
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe fc9a 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	637b      	str	r3, [r7, #52]	@ 0x34
 800d308:	e2c5      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d30a:	2300      	movs	r3, #0
 800d30c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d30e:	e2c2      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d310:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d314:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d318:	430b      	orrs	r3, r1
 800d31a:	d156      	bne.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d31c:	4b7b      	ldr	r3, [pc, #492]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d31e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d322:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d326:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d32e:	d028      	beq.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d332:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d336:	d845      	bhi.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d33e:	d013      	beq.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d346:	d83d      	bhi.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d004      	beq.n	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d354:	d004      	beq.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d356:	e035      	b.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d358:	f7fd fb2e 	bl	800a9b8 <HAL_RCC_GetPCLK2Freq>
 800d35c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d35e:	e29a      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d360:	f7fd f9fa 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800d364:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d366:	e296      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d368:	4b68      	ldr	r3, [pc, #416]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d374:	d102      	bne.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d376:	4b66      	ldr	r3, [pc, #408]	@ (800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d378:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d37a:	e28c      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d37c:	2300      	movs	r3, #0
 800d37e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d380:	e289      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d382:	4b62      	ldr	r3, [pc, #392]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f003 0320 	and.w	r3, r3, #32
 800d38a:	2b20      	cmp	r3, #32
 800d38c:	d117      	bne.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d38e:	4b5f      	ldr	r3, [pc, #380]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d396:	2b00      	cmp	r3, #0
 800d398:	d005      	beq.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d39a:	4b5c      	ldr	r3, [pc, #368]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	0e1b      	lsrs	r3, r3, #24
 800d3a0:	f003 030f 	and.w	r3, r3, #15
 800d3a4:	e006      	b.n	800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d3a6:	4b59      	ldr	r3, [pc, #356]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d3a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3ac:	041b      	lsls	r3, r3, #16
 800d3ae:	0e1b      	lsrs	r3, r3, #24
 800d3b0:	f003 030f 	and.w	r3, r3, #15
 800d3b4:	4a57      	ldr	r2, [pc, #348]	@ (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d3bc:	e26b      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3c2:	e268      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3c8:	e265      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ce:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d3d2:	430b      	orrs	r3, r1
 800d3d4:	d156      	bne.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d3d6:	4b4d      	ldr	r3, [pc, #308]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d3d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d3e0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d3e8:	d028      	beq.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d3f0:	d845      	bhi.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d3f8:	d013      	beq.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d400:	d83d      	bhi.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d404:	2b00      	cmp	r3, #0
 800d406:	d004      	beq.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d40e:	d004      	beq.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d410:	e035      	b.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d412:	f7fd fabd 	bl	800a990 <HAL_RCC_GetPCLK1Freq>
 800d416:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d418:	e23d      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d41a:	f7fd f99d 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800d41e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d420:	e239      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d422:	4b3a      	ldr	r3, [pc, #232]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d42a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d42e:	d102      	bne.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d430:	4b37      	ldr	r3, [pc, #220]	@ (800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d432:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d434:	e22f      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d436:	2300      	movs	r3, #0
 800d438:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d43a:	e22c      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d43c:	4b33      	ldr	r3, [pc, #204]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 0320 	and.w	r3, r3, #32
 800d444:	2b20      	cmp	r3, #32
 800d446:	d117      	bne.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d448:	4b30      	ldr	r3, [pc, #192]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d005      	beq.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d454:	4b2d      	ldr	r3, [pc, #180]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	0e1b      	lsrs	r3, r3, #24
 800d45a:	f003 030f 	and.w	r3, r3, #15
 800d45e:	e006      	b.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d460:	4b2a      	ldr	r3, [pc, #168]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d466:	041b      	lsls	r3, r3, #16
 800d468:	0e1b      	lsrs	r3, r3, #24
 800d46a:	f003 030f 	and.w	r3, r3, #15
 800d46e:	4a29      	ldr	r2, [pc, #164]	@ (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d474:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d476:	e20e      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d47c:	e20b      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d47e:	2300      	movs	r3, #0
 800d480:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d482:	e208      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d488:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d48c:	430b      	orrs	r3, r1
 800d48e:	d17c      	bne.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d490:	4b1e      	ldr	r3, [pc, #120]	@ (800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d496:	f003 0318 	and.w	r3, r3, #24
 800d49a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49e:	2b18      	cmp	r3, #24
 800d4a0:	d870      	bhi.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a8:	0800d519 	.word	0x0800d519
 800d4ac:	0800d585 	.word	0x0800d585
 800d4b0:	0800d585 	.word	0x0800d585
 800d4b4:	0800d585 	.word	0x0800d585
 800d4b8:	0800d585 	.word	0x0800d585
 800d4bc:	0800d585 	.word	0x0800d585
 800d4c0:	0800d585 	.word	0x0800d585
 800d4c4:	0800d585 	.word	0x0800d585
 800d4c8:	0800d521 	.word	0x0800d521
 800d4cc:	0800d585 	.word	0x0800d585
 800d4d0:	0800d585 	.word	0x0800d585
 800d4d4:	0800d585 	.word	0x0800d585
 800d4d8:	0800d585 	.word	0x0800d585
 800d4dc:	0800d585 	.word	0x0800d585
 800d4e0:	0800d585 	.word	0x0800d585
 800d4e4:	0800d585 	.word	0x0800d585
 800d4e8:	0800d529 	.word	0x0800d529
 800d4ec:	0800d585 	.word	0x0800d585
 800d4f0:	0800d585 	.word	0x0800d585
 800d4f4:	0800d585 	.word	0x0800d585
 800d4f8:	0800d585 	.word	0x0800d585
 800d4fc:	0800d585 	.word	0x0800d585
 800d500:	0800d585 	.word	0x0800d585
 800d504:	0800d585 	.word	0x0800d585
 800d508:	0800d543 	.word	0x0800d543
 800d50c:	46020c00 	.word	0x46020c00
 800d510:	00f42400 	.word	0x00f42400
 800d514:	080110b4 	.word	0x080110b4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d518:	f7fd fa62 	bl	800a9e0 <HAL_RCC_GetPCLK3Freq>
 800d51c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d51e:	e1ba      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d520:	f7fd f91a 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800d524:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d526:	e1b6      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d528:	4b9f      	ldr	r3, [pc, #636]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d534:	d102      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d536:	4b9d      	ldr	r3, [pc, #628]	@ (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d538:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d53a:	e1ac      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d53c:	2300      	movs	r3, #0
 800d53e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d540:	e1a9      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d542:	4b99      	ldr	r3, [pc, #612]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f003 0320 	and.w	r3, r3, #32
 800d54a:	2b20      	cmp	r3, #32
 800d54c:	d117      	bne.n	800d57e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d54e:	4b96      	ldr	r3, [pc, #600]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d556:	2b00      	cmp	r3, #0
 800d558:	d005      	beq.n	800d566 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d55a:	4b93      	ldr	r3, [pc, #588]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	0e1b      	lsrs	r3, r3, #24
 800d560:	f003 030f 	and.w	r3, r3, #15
 800d564:	e006      	b.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d566:	4b90      	ldr	r3, [pc, #576]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d56c:	041b      	lsls	r3, r3, #16
 800d56e:	0e1b      	lsrs	r3, r3, #24
 800d570:	f003 030f 	and.w	r3, r3, #15
 800d574:	4a8e      	ldr	r2, [pc, #568]	@ (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d57a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d57c:	e18b      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d582:	e188      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d584:	2300      	movs	r3, #0
 800d586:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d588:	e185      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d58a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d58e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d592:	430b      	orrs	r3, r1
 800d594:	d155      	bne.n	800d642 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d596:	4b84      	ldr	r3, [pc, #528]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d598:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d59c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d5a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d5a8:	d013      	beq.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d5b0:	d844      	bhi.n	800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d5b8:	d013      	beq.n	800d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d5c0:	d83c      	bhi.n	800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d014      	beq.n	800d5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5ce:	d014      	beq.n	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d5d0:	e034      	b.n	800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5d2:	f107 0318 	add.w	r3, r7, #24
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe fb2e 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5e0:	e159      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe f9cc 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5f0:	e151      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d5f2:	f7fd f8b1 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800d5f6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d5f8:	e14d      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d5fa:	4b6b      	ldr	r3, [pc, #428]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f003 0320 	and.w	r3, r3, #32
 800d602:	2b20      	cmp	r3, #32
 800d604:	d117      	bne.n	800d636 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d606:	4b68      	ldr	r3, [pc, #416]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d005      	beq.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d612:	4b65      	ldr	r3, [pc, #404]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	0e1b      	lsrs	r3, r3, #24
 800d618:	f003 030f 	and.w	r3, r3, #15
 800d61c:	e006      	b.n	800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d61e:	4b62      	ldr	r3, [pc, #392]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d624:	041b      	lsls	r3, r3, #16
 800d626:	0e1b      	lsrs	r3, r3, #24
 800d628:	f003 030f 	and.w	r3, r3, #15
 800d62c:	4a60      	ldr	r2, [pc, #384]	@ (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d632:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d634:	e12f      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d636:	2300      	movs	r3, #0
 800d638:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d63a:	e12c      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d63c:	2300      	movs	r3, #0
 800d63e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d640:	e129      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d642:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d646:	1e59      	subs	r1, r3, #1
 800d648:	ea52 0301 	orrs.w	r3, r2, r1
 800d64c:	d13c      	bne.n	800d6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d64e:	4b56      	ldr	r3, [pc, #344]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d654:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d658:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d660:	d027      	beq.n	800d6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d668:	d82b      	bhi.n	800d6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d670:	d017      	beq.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d674:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d678:	d823      	bhi.n	800d6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d004      	beq.n	800d68a <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d686:	d004      	beq.n	800d692 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d688:	e01b      	b.n	800d6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d68a:	f7fd f865 	bl	800a758 <HAL_RCC_GetSysClockFreq>
 800d68e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d690:	e101      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe f974 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d69e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6a0:	e0f9      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6a2:	f107 0318 	add.w	r3, r7, #24
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe fac6 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d6ac:	69fb      	ldr	r3, [r7, #28]
 800d6ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6b0:	e0f1      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6b2:	f107 030c 	add.w	r3, r7, #12
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fe fc18 	bl	800beec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6c0:	e0e9      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6c6:	e0e6      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6cc:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d6d0:	430b      	orrs	r3, r1
 800d6d2:	d131      	bne.n	800d738 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d6d4:	4b34      	ldr	r3, [pc, #208]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d6d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d6da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d6de:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d6e0:	4b31      	ldr	r3, [pc, #196]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d6e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6e6:	f003 0302 	and.w	r3, r3, #2
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d106      	bne.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d103      	bne.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d6f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6fa:	e0cc      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d6fc:	4b2a      	ldr	r3, [pc, #168]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d6fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d702:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d70a:	d112      	bne.n	800d732 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d712:	d10e      	bne.n	800d732 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d714:	4b24      	ldr	r3, [pc, #144]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d71a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d71e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d722:	d102      	bne.n	800d72a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800d724:	23fa      	movs	r3, #250	@ 0xfa
 800d726:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d728:	e0b5      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d72a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d72e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d730:	e0b1      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d732:	2300      	movs	r3, #0
 800d734:	637b      	str	r3, [r7, #52]	@ 0x34
 800d736:	e0ae      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800d738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d73c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d740:	430b      	orrs	r3, r1
 800d742:	d13b      	bne.n	800d7bc <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d744:	4b18      	ldr	r3, [pc, #96]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d74a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d74e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d750:	4b15      	ldr	r3, [pc, #84]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d75c:	d105      	bne.n	800d76a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800d75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800d764:	4b13      	ldr	r3, [pc, #76]	@ (800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800d766:	637b      	str	r3, [r7, #52]	@ 0x34
 800d768:	e095      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800d76a:	4b0f      	ldr	r3, [pc, #60]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d776:	d106      	bne.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800d778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d77e:	d102      	bne.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800d780:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800d782:	637b      	str	r3, [r7, #52]	@ 0x34
 800d784:	e087      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800d786:	4b08      	ldr	r3, [pc, #32]	@ (800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d78e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d792:	d106      	bne.n	800d7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800d794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d79a:	d102      	bne.n	800d7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800d79c:	4b03      	ldr	r3, [pc, #12]	@ (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d79e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7a0:	e079      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7a6:	e076      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d7a8:	46020c00 	.word	0x46020c00
 800d7ac:	00f42400 	.word	0x00f42400
 800d7b0:	080110b4 	.word	0x080110b4
 800d7b4:	02dc6c00 	.word	0x02dc6c00
 800d7b8:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800d7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7c0:	1e99      	subs	r1, r3, #2
 800d7c2:	ea52 0301 	orrs.w	r3, r2, r1
 800d7c6:	d120      	bne.n	800d80a <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800d7c8:	4b35      	ldr	r3, [pc, #212]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d7ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d7ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d7d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d004      	beq.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800d7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d7e0:	d008      	beq.n	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800d7e2:	e00f      	b.n	800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7e4:	f107 030c 	add.w	r3, r7, #12
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe fb7f 	bl	800beec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7f2:	e050      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7f4:	f107 0318 	add.w	r3, r7, #24
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe fa1d 	bl	800bc38 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800d7fe:	6a3b      	ldr	r3, [r7, #32]
 800d800:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d802:	e048      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d808:	e045      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800d80a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d80e:	f1a3 0108 	sub.w	r1, r3, #8
 800d812:	ea52 0301 	orrs.w	r3, r2, r1
 800d816:	d13c      	bne.n	800d892 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800d818:	4b21      	ldr	r3, [pc, #132]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d81a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d81e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d822:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800d824:	4b1e      	ldr	r3, [pc, #120]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d82c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d830:	d105      	bne.n	800d83e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800d838:	4b1a      	ldr	r3, [pc, #104]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800d83a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d83c:	e02b      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800d83e:	4b18      	ldr	r3, [pc, #96]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d84a:	d106      	bne.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800d84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d852:	d102      	bne.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800d854:	4b14      	ldr	r3, [pc, #80]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800d856:	637b      	str	r3, [r7, #52]	@ 0x34
 800d858:	e01d      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800d85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d860:	d107      	bne.n	800d872 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d866:	4618      	mov	r0, r3
 800d868:	f7fe f88c 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d870:	e011      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800d872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d874:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d878:	d108      	bne.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d87a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe f880 	bl	800b984 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d886:	085b      	lsrs	r3, r3, #1
 800d888:	637b      	str	r3, [r7, #52]	@ 0x34
 800d88a:	e004      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800d88c:	2300      	movs	r3, #0
 800d88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d890:	e001      	b.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800d896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3738      	adds	r7, #56	@ 0x38
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	46020c00 	.word	0x46020c00
 800d8a4:	00f42400 	.word	0x00f42400
 800d8a8:	007a1200 	.word	0x007a1200

0800d8ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d8b4:	4b47      	ldr	r3, [pc, #284]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a46      	ldr	r2, [pc, #280]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d8ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d8be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d8c0:	f7f5 f828 	bl	8002914 <HAL_GetTick>
 800d8c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8c6:	e008      	b.n	800d8da <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d8c8:	f7f5 f824 	bl	8002914 <HAL_GetTick>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d901      	bls.n	800d8da <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	e077      	b.n	800d9ca <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8da:	4b3e      	ldr	r3, [pc, #248]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1f0      	bne.n	800d8c8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d8e6:	4b3b      	ldr	r3, [pc, #236]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d8ee:	f023 0303 	bic.w	r3, r3, #3
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	6811      	ldr	r1, [r2, #0]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	6852      	ldr	r2, [r2, #4]
 800d8fa:	3a01      	subs	r2, #1
 800d8fc:	0212      	lsls	r2, r2, #8
 800d8fe:	430a      	orrs	r2, r1
 800d900:	4934      	ldr	r1, [pc, #208]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d902:	4313      	orrs	r3, r2
 800d904:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d906:	4b33      	ldr	r3, [pc, #204]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d90a:	4b33      	ldr	r3, [pc, #204]	@ (800d9d8 <RCCEx_PLL2_Config+0x12c>)
 800d90c:	4013      	ands	r3, r2
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	6892      	ldr	r2, [r2, #8]
 800d912:	3a01      	subs	r2, #1
 800d914:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	68d2      	ldr	r2, [r2, #12]
 800d91c:	3a01      	subs	r2, #1
 800d91e:	0252      	lsls	r2, r2, #9
 800d920:	b292      	uxth	r2, r2
 800d922:	4311      	orrs	r1, r2
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	6912      	ldr	r2, [r2, #16]
 800d928:	3a01      	subs	r2, #1
 800d92a:	0412      	lsls	r2, r2, #16
 800d92c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d930:	4311      	orrs	r1, r2
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	6952      	ldr	r2, [r2, #20]
 800d936:	3a01      	subs	r2, #1
 800d938:	0612      	lsls	r2, r2, #24
 800d93a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d93e:	430a      	orrs	r2, r1
 800d940:	4924      	ldr	r1, [pc, #144]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d942:	4313      	orrs	r3, r2
 800d944:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d946:	4b23      	ldr	r3, [pc, #140]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d94a:	f023 020c 	bic.w	r2, r3, #12
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	4920      	ldr	r1, [pc, #128]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d954:	4313      	orrs	r3, r2
 800d956:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d958:	4b1e      	ldr	r3, [pc, #120]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d95a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a1b      	ldr	r3, [r3, #32]
 800d960:	491c      	ldr	r1, [pc, #112]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d962:	4313      	orrs	r3, r2
 800d964:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d966:	4b1b      	ldr	r3, [pc, #108]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d96a:	4a1a      	ldr	r2, [pc, #104]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d96c:	f023 0310 	bic.w	r3, r3, #16
 800d970:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d972:	4b18      	ldr	r3, [pc, #96]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d976:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d97a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	69d2      	ldr	r2, [r2, #28]
 800d982:	00d2      	lsls	r2, r2, #3
 800d984:	4913      	ldr	r1, [pc, #76]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d986:	4313      	orrs	r3, r2
 800d988:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d98a:	4b12      	ldr	r3, [pc, #72]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d98e:	4a11      	ldr	r2, [pc, #68]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d990:	f043 0310 	orr.w	r3, r3, #16
 800d994:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d996:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a0e      	ldr	r2, [pc, #56]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d99c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d9a0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d9a2:	f7f4 ffb7 	bl	8002914 <HAL_GetTick>
 800d9a6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9a8:	e008      	b.n	800d9bc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d9aa:	f7f4 ffb3 	bl	8002914 <HAL_GetTick>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d901      	bls.n	800d9bc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d9b8:	2303      	movs	r3, #3
 800d9ba:	e006      	b.n	800d9ca <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9bc:	4b05      	ldr	r3, [pc, #20]	@ (800d9d4 <RCCEx_PLL2_Config+0x128>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d0f0      	beq.n	800d9aa <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800d9c8:	2300      	movs	r3, #0

}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	46020c00 	.word	0x46020c00
 800d9d8:	80800000 	.word	0x80800000

0800d9dc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800d9e4:	4b47      	ldr	r3, [pc, #284]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a46      	ldr	r2, [pc, #280]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800d9ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d9ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d9f0:	f7f4 ff90 	bl	8002914 <HAL_GetTick>
 800d9f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d9f6:	e008      	b.n	800da0a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9f8:	f7f4 ff8c 	bl	8002914 <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	2b02      	cmp	r3, #2
 800da04:	d901      	bls.n	800da0a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800da06:	2303      	movs	r3, #3
 800da08:	e077      	b.n	800dafa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da0a:	4b3e      	ldr	r3, [pc, #248]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1f0      	bne.n	800d9f8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800da16:	4b3b      	ldr	r3, [pc, #236]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800da1e:	f023 0303 	bic.w	r3, r3, #3
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	6811      	ldr	r1, [r2, #0]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	6852      	ldr	r2, [r2, #4]
 800da2a:	3a01      	subs	r2, #1
 800da2c:	0212      	lsls	r2, r2, #8
 800da2e:	430a      	orrs	r2, r1
 800da30:	4934      	ldr	r1, [pc, #208]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da32:	4313      	orrs	r3, r2
 800da34:	630b      	str	r3, [r1, #48]	@ 0x30
 800da36:	4b33      	ldr	r3, [pc, #204]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da3a:	4b33      	ldr	r3, [pc, #204]	@ (800db08 <RCCEx_PLL3_Config+0x12c>)
 800da3c:	4013      	ands	r3, r2
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	6892      	ldr	r2, [r2, #8]
 800da42:	3a01      	subs	r2, #1
 800da44:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	68d2      	ldr	r2, [r2, #12]
 800da4c:	3a01      	subs	r2, #1
 800da4e:	0252      	lsls	r2, r2, #9
 800da50:	b292      	uxth	r2, r2
 800da52:	4311      	orrs	r1, r2
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	6912      	ldr	r2, [r2, #16]
 800da58:	3a01      	subs	r2, #1
 800da5a:	0412      	lsls	r2, r2, #16
 800da5c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800da60:	4311      	orrs	r1, r2
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	6952      	ldr	r2, [r2, #20]
 800da66:	3a01      	subs	r2, #1
 800da68:	0612      	lsls	r2, r2, #24
 800da6a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800da6e:	430a      	orrs	r2, r1
 800da70:	4924      	ldr	r1, [pc, #144]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da72:	4313      	orrs	r3, r2
 800da74:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800da76:	4b23      	ldr	r3, [pc, #140]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da7a:	f023 020c 	bic.w	r2, r3, #12
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	4920      	ldr	r1, [pc, #128]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da84:	4313      	orrs	r3, r2
 800da86:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800da88:	4b1e      	ldr	r3, [pc, #120]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	491c      	ldr	r1, [pc, #112]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da92:	4313      	orrs	r3, r2
 800da94:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800da96:	4b1b      	ldr	r3, [pc, #108]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da9a:	4a1a      	ldr	r2, [pc, #104]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800da9c:	f023 0310 	bic.w	r3, r3, #16
 800daa0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800daa2:	4b18      	ldr	r3, [pc, #96]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800daa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800daa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800daaa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	69d2      	ldr	r2, [r2, #28]
 800dab2:	00d2      	lsls	r2, r2, #3
 800dab4:	4913      	ldr	r1, [pc, #76]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800dab6:	4313      	orrs	r3, r2
 800dab8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800daba:	4b12      	ldr	r3, [pc, #72]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800dabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dabe:	4a11      	ldr	r2, [pc, #68]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800dac0:	f043 0310 	orr.w	r3, r3, #16
 800dac4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800dac6:	4b0f      	ldr	r3, [pc, #60]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a0e      	ldr	r2, [pc, #56]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800dacc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dad0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dad2:	f7f4 ff1f 	bl	8002914 <HAL_GetTick>
 800dad6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dad8:	e008      	b.n	800daec <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dada:	f7f4 ff1b 	bl	8002914 <HAL_GetTick>
 800dade:	4602      	mov	r2, r0
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d901      	bls.n	800daec <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dae8:	2303      	movs	r3, #3
 800daea:	e006      	b.n	800dafa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800daec:	4b05      	ldr	r3, [pc, #20]	@ (800db04 <RCCEx_PLL3_Config+0x128>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d0f0      	beq.n	800dada <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	46020c00 	.word	0x46020c00
 800db08:	80800000 	.word	0x80800000

0800db0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d071      	beq.n	800dc02 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7f4 fa04 	bl	8001f40 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2202      	movs	r2, #2
 800db3c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800db40:	4b32      	ldr	r3, [pc, #200]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f003 0310 	and.w	r3, r3, #16
 800db48:	2b10      	cmp	r3, #16
 800db4a:	d051      	beq.n	800dbf0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db4c:	4b2f      	ldr	r3, [pc, #188]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db4e:	22ca      	movs	r2, #202	@ 0xca
 800db50:	625a      	str	r2, [r3, #36]	@ 0x24
 800db52:	4b2e      	ldr	r3, [pc, #184]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db54:	2253      	movs	r2, #83	@ 0x53
 800db56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f88b 	bl	800dc74 <RTC_EnterInitMode>
 800db5e:	4603      	mov	r3, r0
 800db60:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800db62:	7bfb      	ldrb	r3, [r7, #15]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d13f      	bne.n	800dbe8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800db68:	4b28      	ldr	r3, [pc, #160]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db6a:	699b      	ldr	r3, [r3, #24]
 800db6c:	4a27      	ldr	r2, [pc, #156]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db6e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800db72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db76:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800db78:	4b24      	ldr	r3, [pc, #144]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db7a:	699a      	ldr	r2, [r3, #24]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6859      	ldr	r1, [r3, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	4319      	orrs	r1, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	430b      	orrs	r3, r1
 800db8c:	491f      	ldr	r1, [pc, #124]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db8e:	4313      	orrs	r3, r2
 800db90:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68da      	ldr	r2, [r3, #12]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	041b      	lsls	r3, r3, #16
 800db9c:	491b      	ldr	r1, [pc, #108]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800db9e:	4313      	orrs	r3, r2
 800dba0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800dba2:	4b1a      	ldr	r3, [pc, #104]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb2:	430b      	orrs	r3, r1
 800dbb4:	4915      	ldr	r1, [pc, #84]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 f896 	bl	800dcec <RTC_ExitInitMode>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10e      	bne.n	800dbe8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800dbca:	4b10      	ldr	r3, [pc, #64]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a19      	ldr	r1, [r3, #32]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	4319      	orrs	r1, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	430b      	orrs	r3, r1
 800dbe2:	490a      	ldr	r1, [pc, #40]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbe8:	4b08      	ldr	r3, [pc, #32]	@ (800dc0c <HAL_RTC_Init+0x100>)
 800dbea:	22ff      	movs	r2, #255	@ 0xff
 800dbec:	625a      	str	r2, [r3, #36]	@ 0x24
 800dbee:	e001      	b.n	800dbf4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d103      	bne.n	800dc02 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	46007800 	.word	0x46007800

0800dc10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dc18:	4b15      	ldr	r3, [pc, #84]	@ (800dc70 <HAL_RTC_WaitForSynchro+0x60>)
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	4a14      	ldr	r2, [pc, #80]	@ (800dc70 <HAL_RTC_WaitForSynchro+0x60>)
 800dc1e:	f023 0320 	bic.w	r3, r3, #32
 800dc22:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dc24:	f7f4 fe76 	bl	8002914 <HAL_GetTick>
 800dc28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dc2a:	e013      	b.n	800dc54 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dc2c:	f7f4 fe72 	bl	8002914 <HAL_GetTick>
 800dc30:	4602      	mov	r2, r0
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc3a:	d90b      	bls.n	800dc54 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dc3c:	4b0c      	ldr	r3, [pc, #48]	@ (800dc70 <HAL_RTC_WaitForSynchro+0x60>)
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	f003 0320 	and.w	r3, r3, #32
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10c      	bne.n	800dc62 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800dc50:	2303      	movs	r3, #3
 800dc52:	e008      	b.n	800dc66 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dc54:	4b06      	ldr	r3, [pc, #24]	@ (800dc70 <HAL_RTC_WaitForSynchro+0x60>)
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	f003 0320 	and.w	r3, r3, #32
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d0e5      	beq.n	800dc2c <HAL_RTC_WaitForSynchro+0x1c>
 800dc60:	e000      	b.n	800dc64 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800dc62:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	46007800 	.word	0x46007800

0800dc74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dc80:	4b19      	ldr	r3, [pc, #100]	@ (800dce8 <RTC_EnterInitMode+0x74>)
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d128      	bne.n	800dcde <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dc8c:	4b16      	ldr	r3, [pc, #88]	@ (800dce8 <RTC_EnterInitMode+0x74>)
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	4a15      	ldr	r2, [pc, #84]	@ (800dce8 <RTC_EnterInitMode+0x74>)
 800dc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc96:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800dc98:	f7f4 fe3c 	bl	8002914 <HAL_GetTick>
 800dc9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dc9e:	e013      	b.n	800dcc8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dca0:	f7f4 fe38 	bl	8002914 <HAL_GetTick>
 800dca4:	4602      	mov	r2, r0
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dcae:	d90b      	bls.n	800dcc8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dcb0:	4b0d      	ldr	r3, [pc, #52]	@ (800dce8 <RTC_EnterInitMode+0x74>)
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10f      	bne.n	800dcdc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2203      	movs	r2, #3
 800dcc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dcc8:	4b07      	ldr	r3, [pc, #28]	@ (800dce8 <RTC_EnterInitMode+0x74>)
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d104      	bne.n	800dcde <RTC_EnterInitMode+0x6a>
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d1e2      	bne.n	800dca0 <RTC_EnterInitMode+0x2c>
 800dcda:	e000      	b.n	800dcde <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800dcdc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	46007800 	.word	0x46007800

0800dcec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dcf8:	4b1a      	ldr	r3, [pc, #104]	@ (800dd64 <RTC_ExitInitMode+0x78>)
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	4a19      	ldr	r2, [pc, #100]	@ (800dd64 <RTC_ExitInitMode+0x78>)
 800dcfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd02:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dd04:	4b17      	ldr	r3, [pc, #92]	@ (800dd64 <RTC_ExitInitMode+0x78>)
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	f003 0320 	and.w	r3, r3, #32
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10c      	bne.n	800dd2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff ff7d 	bl	800dc10 <HAL_RTC_WaitForSynchro>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d01e      	beq.n	800dd5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2203      	movs	r2, #3
 800dd20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800dd24:	2303      	movs	r3, #3
 800dd26:	73fb      	strb	r3, [r7, #15]
 800dd28:	e017      	b.n	800dd5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dd2a:	4b0e      	ldr	r3, [pc, #56]	@ (800dd64 <RTC_ExitInitMode+0x78>)
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	4a0d      	ldr	r2, [pc, #52]	@ (800dd64 <RTC_ExitInitMode+0x78>)
 800dd30:	f023 0320 	bic.w	r3, r3, #32
 800dd34:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7ff ff6a 	bl	800dc10 <HAL_RTC_WaitForSynchro>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d005      	beq.n	800dd4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2203      	movs	r2, #3
 800dd46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dd4e:	4b05      	ldr	r3, [pc, #20]	@ (800dd64 <RTC_ExitInitMode+0x78>)
 800dd50:	699b      	ldr	r3, [r3, #24]
 800dd52:	4a04      	ldr	r2, [pc, #16]	@ (800dd64 <RTC_ExitInitMode+0x78>)
 800dd54:	f043 0320 	orr.w	r3, r3, #32
 800dd58:	6193      	str	r3, [r2, #24]
  }
  return status;
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	46007800 	.word	0x46007800

0800dd68 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	4910      	ldr	r1, [pc, #64]	@ (800ddbc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	689a      	ldr	r2, [r3, #8]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	431a      	orrs	r2, r3
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	490c      	ldr	r1, [pc, #48]	@ (800ddc0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800dd90:	4313      	orrs	r3, r2
 800dd92:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800dd94:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800dd96:	6a1b      	ldr	r3, [r3, #32]
 800dd98:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	6919      	ldr	r1, [r3, #16]
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	041b      	lsls	r3, r3, #16
 800dda6:	430b      	orrs	r3, r1
 800dda8:	4905      	ldr	r1, [pc, #20]	@ (800ddc0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	46007800 	.word	0x46007800
 800ddc0:	46007c00 	.word	0x46007c00

0800ddc4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d904      	bls.n	800dde2 <HAL_SAI_InitProtocol+0x1e>
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	3b03      	subs	r3, #3
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d812      	bhi.n	800de06 <HAL_SAI_InitProtocol+0x42>
 800dde0:	e008      	b.n	800ddf4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f000 faff 	bl	800e3ec <SAI_InitI2S>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	75fb      	strb	r3, [r7, #23]
      break;
 800ddf2:	e00b      	b.n	800de0c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	68b9      	ldr	r1, [r7, #8]
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f000 fba8 	bl	800e550 <SAI_InitPCM>
 800de00:	4603      	mov	r3, r0
 800de02:	75fb      	strb	r3, [r7, #23]
      break;
 800de04:	e002      	b.n	800de0c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	75fb      	strb	r3, [r7, #23]
      break;
 800de0a:	bf00      	nop
  }

  if (status == HAL_OK)
 800de0c:	7dfb      	ldrb	r3, [r7, #23]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d104      	bne.n	800de1c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f000 f808 	bl	800de28 <HAL_SAI_Init>
 800de18:	4603      	mov	r3, r0
 800de1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
	...

0800de28 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b08a      	sub	sp, #40	@ 0x28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e1ce      	b.n	800e1d8 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800de40:	2b01      	cmp	r3, #1
 800de42:	d10e      	bne.n	800de62 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a83      	ldr	r2, [pc, #524]	@ (800e058 <HAL_SAI_Init+0x230>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d107      	bne.n	800de5e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800de52:	2b01      	cmp	r3, #1
 800de54:	d103      	bne.n	800de5e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e1ba      	b.n	800e1d8 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7f4 fa12 	bl	80022a0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fc21 	bl	800e6c4 <SAI_Disable>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d001      	beq.n	800de8c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	e1a5      	b.n	800e1d8 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2202      	movs	r2, #2
 800de90:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d00c      	beq.n	800deb6 <HAL_SAI_Init+0x8e>
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d80d      	bhi.n	800debc <HAL_SAI_Init+0x94>
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <HAL_SAI_Init+0x82>
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d003      	beq.n	800deb0 <HAL_SAI_Init+0x88>
 800dea8:	e008      	b.n	800debc <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800deae:	e008      	b.n	800dec2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800deb0:	2310      	movs	r3, #16
 800deb2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800deb4:	e005      	b.n	800dec2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800deb6:	2320      	movs	r3, #32
 800deb8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800deba:	e002      	b.n	800dec2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dec0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d81d      	bhi.n	800df06 <HAL_SAI_Init+0xde>
 800deca:	a201      	add	r2, pc, #4	@ (adr r2, 800ded0 <HAL_SAI_Init+0xa8>)
 800decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded0:	0800dee1 	.word	0x0800dee1
 800ded4:	0800dee7 	.word	0x0800dee7
 800ded8:	0800deef 	.word	0x0800deef
 800dedc:	0800def7 	.word	0x0800def7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800dee0:	2300      	movs	r3, #0
 800dee2:	61fb      	str	r3, [r7, #28]
      break;
 800dee4:	e012      	b.n	800df0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800deea:	61fb      	str	r3, [r7, #28]
      break;
 800deec:	e00e      	b.n	800df0c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800deee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800def2:	61fb      	str	r3, [r7, #28]
      break;
 800def4:	e00a      	b.n	800df0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800def6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800defa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800defc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defe:	f043 0301 	orr.w	r3, r3, #1
 800df02:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800df04:	e002      	b.n	800df0c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800df06:	2300      	movs	r3, #0
 800df08:	61fb      	str	r3, [r7, #28]
      break;
 800df0a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a51      	ldr	r2, [pc, #324]	@ (800e058 <HAL_SAI_Init+0x230>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d004      	beq.n	800df20 <HAL_SAI_Init+0xf8>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a50      	ldr	r2, [pc, #320]	@ (800e05c <HAL_SAI_Init+0x234>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d103      	bne.n	800df28 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800df20:	4a4f      	ldr	r2, [pc, #316]	@ (800e060 <HAL_SAI_Init+0x238>)
 800df22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	e002      	b.n	800df2e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800df28:	4a4e      	ldr	r2, [pc, #312]	@ (800e064 <HAL_SAI_Init+0x23c>)
 800df2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2c:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d077      	beq.n	800e026 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4a47      	ldr	r2, [pc, #284]	@ (800e058 <HAL_SAI_Init+0x230>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d004      	beq.n	800df4a <HAL_SAI_Init+0x122>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a45      	ldr	r2, [pc, #276]	@ (800e05c <HAL_SAI_Init+0x234>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d107      	bne.n	800df5a <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800df4a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800df4e:	f04f 0100 	mov.w	r1, #0
 800df52:	f7fe f925 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800df56:	61b8      	str	r0, [r7, #24]
 800df58:	e006      	b.n	800df68 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800df5a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800df5e:	f04f 0100 	mov.w	r1, #0
 800df62:	f7fe f91d 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800df66:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800df70:	d120      	bne.n	800dfb4 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df76:	2b04      	cmp	r3, #4
 800df78:	d102      	bne.n	800df80 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800df7a:	2340      	movs	r3, #64	@ 0x40
 800df7c:	613b      	str	r3, [r7, #16]
 800df7e:	e00a      	b.n	800df96 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df84:	2b08      	cmp	r3, #8
 800df86:	d103      	bne.n	800df90 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800df88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df8c:	613b      	str	r3, [r7, #16]
 800df8e:	e002      	b.n	800df96 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df94:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800df96:	69ba      	ldr	r2, [r7, #24]
 800df98:	4613      	mov	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	fb02 f303 	mul.w	r3, r2, r3
 800dfac:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfb0:	617b      	str	r3, [r7, #20]
 800dfb2:	e017      	b.n	800dfe4 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dfbc:	d101      	bne.n	800dfc2 <HAL_SAI_Init+0x19a>
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	e000      	b.n	800dfc4 <HAL_SAI_Init+0x19c>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dfc6:	69ba      	ldr	r2, [r7, #24]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	005b      	lsls	r3, r3, #1
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	fb02 f303 	mul.w	r3, r2, r3
 800dfdc:	021b      	lsls	r3, r3, #8
 800dfde:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfe2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	4a20      	ldr	r2, [pc, #128]	@ (800e068 <HAL_SAI_Init+0x240>)
 800dfe8:	fba2 2303 	umull	r2, r3, r2, r3
 800dfec:	08da      	lsrs	r2, r3, #3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800dff2:	6979      	ldr	r1, [r7, #20]
 800dff4:	4b1c      	ldr	r3, [pc, #112]	@ (800e068 <HAL_SAI_Init+0x240>)
 800dff6:	fba3 2301 	umull	r2, r3, r3, r1
 800dffa:	08da      	lsrs	r2, r3, #3
 800dffc:	4613      	mov	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	1aca      	subs	r2, r1, r3
 800e006:	2a08      	cmp	r2, #8
 800e008:	d904      	bls.n	800e014 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e00e:	1c5a      	adds	r2, r3, #1
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e018:	2b04      	cmp	r3, #4
 800e01a:	d104      	bne.n	800e026 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e020:	085a      	lsrs	r2, r3, #1
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d003      	beq.n	800e036 <HAL_SAI_Init+0x20e>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	2b02      	cmp	r3, #2
 800e034:	d109      	bne.n	800e04a <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d101      	bne.n	800e042 <HAL_SAI_Init+0x21a>
 800e03e:	2300      	movs	r3, #0
 800e040:	e001      	b.n	800e046 <HAL_SAI_Init+0x21e>
 800e042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e046:	623b      	str	r3, [r7, #32]
 800e048:	e012      	b.n	800e070 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d10c      	bne.n	800e06c <HAL_SAI_Init+0x244>
 800e052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e056:	e00a      	b.n	800e06e <HAL_SAI_Init+0x246>
 800e058:	40015404 	.word	0x40015404
 800e05c:	40015424 	.word	0x40015424
 800e060:	40015400 	.word	0x40015400
 800e064:	40015800 	.word	0x40015800
 800e068:	cccccccd 	.word	0xcccccccd
 800e06c:	2300      	movs	r3, #0
 800e06e:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6819      	ldr	r1, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	4b59      	ldr	r3, [pc, #356]	@ (800e1e0 <HAL_SAI_Init+0x3b8>)
 800e07c:	400b      	ands	r3, r1
 800e07e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6819      	ldr	r1, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685a      	ldr	r2, [r3, #4]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e08e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e094:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e09a:	431a      	orrs	r2, r3
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e0a8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	695b      	ldr	r3, [r3, #20]
 800e0ae:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e0b4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0ba:	051b      	lsls	r3, r3, #20
 800e0bc:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e0c2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	691b      	ldr	r3, [r3, #16]
 800e0c8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	430a      	orrs	r2, r1
 800e0d0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	6812      	ldr	r2, [r2, #0]
 800e0dc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e0e0:	f023 030f 	bic.w	r3, r3, #15
 800e0e4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6859      	ldr	r1, [r3, #4]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	69da      	ldr	r2, [r3, #28]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0f4:	431a      	orrs	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0fa:	431a      	orrs	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	430a      	orrs	r2, r1
 800e102:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6899      	ldr	r1, [r3, #8]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	4b35      	ldr	r3, [pc, #212]	@ (800e1e4 <HAL_SAI_Init+0x3bc>)
 800e110:	400b      	ands	r3, r1
 800e112:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6899      	ldr	r1, [r3, #8]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e11e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e124:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e12a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e130:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e136:	3b01      	subs	r3, #1
 800e138:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e13a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	430a      	orrs	r2, r1
 800e142:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68d9      	ldr	r1, [r3, #12]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e152:	400b      	ands	r3, r1
 800e154:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68d9      	ldr	r1, [r3, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e164:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e16a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e16c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e172:	3b01      	subs	r3, #1
 800e174:	021b      	lsls	r3, r3, #8
 800e176:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	430a      	orrs	r2, r1
 800e17e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a18      	ldr	r2, [pc, #96]	@ (800e1e8 <HAL_SAI_Init+0x3c0>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d119      	bne.n	800e1be <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e18a:	4b18      	ldr	r3, [pc, #96]	@ (800e1ec <HAL_SAI_Init+0x3c4>)
 800e18c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e18e:	4a17      	ldr	r2, [pc, #92]	@ (800e1ec <HAL_SAI_Init+0x3c4>)
 800e190:	f023 0301 	bic.w	r3, r3, #1
 800e194:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d10e      	bne.n	800e1be <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e1ac:	490f      	ldr	r1, [pc, #60]	@ (800e1ec <HAL_SAI_Init+0x3c4>)
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e1ec <HAL_SAI_Init+0x3c4>)
 800e1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1b6:	4a0d      	ldr	r2, [pc, #52]	@ (800e1ec <HAL_SAI_Init+0x3c4>)
 800e1b8:	f043 0301 	orr.w	r3, r3, #1
 800e1bc:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3728      	adds	r7, #40	@ 0x28
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	f005c010 	.word	0xf005c010
 800e1e4:	fff88000 	.word	0xfff88000
 800e1e8:	40015404 	.word	0x40015404
 800e1ec:	40015400 	.word	0x40015400

0800e1f0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <HAL_SAI_Receive_DMA+0x1a>
 800e204:	88fb      	ldrh	r3, [r7, #6]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	e0c6      	b.n	800e39c <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e214:	b2db      	uxtb	r3, r3
 800e216:	2b01      	cmp	r3, #1
 800e218:	f040 80bf 	bne.w	800e39a <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e222:	2b01      	cmp	r3, #1
 800e224:	d101      	bne.n	800e22a <HAL_SAI_Receive_DMA+0x3a>
 800e226:	2302      	movs	r3, #2
 800e228:	e0b8      	b.n	800e39c <HAL_SAI_Receive_DMA+0x1ac>
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	88fa      	ldrh	r2, [r7, #6]
 800e23c:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	88fa      	ldrh	r2, [r7, #6]
 800e244:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2222      	movs	r2, #34	@ 0x22
 800e254:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e25e:	4a51      	ldr	r2, [pc, #324]	@ (800e3a4 <HAL_SAI_Receive_DMA+0x1b4>)
 800e260:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e268:	4a4f      	ldr	r2, [pc, #316]	@ (800e3a8 <HAL_SAI_Receive_DMA+0x1b8>)
 800e26a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e272:	4a4e      	ldr	r2, [pc, #312]	@ (800e3ac <HAL_SAI_Receive_DMA+0x1bc>)
 800e274:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e27c:	2200      	movs	r2, #0
 800e27e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e284:	2b40      	cmp	r3, #64	@ 0x40
 800e286:	d106      	bne.n	800e296 <HAL_SAI_Receive_DMA+0xa6>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e290:	88fb      	ldrh	r3, [r7, #6]
 800e292:	613b      	str	r3, [r7, #16]
 800e294:	e00a      	b.n	800e2ac <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e29a:	2b80      	cmp	r3, #128	@ 0x80
 800e29c:	d803      	bhi.n	800e2a6 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e29e:	88fb      	ldrh	r3, [r7, #6]
 800e2a0:	005b      	lsls	r3, r3, #1
 800e2a2:	613b      	str	r3, [r7, #16]
 800e2a4:	e002      	b.n	800e2ac <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e2a6:	88fb      	ldrh	r3, [r7, #6]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d02d      	beq.n	800e318 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d021      	beq.n	800e30c <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f103 021c 	add.w	r2, r3, #28
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e300:	4618      	mov	r0, r3
 800e302:	f7f7 ffa5 	bl	8006250 <HAL_DMAEx_List_Start_IT>
 800e306:	4603      	mov	r3, r0
 800e308:	75fb      	strb	r3, [r7, #23]
 800e30a:	e014      	b.n	800e336 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e314:	2301      	movs	r3, #1
 800e316:	e041      	b.n	800e39c <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	331c      	adds	r3, #28
 800e324:	4619      	mov	r1, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e32a:	461a      	mov	r2, r3
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	f7f6 fffd 	bl	800532c <HAL_DMA_Start_IT>
 800e332:	4603      	mov	r3, r0
 800e334:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e336:	7dfb      	ldrb	r3, [r7, #23]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e029      	b.n	800e39c <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e348:	2100      	movs	r1, #0
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f000 f982 	bl	800e654 <SAI_InterruptFlag>
 800e350:	4601      	mov	r1, r0
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	430a      	orrs	r2, r1
 800e35e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e36e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d107      	bne.n	800e38e <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e38c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e396:	2300      	movs	r3, #0
 800e398:	e000      	b.n	800e39c <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e39a:	2302      	movs	r3, #2
  }
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	0800e797 	.word	0x0800e797
 800e3a8:	0800e739 	.word	0x0800e739
 800e3ac:	0800e7b3 	.word	0x0800e7b3

0800e3b0 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 800e3b8:	bf00      	nop
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e3cc:	bf00      	nop
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e3e0:	bf00      	nop
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2200      	movs	r2, #0
 800e402:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d003      	beq.n	800e41a <SAI_InitI2S+0x2e>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	2b02      	cmp	r3, #2
 800e418:	d103      	bne.n	800e422 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2200      	movs	r2, #0
 800e41e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e420:	e002      	b.n	800e428 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2201      	movs	r2, #1
 800e426:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e42e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e436:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e44e:	2301      	movs	r3, #1
 800e450:	e077      	b.n	800e542 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d107      	bne.n	800e468 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e464:	665a      	str	r2, [r3, #100]	@ 0x64
 800e466:	e006      	b.n	800e476 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e46e:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2b03      	cmp	r3, #3
 800e47a:	d84f      	bhi.n	800e51c <SAI_InitI2S+0x130>
 800e47c:	a201      	add	r2, pc, #4	@ (adr r2, 800e484 <SAI_InitI2S+0x98>)
 800e47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e482:	bf00      	nop
 800e484:	0800e495 	.word	0x0800e495
 800e488:	0800e4b7 	.word	0x0800e4b7
 800e48c:	0800e4d9 	.word	0x0800e4d9
 800e490:	0800e4fb 	.word	0x0800e4fb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2280      	movs	r2, #128	@ 0x80
 800e498:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	085b      	lsrs	r3, r3, #1
 800e49e:	015a      	lsls	r2, r3, #5
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	085b      	lsrs	r3, r3, #1
 800e4a8:	011a      	lsls	r2, r3, #4
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2240      	movs	r2, #64	@ 0x40
 800e4b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e4b4:	e035      	b.n	800e522 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2280      	movs	r2, #128	@ 0x80
 800e4ba:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	085b      	lsrs	r3, r3, #1
 800e4c0:	019a      	lsls	r2, r3, #6
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	085b      	lsrs	r3, r3, #1
 800e4ca:	015a      	lsls	r2, r3, #5
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2280      	movs	r2, #128	@ 0x80
 800e4d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e4d6:	e024      	b.n	800e522 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	22c0      	movs	r2, #192	@ 0xc0
 800e4dc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	085b      	lsrs	r3, r3, #1
 800e4e2:	019a      	lsls	r2, r3, #6
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	085b      	lsrs	r3, r3, #1
 800e4ec:	015a      	lsls	r2, r3, #5
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2280      	movs	r2, #128	@ 0x80
 800e4f6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e4f8:	e013      	b.n	800e522 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	22e0      	movs	r2, #224	@ 0xe0
 800e4fe:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	085b      	lsrs	r3, r3, #1
 800e504:	019a      	lsls	r2, r3, #6
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	085b      	lsrs	r3, r3, #1
 800e50e:	015a      	lsls	r2, r3, #5
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2280      	movs	r2, #128	@ 0x80
 800e518:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e51a:	e002      	b.n	800e522 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e51c:	2301      	movs	r3, #1
 800e51e:	75fb      	strb	r3, [r7, #23]
      break;
 800e520:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b02      	cmp	r3, #2
 800e526:	d10b      	bne.n	800e540 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d102      	bne.n	800e534 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2210      	movs	r2, #16
 800e532:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b02      	cmp	r3, #2
 800e538:	d102      	bne.n	800e540 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2208      	movs	r2, #8
 800e53e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e540:	7dfb      	ldrb	r3, [r7, #23]
}
 800e542:	4618      	mov	r0, r3
 800e544:	371c      	adds	r7, #28
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop

0800e550 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e550:	b480      	push	{r7}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
 800e55c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e55e:	2300      	movs	r3, #0
 800e560:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <SAI_InitPCM+0x2e>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d103      	bne.n	800e586 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2201      	movs	r2, #1
 800e582:	651a      	str	r2, [r3, #80]	@ 0x50
 800e584:	e002      	b.n	800e58c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2200      	movs	r2, #0
 800e590:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e598:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e5a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5b4:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	2b04      	cmp	r3, #4
 800e5ba:	d103      	bne.n	800e5c4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	659a      	str	r2, [r3, #88]	@ 0x58
 800e5c2:	e002      	b.n	800e5ca <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	220d      	movs	r2, #13
 800e5c8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	d837      	bhi.n	800e640 <SAI_InitPCM+0xf0>
 800e5d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e5d8 <SAI_InitPCM+0x88>)
 800e5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d6:	bf00      	nop
 800e5d8:	0800e5e9 	.word	0x0800e5e9
 800e5dc:	0800e5ff 	.word	0x0800e5ff
 800e5e0:	0800e615 	.word	0x0800e615
 800e5e4:	0800e62b 	.word	0x0800e62b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2280      	movs	r2, #128	@ 0x80
 800e5ec:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	011a      	lsls	r2, r3, #4
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2240      	movs	r2, #64	@ 0x40
 800e5fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5fc:	e023      	b.n	800e646 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2280      	movs	r2, #128	@ 0x80
 800e602:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	015a      	lsls	r2, r3, #5
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2280      	movs	r2, #128	@ 0x80
 800e610:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e612:	e018      	b.n	800e646 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	22c0      	movs	r2, #192	@ 0xc0
 800e618:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	015a      	lsls	r2, r3, #5
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2280      	movs	r2, #128	@ 0x80
 800e626:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e628:	e00d      	b.n	800e646 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	22e0      	movs	r2, #224	@ 0xe0
 800e62e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2280      	movs	r2, #128	@ 0x80
 800e63c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e63e:	e002      	b.n	800e646 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e640:	2301      	movs	r3, #1
 800e642:	75fb      	strb	r3, [r7, #23]
      break;
 800e644:	bf00      	nop
  }

  return status;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	371c      	adds	r7, #28
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	460b      	mov	r3, r1
 800e65e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e660:	2301      	movs	r3, #1
 800e662:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e664:	78fb      	ldrb	r3, [r7, #3]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d103      	bne.n	800e672 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f043 0308 	orr.w	r3, r3, #8
 800e670:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e676:	2b08      	cmp	r3, #8
 800e678:	d10b      	bne.n	800e692 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e67e:	2b03      	cmp	r3, #3
 800e680:	d003      	beq.n	800e68a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d103      	bne.n	800e692 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f043 0310 	orr.w	r3, r3, #16
 800e690:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	2b03      	cmp	r3, #3
 800e698:	d003      	beq.n	800e6a2 <SAI_InterruptFlag+0x4e>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	d104      	bne.n	800e6ac <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e6a8:	60fb      	str	r3, [r7, #12]
 800e6aa:	e003      	b.n	800e6b4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f043 0304 	orr.w	r3, r3, #4
 800e6b2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3714      	adds	r7, #20
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
	...

0800e6c4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e6cc:	4b18      	ldr	r3, [pc, #96]	@ (800e730 <SAI_Disable+0x6c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a18      	ldr	r2, [pc, #96]	@ (800e734 <SAI_Disable+0x70>)
 800e6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6d6:	0b1b      	lsrs	r3, r3, #12
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e6ee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10a      	bne.n	800e70c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800e706:	2303      	movs	r3, #3
 800e708:	72fb      	strb	r3, [r7, #11]
      break;
 800e70a:	e009      	b.n	800e720 <SAI_Disable+0x5c>
    }
    count--;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3b01      	subs	r3, #1
 800e710:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e7      	bne.n	800e6f0 <SAI_Disable+0x2c>

  return status;
 800e720:	7afb      	ldrb	r3, [r7, #11]
}
 800e722:	4618      	mov	r0, r3
 800e724:	3714      	adds	r7, #20
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	20000000 	.word	0x20000000
 800e734:	95cbec1b 	.word	0x95cbec1b

0800e738 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e744:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e74a:	2b81      	cmp	r3, #129	@ 0x81
 800e74c:	d01c      	beq.n	800e788 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e75c:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e766:	2100      	movs	r1, #0
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff ff73 	bl	800e654 <SAI_InterruptFlag>
 800e76e:	4603      	mov	r3, r0
 800e770:	43d9      	mvns	r1, r3
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	691a      	ldr	r2, [r3, #16]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	400a      	ands	r2, r1
 800e77e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2201      	movs	r2, #1
 800e784:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f7ff fe11 	bl	800e3b0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e78e:	bf00      	nop
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b084      	sub	sp, #16
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7a2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e7a4:	68f8      	ldr	r0, [r7, #12]
 800e7a6:	f7ff fe0d 	bl	800e3c4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7be:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e7de:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f7ff ff6f 	bl	800e6c4 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff fdee 	bl	800e3d8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e7fc:	bf00      	nop
 800e7fe:	3710      	adds	r7, #16
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d101      	bne.n	800e816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	e049      	b.n	800e8aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7f3 fbd4 	bl	8001fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2202      	movs	r2, #2
 800e834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	3304      	adds	r3, #4
 800e840:	4619      	mov	r1, r3
 800e842:	4610      	mov	r0, r2
 800e844:	f000 f94a 	bl	800eadc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2201      	movs	r2, #1
 800e884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d101      	bne.n	800e8d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	e0ff      	b.n	800ead2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b14      	cmp	r3, #20
 800e8de:	f200 80f0 	bhi.w	800eac2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800e8e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e8:	0800e93d 	.word	0x0800e93d
 800e8ec:	0800eac3 	.word	0x0800eac3
 800e8f0:	0800eac3 	.word	0x0800eac3
 800e8f4:	0800eac3 	.word	0x0800eac3
 800e8f8:	0800e97d 	.word	0x0800e97d
 800e8fc:	0800eac3 	.word	0x0800eac3
 800e900:	0800eac3 	.word	0x0800eac3
 800e904:	0800eac3 	.word	0x0800eac3
 800e908:	0800e9bf 	.word	0x0800e9bf
 800e90c:	0800eac3 	.word	0x0800eac3
 800e910:	0800eac3 	.word	0x0800eac3
 800e914:	0800eac3 	.word	0x0800eac3
 800e918:	0800e9ff 	.word	0x0800e9ff
 800e91c:	0800eac3 	.word	0x0800eac3
 800e920:	0800eac3 	.word	0x0800eac3
 800e924:	0800eac3 	.word	0x0800eac3
 800e928:	0800ea41 	.word	0x0800ea41
 800e92c:	0800eac3 	.word	0x0800eac3
 800e930:	0800eac3 	.word	0x0800eac3
 800e934:	0800eac3 	.word	0x0800eac3
 800e938:	0800ea81 	.word	0x0800ea81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68b9      	ldr	r1, [r7, #8]
 800e942:	4618      	mov	r0, r3
 800e944:	f000 f9d0 	bl	800ece8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	699a      	ldr	r2, [r3, #24]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f042 0208 	orr.w	r2, r2, #8
 800e956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	699a      	ldr	r2, [r3, #24]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f022 0204 	bic.w	r2, r2, #4
 800e966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6999      	ldr	r1, [r3, #24]
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	691a      	ldr	r2, [r3, #16]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	619a      	str	r2, [r3, #24]
      break;
 800e97a:	e0a5      	b.n	800eac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68b9      	ldr	r1, [r7, #8]
 800e982:	4618      	mov	r0, r3
 800e984:	f000 fa72 	bl	800ee6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	699a      	ldr	r2, [r3, #24]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e9a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6999      	ldr	r1, [r3, #24]
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	691b      	ldr	r3, [r3, #16]
 800e9b2:	021a      	lsls	r2, r3, #8
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	430a      	orrs	r2, r1
 800e9ba:	619a      	str	r2, [r3, #24]
      break;
 800e9bc:	e084      	b.n	800eac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	68b9      	ldr	r1, [r7, #8]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f000 fb01 	bl	800efcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	69da      	ldr	r2, [r3, #28]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f042 0208 	orr.w	r2, r2, #8
 800e9d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	69da      	ldr	r2, [r3, #28]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f022 0204 	bic.w	r2, r2, #4
 800e9e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	69d9      	ldr	r1, [r3, #28]
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	691a      	ldr	r2, [r3, #16]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	430a      	orrs	r2, r1
 800e9fa:	61da      	str	r2, [r3, #28]
      break;
 800e9fc:	e064      	b.n	800eac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68b9      	ldr	r1, [r7, #8]
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 fb8f 	bl	800f128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	69da      	ldr	r2, [r3, #28]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	69da      	ldr	r2, [r3, #28]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	69d9      	ldr	r1, [r3, #28]
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	021a      	lsls	r2, r3, #8
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	430a      	orrs	r2, r1
 800ea3c:	61da      	str	r2, [r3, #28]
      break;
 800ea3e:	e043      	b.n	800eac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68b9      	ldr	r1, [r7, #8]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 fc1e 	bl	800f288 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f042 0208 	orr.w	r2, r2, #8
 800ea5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f022 0204 	bic.w	r2, r2, #4
 800ea6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	691a      	ldr	r2, [r3, #16]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ea7e:	e023      	b.n	800eac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68b9      	ldr	r1, [r7, #8]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 fc80 	bl	800f38c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eaaa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	021a      	lsls	r2, r3, #8
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	430a      	orrs	r2, r1
 800eabe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800eac0:	e002      	b.n	800eac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	75fb      	strb	r3, [r7, #23]
      break;
 800eac6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2200      	movs	r2, #0
 800eacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ead0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3718      	adds	r7, #24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop

0800eadc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	4a6e      	ldr	r2, [pc, #440]	@ (800eca8 <TIM_Base_SetConfig+0x1cc>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d02b      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4a6d      	ldr	r2, [pc, #436]	@ (800ecac <TIM_Base_SetConfig+0x1d0>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d027      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb02:	d023      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eb0a:	d01f      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4a68      	ldr	r2, [pc, #416]	@ (800ecb0 <TIM_Base_SetConfig+0x1d4>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d01b      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a67      	ldr	r2, [pc, #412]	@ (800ecb4 <TIM_Base_SetConfig+0x1d8>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d017      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a66      	ldr	r2, [pc, #408]	@ (800ecb8 <TIM_Base_SetConfig+0x1dc>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d013      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a65      	ldr	r2, [pc, #404]	@ (800ecbc <TIM_Base_SetConfig+0x1e0>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d00f      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a64      	ldr	r2, [pc, #400]	@ (800ecc0 <TIM_Base_SetConfig+0x1e4>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d00b      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a63      	ldr	r2, [pc, #396]	@ (800ecc4 <TIM_Base_SetConfig+0x1e8>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d007      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a62      	ldr	r2, [pc, #392]	@ (800ecc8 <TIM_Base_SetConfig+0x1ec>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d003      	beq.n	800eb4c <TIM_Base_SetConfig+0x70>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a61      	ldr	r2, [pc, #388]	@ (800eccc <TIM_Base_SetConfig+0x1f0>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d108      	bne.n	800eb5e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4a51      	ldr	r2, [pc, #324]	@ (800eca8 <TIM_Base_SetConfig+0x1cc>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d043      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4a50      	ldr	r2, [pc, #320]	@ (800ecac <TIM_Base_SetConfig+0x1d0>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d03f      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb74:	d03b      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eb7c:	d037      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a4b      	ldr	r2, [pc, #300]	@ (800ecb0 <TIM_Base_SetConfig+0x1d4>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d033      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a4a      	ldr	r2, [pc, #296]	@ (800ecb4 <TIM_Base_SetConfig+0x1d8>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d02f      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a49      	ldr	r2, [pc, #292]	@ (800ecb8 <TIM_Base_SetConfig+0x1dc>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d02b      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a48      	ldr	r2, [pc, #288]	@ (800ecbc <TIM_Base_SetConfig+0x1e0>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d027      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4a47      	ldr	r2, [pc, #284]	@ (800ecc0 <TIM_Base_SetConfig+0x1e4>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d023      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a46      	ldr	r2, [pc, #280]	@ (800ecc4 <TIM_Base_SetConfig+0x1e8>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d01f      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4a45      	ldr	r2, [pc, #276]	@ (800ecc8 <TIM_Base_SetConfig+0x1ec>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d01b      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a44      	ldr	r2, [pc, #272]	@ (800eccc <TIM_Base_SetConfig+0x1f0>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d017      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4a43      	ldr	r2, [pc, #268]	@ (800ecd0 <TIM_Base_SetConfig+0x1f4>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d013      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a42      	ldr	r2, [pc, #264]	@ (800ecd4 <TIM_Base_SetConfig+0x1f8>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d00f      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4a41      	ldr	r2, [pc, #260]	@ (800ecd8 <TIM_Base_SetConfig+0x1fc>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d00b      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4a40      	ldr	r2, [pc, #256]	@ (800ecdc <TIM_Base_SetConfig+0x200>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d007      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4a3f      	ldr	r2, [pc, #252]	@ (800ece0 <TIM_Base_SetConfig+0x204>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d003      	beq.n	800ebee <TIM_Base_SetConfig+0x112>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4a3e      	ldr	r2, [pc, #248]	@ (800ece4 <TIM_Base_SetConfig+0x208>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d108      	bne.n	800ec00 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	695b      	ldr	r3, [r3, #20]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a20      	ldr	r2, [pc, #128]	@ (800eca8 <TIM_Base_SetConfig+0x1cc>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d023      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4a1f      	ldr	r2, [pc, #124]	@ (800ecac <TIM_Base_SetConfig+0x1d0>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d01f      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4a24      	ldr	r2, [pc, #144]	@ (800ecc8 <TIM_Base_SetConfig+0x1ec>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d01b      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a23      	ldr	r2, [pc, #140]	@ (800eccc <TIM_Base_SetConfig+0x1f0>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d017      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	4a22      	ldr	r2, [pc, #136]	@ (800ecd0 <TIM_Base_SetConfig+0x1f4>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d013      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4a21      	ldr	r2, [pc, #132]	@ (800ecd4 <TIM_Base_SetConfig+0x1f8>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d00f      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4a20      	ldr	r2, [pc, #128]	@ (800ecd8 <TIM_Base_SetConfig+0x1fc>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d00b      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4a1f      	ldr	r2, [pc, #124]	@ (800ecdc <TIM_Base_SetConfig+0x200>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d007      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a1e      	ldr	r2, [pc, #120]	@ (800ece0 <TIM_Base_SetConfig+0x204>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d003      	beq.n	800ec74 <TIM_Base_SetConfig+0x198>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4a1d      	ldr	r2, [pc, #116]	@ (800ece4 <TIM_Base_SetConfig+0x208>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d103      	bne.n	800ec7c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	691a      	ldr	r2, [r3, #16]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	f003 0301 	and.w	r3, r3, #1
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d105      	bne.n	800ec9a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	f023 0201 	bic.w	r2, r3, #1
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	611a      	str	r2, [r3, #16]
  }
}
 800ec9a:	bf00      	nop
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	40012c00 	.word	0x40012c00
 800ecac:	50012c00 	.word	0x50012c00
 800ecb0:	40000400 	.word	0x40000400
 800ecb4:	50000400 	.word	0x50000400
 800ecb8:	40000800 	.word	0x40000800
 800ecbc:	50000800 	.word	0x50000800
 800ecc0:	40000c00 	.word	0x40000c00
 800ecc4:	50000c00 	.word	0x50000c00
 800ecc8:	40013400 	.word	0x40013400
 800eccc:	50013400 	.word	0x50013400
 800ecd0:	40014000 	.word	0x40014000
 800ecd4:	50014000 	.word	0x50014000
 800ecd8:	40014400 	.word	0x40014400
 800ecdc:	50014400 	.word	0x50014400
 800ece0:	40014800 	.word	0x40014800
 800ece4:	50014800 	.word	0x50014800

0800ece8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b087      	sub	sp, #28
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a1b      	ldr	r3, [r3, #32]
 800ecf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a1b      	ldr	r3, [r3, #32]
 800ecfc:	f023 0201 	bic.w	r2, r3, #1
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ed16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f023 0303 	bic.w	r3, r3, #3
 800ed22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f023 0302 	bic.w	r3, r3, #2
 800ed34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	4a40      	ldr	r2, [pc, #256]	@ (800ee44 <TIM_OC1_SetConfig+0x15c>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d023      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a3f      	ldr	r2, [pc, #252]	@ (800ee48 <TIM_OC1_SetConfig+0x160>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d01f      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a3e      	ldr	r2, [pc, #248]	@ (800ee4c <TIM_OC1_SetConfig+0x164>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d01b      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4a3d      	ldr	r2, [pc, #244]	@ (800ee50 <TIM_OC1_SetConfig+0x168>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d017      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a3c      	ldr	r2, [pc, #240]	@ (800ee54 <TIM_OC1_SetConfig+0x16c>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d013      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a3b      	ldr	r2, [pc, #236]	@ (800ee58 <TIM_OC1_SetConfig+0x170>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d00f      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a3a      	ldr	r2, [pc, #232]	@ (800ee5c <TIM_OC1_SetConfig+0x174>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d00b      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a39      	ldr	r2, [pc, #228]	@ (800ee60 <TIM_OC1_SetConfig+0x178>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d007      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a38      	ldr	r2, [pc, #224]	@ (800ee64 <TIM_OC1_SetConfig+0x17c>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d003      	beq.n	800ed90 <TIM_OC1_SetConfig+0xa8>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a37      	ldr	r2, [pc, #220]	@ (800ee68 <TIM_OC1_SetConfig+0x180>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d10c      	bne.n	800edaa <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f023 0308 	bic.w	r3, r3, #8
 800ed96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	f023 0304 	bic.w	r3, r3, #4
 800eda8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a25      	ldr	r2, [pc, #148]	@ (800ee44 <TIM_OC1_SetConfig+0x15c>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d023      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4a24      	ldr	r2, [pc, #144]	@ (800ee48 <TIM_OC1_SetConfig+0x160>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d01f      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4a23      	ldr	r2, [pc, #140]	@ (800ee4c <TIM_OC1_SetConfig+0x164>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d01b      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4a22      	ldr	r2, [pc, #136]	@ (800ee50 <TIM_OC1_SetConfig+0x168>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d017      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4a21      	ldr	r2, [pc, #132]	@ (800ee54 <TIM_OC1_SetConfig+0x16c>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d013      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	4a20      	ldr	r2, [pc, #128]	@ (800ee58 <TIM_OC1_SetConfig+0x170>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d00f      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4a1f      	ldr	r2, [pc, #124]	@ (800ee5c <TIM_OC1_SetConfig+0x174>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d00b      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4a1e      	ldr	r2, [pc, #120]	@ (800ee60 <TIM_OC1_SetConfig+0x178>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d007      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4a1d      	ldr	r2, [pc, #116]	@ (800ee64 <TIM_OC1_SetConfig+0x17c>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d003      	beq.n	800edfa <TIM_OC1_SetConfig+0x112>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4a1c      	ldr	r2, [pc, #112]	@ (800ee68 <TIM_OC1_SetConfig+0x180>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d111      	bne.n	800ee1e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	693a      	ldr	r2, [r7, #16]
 800ee10:	4313      	orrs	r3, r2
 800ee12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	699b      	ldr	r3, [r3, #24]
 800ee18:	693a      	ldr	r2, [r7, #16]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	621a      	str	r2, [r3, #32]
}
 800ee38:	bf00      	nop
 800ee3a:	371c      	adds	r7, #28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr
 800ee44:	40012c00 	.word	0x40012c00
 800ee48:	50012c00 	.word	0x50012c00
 800ee4c:	40013400 	.word	0x40013400
 800ee50:	50013400 	.word	0x50013400
 800ee54:	40014000 	.word	0x40014000
 800ee58:	50014000 	.word	0x50014000
 800ee5c:	40014400 	.word	0x40014400
 800ee60:	50014400 	.word	0x50014400
 800ee64:	40014800 	.word	0x40014800
 800ee68:	50014800 	.word	0x50014800

0800ee6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b087      	sub	sp, #28
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a1b      	ldr	r3, [r3, #32]
 800ee7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a1b      	ldr	r3, [r3, #32]
 800ee80:	f023 0210 	bic.w	r2, r3, #16
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	699b      	ldr	r3, [r3, #24]
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ee9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	021b      	lsls	r3, r3, #8
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	f023 0320 	bic.w	r3, r3, #32
 800eeba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	011b      	lsls	r3, r3, #4
 800eec2:	697a      	ldr	r2, [r7, #20]
 800eec4:	4313      	orrs	r3, r2
 800eec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a36      	ldr	r2, [pc, #216]	@ (800efa4 <TIM_OC2_SetConfig+0x138>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d00b      	beq.n	800eee8 <TIM_OC2_SetConfig+0x7c>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a35      	ldr	r2, [pc, #212]	@ (800efa8 <TIM_OC2_SetConfig+0x13c>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d007      	beq.n	800eee8 <TIM_OC2_SetConfig+0x7c>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a34      	ldr	r2, [pc, #208]	@ (800efac <TIM_OC2_SetConfig+0x140>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d003      	beq.n	800eee8 <TIM_OC2_SetConfig+0x7c>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a33      	ldr	r2, [pc, #204]	@ (800efb0 <TIM_OC2_SetConfig+0x144>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d10d      	bne.n	800ef04 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eeee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	011b      	lsls	r3, r3, #4
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a27      	ldr	r2, [pc, #156]	@ (800efa4 <TIM_OC2_SetConfig+0x138>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d023      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a26      	ldr	r2, [pc, #152]	@ (800efa8 <TIM_OC2_SetConfig+0x13c>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d01f      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a25      	ldr	r2, [pc, #148]	@ (800efac <TIM_OC2_SetConfig+0x140>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d01b      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a24      	ldr	r2, [pc, #144]	@ (800efb0 <TIM_OC2_SetConfig+0x144>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d017      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4a23      	ldr	r2, [pc, #140]	@ (800efb4 <TIM_OC2_SetConfig+0x148>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d013      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4a22      	ldr	r2, [pc, #136]	@ (800efb8 <TIM_OC2_SetConfig+0x14c>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d00f      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4a21      	ldr	r2, [pc, #132]	@ (800efbc <TIM_OC2_SetConfig+0x150>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d00b      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4a20      	ldr	r2, [pc, #128]	@ (800efc0 <TIM_OC2_SetConfig+0x154>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d007      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4a1f      	ldr	r2, [pc, #124]	@ (800efc4 <TIM_OC2_SetConfig+0x158>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d003      	beq.n	800ef54 <TIM_OC2_SetConfig+0xe8>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	4a1e      	ldr	r2, [pc, #120]	@ (800efc8 <TIM_OC2_SetConfig+0x15c>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d113      	bne.n	800ef7c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	695b      	ldr	r3, [r3, #20]
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	693a      	ldr	r2, [r7, #16]
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	693a      	ldr	r2, [r7, #16]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	693a      	ldr	r2, [r7, #16]
 800ef80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	685a      	ldr	r2, [r3, #4]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	697a      	ldr	r2, [r7, #20]
 800ef94:	621a      	str	r2, [r3, #32]
}
 800ef96:	bf00      	nop
 800ef98:	371c      	adds	r7, #28
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	40012c00 	.word	0x40012c00
 800efa8:	50012c00 	.word	0x50012c00
 800efac:	40013400 	.word	0x40013400
 800efb0:	50013400 	.word	0x50013400
 800efb4:	40014000 	.word	0x40014000
 800efb8:	50014000 	.word	0x50014000
 800efbc:	40014400 	.word	0x40014400
 800efc0:	50014400 	.word	0x50014400
 800efc4:	40014800 	.word	0x40014800
 800efc8:	50014800 	.word	0x50014800

0800efcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efcc:	b480      	push	{r7}
 800efce:	b087      	sub	sp, #28
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a1b      	ldr	r3, [r3, #32]
 800efe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	69db      	ldr	r3, [r3, #28]
 800eff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800effa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800effe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f023 0303 	bic.w	r3, r3, #3
 800f006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	4313      	orrs	r3, r2
 800f010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	021b      	lsls	r3, r3, #8
 800f020:	697a      	ldr	r2, [r7, #20]
 800f022:	4313      	orrs	r3, r2
 800f024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a35      	ldr	r2, [pc, #212]	@ (800f100 <TIM_OC3_SetConfig+0x134>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d00b      	beq.n	800f046 <TIM_OC3_SetConfig+0x7a>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4a34      	ldr	r2, [pc, #208]	@ (800f104 <TIM_OC3_SetConfig+0x138>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d007      	beq.n	800f046 <TIM_OC3_SetConfig+0x7a>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4a33      	ldr	r2, [pc, #204]	@ (800f108 <TIM_OC3_SetConfig+0x13c>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d003      	beq.n	800f046 <TIM_OC3_SetConfig+0x7a>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a32      	ldr	r2, [pc, #200]	@ (800f10c <TIM_OC3_SetConfig+0x140>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d10d      	bne.n	800f062 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f04c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	021b      	lsls	r3, r3, #8
 800f054:	697a      	ldr	r2, [r7, #20]
 800f056:	4313      	orrs	r3, r2
 800f058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a26      	ldr	r2, [pc, #152]	@ (800f100 <TIM_OC3_SetConfig+0x134>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d023      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4a25      	ldr	r2, [pc, #148]	@ (800f104 <TIM_OC3_SetConfig+0x138>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d01f      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a24      	ldr	r2, [pc, #144]	@ (800f108 <TIM_OC3_SetConfig+0x13c>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d01b      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a23      	ldr	r2, [pc, #140]	@ (800f10c <TIM_OC3_SetConfig+0x140>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d017      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a22      	ldr	r2, [pc, #136]	@ (800f110 <TIM_OC3_SetConfig+0x144>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d013      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a21      	ldr	r2, [pc, #132]	@ (800f114 <TIM_OC3_SetConfig+0x148>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d00f      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a20      	ldr	r2, [pc, #128]	@ (800f118 <TIM_OC3_SetConfig+0x14c>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d00b      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4a1f      	ldr	r2, [pc, #124]	@ (800f11c <TIM_OC3_SetConfig+0x150>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d007      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4a1e      	ldr	r2, [pc, #120]	@ (800f120 <TIM_OC3_SetConfig+0x154>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d003      	beq.n	800f0b2 <TIM_OC3_SetConfig+0xe6>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a1d      	ldr	r2, [pc, #116]	@ (800f124 <TIM_OC3_SetConfig+0x158>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d113      	bne.n	800f0da <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f0c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	695b      	ldr	r3, [r3, #20]
 800f0c6:	011b      	lsls	r3, r3, #4
 800f0c8:	693a      	ldr	r2, [r7, #16]
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	699b      	ldr	r3, [r3, #24]
 800f0d2:	011b      	lsls	r3, r3, #4
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	685a      	ldr	r2, [r3, #4]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	697a      	ldr	r2, [r7, #20]
 800f0f2:	621a      	str	r2, [r3, #32]
}
 800f0f4:	bf00      	nop
 800f0f6:	371c      	adds	r7, #28
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	40012c00 	.word	0x40012c00
 800f104:	50012c00 	.word	0x50012c00
 800f108:	40013400 	.word	0x40013400
 800f10c:	50013400 	.word	0x50013400
 800f110:	40014000 	.word	0x40014000
 800f114:	50014000 	.word	0x50014000
 800f118:	40014400 	.word	0x40014400
 800f11c:	50014400 	.word	0x50014400
 800f120:	40014800 	.word	0x40014800
 800f124:	50014800 	.word	0x50014800

0800f128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f128:	b480      	push	{r7}
 800f12a:	b087      	sub	sp, #28
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6a1b      	ldr	r3, [r3, #32]
 800f136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a1b      	ldr	r3, [r3, #32]
 800f13c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	69db      	ldr	r3, [r3, #28]
 800f14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	021b      	lsls	r3, r3, #8
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	031b      	lsls	r3, r3, #12
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	4313      	orrs	r3, r2
 800f182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a36      	ldr	r2, [pc, #216]	@ (800f260 <TIM_OC4_SetConfig+0x138>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d00b      	beq.n	800f1a4 <TIM_OC4_SetConfig+0x7c>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a35      	ldr	r2, [pc, #212]	@ (800f264 <TIM_OC4_SetConfig+0x13c>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d007      	beq.n	800f1a4 <TIM_OC4_SetConfig+0x7c>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a34      	ldr	r2, [pc, #208]	@ (800f268 <TIM_OC4_SetConfig+0x140>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d003      	beq.n	800f1a4 <TIM_OC4_SetConfig+0x7c>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a33      	ldr	r2, [pc, #204]	@ (800f26c <TIM_OC4_SetConfig+0x144>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d10d      	bne.n	800f1c0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f1aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	031b      	lsls	r3, r3, #12
 800f1b2:	697a      	ldr	r2, [r7, #20]
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f1be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a27      	ldr	r2, [pc, #156]	@ (800f260 <TIM_OC4_SetConfig+0x138>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d023      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a26      	ldr	r2, [pc, #152]	@ (800f264 <TIM_OC4_SetConfig+0x13c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d01f      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a25      	ldr	r2, [pc, #148]	@ (800f268 <TIM_OC4_SetConfig+0x140>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d01b      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a24      	ldr	r2, [pc, #144]	@ (800f26c <TIM_OC4_SetConfig+0x144>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d017      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4a23      	ldr	r2, [pc, #140]	@ (800f270 <TIM_OC4_SetConfig+0x148>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d013      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4a22      	ldr	r2, [pc, #136]	@ (800f274 <TIM_OC4_SetConfig+0x14c>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d00f      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a21      	ldr	r2, [pc, #132]	@ (800f278 <TIM_OC4_SetConfig+0x150>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d00b      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a20      	ldr	r2, [pc, #128]	@ (800f27c <TIM_OC4_SetConfig+0x154>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d007      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a1f      	ldr	r2, [pc, #124]	@ (800f280 <TIM_OC4_SetConfig+0x158>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d003      	beq.n	800f210 <TIM_OC4_SetConfig+0xe8>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4a1e      	ldr	r2, [pc, #120]	@ (800f284 <TIM_OC4_SetConfig+0x15c>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d113      	bne.n	800f238 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f216:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f21e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	019b      	lsls	r3, r3, #6
 800f226:	693a      	ldr	r2, [r7, #16]
 800f228:	4313      	orrs	r3, r2
 800f22a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	699b      	ldr	r3, [r3, #24]
 800f230:	019b      	lsls	r3, r3, #6
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	4313      	orrs	r3, r2
 800f236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	697a      	ldr	r2, [r7, #20]
 800f250:	621a      	str	r2, [r3, #32]
}
 800f252:	bf00      	nop
 800f254:	371c      	adds	r7, #28
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	40012c00 	.word	0x40012c00
 800f264:	50012c00 	.word	0x50012c00
 800f268:	40013400 	.word	0x40013400
 800f26c:	50013400 	.word	0x50013400
 800f270:	40014000 	.word	0x40014000
 800f274:	50014000 	.word	0x50014000
 800f278:	40014400 	.word	0x40014400
 800f27c:	50014400 	.word	0x50014400
 800f280:	40014800 	.word	0x40014800
 800f284:	50014800 	.word	0x50014800

0800f288 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f288:	b480      	push	{r7}
 800f28a:	b087      	sub	sp, #28
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a1b      	ldr	r3, [r3, #32]
 800f296:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6a1b      	ldr	r3, [r3, #32]
 800f29c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f2b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f2cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	041b      	lsls	r3, r3, #16
 800f2d4:	693a      	ldr	r2, [r7, #16]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a21      	ldr	r2, [pc, #132]	@ (800f364 <TIM_OC5_SetConfig+0xdc>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d023      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a20      	ldr	r2, [pc, #128]	@ (800f368 <TIM_OC5_SetConfig+0xe0>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d01f      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a1f      	ldr	r2, [pc, #124]	@ (800f36c <TIM_OC5_SetConfig+0xe4>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d01b      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a1e      	ldr	r2, [pc, #120]	@ (800f370 <TIM_OC5_SetConfig+0xe8>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d017      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4a1d      	ldr	r2, [pc, #116]	@ (800f374 <TIM_OC5_SetConfig+0xec>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d013      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4a1c      	ldr	r2, [pc, #112]	@ (800f378 <TIM_OC5_SetConfig+0xf0>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d00f      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4a1b      	ldr	r2, [pc, #108]	@ (800f37c <TIM_OC5_SetConfig+0xf4>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d00b      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4a1a      	ldr	r2, [pc, #104]	@ (800f380 <TIM_OC5_SetConfig+0xf8>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d007      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a19      	ldr	r2, [pc, #100]	@ (800f384 <TIM_OC5_SetConfig+0xfc>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d003      	beq.n	800f32a <TIM_OC5_SetConfig+0xa2>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4a18      	ldr	r2, [pc, #96]	@ (800f388 <TIM_OC5_SetConfig+0x100>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d109      	bne.n	800f33e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	695b      	ldr	r3, [r3, #20]
 800f336:	021b      	lsls	r3, r3, #8
 800f338:	697a      	ldr	r2, [r7, #20]
 800f33a:	4313      	orrs	r3, r2
 800f33c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	697a      	ldr	r2, [r7, #20]
 800f342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	693a      	ldr	r2, [r7, #16]
 800f356:	621a      	str	r2, [r3, #32]
}
 800f358:	bf00      	nop
 800f35a:	371c      	adds	r7, #28
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	40012c00 	.word	0x40012c00
 800f368:	50012c00 	.word	0x50012c00
 800f36c:	40013400 	.word	0x40013400
 800f370:	50013400 	.word	0x50013400
 800f374:	40014000 	.word	0x40014000
 800f378:	50014000 	.word	0x50014000
 800f37c:	40014400 	.word	0x40014400
 800f380:	50014400 	.word	0x50014400
 800f384:	40014800 	.word	0x40014800
 800f388:	50014800 	.word	0x50014800

0800f38c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b087      	sub	sp, #28
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a1b      	ldr	r3, [r3, #32]
 800f39a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a1b      	ldr	r3, [r3, #32]
 800f3a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f3ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	021b      	lsls	r3, r3, #8
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f3d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	051b      	lsls	r3, r3, #20
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a22      	ldr	r2, [pc, #136]	@ (800f46c <TIM_OC6_SetConfig+0xe0>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d023      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a21      	ldr	r2, [pc, #132]	@ (800f470 <TIM_OC6_SetConfig+0xe4>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d01f      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a20      	ldr	r2, [pc, #128]	@ (800f474 <TIM_OC6_SetConfig+0xe8>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d01b      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a1f      	ldr	r2, [pc, #124]	@ (800f478 <TIM_OC6_SetConfig+0xec>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d017      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a1e      	ldr	r2, [pc, #120]	@ (800f47c <TIM_OC6_SetConfig+0xf0>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d013      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a1d      	ldr	r2, [pc, #116]	@ (800f480 <TIM_OC6_SetConfig+0xf4>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d00f      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4a1c      	ldr	r2, [pc, #112]	@ (800f484 <TIM_OC6_SetConfig+0xf8>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d00b      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a1b      	ldr	r2, [pc, #108]	@ (800f488 <TIM_OC6_SetConfig+0xfc>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d007      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4a1a      	ldr	r2, [pc, #104]	@ (800f48c <TIM_OC6_SetConfig+0x100>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d003      	beq.n	800f430 <TIM_OC6_SetConfig+0xa4>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a19      	ldr	r2, [pc, #100]	@ (800f490 <TIM_OC6_SetConfig+0x104>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d109      	bne.n	800f444 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f436:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	695b      	ldr	r3, [r3, #20]
 800f43c:	029b      	lsls	r3, r3, #10
 800f43e:	697a      	ldr	r2, [r7, #20]
 800f440:	4313      	orrs	r3, r2
 800f442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	685a      	ldr	r2, [r3, #4]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	693a      	ldr	r2, [r7, #16]
 800f45c:	621a      	str	r2, [r3, #32]
}
 800f45e:	bf00      	nop
 800f460:	371c      	adds	r7, #28
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	40012c00 	.word	0x40012c00
 800f470:	50012c00 	.word	0x50012c00
 800f474:	40013400 	.word	0x40013400
 800f478:	50013400 	.word	0x50013400
 800f47c:	40014000 	.word	0x40014000
 800f480:	50014000 	.word	0x50014000
 800f484:	40014400 	.word	0x40014400
 800f488:	50014400 	.word	0x50014400
 800f48c:	40014800 	.word	0x40014800
 800f490:	50014800 	.word	0x50014800

0800f494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f494:	b480      	push	{r7}
 800f496:	b085      	sub	sp, #20
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d101      	bne.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f4a8:	2302      	movs	r3, #2
 800f4aa:	e097      	b.n	800f5dc <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2202      	movs	r2, #2
 800f4b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a45      	ldr	r2, [pc, #276]	@ (800f5e8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d00e      	beq.n	800f4f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a44      	ldr	r2, [pc, #272]	@ (800f5ec <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d009      	beq.n	800f4f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4a42      	ldr	r2, [pc, #264]	@ (800f5f0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d004      	beq.n	800f4f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4a41      	ldr	r2, [pc, #260]	@ (800f5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d108      	bne.n	800f506 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f4fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	4313      	orrs	r3, r2
 800f504:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f50c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f510:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	68fa      	ldr	r2, [r7, #12]
 800f518:	4313      	orrs	r3, r2
 800f51a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4a2f      	ldr	r2, [pc, #188]	@ (800f5e8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d040      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4a2e      	ldr	r2, [pc, #184]	@ (800f5ec <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d03b      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f540:	d036      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f54a:	d031      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a29      	ldr	r2, [pc, #164]	@ (800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d02c      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a28      	ldr	r2, [pc, #160]	@ (800f5fc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d027      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4a26      	ldr	r2, [pc, #152]	@ (800f600 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d022      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4a25      	ldr	r2, [pc, #148]	@ (800f604 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d01d      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a23      	ldr	r2, [pc, #140]	@ (800f608 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d018      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4a22      	ldr	r2, [pc, #136]	@ (800f60c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d013      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a18      	ldr	r2, [pc, #96]	@ (800f5f0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d00e      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a17      	ldr	r2, [pc, #92]	@ (800f5f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d009      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800f610 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d004      	beq.n	800f5b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a1a      	ldr	r2, [pc, #104]	@ (800f614 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d10c      	bne.n	800f5ca <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	68ba      	ldr	r2, [r7, #8]
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr
 800f5e8:	40012c00 	.word	0x40012c00
 800f5ec:	50012c00 	.word	0x50012c00
 800f5f0:	40013400 	.word	0x40013400
 800f5f4:	50013400 	.word	0x50013400
 800f5f8:	40000400 	.word	0x40000400
 800f5fc:	50000400 	.word	0x50000400
 800f600:	40000800 	.word	0x40000800
 800f604:	50000800 	.word	0x50000800
 800f608:	40000c00 	.word	0x40000c00
 800f60c:	50000c00 	.word	0x50000c00
 800f610:	40014000 	.word	0x40014000
 800f614:	50014000 	.word	0x50014000

0800f618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d101      	bne.n	800f62a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f626:	2301      	movs	r3, #1
 800f628:	e042      	b.n	800f6b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f630:	2b00      	cmp	r3, #0
 800f632:	d106      	bne.n	800f642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7f2 fd27 	bl	8002090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2224      	movs	r2, #36	@ 0x24
 800f646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f022 0201 	bic.w	r2, r2, #1
 800f658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d002      	beq.n	800f668 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 fd02 	bl	801006c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fb51 	bl	800fd10 <UART_SetConfig>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b01      	cmp	r3, #1
 800f672:	d101      	bne.n	800f678 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f674:	2301      	movs	r3, #1
 800f676:	e01b      	b.n	800f6b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	685a      	ldr	r2, [r3, #4]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	689a      	ldr	r2, [r3, #8]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f042 0201 	orr.w	r2, r2, #1
 800f6a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fd81 	bl	80101b0 <UART_CheckIdleState>
 800f6ae:	4603      	mov	r3, r0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b0ba      	sub	sp, #232	@ 0xe8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	69db      	ldr	r3, [r3, #28]
 800f6c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f6de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f6e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f6e6:	4013      	ands	r3, r2
 800f6e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f6ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d11b      	bne.n	800f72c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6f8:	f003 0320 	and.w	r3, r3, #32
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d015      	beq.n	800f72c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f704:	f003 0320 	and.w	r3, r3, #32
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d105      	bne.n	800f718 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f70c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f714:	2b00      	cmp	r3, #0
 800f716:	d009      	beq.n	800f72c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 82cb 	beq.w	800fcb8 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	4798      	blx	r3
      }
      return;
 800f72a:	e2c5      	b.n	800fcb8 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f72c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 8123 	beq.w	800f97c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f736:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f73a:	4b8d      	ldr	r3, [pc, #564]	@ (800f970 <HAL_UART_IRQHandler+0x2b8>)
 800f73c:	4013      	ands	r3, r2
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d106      	bne.n	800f750 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f746:	4b8b      	ldr	r3, [pc, #556]	@ (800f974 <HAL_UART_IRQHandler+0x2bc>)
 800f748:	4013      	ands	r3, r2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	f000 8116 	beq.w	800f97c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f754:	f003 0301 	and.w	r3, r3, #1
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d011      	beq.n	800f780 <HAL_UART_IRQHandler+0xc8>
 800f75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00b      	beq.n	800f780 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2201      	movs	r2, #1
 800f76e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f776:	f043 0201 	orr.w	r2, r3, #1
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f784:	f003 0302 	and.w	r3, r3, #2
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d011      	beq.n	800f7b0 <HAL_UART_IRQHandler+0xf8>
 800f78c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f790:	f003 0301 	and.w	r3, r3, #1
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00b      	beq.n	800f7b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2202      	movs	r2, #2
 800f79e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7a6:	f043 0204 	orr.w	r2, r3, #4
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7b4:	f003 0304 	and.w	r3, r3, #4
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d011      	beq.n	800f7e0 <HAL_UART_IRQHandler+0x128>
 800f7bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7c0:	f003 0301 	and.w	r3, r3, #1
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00b      	beq.n	800f7e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2204      	movs	r2, #4
 800f7ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7d6:	f043 0202 	orr.w	r2, r3, #2
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7e4:	f003 0308 	and.w	r3, r3, #8
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d017      	beq.n	800f81c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7f0:	f003 0320 	and.w	r3, r3, #32
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d105      	bne.n	800f804 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f7f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f7fc:	4b5c      	ldr	r3, [pc, #368]	@ (800f970 <HAL_UART_IRQHandler+0x2b8>)
 800f7fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2208      	movs	r2, #8
 800f80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f812:	f043 0208 	orr.w	r2, r3, #8
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f824:	2b00      	cmp	r3, #0
 800f826:	d012      	beq.n	800f84e <HAL_UART_IRQHandler+0x196>
 800f828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f82c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00c      	beq.n	800f84e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f83c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f844:	f043 0220 	orr.w	r2, r3, #32
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 8231 	beq.w	800fcbc <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f85e:	f003 0320 	and.w	r3, r3, #32
 800f862:	2b00      	cmp	r3, #0
 800f864:	d013      	beq.n	800f88e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f86a:	f003 0320 	and.w	r3, r3, #32
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d105      	bne.n	800f87e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d007      	beq.n	800f88e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8a2:	2b40      	cmp	r3, #64	@ 0x40
 800f8a4:	d005      	beq.n	800f8b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f8a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f8aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d054      	beq.n	800f95c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fd93 	bl	80103de <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8c2:	2b40      	cmp	r3, #64	@ 0x40
 800f8c4:	d146      	bne.n	800f954 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3308      	adds	r3, #8
 800f8cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f8d4:	e853 3f00 	ldrex	r3, [r3]
 800f8d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f8dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	3308      	adds	r3, #8
 800f8ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f8f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f8f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f8fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f902:	e841 2300 	strex	r3, r2, [r1]
 800f906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1d9      	bne.n	800f8c6 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d017      	beq.n	800f94c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f922:	4a15      	ldr	r2, [pc, #84]	@ (800f978 <HAL_UART_IRQHandler+0x2c0>)
 800f924:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7f5 fdd9 	bl	80054e4 <HAL_DMA_Abort_IT>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d019      	beq.n	800f96c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f946:	4610      	mov	r0, r2
 800f948:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f94a:	e00f      	b.n	800f96c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f9c9 	bl	800fce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f952:	e00b      	b.n	800f96c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f9c5 	bl	800fce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f95a:	e007      	b.n	800f96c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 f9c1 	bl	800fce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2200      	movs	r2, #0
 800f966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f96a:	e1a7      	b.n	800fcbc <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f96c:	bf00      	nop
    return;
 800f96e:	e1a5      	b.n	800fcbc <HAL_UART_IRQHandler+0x604>
 800f970:	10000001 	.word	0x10000001
 800f974:	04000120 	.word	0x04000120
 800f978:	080104ab 	.word	0x080104ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f980:	2b01      	cmp	r3, #1
 800f982:	f040 8150 	bne.w	800fc26 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f98a:	f003 0310 	and.w	r3, r3, #16
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 8149 	beq.w	800fc26 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f998:	f003 0310 	and.w	r3, r3, #16
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 8142 	beq.w	800fc26 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2210      	movs	r2, #16
 800f9a8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9b4:	2b40      	cmp	r3, #64	@ 0x40
 800f9b6:	f040 80b8 	bne.w	800fb2a <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f9c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f9c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 8177 	beq.w	800fcc0 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f9d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	f080 816f 	bcs.w	800fcc0 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f9e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9f4:	2b81      	cmp	r3, #129	@ 0x81
 800f9f6:	f000 8087 	beq.w	800fb08 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa06:	e853 3f00 	ldrex	r3, [r3]
 800fa0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fa0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fa24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fa28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fa30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fa34:	e841 2300 	strex	r3, r2, [r1]
 800fa38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fa3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d1da      	bne.n	800f9fa <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	3308      	adds	r3, #8
 800fa4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa4e:	e853 3f00 	ldrex	r3, [r3]
 800fa52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fa54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa56:	f023 0301 	bic.w	r3, r3, #1
 800fa5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3308      	adds	r3, #8
 800fa64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fa68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fa6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fa70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fa74:	e841 2300 	strex	r3, r2, [r1]
 800fa78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fa7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d1e1      	bne.n	800fa44 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	3308      	adds	r3, #8
 800fa86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa8a:	e853 3f00 	ldrex	r3, [r3]
 800fa8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fa90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	3308      	adds	r3, #8
 800faa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800faa4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800faa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800faaa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800faac:	e841 2300 	strex	r3, r2, [r1]
 800fab0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d1e3      	bne.n	800fa80 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2220      	movs	r2, #32
 800fabc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800facc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800face:	e853 3f00 	ldrex	r3, [r3]
 800fad2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fad6:	f023 0310 	bic.w	r3, r3, #16
 800fada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800faea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800faee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800faf0:	e841 2300 	strex	r3, r2, [r1]
 800faf4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800faf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1e4      	bne.n	800fac6 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f5 fc72 	bl	80053ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2202      	movs	r2, #2
 800fb0c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	1ad3      	subs	r3, r2, r3
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 f8e8 	bl	800fcf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fb28:	e0ca      	b.n	800fcc0 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f000 80bc 	beq.w	800fcc4 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 800fb4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f000 80b7 	beq.w	800fcc4 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb5e:	e853 3f00 	ldrex	r3, [r3]
 800fb62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fb78:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb80:	e841 2300 	strex	r3, r2, [r1]
 800fb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1e4      	bne.n	800fb56 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	3308      	adds	r3, #8
 800fb92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb96:	e853 3f00 	ldrex	r3, [r3]
 800fb9a:	623b      	str	r3, [r7, #32]
   return(result);
 800fb9c:	6a3b      	ldr	r3, [r7, #32]
 800fb9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fba2:	f023 0301 	bic.w	r3, r3, #1
 800fba6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3308      	adds	r3, #8
 800fbb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fbb4:	633a      	str	r2, [r7, #48]	@ 0x30
 800fbb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbbc:	e841 2300 	strex	r3, r2, [r1]
 800fbc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1e1      	bne.n	800fb8c <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2220      	movs	r2, #32
 800fbcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	e853 3f00 	ldrex	r3, [r3]
 800fbe8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f023 0310 	bic.w	r3, r3, #16
 800fbf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fbfe:	61fb      	str	r3, [r7, #28]
 800fc00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc02:	69b9      	ldr	r1, [r7, #24]
 800fc04:	69fa      	ldr	r2, [r7, #28]
 800fc06:	e841 2300 	strex	r3, r2, [r1]
 800fc0a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1e4      	bne.n	800fbdc <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2202      	movs	r2, #2
 800fc16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fc18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 f86a 	bl	800fcf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fc24:	e04e      	b.n	800fcc4 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d014      	beq.n	800fc5c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fc32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d105      	bne.n	800fc4a <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fc3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d008      	beq.n	800fc5c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d03a      	beq.n	800fcc8 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	4798      	blx	r3
    }
    return;
 800fc5a:	e035      	b.n	800fcc8 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fc5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d009      	beq.n	800fc7c <HAL_UART_IRQHandler+0x5c4>
 800fc68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d003      	beq.n	800fc7c <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 fc2e 	bl	80104d6 <UART_EndTransmit_IT>
    return;
 800fc7a:	e026      	b.n	800fcca <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d009      	beq.n	800fc9c <HAL_UART_IRQHandler+0x5e4>
 800fc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d003      	beq.n	800fc9c <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fc53 	bl	8010540 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc9a:	e016      	b.n	800fcca <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d010      	beq.n	800fcca <HAL_UART_IRQHandler+0x612>
 800fca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	da0c      	bge.n	800fcca <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 fc3b 	bl	801052c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fcb6:	e008      	b.n	800fcca <HAL_UART_IRQHandler+0x612>
      return;
 800fcb8:	bf00      	nop
 800fcba:	e006      	b.n	800fcca <HAL_UART_IRQHandler+0x612>
    return;
 800fcbc:	bf00      	nop
 800fcbe:	e004      	b.n	800fcca <HAL_UART_IRQHandler+0x612>
      return;
 800fcc0:	bf00      	nop
 800fcc2:	e002      	b.n	800fcca <HAL_UART_IRQHandler+0x612>
      return;
 800fcc4:	bf00      	nop
 800fcc6:	e000      	b.n	800fcca <HAL_UART_IRQHandler+0x612>
    return;
 800fcc8:	bf00      	nop
  }
}
 800fcca:	37e8      	adds	r7, #232	@ 0xe8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fcd8:	bf00      	nop
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fcec:	bf00      	nop
 800fcee:	370c      	adds	r7, #12
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	460b      	mov	r3, r1
 800fd02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fd04:	bf00      	nop
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr

0800fd10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd14:	b094      	sub	sp, #80	@ 0x50
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800fd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	4b83      	ldr	r3, [pc, #524]	@ (800ff34 <UART_SetConfig+0x224>)
 800fd26:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2a:	689a      	ldr	r2, [r3, #8]
 800fd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	431a      	orrs	r2, r3
 800fd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd34:	695b      	ldr	r3, [r3, #20]
 800fd36:	431a      	orrs	r2, r3
 800fd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd3a:	69db      	ldr	r3, [r3, #28]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	497c      	ldr	r1, [pc, #496]	@ (800ff38 <UART_SetConfig+0x228>)
 800fd48:	4019      	ands	r1, r3
 800fd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd50:	430b      	orrs	r3, r1
 800fd52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800fd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd60:	68d9      	ldr	r1, [r3, #12]
 800fd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	ea40 0301 	orr.w	r3, r0, r1
 800fd6a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6e:	699b      	ldr	r3, [r3, #24]
 800fd70:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	4b6f      	ldr	r3, [pc, #444]	@ (800ff34 <UART_SetConfig+0x224>)
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d009      	beq.n	800fd90 <UART_SetConfig+0x80>
 800fd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	4b6e      	ldr	r3, [pc, #440]	@ (800ff3c <UART_SetConfig+0x22c>)
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d004      	beq.n	800fd90 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd88:	6a1a      	ldr	r2, [r3, #32]
 800fd8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800fd9a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800fd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fda4:	430b      	orrs	r3, r1
 800fda6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdae:	f023 000f 	bic.w	r0, r3, #15
 800fdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	ea40 0301 	orr.w	r3, r0, r1
 800fdbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	4b5e      	ldr	r3, [pc, #376]	@ (800ff40 <UART_SetConfig+0x230>)
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d102      	bne.n	800fdd0 <UART_SetConfig+0xc0>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdce:	e032      	b.n	800fe36 <UART_SetConfig+0x126>
 800fdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	4b5b      	ldr	r3, [pc, #364]	@ (800ff44 <UART_SetConfig+0x234>)
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d102      	bne.n	800fde0 <UART_SetConfig+0xd0>
 800fdda:	2302      	movs	r3, #2
 800fddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdde:	e02a      	b.n	800fe36 <UART_SetConfig+0x126>
 800fde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	4b58      	ldr	r3, [pc, #352]	@ (800ff48 <UART_SetConfig+0x238>)
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d102      	bne.n	800fdf0 <UART_SetConfig+0xe0>
 800fdea:	2304      	movs	r3, #4
 800fdec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdee:	e022      	b.n	800fe36 <UART_SetConfig+0x126>
 800fdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	4b55      	ldr	r3, [pc, #340]	@ (800ff4c <UART_SetConfig+0x23c>)
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d102      	bne.n	800fe00 <UART_SetConfig+0xf0>
 800fdfa:	2308      	movs	r3, #8
 800fdfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdfe:	e01a      	b.n	800fe36 <UART_SetConfig+0x126>
 800fe00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	4b52      	ldr	r3, [pc, #328]	@ (800ff50 <UART_SetConfig+0x240>)
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d102      	bne.n	800fe10 <UART_SetConfig+0x100>
 800fe0a:	2310      	movs	r3, #16
 800fe0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe0e:	e012      	b.n	800fe36 <UART_SetConfig+0x126>
 800fe10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	4b4f      	ldr	r3, [pc, #316]	@ (800ff54 <UART_SetConfig+0x244>)
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d103      	bne.n	800fe22 <UART_SetConfig+0x112>
 800fe1a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800fe1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe20:	e009      	b.n	800fe36 <UART_SetConfig+0x126>
 800fe22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	4b43      	ldr	r3, [pc, #268]	@ (800ff34 <UART_SetConfig+0x224>)
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d102      	bne.n	800fe32 <UART_SetConfig+0x122>
 800fe2c:	2320      	movs	r3, #32
 800fe2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe30:	e001      	b.n	800fe36 <UART_SetConfig+0x126>
 800fe32:	2300      	movs	r3, #0
 800fe34:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	4b3e      	ldr	r3, [pc, #248]	@ (800ff34 <UART_SetConfig+0x224>)
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d005      	beq.n	800fe4c <UART_SetConfig+0x13c>
 800fe40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	4b3d      	ldr	r3, [pc, #244]	@ (800ff3c <UART_SetConfig+0x22c>)
 800fe46:	429a      	cmp	r2, r3
 800fe48:	f040 8088 	bne.w	800ff5c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fe4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe4e:	2200      	movs	r2, #0
 800fe50:	623b      	str	r3, [r7, #32]
 800fe52:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fe58:	f7fc f9a2 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800fe5c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f000 80eb 	beq.w	801003c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fe66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe6a:	4a3b      	ldr	r2, [pc, #236]	@ (800ff58 <UART_SetConfig+0x248>)
 800fe6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe70:	461a      	mov	r2, r3
 800fe72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe74:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe78:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7c:	685a      	ldr	r2, [r3, #4]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	4413      	add	r3, r2
 800fe84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d305      	bcc.n	800fe96 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fe8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d903      	bls.n	800fe9e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800fe96:	2301      	movs	r3, #1
 800fe98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fe9c:	e048      	b.n	800ff30 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fea0:	2200      	movs	r2, #0
 800fea2:	61bb      	str	r3, [r7, #24]
 800fea4:	61fa      	str	r2, [r7, #28]
 800fea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feaa:	4a2b      	ldr	r2, [pc, #172]	@ (800ff58 <UART_SetConfig+0x248>)
 800feac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	2200      	movs	r2, #0
 800feb4:	613b      	str	r3, [r7, #16]
 800feb6:	617a      	str	r2, [r7, #20]
 800feb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800febc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fec0:	f7f0 f9f8 	bl	80002b4 <__aeabi_uldivmod>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4610      	mov	r0, r2
 800feca:	4619      	mov	r1, r3
 800fecc:	f04f 0200 	mov.w	r2, #0
 800fed0:	f04f 0300 	mov.w	r3, #0
 800fed4:	020b      	lsls	r3, r1, #8
 800fed6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800feda:	0202      	lsls	r2, r0, #8
 800fedc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fede:	6849      	ldr	r1, [r1, #4]
 800fee0:	0849      	lsrs	r1, r1, #1
 800fee2:	2000      	movs	r0, #0
 800fee4:	460c      	mov	r4, r1
 800fee6:	4605      	mov	r5, r0
 800fee8:	eb12 0804 	adds.w	r8, r2, r4
 800feec:	eb43 0905 	adc.w	r9, r3, r5
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	60bb      	str	r3, [r7, #8]
 800fef8:	60fa      	str	r2, [r7, #12]
 800fefa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fefe:	4640      	mov	r0, r8
 800ff00:	4649      	mov	r1, r9
 800ff02:	f7f0 f9d7 	bl	80002b4 <__aeabi_uldivmod>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff14:	d308      	bcc.n	800ff28 <UART_SetConfig+0x218>
 800ff16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff1c:	d204      	bcs.n	800ff28 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800ff1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ff24:	60da      	str	r2, [r3, #12]
 800ff26:	e003      	b.n	800ff30 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800ff2e:	e085      	b.n	801003c <UART_SetConfig+0x32c>
 800ff30:	e084      	b.n	801003c <UART_SetConfig+0x32c>
 800ff32:	bf00      	nop
 800ff34:	46002400 	.word	0x46002400
 800ff38:	cfff69f3 	.word	0xcfff69f3
 800ff3c:	56002400 	.word	0x56002400
 800ff40:	40013800 	.word	0x40013800
 800ff44:	40004400 	.word	0x40004400
 800ff48:	40004800 	.word	0x40004800
 800ff4c:	40004c00 	.word	0x40004c00
 800ff50:	40005000 	.word	0x40005000
 800ff54:	40006400 	.word	0x40006400
 800ff58:	08011174 	.word	0x08011174
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff5e:	69db      	ldr	r3, [r3, #28]
 800ff60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff64:	d13c      	bne.n	800ffe0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ff66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff68:	2200      	movs	r2, #0
 800ff6a:	603b      	str	r3, [r7, #0]
 800ff6c:	607a      	str	r2, [r7, #4]
 800ff6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff72:	f7fc f915 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ff76:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d05e      	beq.n	801003c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff82:	4a39      	ldr	r2, [pc, #228]	@ (8010068 <UART_SetConfig+0x358>)
 800ff84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff88:	461a      	mov	r2, r3
 800ff8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff90:	005a      	lsls	r2, r3, #1
 800ff92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	085b      	lsrs	r3, r3, #1
 800ff98:	441a      	add	r2, r3
 800ff9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffa6:	2b0f      	cmp	r3, #15
 800ffa8:	d916      	bls.n	800ffd8 <UART_SetConfig+0x2c8>
 800ffaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ffb0:	d212      	bcs.n	800ffd8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	f023 030f 	bic.w	r3, r3, #15
 800ffba:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffbe:	085b      	lsrs	r3, r3, #1
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	f003 0307 	and.w	r3, r3, #7
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ffca:	4313      	orrs	r3, r2
 800ffcc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ffce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ffd4:	60da      	str	r2, [r3, #12]
 800ffd6:	e031      	b.n	801003c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ffde:	e02d      	b.n	801003c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ffe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	469a      	mov	sl, r3
 800ffe6:	4693      	mov	fp, r2
 800ffe8:	4650      	mov	r0, sl
 800ffea:	4659      	mov	r1, fp
 800ffec:	f7fc f8d8 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800fff0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800fff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d021      	beq.n	801003c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fffc:	4a1a      	ldr	r2, [pc, #104]	@ (8010068 <UART_SetConfig+0x358>)
 800fffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010002:	461a      	mov	r2, r3
 8010004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010006:	fbb3 f2f2 	udiv	r2, r3, r2
 801000a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	085b      	lsrs	r3, r3, #1
 8010010:	441a      	add	r2, r3
 8010012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	fbb2 f3f3 	udiv	r3, r2, r3
 801001a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801001c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801001e:	2b0f      	cmp	r3, #15
 8010020:	d909      	bls.n	8010036 <UART_SetConfig+0x326>
 8010022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010028:	d205      	bcs.n	8010036 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801002a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801002c:	b29a      	uxth	r2, r3
 801002e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	60da      	str	r2, [r3, #12]
 8010034:	e002      	b.n	801003c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010036:	2301      	movs	r3, #1
 8010038:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801003c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801003e:	2201      	movs	r2, #1
 8010040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010046:	2201      	movs	r2, #1
 8010048:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801004c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801004e:	2200      	movs	r2, #0
 8010050:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010054:	2200      	movs	r2, #0
 8010056:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010058:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801005c:	4618      	mov	r0, r3
 801005e:	3750      	adds	r7, #80	@ 0x50
 8010060:	46bd      	mov	sp, r7
 8010062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010066:	bf00      	nop
 8010068:	08011174 	.word	0x08011174

0801006c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010078:	f003 0308 	and.w	r3, r3, #8
 801007c:	2b00      	cmp	r3, #0
 801007e:	d00a      	beq.n	8010096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	430a      	orrs	r2, r1
 8010094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801009a:	f003 0301 	and.w	r3, r3, #1
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d00a      	beq.n	80100b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	430a      	orrs	r2, r1
 80100b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100bc:	f003 0302 	and.w	r3, r3, #2
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00a      	beq.n	80100da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	430a      	orrs	r2, r1
 80100d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100de:	f003 0304 	and.w	r3, r3, #4
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00a      	beq.n	80100fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	430a      	orrs	r2, r1
 80100fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010100:	f003 0310 	and.w	r3, r3, #16
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00a      	beq.n	801011e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	430a      	orrs	r2, r1
 801011c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010122:	f003 0320 	and.w	r3, r3, #32
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00a      	beq.n	8010140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	430a      	orrs	r2, r1
 801013e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010148:	2b00      	cmp	r3, #0
 801014a:	d01a      	beq.n	8010182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	430a      	orrs	r2, r1
 8010160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801016a:	d10a      	bne.n	8010182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	430a      	orrs	r2, r1
 8010180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	430a      	orrs	r2, r1
 80101a2:	605a      	str	r2, [r3, #4]
  }
}
 80101a4:	bf00      	nop
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b098      	sub	sp, #96	@ 0x60
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80101c0:	f7f2 fba8 	bl	8002914 <HAL_GetTick>
 80101c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f003 0308 	and.w	r3, r3, #8
 80101d0:	2b08      	cmp	r3, #8
 80101d2:	d12f      	bne.n	8010234 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101dc:	2200      	movs	r2, #0
 80101de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f88e 	bl	8010304 <UART_WaitOnFlagUntilTimeout>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d022      	beq.n	8010234 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f6:	e853 3f00 	ldrex	r3, [r3]
 80101fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80101fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010202:	653b      	str	r3, [r7, #80]	@ 0x50
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	461a      	mov	r2, r3
 801020a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801020c:	647b      	str	r3, [r7, #68]	@ 0x44
 801020e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010210:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010214:	e841 2300 	strex	r3, r2, [r1]
 8010218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801021a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801021c:	2b00      	cmp	r3, #0
 801021e:	d1e6      	bne.n	80101ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2220      	movs	r2, #32
 8010224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010230:	2303      	movs	r3, #3
 8010232:	e063      	b.n	80102fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f003 0304 	and.w	r3, r3, #4
 801023e:	2b04      	cmp	r3, #4
 8010240:	d149      	bne.n	80102d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010242:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801024a:	2200      	movs	r2, #0
 801024c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 f857 	bl	8010304 <UART_WaitOnFlagUntilTimeout>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d03c      	beq.n	80102d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010264:	e853 3f00 	ldrex	r3, [r3]
 8010268:	623b      	str	r3, [r7, #32]
   return(result);
 801026a:	6a3b      	ldr	r3, [r7, #32]
 801026c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	461a      	mov	r2, r3
 8010278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801027a:	633b      	str	r3, [r7, #48]	@ 0x30
 801027c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801027e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010282:	e841 2300 	strex	r3, r2, [r1]
 8010286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1e6      	bne.n	801025c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3308      	adds	r3, #8
 8010294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	e853 3f00 	ldrex	r3, [r3]
 801029c:	60fb      	str	r3, [r7, #12]
   return(result);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	f023 0301 	bic.w	r3, r3, #1
 80102a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	3308      	adds	r3, #8
 80102ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80102ae:	61fa      	str	r2, [r7, #28]
 80102b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b2:	69b9      	ldr	r1, [r7, #24]
 80102b4:	69fa      	ldr	r2, [r7, #28]
 80102b6:	e841 2300 	strex	r3, r2, [r1]
 80102ba:	617b      	str	r3, [r7, #20]
   return(result);
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1e5      	bne.n	801028e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2220      	movs	r2, #32
 80102c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e012      	b.n	80102fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2220      	movs	r2, #32
 80102da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2220      	movs	r2, #32
 80102e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3758      	adds	r7, #88	@ 0x58
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	603b      	str	r3, [r7, #0]
 8010310:	4613      	mov	r3, r2
 8010312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010314:	e04f      	b.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801031c:	d04b      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801031e:	f7f2 faf9 	bl	8002914 <HAL_GetTick>
 8010322:	4602      	mov	r2, r0
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	69ba      	ldr	r2, [r7, #24]
 801032a:	429a      	cmp	r2, r3
 801032c:	d302      	bcc.n	8010334 <UART_WaitOnFlagUntilTimeout+0x30>
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010334:	2303      	movs	r3, #3
 8010336:	e04e      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f003 0304 	and.w	r3, r3, #4
 8010342:	2b00      	cmp	r3, #0
 8010344:	d037      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	2b80      	cmp	r3, #128	@ 0x80
 801034a:	d034      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2b40      	cmp	r3, #64	@ 0x40
 8010350:	d031      	beq.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	f003 0308 	and.w	r3, r3, #8
 801035c:	2b08      	cmp	r3, #8
 801035e:	d110      	bne.n	8010382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2208      	movs	r2, #8
 8010366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	f000 f838 	bl	80103de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2208      	movs	r2, #8
 8010372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2200      	movs	r2, #0
 801037a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801037e:	2301      	movs	r3, #1
 8010380:	e029      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	69db      	ldr	r3, [r3, #28]
 8010388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801038c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010390:	d111      	bne.n	80103b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801039a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f000 f81e 	bl	80103de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2220      	movs	r2, #32
 80103a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2200      	movs	r2, #0
 80103ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80103b2:	2303      	movs	r3, #3
 80103b4:	e00f      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	69da      	ldr	r2, [r3, #28]
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	4013      	ands	r3, r2
 80103c0:	68ba      	ldr	r2, [r7, #8]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	bf0c      	ite	eq
 80103c6:	2301      	moveq	r3, #1
 80103c8:	2300      	movne	r3, #0
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	461a      	mov	r2, r3
 80103ce:	79fb      	ldrb	r3, [r7, #7]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d0a0      	beq.n	8010316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103de:	b480      	push	{r7}
 80103e0:	b095      	sub	sp, #84	@ 0x54
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ee:	e853 3f00 	ldrex	r3, [r3]
 80103f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80103f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	461a      	mov	r2, r3
 8010402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010404:	643b      	str	r3, [r7, #64]	@ 0x40
 8010406:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801040a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801040c:	e841 2300 	strex	r3, r2, [r1]
 8010410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1e6      	bne.n	80103e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	3308      	adds	r3, #8
 801041e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010420:	6a3b      	ldr	r3, [r7, #32]
 8010422:	e853 3f00 	ldrex	r3, [r3]
 8010426:	61fb      	str	r3, [r7, #28]
   return(result);
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801042e:	f023 0301 	bic.w	r3, r3, #1
 8010432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	3308      	adds	r3, #8
 801043a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801043c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801043e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010444:	e841 2300 	strex	r3, r2, [r1]
 8010448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801044a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1e3      	bne.n	8010418 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010454:	2b01      	cmp	r3, #1
 8010456:	d118      	bne.n	801048a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	e853 3f00 	ldrex	r3, [r3]
 8010464:	60bb      	str	r3, [r7, #8]
   return(result);
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	f023 0310 	bic.w	r3, r3, #16
 801046c:	647b      	str	r3, [r7, #68]	@ 0x44
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	461a      	mov	r2, r3
 8010474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010476:	61bb      	str	r3, [r7, #24]
 8010478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047a:	6979      	ldr	r1, [r7, #20]
 801047c:	69ba      	ldr	r2, [r7, #24]
 801047e:	e841 2300 	strex	r3, r2, [r1]
 8010482:	613b      	str	r3, [r7, #16]
   return(result);
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1e6      	bne.n	8010458 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2220      	movs	r2, #32
 801048e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801049e:	bf00      	nop
 80104a0:	3754      	adds	r7, #84	@ 0x54
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr

080104aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80104aa:	b580      	push	{r7, lr}
 80104ac:	b084      	sub	sp, #16
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2200      	movs	r2, #0
 80104bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f7ff fc0b 	bl	800fce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80104ce:	bf00      	nop
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b088      	sub	sp, #32
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	e853 3f00 	ldrex	r3, [r3]
 80104ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104f2:	61fb      	str	r3, [r7, #28]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	461a      	mov	r2, r3
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	61bb      	str	r3, [r7, #24]
 80104fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010500:	6979      	ldr	r1, [r7, #20]
 8010502:	69ba      	ldr	r2, [r7, #24]
 8010504:	e841 2300 	strex	r3, r2, [r1]
 8010508:	613b      	str	r3, [r7, #16]
   return(result);
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1e6      	bne.n	80104de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2220      	movs	r2, #32
 8010514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f7ff fbd6 	bl	800fcd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010524:	bf00      	nop
 8010526:	3720      	adds	r7, #32
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801052c:	b480      	push	{r7}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010534:	bf00      	nop
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010554:	b480      	push	{r7}
 8010556:	b085      	sub	sp, #20
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010562:	2b01      	cmp	r3, #1
 8010564:	d101      	bne.n	801056a <HAL_UARTEx_DisableFifoMode+0x16>
 8010566:	2302      	movs	r3, #2
 8010568:	e027      	b.n	80105ba <HAL_UARTEx_DisableFifoMode+0x66>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2201      	movs	r2, #1
 801056e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2224      	movs	r2, #36	@ 0x24
 8010576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f022 0201 	bic.w	r2, r2, #1
 8010590:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010598:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	68fa      	ldr	r2, [r7, #12]
 80105a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2220      	movs	r2, #32
 80105ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105b8:	2300      	movs	r3, #0
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b084      	sub	sp, #16
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
 80105ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d101      	bne.n	80105de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80105da:	2302      	movs	r3, #2
 80105dc:	e02d      	b.n	801063a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2201      	movs	r2, #1
 80105e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2224      	movs	r2, #36	@ 0x24
 80105ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	681a      	ldr	r2, [r3, #0]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f022 0201 	bic.w	r2, r2, #1
 8010604:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	689b      	ldr	r3, [r3, #8]
 801060c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	683a      	ldr	r2, [r7, #0]
 8010616:	430a      	orrs	r2, r1
 8010618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 f850 	bl	80106c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2220      	movs	r2, #32
 801062c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b084      	sub	sp, #16
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010652:	2b01      	cmp	r3, #1
 8010654:	d101      	bne.n	801065a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010656:	2302      	movs	r3, #2
 8010658:	e02d      	b.n	80106b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2224      	movs	r2, #36	@ 0x24
 8010666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f022 0201 	bic.w	r2, r2, #1
 8010680:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	430a      	orrs	r2, r1
 8010694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 f812 	bl	80106c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2220      	movs	r2, #32
 80106a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106b4:	2300      	movs	r3, #0
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
	...

080106c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b085      	sub	sp, #20
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d108      	bne.n	80106e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2201      	movs	r2, #1
 80106dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80106e0:	e031      	b.n	8010746 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80106e2:	2308      	movs	r3, #8
 80106e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80106e6:	2308      	movs	r3, #8
 80106e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	689b      	ldr	r3, [r3, #8]
 80106f0:	0e5b      	lsrs	r3, r3, #25
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	f003 0307 	and.w	r3, r3, #7
 80106f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	0f5b      	lsrs	r3, r3, #29
 8010702:	b2db      	uxtb	r3, r3
 8010704:	f003 0307 	and.w	r3, r3, #7
 8010708:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801070a:	7bbb      	ldrb	r3, [r7, #14]
 801070c:	7b3a      	ldrb	r2, [r7, #12]
 801070e:	4911      	ldr	r1, [pc, #68]	@ (8010754 <UARTEx_SetNbDataToProcess+0x94>)
 8010710:	5c8a      	ldrb	r2, [r1, r2]
 8010712:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010716:	7b3a      	ldrb	r2, [r7, #12]
 8010718:	490f      	ldr	r1, [pc, #60]	@ (8010758 <UARTEx_SetNbDataToProcess+0x98>)
 801071a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801071c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010720:	b29a      	uxth	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	7b7a      	ldrb	r2, [r7, #13]
 801072c:	4909      	ldr	r1, [pc, #36]	@ (8010754 <UARTEx_SetNbDataToProcess+0x94>)
 801072e:	5c8a      	ldrb	r2, [r1, r2]
 8010730:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010734:	7b7a      	ldrb	r2, [r7, #13]
 8010736:	4908      	ldr	r1, [pc, #32]	@ (8010758 <UARTEx_SetNbDataToProcess+0x98>)
 8010738:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801073a:	fb93 f3f2 	sdiv	r3, r3, r2
 801073e:	b29a      	uxth	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010746:	bf00      	nop
 8010748:	3714      	adds	r7, #20
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	0801118c 	.word	0x0801118c
 8010758:	08011194 	.word	0x08011194

0801075c <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af02      	add	r7, sp, #8
 8010762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010764:	2300      	movs	r3, #0
 8010766:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010768:	f7f2 f8d4 	bl	8002914 <HAL_GetTick>
 801076c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d102      	bne.n	801077a <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010774:	2301      	movs	r3, #1
 8010776:	73fb      	strb	r3, [r7, #15]
 8010778:	e137      	b.n	80109ea <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4a76      	ldr	r2, [pc, #472]	@ (8010958 <HAL_XSPI_Init+0x1fc>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d008      	beq.n	8010796 <HAL_XSPI_Init+0x3a>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4a74      	ldr	r2, [pc, #464]	@ (801095c <HAL_XSPI_Init+0x200>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d003      	beq.n	8010796 <HAL_XSPI_Init+0x3a>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	4a73      	ldr	r2, [pc, #460]	@ (8010960 <HAL_XSPI_Init+0x204>)
 8010794:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4a72      	ldr	r2, [pc, #456]	@ (8010964 <HAL_XSPI_Init+0x208>)
 801079c:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4a6d      	ldr	r2, [pc, #436]	@ (8010958 <HAL_XSPI_Init+0x1fc>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d008      	beq.n	80107ba <HAL_XSPI_Init+0x5e>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a6b      	ldr	r2, [pc, #428]	@ (801095c <HAL_XSPI_Init+0x200>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d003      	beq.n	80107ba <HAL_XSPI_Init+0x5e>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4a6a      	ldr	r2, [pc, #424]	@ (8010960 <HAL_XSPI_Init+0x204>)
 80107b8:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4a66      	ldr	r2, [pc, #408]	@ (8010958 <HAL_XSPI_Init+0x1fc>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d008      	beq.n	80107d6 <HAL_XSPI_Init+0x7a>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a64      	ldr	r2, [pc, #400]	@ (801095c <HAL_XSPI_Init+0x200>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d003      	beq.n	80107d6 <HAL_XSPI_Init+0x7a>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	4a63      	ldr	r2, [pc, #396]	@ (8010960 <HAL_XSPI_Init+0x204>)
 80107d4:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f040 8102 	bne.w	80109ea <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7f1 f902 	bl	80019f0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80107ec:	f241 3188 	movw	r1, #5000	@ 0x1388
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 f8ff 	bl	80109f4 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	689a      	ldr	r2, [r3, #8]
 80107fc:	4b5a      	ldr	r3, [pc, #360]	@ (8010968 <HAL_XSPI_Init+0x20c>)
 80107fe:	4013      	ands	r3, r2
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	68d1      	ldr	r1, [r2, #12]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	6912      	ldr	r2, [r2, #16]
 8010808:	0412      	lsls	r2, r2, #16
 801080a:	4311      	orrs	r1, r2
 801080c:	687a      	ldr	r2, [r7, #4]
 801080e:	6952      	ldr	r2, [r2, #20]
 8010810:	3a01      	subs	r2, #1
 8010812:	0212      	lsls	r2, r2, #8
 8010814:	4311      	orrs	r1, r2
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	69d2      	ldr	r2, [r2, #28]
 801081a:	4311      	orrs	r1, r2
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	6812      	ldr	r2, [r2, #0]
 8010820:	430b      	orrs	r3, r1
 8010822:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4a4b      	ldr	r2, [pc, #300]	@ (8010958 <HAL_XSPI_Init+0x1fc>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d00e      	beq.n	801084c <HAL_XSPI_Init+0xf0>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4a4a      	ldr	r2, [pc, #296]	@ (801095c <HAL_XSPI_Init+0x200>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d009      	beq.n	801084c <HAL_XSPI_Init+0xf0>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4a48      	ldr	r2, [pc, #288]	@ (8010960 <HAL_XSPI_Init+0x204>)
 801083e:	4293      	cmp	r3, r2
 8010840:	d004      	beq.n	801084c <HAL_XSPI_Init+0xf0>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4a49      	ldr	r2, [pc, #292]	@ (801096c <HAL_XSPI_Init+0x210>)
 8010848:	4293      	cmp	r3, r2
 801084a:	d10a      	bne.n	8010862 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	689b      	ldr	r3, [r3, #8]
 8010852:	f023 0108 	bic.w	r1, r3, #8
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	430a      	orrs	r2, r1
 8010860:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6a1a      	ldr	r2, [r3, #32]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	430a      	orrs	r2, r1
 8010876:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	691b      	ldr	r3, [r3, #16]
 801087e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010886:	041a      	lsls	r2, r3, #16
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	430a      	orrs	r2, r1
 801088e:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a30      	ldr	r2, [pc, #192]	@ (8010958 <HAL_XSPI_Init+0x1fc>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d00e      	beq.n	80108b8 <HAL_XSPI_Init+0x15c>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4a2f      	ldr	r2, [pc, #188]	@ (801095c <HAL_XSPI_Init+0x200>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d009      	beq.n	80108b8 <HAL_XSPI_Init+0x15c>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a2d      	ldr	r2, [pc, #180]	@ (8010960 <HAL_XSPI_Init+0x204>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d004      	beq.n	80108b8 <HAL_XSPI_Init+0x15c>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a2e      	ldr	r2, [pc, #184]	@ (801096c <HAL_XSPI_Init+0x210>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d10a      	bne.n	80108ce <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	691b      	ldr	r3, [r3, #16]
 80108be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	430a      	orrs	r2, r1
 80108cc:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80108d6:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	021a      	lsls	r2, r3, #8
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	430a      	orrs	r2, r1
 80108f0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108f6:	9300      	str	r3, [sp, #0]
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	2200      	movs	r2, #0
 80108fc:	2120      	movs	r1, #32
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 f887 	bl	8010a12 <XSPI_WaitFlagStateUntilTimeout>
 8010904:	4603      	mov	r3, r0
 8010906:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010908:	7bfb      	ldrb	r3, [r7, #15]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d16d      	bne.n	80109ea <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	430a      	orrs	r2, r1
 8010922:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4a0e      	ldr	r2, [pc, #56]	@ (8010964 <HAL_XSPI_Init+0x208>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d004      	beq.n	8010938 <HAL_XSPI_Init+0x1dc>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4a0f      	ldr	r2, [pc, #60]	@ (8010970 <HAL_XSPI_Init+0x214>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d11d      	bne.n	8010974 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801093c:	9300      	str	r3, [sp, #0]
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	2200      	movs	r2, #0
 8010942:	2120      	movs	r1, #32
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 f864 	bl	8010a12 <XSPI_WaitFlagStateUntilTimeout>
 801094a:	4603      	mov	r3, r0
 801094c:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 801094e:	7bfb      	ldrb	r3, [r7, #15]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00f      	beq.n	8010974 <HAL_XSPI_Init+0x218>
          {
            return status;
 8010954:	7bfb      	ldrb	r3, [r7, #15]
 8010956:	e049      	b.n	80109ec <HAL_XSPI_Init+0x290>
 8010958:	420d1400 	.word	0x420d1400
 801095c:	520d1400 	.word	0x520d1400
 8010960:	420d2400 	.word	0x420d2400
 8010964:	420d3400 	.word	0x420d3400
 8010968:	f8e0c0fc 	.word	0xf8e0c0fc
 801096c:	520d2400 	.word	0x520d2400
 8010970:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	689a      	ldr	r2, [r3, #8]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	430a      	orrs	r2, r1
 8010988:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010992:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801099e:	431a      	orrs	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	430a      	orrs	r2, r1
 80109a6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	681a      	ldr	r2, [r3, #0]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f042 0201 	orr.w	r2, r2, #1
 80109b8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	699b      	ldr	r3, [r3, #24]
 80109be:	2b02      	cmp	r3, #2
 80109c0:	d107      	bne.n	80109d2 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	689a      	ldr	r2, [r3, #8]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f042 0202 	orr.w	r2, r2, #2
 80109d0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80109da:	d103      	bne.n	80109e4 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80109e2:	e002      	b.n	80109ea <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2202      	movs	r2, #2
 80109e8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 80109ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3710      	adds	r7, #16
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	683a      	ldr	r2, [r7, #0]
 8010a02:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010a04:	2300      	movs	r3, #0
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	370c      	adds	r7, #12
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	60f8      	str	r0, [r7, #12]
 8010a1a:	60b9      	str	r1, [r7, #8]
 8010a1c:	603b      	str	r3, [r7, #0]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010a22:	e01a      	b.n	8010a5a <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a2a:	d016      	beq.n	8010a5a <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a2c:	f7f1 ff72 	bl	8002914 <HAL_GetTick>
 8010a30:	4602      	mov	r2, r0
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	1ad3      	subs	r3, r2, r3
 8010a36:	69ba      	ldr	r2, [r7, #24]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d302      	bcc.n	8010a42 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10b      	bne.n	8010a5a <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a48:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a4e:	f043 0201 	orr.w	r2, r3, #1
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010a56:	2303      	movs	r3, #3
 8010a58:	e00e      	b.n	8010a78 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	6a1a      	ldr	r2, [r3, #32]
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	4013      	ands	r3, r2
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	bf14      	ite	ne
 8010a68:	2301      	movne	r3, #1
 8010a6a:	2300      	moveq	r3, #0
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	461a      	mov	r2, r3
 8010a70:	79fb      	ldrb	r3, [r7, #7]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d1d6      	bne.n	8010a24 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010a76:	2300      	movs	r3, #0
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010a80:	b084      	sub	sp, #16
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b084      	sub	sp, #16
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	f107 001c 	add.w	r0, r7, #28
 8010a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010a92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d105      	bne.n	8010aa6 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 fa8e 	bl	8010fc8 <USB_CoreReset>
 8010aac:	4603      	mov	r3, r0
 8010aae:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8010ab0:	7fbb      	ldrb	r3, [r7, #30]
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	d10b      	bne.n	8010ace <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	689b      	ldr	r3, [r3, #8]
 8010aba:	f043 0208 	orr.w	r2, r3, #8
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	f043 0220 	orr.w	r2, r3, #32
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3710      	adds	r7, #16
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ada:	b004      	add	sp, #16
 8010adc:	4770      	bx	lr

08010ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ade:	b480      	push	{r7}
 8010ae0:	b083      	sub	sp, #12
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	f023 0201 	bic.w	r2, r3, #1
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010af2:	2300      	movs	r3, #0
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010b1c:	78fb      	ldrb	r3, [r7, #3]
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d115      	bne.n	8010b4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010b2e:	200a      	movs	r0, #10
 8010b30:	f7f1 fefc 	bl	800292c <HAL_Delay>
      ms += 10U;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	330a      	adds	r3, #10
 8010b38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 fa36 	bl	8010fac <USB_GetMode>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d01e      	beq.n	8010b84 <USB_SetCurrentMode+0x84>
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2bc7      	cmp	r3, #199	@ 0xc7
 8010b4a:	d9f0      	bls.n	8010b2e <USB_SetCurrentMode+0x2e>
 8010b4c:	e01a      	b.n	8010b84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010b4e:	78fb      	ldrb	r3, [r7, #3]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d115      	bne.n	8010b80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010b60:	200a      	movs	r0, #10
 8010b62:	f7f1 fee3 	bl	800292c <HAL_Delay>
      ms += 10U;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	330a      	adds	r3, #10
 8010b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 fa1d 	bl	8010fac <USB_GetMode>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d005      	beq.n	8010b84 <USB_SetCurrentMode+0x84>
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8010b7c:	d9f0      	bls.n	8010b60 <USB_SetCurrentMode+0x60>
 8010b7e:	e001      	b.n	8010b84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010b80:	2301      	movs	r3, #1
 8010b82:	e005      	b.n	8010b90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2bc8      	cmp	r3, #200	@ 0xc8
 8010b88:	d101      	bne.n	8010b8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e000      	b.n	8010b90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010b8e:	2300      	movs	r3, #0
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b98:	b084      	sub	sp, #16
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b086      	sub	sp, #24
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
 8010ba2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	613b      	str	r3, [r7, #16]
 8010bb6:	e009      	b.n	8010bcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	3340      	adds	r3, #64	@ 0x40
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	4413      	add	r3, r2
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	613b      	str	r3, [r7, #16]
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	2b0e      	cmp	r3, #14
 8010bd0:	d9f2      	bls.n	8010bb8 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010bde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d11c      	bne.n	8010c20 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010bf4:	f043 0302 	orr.w	r3, r3, #2
 8010bf8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bfe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c0a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c16:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c1e:	e011      	b.n	8010c44 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010c50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010c54:	2b03      	cmp	r3, #3
 8010c56:	d10d      	bne.n	8010c74 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d104      	bne.n	8010c6a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010c60:	2100      	movs	r1, #0
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f000 f968 	bl	8010f38 <USB_SetDevSpeed>
 8010c68:	e008      	b.n	8010c7c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010c6a:	2101      	movs	r1, #1
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f000 f963 	bl	8010f38 <USB_SetDevSpeed>
 8010c72:	e003      	b.n	8010c7c <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010c74:	2103      	movs	r1, #3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 f95e 	bl	8010f38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010c7c:	2110      	movs	r1, #16
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 f8fa 	bl	8010e78 <USB_FlushTxFifo>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d001      	beq.n	8010c8e <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f924 	bl	8010edc <USB_FlushRxFifo>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d001      	beq.n	8010c9e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	613b      	str	r3, [r7, #16]
 8010cc6:	e043      	b.n	8010d50 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	015a      	lsls	r2, r3, #5
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	4413      	add	r3, r2
 8010cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cde:	d118      	bne.n	8010d12 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10a      	bne.n	8010cfc <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	015a      	lsls	r2, r3, #5
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	4413      	add	r3, r2
 8010cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010cf8:	6013      	str	r3, [r2, #0]
 8010cfa:	e013      	b.n	8010d24 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	015a      	lsls	r2, r3, #5
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	4413      	add	r3, r2
 8010d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d08:	461a      	mov	r2, r3
 8010d0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010d0e:	6013      	str	r3, [r2, #0]
 8010d10:	e008      	b.n	8010d24 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	015a      	lsls	r2, r3, #5
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	4413      	add	r3, r2
 8010d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d1e:	461a      	mov	r2, r3
 8010d20:	2300      	movs	r3, #0
 8010d22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	015a      	lsls	r2, r3, #5
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d30:	461a      	mov	r2, r3
 8010d32:	2300      	movs	r3, #0
 8010d34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	015a      	lsls	r2, r3, #5
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d42:	461a      	mov	r2, r3
 8010d44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010d48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	613b      	str	r3, [r7, #16]
 8010d50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010d54:	461a      	mov	r2, r3
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d3b5      	bcc.n	8010cc8 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	613b      	str	r3, [r7, #16]
 8010d60:	e043      	b.n	8010dea <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	015a      	lsls	r2, r3, #5
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	4413      	add	r3, r2
 8010d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d78:	d118      	bne.n	8010dac <USB_DevInit+0x214>
    {
      if (i == 0U)
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d10a      	bne.n	8010d96 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	015a      	lsls	r2, r3, #5
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	4413      	add	r3, r2
 8010d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	e013      	b.n	8010dbe <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	015a      	lsls	r2, r3, #5
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010da2:	461a      	mov	r2, r3
 8010da4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010da8:	6013      	str	r3, [r2, #0]
 8010daa:	e008      	b.n	8010dbe <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	015a      	lsls	r2, r3, #5
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	4413      	add	r3, r2
 8010db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010db8:	461a      	mov	r2, r3
 8010dba:	2300      	movs	r3, #0
 8010dbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	015a      	lsls	r2, r3, #5
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dca:	461a      	mov	r2, r3
 8010dcc:	2300      	movs	r3, #0
 8010dce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	015a      	lsls	r2, r3, #5
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ddc:	461a      	mov	r2, r3
 8010dde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010de2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	3301      	adds	r3, #1
 8010de8:	613b      	str	r3, [r7, #16]
 8010dea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010dee:	461a      	mov	r2, r3
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d3b5      	bcc.n	8010d62 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010dfc:	691b      	ldr	r3, [r3, #16]
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010e16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010e18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d105      	bne.n	8010e2c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	699b      	ldr	r3, [r3, #24]
 8010e24:	f043 0210 	orr.w	r2, r3, #16
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	699a      	ldr	r2, [r3, #24]
 8010e30:	4b10      	ldr	r3, [pc, #64]	@ (8010e74 <USB_DevInit+0x2dc>)
 8010e32:	4313      	orrs	r3, r2
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010e38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d005      	beq.n	8010e4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	f043 0208 	orr.w	r2, r3, #8
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010e4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d107      	bne.n	8010e64 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	699b      	ldr	r3, [r3, #24]
 8010e58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010e5c:	f043 0304 	orr.w	r3, r3, #4
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3718      	adds	r7, #24
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e70:	b004      	add	sp, #16
 8010e72:	4770      	bx	lr
 8010e74:	803c3800 	.word	0x803c3800

08010e78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e82:	2300      	movs	r3, #0
 8010e84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010e92:	d901      	bls.n	8010e98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010e94:	2303      	movs	r3, #3
 8010e96:	e01b      	b.n	8010ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	691b      	ldr	r3, [r3, #16]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	daf2      	bge.n	8010e86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	019b      	lsls	r3, r3, #6
 8010ea8:	f043 0220 	orr.w	r2, r3, #32
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ebc:	d901      	bls.n	8010ec2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010ebe:	2303      	movs	r3, #3
 8010ec0:	e006      	b.n	8010ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	691b      	ldr	r3, [r3, #16]
 8010ec6:	f003 0320 	and.w	r3, r3, #32
 8010eca:	2b20      	cmp	r3, #32
 8010ecc:	d0f0      	beq.n	8010eb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010ece:	2300      	movs	r3, #0
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3714      	adds	r7, #20
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr

08010edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b085      	sub	sp, #20
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	3301      	adds	r3, #1
 8010eec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ef4:	d901      	bls.n	8010efa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010ef6:	2303      	movs	r3, #3
 8010ef8:	e018      	b.n	8010f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	691b      	ldr	r3, [r3, #16]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	daf2      	bge.n	8010ee8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010f02:	2300      	movs	r3, #0
 8010f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2210      	movs	r2, #16
 8010f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010f18:	d901      	bls.n	8010f1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010f1a:	2303      	movs	r3, #3
 8010f1c:	e006      	b.n	8010f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	691b      	ldr	r3, [r3, #16]
 8010f22:	f003 0310 	and.w	r3, r3, #16
 8010f26:	2b10      	cmp	r3, #16
 8010f28:	d0f0      	beq.n	8010f0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010f2a:	2300      	movs	r3, #0
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3714      	adds	r7, #20
 8010f30:	46bd      	mov	sp, r7
 8010f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f36:	4770      	bx	lr

08010f38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b085      	sub	sp, #20
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	460b      	mov	r3, r1
 8010f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	78fb      	ldrb	r3, [r7, #3]
 8010f52:	68f9      	ldr	r1, [r7, #12]
 8010f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010f5c:	2300      	movs	r3, #0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3714      	adds	r7, #20
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010f6a:	b480      	push	{r7}
 8010f6c:	b085      	sub	sp, #20
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010f84:	f023 0303 	bic.w	r3, r3, #3
 8010f88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f98:	f043 0302 	orr.w	r3, r3, #2
 8010f9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3714      	adds	r7, #20
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b083      	sub	sp, #12
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	695b      	ldr	r3, [r3, #20]
 8010fb8:	f003 0301 	and.w	r3, r3, #1
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	370c      	adds	r7, #12
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010fe0:	d901      	bls.n	8010fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010fe2:	2303      	movs	r3, #3
 8010fe4:	e01b      	b.n	801101e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	daf2      	bge.n	8010fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	f043 0201 	orr.w	r2, r3, #1
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	3301      	adds	r3, #1
 8011002:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801100a:	d901      	bls.n	8011010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801100c:	2303      	movs	r3, #3
 801100e:	e006      	b.n	801101e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	691b      	ldr	r3, [r3, #16]
 8011014:	f003 0301 	and.w	r3, r3, #1
 8011018:	2b01      	cmp	r3, #1
 801101a:	d0f0      	beq.n	8010ffe <USB_CoreReset+0x36>

  return HAL_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3714      	adds	r7, #20
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr

0801102a <memset>:
 801102a:	4402      	add	r2, r0
 801102c:	4603      	mov	r3, r0
 801102e:	4293      	cmp	r3, r2
 8011030:	d100      	bne.n	8011034 <memset+0xa>
 8011032:	4770      	bx	lr
 8011034:	f803 1b01 	strb.w	r1, [r3], #1
 8011038:	e7f9      	b.n	801102e <memset+0x4>
	...

0801103c <__libc_init_array>:
 801103c:	b570      	push	{r4, r5, r6, lr}
 801103e:	4d0d      	ldr	r5, [pc, #52]	@ (8011074 <__libc_init_array+0x38>)
 8011040:	2600      	movs	r6, #0
 8011042:	4c0d      	ldr	r4, [pc, #52]	@ (8011078 <__libc_init_array+0x3c>)
 8011044:	1b64      	subs	r4, r4, r5
 8011046:	10a4      	asrs	r4, r4, #2
 8011048:	42a6      	cmp	r6, r4
 801104a:	d109      	bne.n	8011060 <__libc_init_array+0x24>
 801104c:	4d0b      	ldr	r5, [pc, #44]	@ (801107c <__libc_init_array+0x40>)
 801104e:	2600      	movs	r6, #0
 8011050:	4c0b      	ldr	r4, [pc, #44]	@ (8011080 <__libc_init_array+0x44>)
 8011052:	f000 f817 	bl	8011084 <_init>
 8011056:	1b64      	subs	r4, r4, r5
 8011058:	10a4      	asrs	r4, r4, #2
 801105a:	42a6      	cmp	r6, r4
 801105c:	d105      	bne.n	801106a <__libc_init_array+0x2e>
 801105e:	bd70      	pop	{r4, r5, r6, pc}
 8011060:	f855 3b04 	ldr.w	r3, [r5], #4
 8011064:	3601      	adds	r6, #1
 8011066:	4798      	blx	r3
 8011068:	e7ee      	b.n	8011048 <__libc_init_array+0xc>
 801106a:	f855 3b04 	ldr.w	r3, [r5], #4
 801106e:	3601      	adds	r6, #1
 8011070:	4798      	blx	r3
 8011072:	e7f2      	b.n	801105a <__libc_init_array+0x1e>
 8011074:	080111a4 	.word	0x080111a4
 8011078:	080111a4 	.word	0x080111a4
 801107c:	080111a4 	.word	0x080111a4
 8011080:	080111a8 	.word	0x080111a8

08011084 <_init>:
 8011084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011086:	bf00      	nop
 8011088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801108a:	bc08      	pop	{r3}
 801108c:	469e      	mov	lr, r3
 801108e:	4770      	bx	lr

08011090 <_fini>:
 8011090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011092:	bf00      	nop
 8011094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011096:	bc08      	pop	{r3}
 8011098:	469e      	mov	lr, r3
 801109a:	4770      	bx	lr
