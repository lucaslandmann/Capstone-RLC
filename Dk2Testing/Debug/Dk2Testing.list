
Dk2Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001134c  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080115c0  080115c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116c0  080116c0  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  080116c0  080116c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116c8  080116c8  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116c8  080116c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116cc  080116cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080116d0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  2000000c  080116dc  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000122c  080116dc  0001322c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000319b5  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf1  00000000  00000000  000449f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a78  00000000  00000000  000496e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002150  00000000  00000000  0004c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004729b  00000000  00000000  0004e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035956  00000000  00000000  0009554b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc912  00000000  00000000  000caea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002877b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc9c  00000000  00000000  002877f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00293494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	080115a8 	.word	0x080115a8

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	080115a8 	.word	0x080115a8

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fa07 	bl	80029e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f983 	bl	80008e0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f9f3 	bl	80009c4 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 fa28 	bl	8000a32 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 ff45 	bl	8001470 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fc23 	bl	8000e30 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fbe3 	bl	8000db4 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fc57 	bl	8000ea0 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fcd3 	bl	8000f9c <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fd11 	bl	800101c <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fd23 	bl	8001044 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fda1 	bl	8001144 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fe59 	bl	80012b8 <MX_TIM3_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000606:	f000 ff05 	bl	8001414 <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 800060a:	f000 fa21 	bl	8000a50 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060e:	f000 feb5 	bl	800137c <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000612:	f000 fde5 	bl	80011e0 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000616:	f000 fb53 	bl	8000cc0 <MX_ADC4_Init>
  MX_I2C1_Init();
 800061a:	f000 fc7f 	bl	8000f1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f002 faa6 	bl	8002b70 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2104      	movs	r1, #4
 8000628:	48a0      	ldr	r0, [pc, #640]	@ (80008ac <main+0x2e0>)
 800062a:	f007 f88b 	bl	8007744 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800062e:	200a      	movs	r0, #10
 8000630:	f002 fa9e 	bl	8002b70 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Vals, DIM(adc1Vals));
 8000634:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000638:	499d      	ldr	r1, [pc, #628]	@ (80008b0 <main+0x2e4>)
 800063a:	489e      	ldr	r0, [pc, #632]	@ (80008b4 <main+0x2e8>)
 800063c:	f003 f91e 	bl	800387c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4Vals, DIM(adc4Vals));
 8000640:	2202      	movs	r2, #2
 8000642:	499d      	ldr	r1, [pc, #628]	@ (80008b8 <main+0x2ec>)
 8000644:	489d      	ldr	r0, [pc, #628]	@ (80008bc <main+0x2f0>)
 8000646:	f003 f919 	bl	800387c <HAL_ADC_Start_DMA>


  //Set to "Awake" state
  uint8_t awake[] = {0x02, 0x81};
 800064a:	f248 1302 	movw	r3, #33026	@ 0x8102
 800064e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  //HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, awake, sizeof(awake), 1000);
  I2C_Transmit(ADCAddress, 0x02, 0x81);
 8000652:	2281      	movs	r2, #129	@ 0x81
 8000654:	2102      	movs	r1, #2
 8000656:	2090      	movs	r0, #144	@ 0x90
 8000658:	f001 f840 	bl	80016dc <I2C_Transmit>

  //Software Reset
  uint8_t softwareReset[] = {0x01, 0xFF};
 800065c:	f64f 7301 	movw	r3, #65281	@ 0xff01
 8000660:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, softwareReset, sizeof(softwareReset), 1000);
 8000664:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2302      	movs	r3, #2
 8000670:	2190      	movs	r1, #144	@ 0x90
 8000672:	4893      	ldr	r0, [pc, #588]	@ (80008c0 <main+0x2f4>)
 8000674:	f007 f956 	bl	8007924 <HAL_I2C_Master_Transmit>

  //Set MICBIAS and ADC to power down if needed
  uint8_t thermalProtect[] = {0x28, 0x10};
 8000678:	f241 0328 	movw	r3, #4136	@ 0x1028
 800067c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, thermalProtect, sizeof(thermalProtect), 1000);
 800067e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2302      	movs	r3, #2
 800068a:	2190      	movs	r1, #144	@ 0x90
 800068c:	488c      	ldr	r0, [pc, #560]	@ (80008c0 <main+0x2f4>)
 800068e:	f007 f949 	bl	8007924 <HAL_I2C_Master_Transmit>

  //Format Select
  uint8_t formatSelect[] = {0x07, 0x60};
 8000692:	f246 0307 	movw	r3, #24583	@ 0x6007
 8000696:	873b      	strh	r3, [r7, #56]	@ 0x38
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, formatSelect, sizeof(formatSelect), 1000);
 8000698:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800069c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2302      	movs	r3, #2
 80006a4:	2190      	movs	r1, #144	@ 0x90
 80006a6:	4886      	ldr	r0, [pc, #536]	@ (80008c0 <main+0x2f4>)
 80006a8:	f007 f93c 	bl	8007924 <HAL_I2C_Master_Transmit>

  //Master mode select
  uint8_t masterMode[] = {0x13, 0x97};
 80006ac:	f249 7313 	movw	r3, #38675	@ 0x9713
 80006b0:	86bb      	strh	r3, [r7, #52]	@ 0x34
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, masterMode, sizeof(masterMode), 1000);
 80006b2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80006b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	2190      	movs	r1, #144	@ 0x90
 80006c0:	487f      	ldr	r0, [pc, #508]	@ (80008c0 <main+0x2f4>)
 80006c2:	f007 f92f 	bl	8007924 <HAL_I2C_Master_Transmit>

  uint8_t masterModeConfig[] = {0x14, 0x58};
 80006c6:	f645 0314 	movw	r3, #22548	@ 0x5814
 80006ca:	863b      	strh	r3, [r7, #48]	@ 0x30
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, masterModeConfig, sizeof(masterModeConfig), 1000);
 80006cc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80006d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2302      	movs	r3, #2
 80006d8:	2190      	movs	r1, #144	@ 0x90
 80006da:	4879      	ldr	r0, [pc, #484]	@ (80008c0 <main+0x2f4>)
 80006dc:	f007 f922 	bl	8007924 <HAL_I2C_Master_Transmit>

  uint8_t channel1Config[] = {0x3c, 0xa5};
 80006e0:	f24a 533c 	movw	r3, #42300	@ 0xa53c
 80006e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t channel2Config[] = {0x41, 0xa5};
 80006e6:	f24a 5341 	movw	r3, #42305	@ 0xa541
 80006ea:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint8_t channel3Config[] = {0x46, 0xa5};
 80006ec:	f24a 5346 	movw	r3, #42310	@ 0xa546
 80006f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t channel4Config[] = {0x4b, 0xa5};
 80006f2:	f24a 534b 	movw	r3, #42315	@ 0xa54b
 80006f6:	843b      	strh	r3, [r7, #32]
  uint8_t channel5Config[] = {0x50, 0xa5};
 80006f8:	f24a 5350 	movw	r3, #42320	@ 0xa550
 80006fc:	83bb      	strh	r3, [r7, #28]
  uint8_t channel6Config[] = {0x55, 0xa5};
 80006fe:	f24a 5355 	movw	r3, #42325	@ 0xa555
 8000702:	833b      	strh	r3, [r7, #24]

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel1Config, sizeof(channel1Config), 1000);
 8000704:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000708:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2302      	movs	r3, #2
 8000710:	2190      	movs	r1, #144	@ 0x90
 8000712:	486b      	ldr	r0, [pc, #428]	@ (80008c0 <main+0x2f4>)
 8000714:	f007 f906 	bl	8007924 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel2Config, sizeof(channel2Config), 1000);
 8000718:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800071c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2302      	movs	r3, #2
 8000724:	2190      	movs	r1, #144	@ 0x90
 8000726:	4866      	ldr	r0, [pc, #408]	@ (80008c0 <main+0x2f4>)
 8000728:	f007 f8fc 	bl	8007924 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel3Config, sizeof(channel3Config), 1000);
 800072c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2302      	movs	r3, #2
 8000738:	2190      	movs	r1, #144	@ 0x90
 800073a:	4861      	ldr	r0, [pc, #388]	@ (80008c0 <main+0x2f4>)
 800073c:	f007 f8f2 	bl	8007924 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel4Config, sizeof(channel4Config), 1000);
 8000740:	f107 0220 	add.w	r2, r7, #32
 8000744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2302      	movs	r3, #2
 800074c:	2190      	movs	r1, #144	@ 0x90
 800074e:	485c      	ldr	r0, [pc, #368]	@ (80008c0 <main+0x2f4>)
 8000750:	f007 f8e8 	bl	8007924 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel5Config, sizeof(channel5Config), 1000);
 8000754:	f107 021c 	add.w	r2, r7, #28
 8000758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2302      	movs	r3, #2
 8000760:	2190      	movs	r1, #144	@ 0x90
 8000762:	4857      	ldr	r0, [pc, #348]	@ (80008c0 <main+0x2f4>)
 8000764:	f007 f8de 	bl	8007924 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel6Config, sizeof(channel6Config), 1000);
 8000768:	f107 0218 	add.w	r2, r7, #24
 800076c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2302      	movs	r3, #2
 8000774:	2190      	movs	r1, #144	@ 0x90
 8000776:	4852      	ldr	r0, [pc, #328]	@ (80008c0 <main+0x2f4>)
 8000778:	f007 f8d4 	bl	8007924 <HAL_I2C_Master_Transmit>

  uint8_t inputChannelEnable[] = {0x73, 0xFC};
 800077c:	f64f 4373 	movw	r3, #64627	@ 0xfc73
 8000780:	82bb      	strh	r3, [r7, #20]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, inputChannelEnable, sizeof(inputChannelEnable), 1000);
 8000782:	f107 0214 	add.w	r2, r7, #20
 8000786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2302      	movs	r3, #2
 800078e:	2190      	movs	r1, #144	@ 0x90
 8000790:	484b      	ldr	r0, [pc, #300]	@ (80008c0 <main+0x2f4>)
 8000792:	f007 f8c7 	bl	8007924 <HAL_I2C_Master_Transmit>

  uint8_t outputChannelEnable[] = {0x74, 0xFF};
 8000796:	f64f 7374 	movw	r3, #65396	@ 0xff74
 800079a:	823b      	strh	r3, [r7, #16]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, outputChannelEnable, sizeof(outputChannelEnable), 1000);
 800079c:	f107 0210 	add.w	r2, r7, #16
 80007a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2302      	movs	r3, #2
 80007a8:	2190      	movs	r1, #144	@ 0x90
 80007aa:	4845      	ldr	r0, [pc, #276]	@ (80008c0 <main+0x2f4>)
 80007ac:	f007 f8ba 	bl	8007924 <HAL_I2C_Master_Transmit>

  uint8_t enablePowerOuts[] = {0x75, 0x60};
 80007b0:	f246 0375 	movw	r3, #24693	@ 0x6075
 80007b4:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, enablePowerOuts, sizeof(enablePowerOuts), 1000);
 80007b6:	f107 020c 	add.w	r2, r7, #12
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2302      	movs	r3, #2
 80007c2:	2190      	movs	r1, #144	@ 0x90
 80007c4:	483e      	ldr	r0, [pc, #248]	@ (80008c0 <main+0x2f4>)
 80007c6:	f007 f8ad 	bl	8007924 <HAL_I2C_Master_Transmit>
  HAL_Delay(50);
 80007ca:	2032      	movs	r0, #50	@ 0x32
 80007cc:	f002 f9d0 	bl	8002b70 <HAL_Delay>


  //HAL_SAI_Receive_DMA(&hsai_BlockA2, pcmVals, DIM(pcmVals));
  //HAL_SAI_Transmit_DMA(&hsai_BlockB2, pcmVals, sizeof(pcmVals));

  uint8_t asiRead[] = {0x15,0xFF};
 80007d0:	f64f 7315 	movw	r3, #65301	@ 0xff15
 80007d4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, asiRead, sizeof(asiRead), 1000);
 80007d6:	f107 0208 	add.w	r2, r7, #8
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2302      	movs	r3, #2
 80007e2:	2190      	movs	r1, #144	@ 0x90
 80007e4:	4836      	ldr	r0, [pc, #216]	@ (80008c0 <main+0x2f4>)
 80007e6:	f007 f89d 	bl	8007924 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, ADCAddress, testRead, sizeof(testRead), 1000);
 80007ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	4a34      	ldr	r2, [pc, #208]	@ (80008c4 <main+0x2f8>)
 80007f4:	2190      	movs	r1, #144	@ 0x90
 80007f6:	4832      	ldr	r0, [pc, #200]	@ (80008c0 <main+0x2f4>)
 80007f8:	f007 f988 	bl	8007b0c <HAL_I2C_Master_Receive>

  uint8_t adcStatus[] = {0x76, 0xFF};
 80007fc:	f64f 7376 	movw	r3, #65398	@ 0xff76
 8000800:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, adcStatus, sizeof(adcStatus), 1000);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2302      	movs	r3, #2
 800080c:	2190      	movs	r1, #144	@ 0x90
 800080e:	482c      	ldr	r0, [pc, #176]	@ (80008c0 <main+0x2f4>)
 8000810:	f007 f888 	bl	8007924 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, ADCAddress, testRead, sizeof(testRead), 1000);
 8000814:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2301      	movs	r3, #1
 800081c:	4a29      	ldr	r2, [pc, #164]	@ (80008c4 <main+0x2f8>)
 800081e:	2190      	movs	r1, #144	@ 0x90
 8000820:	4827      	ldr	r0, [pc, #156]	@ (80008c0 <main+0x2f4>)
 8000822:	f007 f973 	bl	8007b0c <HAL_I2C_Master_Receive>

  uint8_t channelStatus[] = {0x77, 0xFF};
 8000826:	f64f 7377 	movw	r3, #65399	@ 0xff77
 800082a:	803b      	strh	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channelStatus, sizeof(channelStatus), 1000);
 800082c:	463a      	mov	r2, r7
 800082e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2302      	movs	r3, #2
 8000836:	2190      	movs	r1, #144	@ 0x90
 8000838:	4821      	ldr	r0, [pc, #132]	@ (80008c0 <main+0x2f4>)
 800083a:	f007 f873 	bl	8007924 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, ADCAddress, testRead, sizeof(testRead), 1000);
 800083e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	4a1f      	ldr	r2, [pc, #124]	@ (80008c4 <main+0x2f8>)
 8000848:	2190      	movs	r1, #144	@ 0x90
 800084a:	481d      	ldr	r0, [pc, #116]	@ (80008c0 <main+0x2f4>)
 800084c:	f007 f95e 	bl	8007b0c <HAL_I2C_Master_Receive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  signal[1] = adc1Vals[index % 6];
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <main+0x2fc>)
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <main+0x300>)
 8000856:	fba3 1302 	umull	r1, r3, r3, r2
 800085a:	0899      	lsrs	r1, r3, #2
 800085c:	460b      	mov	r3, r1
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	440b      	add	r3, r1
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	b29b      	uxth	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <main+0x2e4>)
 800086c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000870:	461a      	mov	r2, r3
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <main+0x304>)
 8000874:	605a      	str	r2, [r3, #4]
	  index++;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <main+0x2fc>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <main+0x2fc>)
 8000880:	801a      	strh	r2, [r3, #0]
	  if(index >= sizeof(adc1Vals))
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <main+0x2fc>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	f5b3 7f50 	cmp.w	r3, #832	@ 0x340
 800088a:	d302      	bcc.n	8000892 <main+0x2c6>
	  {
		  index = 0;
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <main+0x2fc>)
 800088e:	2200      	movs	r2, #0
 8000890:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_SAI_Transmit(&hsai_BlockB2, pcmVals, DIM(pcmVals), 100);
 8000892:	2364      	movs	r3, #100	@ 0x64
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	490f      	ldr	r1, [pc, #60]	@ (80008d4 <main+0x308>)
 8000898:	480f      	ldr	r0, [pc, #60]	@ (80008d8 <main+0x30c>)
 800089a:	f00d ff4d 	bl	800e738 <HAL_SAI_Transmit>
	  HAL_SAI_Transmit(&hsai_BlockA2, pcmVals, DIM(pcmVals), 100);
 800089e:	2364      	movs	r3, #100	@ 0x64
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <main+0x308>)
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <main+0x310>)
 80008a6:	f00d ff47 	bl	800e738 <HAL_SAI_Transmit>
	  signal[1] = adc1Vals[index % 6];
 80008aa:	e7d1      	b.n	8000850 <main+0x284>
 80008ac:	42021000 	.word	0x42021000
 80008b0:	20000cd4 	.word	0x20000cd4
 80008b4:	20000028 	.word	0x20000028
 80008b8:	20001014 	.word	0x20001014
 80008bc:	200000b4 	.word	0x200000b4
 80008c0:	20000334 	.word	0x20000334
 80008c4:	20001218 	.word	0x20001218
 80008c8:	20001220 	.word	0x20001220
 80008cc:	aaaaaaab 	.word	0xaaaaaaab
 80008d0:	2000121c 	.word	0x2000121c
 80008d4:	20001018 	.word	0x20001018
 80008d8:	2000054c 	.word	0x2000054c
 80008dc:	200004b4 	.word	0x200004b4

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09e      	sub	sp, #120	@ 0x78
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	2260      	movs	r2, #96	@ 0x60
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f010 fe2d 	bl	801154e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000904:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000908:	f008 ffd2 	bl	80098b0 <HAL_PWREx_ControlVoltageScaling>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000912:	f000 ff21 	bl	8001758 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000916:	f008 ffbb 	bl	8009890 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800091a:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <SystemClock_Config+0xe0>)
 800091c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000920:	4a27      	ldr	r2, [pc, #156]	@ (80009c0 <SystemClock_Config+0xe0>)
 8000922:	f023 0318 	bic.w	r3, r3, #24
 8000926:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800092a:	2317      	movs	r3, #23
 800092c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000934:	2381      	movs	r3, #129	@ 0x81
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2310      	movs	r3, #16
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000942:	2301      	movs	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000946:	2310      	movs	r3, #16
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800094a:	2300      	movs	r3, #0
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	2302      	movs	r3, #2
 8000950:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000952:	2303      	movs	r3, #3
 8000954:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800095e:	2308      	movs	r3, #8
 8000960:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000962:	2308      	movs	r3, #8
 8000964:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800096e:	230c      	movs	r3, #12
 8000970:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	4618      	mov	r0, r3
 800097c:	f009 f8c2 	bl	8009b04 <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000986:	f000 fee7 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	231f      	movs	r3, #31
 800098c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2303      	movs	r3, #3
 8000990:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2103      	movs	r1, #3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f009 ff88 	bl	800a8bc <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80009b2:	f000 fed1 	bl	8001758 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3778      	adds	r7, #120	@ 0x78
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	46020c00 	.word	0x46020c00

080009c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0b8      	sub	sp, #224	@ 0xe0
 80009c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	22e0      	movs	r2, #224	@ 0xe0
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f010 fdbc 	bl	801154e <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80009d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009da:	f04f 0301 	mov.w	r3, #1
 80009de:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80009e8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80009ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80009f0:	2303      	movs	r3, #3
 80009f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80009f8:	230c      	movs	r3, #12
 80009fa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000a00:	2303      	movs	r3, #3
 8000a02:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000a12:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00a fb1e 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000a26:	f000 fe97 	bl	8001758 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	37e0      	adds	r7, #224	@ 0xe0
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000a36:	f009 f827 	bl	8009a88 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f008 ffc4 	bl	80099c8 <HAL_PWREx_ConfigSupply>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000a46:	f000 fe87 	bl	8001758 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2220      	movs	r2, #32
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f010 fd76 	bl	801154e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a62:	4b88      	ldr	r3, [pc, #544]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a64:	4a88      	ldr	r2, [pc, #544]	@ (8000c88 <MX_ADC1_Init+0x238>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a68:	4b86      	ldr	r3, [pc, #536]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000a6e:	4b85      	ldr	r3, [pc, #532]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000a74:	4b83      	ldr	r3, [pc, #524]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7a:	4b82      	ldr	r3, [pc, #520]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a80:	4b80      	ldr	r3, [pc, #512]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a86:	4b7f      	ldr	r3, [pc, #508]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a92:	4b7c      	ldr	r3, [pc, #496]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000a9c:	220d      	movs	r2, #13
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa0:	4b78      	ldr	r3, [pc, #480]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa8:	4b76      	ldr	r3, [pc, #472]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aae:	4b75      	ldr	r3, [pc, #468]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ab4:	4b73      	ldr	r3, [pc, #460]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000abc:	4b71      	ldr	r3, [pc, #452]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac2:	4b70      	ldr	r3, [pc, #448]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ace:	4b6d      	ldr	r3, [pc, #436]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000adc:	4869      	ldr	r0, [pc, #420]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000ade:	f002 fbe5 	bl	80032ac <HAL_ADC_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 fe36 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aec:	4b67      	ldr	r3, [pc, #412]	@ (8000c8c <MX_ADC1_Init+0x23c>)
 8000aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af0:	2306      	movs	r3, #6
 8000af2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000afc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afe:	2304      	movs	r3, #4
 8000b00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	4619      	mov	r1, r3
 8000b0a:	485e      	ldr	r0, [pc, #376]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000b0c:	f003 fafc 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000b16:	f000 fe1f 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8000c90 <MX_ADC1_Init+0x240>)
 8000b1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4857      	ldr	r0, [pc, #348]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000b28:	f003 faee 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000b32:	f000 fe11 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b36:	4b57      	ldr	r3, [pc, #348]	@ (8000c94 <MX_ADC1_Init+0x244>)
 8000b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4619      	mov	r1, r3
 8000b42:	4850      	ldr	r0, [pc, #320]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000b44:	f003 fae0 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000b4e:	f000 fe03 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b52:	4b51      	ldr	r3, [pc, #324]	@ (8000c98 <MX_ADC1_Init+0x248>)
 8000b54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b56:	2318      	movs	r3, #24
 8000b58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4849      	ldr	r0, [pc, #292]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000b60:	f003 fad2 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000b6a:	f000 fdf5 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c9c <MX_ADC1_Init+0x24c>)
 8000b70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4841      	ldr	r0, [pc, #260]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000b7e:	f003 fac3 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000b88:	f000 fde6 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b8c:	4b44      	ldr	r3, [pc, #272]	@ (8000ca0 <MX_ADC1_Init+0x250>)
 8000b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b90:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	4619      	mov	r1, r3
 8000b9a:	483a      	ldr	r0, [pc, #232]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000b9c:	f003 fab4 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000ba6:	f000 fdd7 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000baa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca4 <MX_ADC1_Init+0x254>)
 8000bac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000bae:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4832      	ldr	r0, [pc, #200]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000bba:	f003 faa5 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000bc4:	f000 fdc8 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	@ (8000ca8 <MX_ADC1_Init+0x258>)
 8000bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000bcc:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000bd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	482b      	ldr	r0, [pc, #172]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000bd8:	f003 fa96 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000be2:	f000 fdb9 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000be6:	4b31      	ldr	r3, [pc, #196]	@ (8000cac <MX_ADC1_Init+0x25c>)
 8000be8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000bea:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000bee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4823      	ldr	r0, [pc, #140]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000bf6:	f003 fa87 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8000c00:	f000 fdaa 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <MX_ADC1_Init+0x260>)
 8000c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000c08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	481c      	ldr	r0, [pc, #112]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000c14:	f003 fa78 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8000c1e:	f000 fd9b 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c22:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <MX_ADC1_Init+0x264>)
 8000c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000c26:	f240 2306 	movw	r3, #518	@ 0x206
 8000c2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4814      	ldr	r0, [pc, #80]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000c32:	f003 fa69 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8000c3c:	f000 fd8c 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <MX_ADC1_Init+0x268>)
 8000c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000c44:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000c48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000c50:	f003 fa5a 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000c5a:	f000 fd7d 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_ADC1_Init+0x26c>)
 8000c60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000c62:	f240 2312 	movw	r3, #530	@ 0x212
 8000c66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_ADC1_Init+0x234>)
 8000c6e:	f003 fa4b 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8000c78:	f000 fd6e 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000028 	.word	0x20000028
 8000c88:	42028000 	.word	0x42028000
 8000c8c:	04000002 	.word	0x04000002
 8000c90:	08000004 	.word	0x08000004
 8000c94:	0c000008 	.word	0x0c000008
 8000c98:	10000010 	.word	0x10000010
 8000c9c:	14000020 	.word	0x14000020
 8000ca0:	1c000080 	.word	0x1c000080
 8000ca4:	20000100 	.word	0x20000100
 8000ca8:	2a000400 	.word	0x2a000400
 8000cac:	2e000800 	.word	0x2e000800
 8000cb0:	32001000 	.word	0x32001000
 8000cb4:	3e008000 	.word	0x3e008000
 8000cb8:	42010000 	.word	0x42010000
 8000cbc:	ce080000 	.word	0xce080000

08000cc0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2220      	movs	r2, #32
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f010 fc3e 	bl	801154e <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000cd2:	4b34      	ldr	r3, [pc, #208]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000cd4:	4a34      	ldr	r2, [pc, #208]	@ (8000da8 <MX_ADC4_Init+0xe8>)
 8000cd6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000cde:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000cea:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000cec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000cf0:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000cfe:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d2c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000d48:	4816      	ldr	r0, [pc, #88]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d4a:	f002 faaf 	bl	80032ac <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000d54:	f000 fd00 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_ADC4_Init+0xec>)
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d64:	2304      	movs	r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d72:	f003 f9c9 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000d7c:	f000 fcec 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_ADC4_Init+0xf0>)
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000d84:	2304      	movs	r3, #4
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_ADC4_Init+0xe4>)
 8000d8e:	f003 f9bb 	bl	8004108 <HAL_ADC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000d98:	f000 fcde 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000b4 	.word	0x200000b4
 8000da8:	46021000 	.word	0x46021000
 8000dac:	1c000080 	.word	0x1c000080
 8000db0:	20000100 	.word	0x20000100

08000db4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dba:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <MX_DMA2D_Init+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e00:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000e02:	f005 f90b 	bl	800601c <HAL_DMA2D_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000e0c:	f000 fca4 	bl	8001758 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e10:	2101      	movs	r1, #1
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_DMA2D_Init+0x74>)
 8000e14:	f005 f964 	bl	80060e0 <HAL_DMA2D_ConfigLayer>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 fc9b 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000026c 	.word	0x2000026c
 8000e2c:	4002b000 	.word	0x4002b000

08000e30 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <MX_GPDMA1_Init+0x6c>)
 8000e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3c:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <MX_GPDMA1_Init+0x6c>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <MX_GPDMA1_Init+0x6c>)
 8000e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	201d      	movs	r0, #29
 8000e5a:	f004 f981 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000e5e:	201d      	movs	r0, #29
 8000e60:	f004 f998 	bl	8005194 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	201e      	movs	r0, #30
 8000e6a:	f004 f979 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000e6e:	201e      	movs	r0, #30
 8000e70:	f004 f990 	bl	8005194 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	201f      	movs	r0, #31
 8000e7a:	f004 f971 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000e7e:	201f      	movs	r0, #31
 8000e80:	f004 f988 	bl	8005194 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	2020      	movs	r0, #32
 8000e8a:	f004 f969 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000e8e:	2020      	movs	r0, #32
 8000e90:	f004 f980 	bl	8005194 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	46020c00 	.word	0x46020c00

08000ea0 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <MX_HSPI1_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000eb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ebc:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ec0:	221a      	movs	r2, #26
 8000ec2:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000eca:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_HSPI1_Init+0x74>)
 8000f02:	f00f febd 	bl	8010c80 <HAL_XSPI_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000f0c:	f000 fc24 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200002d4 	.word	0x200002d4
 8000f18:	420d3400 	.word	0x420d3400

08000f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f22:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <MX_I2C1_Init+0x78>)
 8000f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f28:	4a1b      	ldr	r2, [pc, #108]	@ (8000f98 <MX_I2C1_Init+0x7c>)
 8000f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f56:	480e      	ldr	r0, [pc, #56]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f58:	f006 fc48 	bl	80077ec <HAL_I2C_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f62:	f000 fbf9 	bl	8001758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4809      	ldr	r0, [pc, #36]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f6a:	f007 ff55 	bl	8008e18 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f74:	f000 fbf0 	bl	8001758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_I2C1_Init+0x74>)
 8000f7c:	f007 ff97 	bl	8008eae <HAL_I2CEx_ConfigDigitalFilter>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f000 fbe7 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000334 	.word	0x20000334
 8000f94:	40005400 	.word	0x40005400
 8000f98:	20a0c4df 	.word	0x20a0c4df

08000f9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_I2C2_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_I2C2_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fd8:	f006 fc08 	bl	80077ec <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fbb9 	bl	8001758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000fea:	f007 ff15 	bl	8008e18 <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 fbb0 	bl	8001758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_I2C2_Init+0x74>)
 8000ffc:	f007 ff57 	bl	8008eae <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 fba7 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000388 	.word	0x20000388
 8001014:	40005800 	.word	0x40005800
 8001018:	20a0c4df 	.word	0x20a0c4df

0800101c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001020:	2000      	movs	r0, #0
 8001022:	f007 ff91 	bl	8008f48 <HAL_ICACHE_ConfigAssociativityMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800102c:	f000 fb94 	bl	8001758 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001030:	f007 ffaa 	bl	8008f88 <HAL_ICACHE_Enable>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800103a:	f000 fb8d 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	@ 0x38
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2234      	movs	r2, #52	@ 0x34
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f010 fa7c 	bl	801154e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001056:	4b39      	ldr	r3, [pc, #228]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001058:	4a39      	ldr	r2, [pc, #228]	@ (8001140 <MX_LTDC_Init+0xfc>)
 800105a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b37      	ldr	r3, [pc, #220]	@ (800113c <MX_LTDC_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001062:	4b36      	ldr	r3, [pc, #216]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001068:	4b34      	ldr	r3, [pc, #208]	@ (800113c <MX_LTDC_Init+0xf8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b33      	ldr	r3, [pc, #204]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001076:	2203      	movs	r2, #3
 8001078:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <MX_LTDC_Init+0xf8>)
 800107c:	2203      	movs	r2, #3
 800107e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001082:	220b      	movs	r2, #11
 8001084:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001086:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001088:	220b      	movs	r2, #11
 800108a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 800108c:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_LTDC_Init+0xf8>)
 800108e:	f240 322b 	movw	r2, #811	@ 0x32b
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001096:	f240 12eb 	movw	r2, #491	@ 0x1eb
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <MX_LTDC_Init+0xf8>)
 800109e:	f240 3233 	movw	r2, #819	@ 0x333
 80010a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_LTDC_Init+0xf8>)
 80010a6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80010aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_LTDC_Init+0xf8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_LTDC_Init+0xf8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_LTDC_Init+0xf8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010c4:	481d      	ldr	r0, [pc, #116]	@ (800113c <MX_LTDC_Init+0xf8>)
 80010c6:	f007 ff6f 	bl	8008fa8 <HAL_LTDC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010d0:	f000 fb42 	bl	8001758 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80010d8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80010dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80010e2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80010e6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010ec:	23ff      	movs	r3, #255	@ 0xff
 80010ee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010f8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010fa:	2307      	movs	r3, #7
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_LTDC_Init+0xf8>)
 8001124:	f008 f8d2 	bl	80092cc <HAL_LTDC_ConfigLayer>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800112e:	f000 fb13 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3738      	adds	r7, #56	@ 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200003dc 	.word	0x200003dc
 8001140:	40016800 	.word	0x40016800

08001144 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MX_RTC_Init+0x94>)
 800115e:	4a1f      	ldr	r2, [pc, #124]	@ (80011dc <MX_RTC_Init+0x98>)
 8001160:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_RTC_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_RTC_Init+0x94>)
 800116a:	227f      	movs	r2, #127	@ 0x7f
 800116c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_RTC_Init+0x94>)
 8001170:	22ff      	movs	r2, #255	@ 0xff
 8001172:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_RTC_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_RTC_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_RTC_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_RTC_Init+0x94>)
 8001188:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_RTC_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001194:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_RTC_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <MX_RTC_Init+0x94>)
 800119c:	f00c ff5a 	bl	800e054 <HAL_RTC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80011a6:	f000 fad7 	bl	8001758 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <MX_RTC_Init+0x94>)
 80011c0:	f00d f876 	bl	800e2b0 <HAL_RTCEx_PrivilegeModeSet>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80011ca:	f000 fac5 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000484 	.word	0x20000484
 80011dc:	46007800 	.word	0x46007800

080011e0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 80011e6:	4a30      	ldr	r2, [pc, #192]	@ (80012a8 <MX_SAI2_Init+0xc8>)
 80011e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011ea:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011f0:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011fc:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001208:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 800120a:	4a28      	ldr	r2, [pc, #160]	@ (80012ac <MX_SAI2_Init+0xcc>)
 800120c:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001214:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800121a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 800122a:	2200      	movs	r2, #0
 800122c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800122e:	2302      	movs	r3, #2
 8001230:	2202      	movs	r2, #2
 8001232:	2101      	movs	r1, #1
 8001234:	481b      	ldr	r0, [pc, #108]	@ (80012a4 <MX_SAI2_Init+0xc4>)
 8001236:	f00d f869 	bl	800e30c <HAL_SAI_InitProtocol>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001240:	f000 fa8a 	bl	8001758 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001246:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <MX_SAI2_Init+0xd4>)
 8001248:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 800124c:	2201      	movs	r2, #1
 800124e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001258:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800125c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 800126c:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <MX_SAI2_Init+0xcc>)
 800126e:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001278:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800127c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 4) != HAL_OK)
 800128a:	2304      	movs	r3, #4
 800128c:	2202      	movs	r2, #2
 800128e:	2100      	movs	r1, #0
 8001290:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <MX_SAI2_Init+0xd0>)
 8001292:	f00d f83b 	bl	800e30c <HAL_SAI_InitProtocol>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 800129c:	f000 fa5c 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200004b4 	.word	0x200004b4
 80012a8:	40015804 	.word	0x40015804
 80012ac:	00017700 	.word	0x00017700
 80012b0:	2000054c 	.word	0x2000054c
 80012b4:	40015824 	.word	0x40015824

080012b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012dc:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <MX_TIM3_Init+0xbc>)
 80012de:	4a26      	ldr	r2, [pc, #152]	@ (8001378 <MX_TIM3_Init+0xc0>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <MX_TIM3_Init+0xbc>)
 80012e4:	22a0      	movs	r2, #160	@ 0xa0
 80012e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <MX_TIM3_Init+0xbc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <MX_TIM3_Init+0xbc>)
 80012f0:	2264      	movs	r2, #100	@ 0x64
 80012f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_TIM3_Init+0xbc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <MX_TIM3_Init+0xbc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001300:	481c      	ldr	r0, [pc, #112]	@ (8001374 <MX_TIM3_Init+0xbc>)
 8001302:	f00d fd11 	bl	800ed28 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800130c:	f000 fa24 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4815      	ldr	r0, [pc, #84]	@ (8001374 <MX_TIM3_Init+0xbc>)
 8001320:	f00e fb4a 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800132a:	f000 fa15 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	@ 0x60
 8001330:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001332:	234b      	movs	r3, #75	@ 0x4b
 8001334:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	220c      	movs	r2, #12
 8001342:	4619      	mov	r1, r3
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <MX_TIM3_Init+0xbc>)
 8001346:	f00d fd47 	bl	800edd8 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001350:	f000 fa02 	bl	8001758 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <MX_TIM3_Init+0xbc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	69da      	ldr	r2, [r3, #28]
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_TIM3_Init+0xbc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001362:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001364:	4803      	ldr	r0, [pc, #12]	@ (8001374 <MX_TIM3_Init+0xbc>)
 8001366:	f000 ff7b 	bl	8002260 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000710 	.word	0x20000710
 8001378:	40000400 	.word	0x40000400

0800137c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <MX_USART1_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_USART1_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013c6:	f00e fbb9 	bl	800fb3c <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f000 f9c2 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013d8:	f00f fb87 	bl	8010aea <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 f9b9 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ea:	f00f fbbc 	bl	8010b66 <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 f9b0 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013fa:	f00f fb3d 	bl	8010a78 <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 f9a8 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000075c 	.word	0x2000075c
 8001410:	40013800 	.word	0x40013800

08001414 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800141a:	4a14      	ldr	r2, [pc, #80]	@ (800146c <MX_USB_OTG_HS_PCD_Init+0x58>)
 800141c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001420:	2209      	movs	r2, #9
 8001422:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001426:	2200      	movs	r2, #0
 8001428:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800142c:	2203      	movs	r2, #3
 800142e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001432:	2200      	movs	r2, #0
 8001434:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001438:	2200      	movs	r2, #0
 800143a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800143e:	2200      	movs	r2, #0
 8001440:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001444:	2200      	movs	r2, #0
 8001446:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800144a:	2200      	movs	r2, #0
 800144c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001450:	2200      	movs	r2, #0
 8001452:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001456:	f008 f8ea 	bl	800962e <HAL_PCD_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001460:	f000 f97a 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200007f0 	.word	0x200007f0
 800146c:	42040000 	.word	0x42040000

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	@ 0x38
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	4b8c      	ldr	r3, [pc, #560]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148c:	4a8a      	ldr	r2, [pc, #552]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001496:	4b88      	ldr	r3, [pc, #544]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b84      	ldr	r3, [pc, #528]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014aa:	4a83      	ldr	r2, [pc, #524]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b4:	4b80      	ldr	r3, [pc, #512]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c2:	4b7d      	ldr	r3, [pc, #500]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c8:	4a7b      	ldr	r2, [pc, #492]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014ca:	f043 0320 	orr.w	r3, r3, #32
 80014ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d2:	4b79      	ldr	r3, [pc, #484]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e0:	4b75      	ldr	r3, [pc, #468]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e6:	4a74      	ldr	r2, [pc, #464]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f0:	4b71      	ldr	r3, [pc, #452]	@ (80016b8 <MX_GPIO_Init+0x248>)
 80014f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b6e      	ldr	r3, [pc, #440]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001504:	4a6c      	ldr	r2, [pc, #432]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800150e:	4b6a      	ldr	r3, [pc, #424]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b66      	ldr	r3, [pc, #408]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800151e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001522:	4a65      	ldr	r2, [pc, #404]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800152c:	4b62      	ldr	r3, [pc, #392]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800152e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	4b5f      	ldr	r3, [pc, #380]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800153c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001540:	4a5d      	ldr	r2, [pc, #372]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001546:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800154a:	4b5b      	ldr	r3, [pc, #364]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800154c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b57      	ldr	r3, [pc, #348]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800155a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155e:	4a56      	ldr	r2, [pc, #344]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001568:	4b53      	ldr	r3, [pc, #332]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800156a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001576:	4b50      	ldr	r3, [pc, #320]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157c:	4a4e      	ldr	r2, [pc, #312]	@ (80016b8 <MX_GPIO_Init+0x248>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001582:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001586:	4b4c      	ldr	r3, [pc, #304]	@ (80016b8 <MX_GPIO_Init+0x248>)
 8001588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2104      	movs	r1, #4
 8001598:	4848      	ldr	r0, [pc, #288]	@ (80016bc <MX_GPIO_Init+0x24c>)
 800159a:	f006 f8d3 	bl	8007744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2110      	movs	r1, #16
 80015a2:	4846      	ldr	r0, [pc, #280]	@ (80016bc <MX_GPIO_Init+0x24c>)
 80015a4:	f006 f8ce 	bl	8007744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2114      	movs	r1, #20
 80015ac:	4844      	ldr	r0, [pc, #272]	@ (80016c0 <MX_GPIO_Init+0x250>)
 80015ae:	f006 f8c9 	bl	8007744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 80015b2:	2314      	movs	r3, #20
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	483c      	ldr	r0, [pc, #240]	@ (80016bc <MX_GPIO_Init+0x24c>)
 80015ca:	f005 fee3 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80015ce:	2320      	movs	r3, #32
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d2:	4b3c      	ldr	r3, [pc, #240]	@ (80016c4 <MX_GPIO_Init+0x254>)
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4836      	ldr	r0, [pc, #216]	@ (80016bc <MX_GPIO_Init+0x24c>)
 80015e2:	f005 fed7 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80015e6:	2302      	movs	r3, #2
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015ea:	4b37      	ldr	r3, [pc, #220]	@ (80016c8 <MX_GPIO_Init+0x258>)
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	4834      	ldr	r0, [pc, #208]	@ (80016cc <MX_GPIO_Init+0x25c>)
 80015fa:	f005 fecb 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80015fe:	2310      	movs	r3, #16
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001602:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <MX_GPIO_Init+0x260>)
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	2301      	movs	r3, #1
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	482e      	ldr	r0, [pc, #184]	@ (80016cc <MX_GPIO_Init+0x25c>)
 8001612:	f005 febf 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001616:	2314      	movs	r3, #20
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4824      	ldr	r0, [pc, #144]	@ (80016c0 <MX_GPIO_Init+0x250>)
 800162e:	f005 feb1 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001632:	2380      	movs	r3, #128	@ 0x80
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	481e      	ldr	r0, [pc, #120]	@ (80016c0 <MX_GPIO_Init+0x250>)
 8001646:	f005 fea5 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 800164a:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	481d      	ldr	r0, [pc, #116]	@ (80016d4 <MX_GPIO_Init+0x264>)
 8001660:	f005 fe98 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001664:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	4817      	ldr	r0, [pc, #92]	@ (80016d8 <MX_GPIO_Init+0x268>)
 800167a:	f005 fe8b 	bl	8007394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	200c      	movs	r0, #12
 8001684:	f003 fd6c 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001688:	200c      	movs	r0, #12
 800168a:	f003 fd83 	bl	8005194 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	200f      	movs	r0, #15
 8001694:	f003 fd64 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001698:	200f      	movs	r0, #15
 800169a:	f003 fd7b 	bl	8005194 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2010      	movs	r0, #16
 80016a4:	f003 fd5c 	bl	8005160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80016a8:	2010      	movs	r0, #16
 80016aa:	f003 fd73 	bl	8005194 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ae:	bf00      	nop
 80016b0:	3738      	adds	r7, #56	@ 0x38
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	46020c00 	.word	0x46020c00
 80016bc:	42021000 	.word	0x42021000
 80016c0:	42020c00 	.word	0x42020c00
 80016c4:	10110000 	.word	0x10110000
 80016c8:	10310000 	.word	0x10310000
 80016cc:	42020000 	.word	0x42020000
 80016d0:	10210000 	.word	0x10210000
 80016d4:	42021800 	.word	0x42021800
 80016d8:	42020400 	.word	0x42020400

080016dc <I2C_Transmit>:

/* USER CODE BEGIN 4 */

static uint8_t I2C_Transmit(uint16_t DevAddress, uint8_t targetRegister, uint8_t command)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
 80016e6:	460b      	mov	r3, r1
 80016e8:	717b      	strb	r3, [r7, #5]
 80016ea:	4613      	mov	r3, r2
 80016ec:	713b      	strb	r3, [r7, #4]
	uint8_t pData[2] = {targetRegister, command};
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	753b      	strb	r3, [r7, #20]
 80016f2:	793b      	ldrb	r3, [r7, #4]
 80016f4:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData, DIM(pData), 100);
 80016f6:	f107 0214 	add.w	r2, r7, #20
 80016fa:	88f9      	ldrh	r1, [r7, #6]
 80016fc:	2364      	movs	r3, #100	@ 0x64
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2302      	movs	r3, #2
 8001702:	4814      	ldr	r0, [pc, #80]	@ (8001754 <I2C_Transmit+0x78>)
 8001704:	f006 f90e 	bl	8007924 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f001 fa31 	bl	8002b70 <HAL_Delay>
	uint8_t readRegister[DIM(pData)] = {0};
 800170e:	2300      	movs	r3, #0
 8001710:	823b      	strh	r3, [r7, #16]
	uint8_t regRead[2] = {pData[1],0xFF};
 8001712:	7d7b      	ldrb	r3, [r7, #21]
 8001714:	733b      	strb	r3, [r7, #12]
 8001716:	23ff      	movs	r3, #255	@ 0xff
 8001718:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, regRead, sizeof(regRead), 1000);
 800171a:	f107 020c 	add.w	r2, r7, #12
 800171e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2302      	movs	r3, #2
 8001726:	2190      	movs	r1, #144	@ 0x90
 8001728:	480a      	ldr	r0, [pc, #40]	@ (8001754 <I2C_Transmit+0x78>)
 800172a:	f006 f8fb 	bl	8007924 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ADCAddress, readRegister, sizeof(readRegister), 1000);
 800172e:	f107 0210 	add.w	r2, r7, #16
 8001732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2302      	movs	r3, #2
 800173a:	2190      	movs	r1, #144	@ 0x90
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <I2C_Transmit+0x78>)
 800173e:	f006 f9e5 	bl	8007b0c <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f001 fa14 	bl	8002b70 <HAL_Delay>

	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000334 	.word	0x20000334

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <Error_Handler+0x8>

08001764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_MspInit+0x30>)
 800176c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001770:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <HAL_MspInit+0x30>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_MspInit+0x30>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001788:	f008 f98e 	bl	8009aa8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	46020c00 	.word	0x46020c00

08001798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0e0      	sub	sp, #384	@ 0x180
 800179c:	af00      	add	r7, sp, #0
 800179e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017a2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017a6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017bc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017c0:	4618      	mov	r0, r3
 80017c2:	23e0      	movs	r3, #224	@ 0xe0
 80017c4:	461a      	mov	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	f00f fec1 	bl	801154e <memset>
  if(hadc->Instance==ADC1)
 80017cc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017d0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a9d      	ldr	r2, [pc, #628]	@ (8001a50 <HAL_ADC_MspInit+0x2b8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	f040 814a 	bne.w	8001a74 <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80017e0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017e4:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80017e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80017f4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017f8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001800:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4618      	mov	r0, r3
 800180a:	f009 fc27 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001814:	f7ff ffa0 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001818:	4b8e      	ldr	r3, [pc, #568]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 800181a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181e:	4a8d      	ldr	r2, [pc, #564]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 8001820:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001828:	4b8a      	ldr	r3, [pc, #552]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 800182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800182e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001832:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001836:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001840:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001844:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b83      	ldr	r3, [pc, #524]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 8001848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184c:	4a81      	ldr	r2, [pc, #516]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001856:	4b7f      	ldr	r3, [pc, #508]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 8001858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185c:	f003 0204 	and.w	r2, r3, #4
 8001860:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001864:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800186e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001872:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b77      	ldr	r3, [pc, #476]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 8001876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187a:	4a76      	ldr	r2, [pc, #472]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001884:	4b73      	ldr	r3, [pc, #460]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 8001886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188a:	f003 0201 	and.w	r2, r3, #1
 800188e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001892:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800189c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018a0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b2:	4b68      	ldr	r3, [pc, #416]	@ (8001a54 <HAL_ADC_MspInit+0x2bc>)
 80018b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b8:	f003 0202 	and.w	r2, r3, #2
 80018bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018ce:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80018d0:	230f      	movs	r3, #15
 80018d2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e2:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018e6:	4619      	mov	r1, r3
 80018e8:	485b      	ldr	r0, [pc, #364]	@ (8001a58 <HAL_ADC_MspInit+0x2c0>)
 80018ea:	f005 fd53 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80018ee:	23ed      	movs	r3, #237	@ 0xed
 80018f0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001904:	4619      	mov	r1, r3
 8001906:	4855      	ldr	r0, [pc, #340]	@ (8001a5c <HAL_ADC_MspInit+0x2c4>)
 8001908:	f005 fd44 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 800190c:	2303      	movs	r3, #3
 800190e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001912:	2303      	movs	r3, #3
 8001914:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001922:	4619      	mov	r1, r3
 8001924:	484e      	ldr	r0, [pc, #312]	@ (8001a60 <HAL_ADC_MspInit+0x2c8>)
 8001926:	f005 fd35 	bl	8007394 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800192a:	2321      	movs	r3, #33	@ 0x21
 800192c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001948:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800194c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001950:	2301      	movs	r3, #1
 8001952:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001956:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800195a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800196a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800196e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001990:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001994:	4933      	ldr	r1, [pc, #204]	@ (8001a64 <HAL_ADC_MspInit+0x2cc>)
 8001996:	4618      	mov	r0, r3
 8001998:	f004 fe10 	bl	80065bc <HAL_DMAEx_List_BuildNode>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 80019a2:	f7ff fed9 	bl	8001758 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80019a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001a64 <HAL_ADC_MspInit+0x2cc>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	482f      	ldr	r0, [pc, #188]	@ (8001a68 <HAL_ADC_MspInit+0x2d0>)
 80019ac:	f004 fe32 	bl	8006614 <HAL_DMAEx_List_InsertNode>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 80019b6:	f7ff fecf 	bl	8001758 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80019ba:	482b      	ldr	r0, [pc, #172]	@ (8001a68 <HAL_ADC_MspInit+0x2d0>)
 80019bc:	f004 fef3 	bl	80067a6 <HAL_DMAEx_List_SetCircularMode>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 80019c6:	f7ff fec7 	bl	8001758 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80019ca:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 80019cc:	4a28      	ldr	r2, [pc, #160]	@ (8001a70 <HAL_ADC_MspInit+0x2d8>)
 80019ce:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80019d0:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80019d6:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80019dc:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80019e8:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 80019ea:	2281      	movs	r2, #129	@ 0x81
 80019ec:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80019ee:	481f      	ldr	r0, [pc, #124]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 80019f0:	f004 fc24 	bl	800623c <HAL_DMAEx_List_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 80019fa:	f7ff fead 	bl	8001758 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80019fe:	491a      	ldr	r1, [pc, #104]	@ (8001a68 <HAL_ADC_MspInit+0x2d0>)
 8001a00:	481a      	ldr	r0, [pc, #104]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 8001a02:	f004 ff31 	bl	8006868 <HAL_DMAEx_List_LinkQ>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 8001a0c:	f7ff fea4 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001a10:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a14:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 8001a1c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a1e:	4a13      	ldr	r2, [pc, #76]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 8001a20:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a24:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	480f      	ldr	r0, [pc, #60]	@ (8001a6c <HAL_ADC_MspInit+0x2d4>)
 8001a30:	f004 f812 	bl	8005a58 <HAL_DMA_ConfigChannelAttributes>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 8001a3a:	f7ff fe8d 	bl	8001758 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2025      	movs	r0, #37	@ 0x25
 8001a44:	f003 fb8c 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a48:	2025      	movs	r0, #37	@ 0x25
 8001a4a:	f003 fba3 	bl	8005194 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001a4e:	e0bf      	b.n	8001bd0 <HAL_ADC_MspInit+0x438>
 8001a50:	42028000 	.word	0x42028000
 8001a54:	46020c00 	.word	0x46020c00
 8001a58:	42020800 	.word	0x42020800
 8001a5c:	42020000 	.word	0x42020000
 8001a60:	42020400 	.word	0x42020400
 8001a64:	20000140 	.word	0x20000140
 8001a68:	20000164 	.word	0x20000164
 8001a6c:	2000017c 	.word	0x2000017c
 8001a70:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001a74:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a78:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a56      	ldr	r2, [pc, #344]	@ (8001bdc <HAL_ADC_MspInit+0x444>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	f040 80a4 	bne.w	8001bd0 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001a88:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a8c:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001a90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001a9c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001aa0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001aa4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aa8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f009 fad3 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 8001abc:	f7ff fe4c 	bl	8001758 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001ac0:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <HAL_ADC_MspInit+0x448>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac6:	4a46      	ldr	r2, [pc, #280]	@ (8001be0 <HAL_ADC_MspInit+0x448>)
 8001ac8:	f043 0320 	orr.w	r3, r3, #32
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ad0:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <HAL_ADC_MspInit+0x448>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad6:	f003 0220 	and.w	r2, r3, #32
 8001ada:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ade:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ae8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001aec:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aee:	4b3c      	ldr	r3, [pc, #240]	@ (8001be0 <HAL_ADC_MspInit+0x448>)
 8001af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af4:	4a3a      	ldr	r2, [pc, #232]	@ (8001be0 <HAL_ADC_MspInit+0x448>)
 8001af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001afa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001afe:	4b38      	ldr	r3, [pc, #224]	@ (8001be0 <HAL_ADC_MspInit+0x448>)
 8001b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b04:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001b08:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b0c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b16:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b1a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b32:	4619      	mov	r1, r3
 8001b34:	482b      	ldr	r0, [pc, #172]	@ (8001be4 <HAL_ADC_MspInit+0x44c>)
 8001b36:	f005 fc2d 	bl	8007394 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001bec <HAL_ADC_MspInit+0x454>)
 8001b3e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001b40:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b46:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4c:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b52:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b58:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b5a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b5e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b68:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b6c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001b92:	4815      	ldr	r0, [pc, #84]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001b94:	f003 fbc0 	bl	8005318 <HAL_DMA_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 8001b9e:	f7ff fddb 	bl	8001758 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001ba2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ba6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001bae:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001bb2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bb6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	4809      	ldr	r0, [pc, #36]	@ (8001be8 <HAL_ADC_MspInit+0x450>)
 8001bc2:	f003 ff49 	bl	8005a58 <HAL_DMA_ConfigChannelAttributes>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 8001bcc:	f7ff fdc4 	bl	8001758 <Error_Handler>
}
 8001bd0:	bf00      	nop
 8001bd2:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	46021000 	.word	0x46021000
 8001be0:	46020c00 	.word	0x46020c00
 8001be4:	42021800 	.word	0x42021800
 8001be8:	200001f4 	.word	0x200001f4
 8001bec:	40020150 	.word	0x40020150

08001bf0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_DMA2D_MspInit+0x3c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10e      	bne.n	8001c20 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_DMA2D_MspInit+0x40>)
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c08:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <HAL_DMA2D_MspInit+0x40>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <HAL_DMA2D_MspInit+0x40>)
 8001c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	4002b000 	.word	0x4002b000
 8001c30:	46020c00 	.word	0x46020c00

08001c34 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	@ (8001cfc <HAL_XSPI_MspInit+0xc8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d14d      	bne.n	8001cf2 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001c56:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5c:	4a28      	ldr	r2, [pc, #160]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7a:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c84:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c98:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_XSPI_MspInit+0xcc>)
 8001ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001cb0:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001cb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <HAL_XSPI_MspInit+0xd0>)
 8001cce:	f005 fb61 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <HAL_XSPI_MspInit+0xd4>)
 8001cee:	f005 fb51 	bl	8007394 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	420d3400 	.word	0x420d3400
 8001d00:	46020c00 	.word	0x46020c00
 8001d04:	42021c00 	.word	0x42021c00
 8001d08:	42022000 	.word	0x42022000

08001d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0c4      	sub	sp, #272	@ 0x110
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d1a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	22e0      	movs	r2, #224	@ 0xe0
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00f fc0a 	bl	801154e <memset>
  if(hi2c->Instance==I2C1)
 8001d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a63      	ldr	r2, [pc, #396]	@ (8001ed4 <HAL_I2C_MspInit+0x1c8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d14f      	bne.n	8001dec <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d4c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5e:	f107 0318 	add.w	r3, r7, #24
 8001d62:	4618      	mov	r0, r3
 8001d64:	f009 f97a 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001d6e:	f7ff fcf3 	bl	8001758 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d72:	4b59      	ldr	r3, [pc, #356]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d78:	4a57      	ldr	r2, [pc, #348]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d82:	4b55      	ldr	r3, [pc, #340]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d90:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d98:	2312      	movs	r3, #18
 8001d9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001daa:	2304      	movs	r3, #4
 8001dac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001db4:	4619      	mov	r1, r3
 8001db6:	4849      	ldr	r0, [pc, #292]	@ (8001edc <HAL_I2C_MspInit+0x1d0>)
 8001db8:	f005 faec 	bl	8007394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dbc:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dc2:	4a45      	ldr	r2, [pc, #276]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001dc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001dcc:	4b42      	ldr	r3, [pc, #264]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dd2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001de4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001de8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dea:	e06e      	b.n	8001eca <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001dec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a39      	ldr	r2, [pc, #228]	@ (8001ee0 <HAL_I2C_MspInit+0x1d4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d165      	bne.n	8001eca <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dfe:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4618      	mov	r0, r3
 8001e16:	f009 f921 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e20:	f7ff fc9a 	bl	8001758 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001e2c:	f043 0320 	orr.w	r3, r3, #32
 8001e30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e34:	4b28      	ldr	r3, [pc, #160]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e3a:	f003 0220 	and.w	r2, r3, #32
 8001e3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e50:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e58:	2312      	movs	r3, #18
 8001e5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e70:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e74:	4619      	mov	r1, r3
 8001e76:	481b      	ldr	r0, [pc, #108]	@ (8001ee4 <HAL_I2C_MspInit+0x1d8>)
 8001e78:	f005 fa8c 	bl	8007394 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e82:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001e84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e88:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_I2C_MspInit+0x1cc>)
 8001e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e92:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ea8:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2039      	movs	r0, #57	@ 0x39
 8001eb0:	f003 f956 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001eb4:	2039      	movs	r0, #57	@ 0x39
 8001eb6:	f003 f96d 	bl	8005194 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	203a      	movs	r0, #58	@ 0x3a
 8001ec0:	f003 f94e 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ec4:	203a      	movs	r0, #58	@ 0x3a
 8001ec6:	f003 f965 	bl	8005194 <HAL_NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40005400 	.word	0x40005400
 8001ed8:	46020c00 	.word	0x46020c00
 8001edc:	42021800 	.word	0x42021800
 8001ee0:	40005800 	.word	0x40005800
 8001ee4:	42021400 	.word	0x42021400

08001ee8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0c6      	sub	sp, #280	@ 0x118
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ef2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ef6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	22e0      	movs	r2, #224	@ 0xe0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00f fb1c 	bl	801154e <memset>
  if(hltdc->Instance==LTDC)
 8001f16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a92      	ldr	r2, [pc, #584]	@ (800216c <HAL_LTDC_MspInit+0x284>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	f040 811b 	bne.w	8002160 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0302 	mov.w	r3, #2
 8001f32:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001f40:	2304      	movs	r3, #4
 8001f42:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001f44:	2332      	movs	r3, #50	@ 0x32
 8001f46:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001f50:	2308      	movs	r3, #8
 8001f52:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001f5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	4618      	mov	r0, r3
 8001f68:	f009 f878 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001f72:	f7ff fbf1 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f76:	4b7e      	ldr	r3, [pc, #504]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001f78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f7c:	4a7c      	ldr	r2, [pc, #496]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001f7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f82:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f86:	4b7a      	ldr	r3, [pc, #488]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f94:	4b76      	ldr	r3, [pc, #472]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9a:	4a75      	ldr	r2, [pc, #468]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fa4:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001faa:	f003 0202 	and.w	r2, r3, #2
 8001fae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fb2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fc0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc8:	4a69      	ldr	r2, [pc, #420]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd2:	4b67      	ldr	r3, [pc, #412]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd8:	f003 0210 	and.w	r2, r3, #16
 8001fdc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fee:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff0:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002000:	4b5b      	ldr	r3, [pc, #364]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8002002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002006:	f003 0208 	and.w	r2, r3, #8
 800200a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800200e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800201c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	4b54      	ldr	r3, [pc, #336]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8002020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002024:	4a52      	ldr	r2, [pc, #328]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800202e:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <HAL_LTDC_MspInit+0x288>)
 8002030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002034:	f003 0204 	and.w	r2, r3, #4
 8002038:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800203c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002046:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800204a:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800204c:	2304      	movs	r3, #4
 800204e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002064:	2308      	movs	r3, #8
 8002066:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800206e:	4619      	mov	r1, r3
 8002070:	4840      	ldr	r0, [pc, #256]	@ (8002174 <HAL_LTDC_MspInit+0x28c>)
 8002072:	f005 f98f 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002076:	f64f 7381 	movw	r3, #65409	@ 0xff81
 800207a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002090:	2308      	movs	r3, #8
 8002092:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002096:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800209a:	4619      	mov	r1, r3
 800209c:	4836      	ldr	r0, [pc, #216]	@ (8002178 <HAL_LTDC_MspInit+0x290>)
 800209e:	f005 f979 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020a2:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 80020a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020bc:	2308      	movs	r3, #8
 80020be:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020c6:	4619      	mov	r1, r3
 80020c8:	482c      	ldr	r0, [pc, #176]	@ (800217c <HAL_LTDC_MspInit+0x294>)
 80020ca:	f005 f963 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ce:	23c0      	movs	r3, #192	@ 0xc0
 80020d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80020e6:	2307      	movs	r3, #7
 80020e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020f0:	4619      	mov	r1, r3
 80020f2:	4823      	ldr	r0, [pc, #140]	@ (8002180 <HAL_LTDC_MspInit+0x298>)
 80020f4:	f005 f94e 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002112:	2308      	movs	r3, #8
 8002114:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002118:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800211c:	4619      	mov	r1, r3
 800211e:	4818      	ldr	r0, [pc, #96]	@ (8002180 <HAL_LTDC_MspInit+0x298>)
 8002120:	f005 f938 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002128:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800213e:	2307      	movs	r3, #7
 8002140:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002148:	4619      	mov	r1, r3
 800214a:	480a      	ldr	r0, [pc, #40]	@ (8002174 <HAL_LTDC_MspInit+0x28c>)
 800214c:	f005 f922 	bl	8007394 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2087      	movs	r0, #135	@ 0x87
 8002156:	f003 f803 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800215a:	2087      	movs	r0, #135	@ 0x87
 800215c:	f003 f81a 	bl	8005194 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002160:	bf00      	nop
 8002162:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40016800 	.word	0x40016800
 8002170:	46020c00 	.word	0x46020c00
 8002174:	42020400 	.word	0x42020400
 8002178:	42021000 	.word	0x42021000
 800217c:	42020c00 	.word	0x42020c00
 8002180:	42020800 	.word	0x42020800

08002184 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0bc      	sub	sp, #240	@ 0xf0
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	22e0      	movs	r2, #224	@ 0xe0
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f00f f9da 	bl	801154e <memset>
  if(hrtc->Instance==RTC)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_RTC_MspInit+0x90>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d132      	bne.n	800220a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4618      	mov	r0, r3
 80021be:	f008 ff4d 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80021c8:	f7ff fac6 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_RTC_MspInit+0x94>)
 80021ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d2:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_RTC_MspInit+0x94>)
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RTC_MspInit+0x94>)
 80021de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <HAL_RTC_MspInit+0x94>)
 80021e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021e8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_RTC_MspInit+0x94>)
 80021ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <HAL_RTC_MspInit+0x94>)
 80021fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002200:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <HAL_RTC_MspInit+0x94>)
 8002202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002206:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800220a:	bf00      	nop
 800220c:	37f0      	adds	r7, #240	@ 0xf0
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	46007800 	.word	0x46007800
 8002218:	46020c00 	.word	0x46020c00

0800221c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0b      	ldr	r2, [pc, #44]	@ (8002258 <HAL_TIM_PWM_MspInit+0x3c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10e      	bne.n	800224c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_TIM_PWM_MspInit+0x40>)
 8002230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002234:	4a09      	ldr	r2, [pc, #36]	@ (800225c <HAL_TIM_PWM_MspInit+0x40>)
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <HAL_TIM_PWM_MspInit+0x40>)
 8002240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40000400 	.word	0x40000400
 800225c:	46020c00 	.word	0x46020c00

08002260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <HAL_TIM_MspPostInit+0x68>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d11e      	bne.n	80022c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_TIM_MspPostInit+0x6c>)
 8002284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002288:	4a10      	ldr	r2, [pc, #64]	@ (80022cc <HAL_TIM_MspPostInit+0x6c>)
 800228a:	f043 0310 	orr.w	r3, r3, #16
 800228e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_TIM_MspPostInit+0x6c>)
 8002294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80022a0:	2340      	movs	r3, #64	@ 0x40
 80022a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	4619      	mov	r1, r3
 80022ba:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <HAL_TIM_MspPostInit+0x70>)
 80022bc:	f005 f86a 	bl	8007394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40000400 	.word	0x40000400
 80022cc:	46020c00 	.word	0x46020c00
 80022d0:	42021000 	.word	0x42021000

080022d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0c2      	sub	sp, #264	@ 0x108
 80022d8:	af00      	add	r7, sp, #0
 80022da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80022de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022e2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	22e0      	movs	r2, #224	@ 0xe0
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00f f926 	bl	801154e <memset>
  if(huart->Instance==USART1)
 8002302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2f      	ldr	r2, [pc, #188]	@ (80023cc <HAL_UART_MspInit+0xf8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d155      	bne.n	80023c0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002314:	f04f 0201 	mov.w	r2, #1
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002320:	2300      	movs	r3, #0
 8002322:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	4618      	mov	r0, r3
 800232a:	f008 fe97 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002334:	f7ff fa10 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002338:	4b25      	ldr	r3, [pc, #148]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 800233a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800233e:	4a24      	ldr	r2, [pc, #144]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002344:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002348:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 800234a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800234e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800235c:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002366:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <HAL_UART_MspInit+0xfc>)
 8002368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800236c:	f003 0201 	and.w	r2, r3, #1
 8002370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002374:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800237e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002382:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002384:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002388:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800239e:	2307      	movs	r3, #7
 80023a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80023a8:	4619      	mov	r1, r3
 80023aa:	480a      	ldr	r0, [pc, #40]	@ (80023d4 <HAL_UART_MspInit+0x100>)
 80023ac:	f004 fff2 	bl	8007394 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	203d      	movs	r0, #61	@ 0x3d
 80023b6:	f002 fed3 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ba:	203d      	movs	r0, #61	@ 0x3d
 80023bc:	f002 feea 	bl	8005194 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80023c0:	bf00      	nop
 80023c2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40013800 	.word	0x40013800
 80023d0:	46020c00 	.word	0x46020c00
 80023d4:	42020000 	.word	0x42020000

080023d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b0be      	sub	sp, #248	@ 0xf8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e0:	f107 0318 	add.w	r3, r7, #24
 80023e4:	22e0      	movs	r2, #224	@ 0xe0
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00f f8b0 	bl	801154e <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3a      	ldr	r2, [pc, #232]	@ (80024dc <HAL_PCD_MspInit+0x104>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d16d      	bne.n	80024d4 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f8:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 80023fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023fe:	4a38      	ldr	r2, [pc, #224]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002408:	4b35      	ldr	r3, [pc, #212]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 800240a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0308 	mov.w	r3, #8
 800241e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002422:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002426:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800242a:	f107 0318 	add.w	r3, r7, #24
 800242e:	4618      	mov	r0, r3
 8002430:	f008 fe14 	bl	800b05c <HAL_RCCEx_PeriphCLKConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 800243a:	f7ff f98d 	bl	8001758 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 800243e:	200c      	movs	r0, #12
 8002440:	f000 fbce 	bl	8002be0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002444:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800244a:	4a25      	ldr	r2, [pc, #148]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002450:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800245a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002462:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 800246a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800246e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002472:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002480:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11b      	bne.n	80024c6 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002494:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80024ac:	f007 fadc 	bl	8009a68 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80024b0:	f007 fb0a 	bl	8009ac8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ba:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <HAL_PCD_MspInit+0x108>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024c4:	e003      	b.n	80024ce <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80024c6:	f007 facf 	bl	8009a68 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80024ca:	f007 fafd 	bl	8009ac8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 fb72 	bl	8002bb8 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80024d4:	bf00      	nop
 80024d6:	37f8      	adds	r7, #248	@ 0xf8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	42040000 	.word	0x42040000
 80024e0:	46020c00 	.word	0x46020c00

080024e4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0a4      	sub	sp, #144	@ 0x90
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4aae      	ldr	r2, [pc, #696]	@ (80027ac <HAL_SAI_MspInit+0x2c8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f040 80b5 	bne.w	8002662 <HAL_SAI_MspInit+0x17e>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80024f8:	4bad      	ldr	r3, [pc, #692]	@ (80027b0 <HAL_SAI_MspInit+0x2cc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10e      	bne.n	800251e <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002500:	4bac      	ldr	r3, [pc, #688]	@ (80027b4 <HAL_SAI_MspInit+0x2d0>)
 8002502:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002506:	4aab      	ldr	r2, [pc, #684]	@ (80027b4 <HAL_SAI_MspInit+0x2d0>)
 8002508:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800250c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002510:	4ba8      	ldr	r3, [pc, #672]	@ (80027b4 <HAL_SAI_MspInit+0x2d0>)
 8002512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800251e:	4ba4      	ldr	r3, [pc, #656]	@ (80027b0 <HAL_SAI_MspInit+0x2cc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4aa2      	ldr	r2, [pc, #648]	@ (80027b0 <HAL_SAI_MspInit+0x2cc>)
 8002526:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002528:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800252c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002540:	230d      	movs	r3, #13
 8002542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800254a:	4619      	mov	r1, r3
 800254c:	489a      	ldr	r0, [pc, #616]	@ (80027b8 <HAL_SAI_MspInit+0x2d4>)
 800254e:	f004 ff21 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002556:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800256a:	230d      	movs	r3, #13
 800256c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002570:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002574:	4619      	mov	r1, r3
 8002576:	4891      	ldr	r0, [pc, #580]	@ (80027bc <HAL_SAI_MspInit+0x2d8>)
 8002578:	f004 ff0c 	bl	8007394 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800257c:	2321      	movs	r3, #33	@ 0x21
 800257e:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002580:	2326      	movs	r3, #38	@ 0x26
 8002582:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002590:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002596:	2302      	movs	r3, #2
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800259a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80025a4:	2301      	movs	r3, #1
 80025a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025ac:	2300      	movs	r3, #0
 80025ae:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80025b4:	2300      	movs	r3, #0
 80025b6:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80025bc:	2300      	movs	r3, #0
 80025be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	497e      	ldr	r1, [pc, #504]	@ (80027c0 <HAL_SAI_MspInit+0x2dc>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fff8 	bl	80065bc <HAL_DMAEx_List_BuildNode>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_SAI_MspInit+0xf2>
    {
      Error_Handler();
 80025d2:	f7ff f8c1 	bl	8001758 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80025d6:	4a7a      	ldr	r2, [pc, #488]	@ (80027c0 <HAL_SAI_MspInit+0x2dc>)
 80025d8:	2100      	movs	r1, #0
 80025da:	487a      	ldr	r0, [pc, #488]	@ (80027c4 <HAL_SAI_MspInit+0x2e0>)
 80025dc:	f004 f81a 	bl	8006614 <HAL_DMAEx_List_InsertNode>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_SAI_MspInit+0x106>
    {
      Error_Handler();
 80025e6:	f7ff f8b7 	bl	8001758 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80025ea:	4876      	ldr	r0, [pc, #472]	@ (80027c4 <HAL_SAI_MspInit+0x2e0>)
 80025ec:	f004 f8db 	bl	80067a6 <HAL_DMAEx_List_SetCircularMode>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 80025f6:	f7ff f8af 	bl	8001758 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80025fa:	4b73      	ldr	r3, [pc, #460]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 80025fc:	4a73      	ldr	r2, [pc, #460]	@ (80027cc <HAL_SAI_MspInit+0x2e8>)
 80025fe:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002600:	4b71      	ldr	r3, [pc, #452]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 8002602:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002606:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002608:	4b6f      	ldr	r3, [pc, #444]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 800260a:	2200      	movs	r2, #0
 800260c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800260e:	4b6e      	ldr	r3, [pc, #440]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 8002610:	2200      	movs	r2, #0
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002614:	4b6c      	ldr	r3, [pc, #432]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800261a:	4b6b      	ldr	r3, [pc, #428]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 800261c:	2281      	movs	r2, #129	@ 0x81
 800261e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002620:	4869      	ldr	r0, [pc, #420]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 8002622:	f003 fe0b 	bl	800623c <HAL_DMAEx_List_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_SAI_MspInit+0x14c>
    {
      Error_Handler();
 800262c:	f7ff f894 	bl	8001758 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002630:	4964      	ldr	r1, [pc, #400]	@ (80027c4 <HAL_SAI_MspInit+0x2e0>)
 8002632:	4865      	ldr	r0, [pc, #404]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 8002634:	f004 f918 	bl	8006868 <HAL_DMAEx_List_LinkQ>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_SAI_MspInit+0x15e>
    {
      Error_Handler();
 800263e:	f7ff f88b 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a60      	ldr	r2, [pc, #384]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 8002646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800264a:	4a5f      	ldr	r2, [pc, #380]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002650:	2110      	movs	r1, #16
 8002652:	485d      	ldr	r0, [pc, #372]	@ (80027c8 <HAL_SAI_MspInit+0x2e4>)
 8002654:	f003 fa00 	bl	8005a58 <HAL_DMA_ConfigChannelAttributes>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_SAI_MspInit+0x17e>
    {
      Error_Handler();
 800265e:	f7ff f87b 	bl	8001758 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5a      	ldr	r2, [pc, #360]	@ (80027d0 <HAL_SAI_MspInit+0x2ec>)
 8002668:	4293      	cmp	r3, r2
 800266a:	f040 809a 	bne.w	80027a2 <HAL_SAI_MspInit+0x2be>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800266e:	4b50      	ldr	r3, [pc, #320]	@ (80027b0 <HAL_SAI_MspInit+0x2cc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <HAL_SAI_MspInit+0x1b0>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002676:	4b4f      	ldr	r3, [pc, #316]	@ (80027b4 <HAL_SAI_MspInit+0x2d0>)
 8002678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800267c:	4a4d      	ldr	r2, [pc, #308]	@ (80027b4 <HAL_SAI_MspInit+0x2d0>)
 800267e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002682:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002686:	4b4b      	ldr	r3, [pc, #300]	@ (80027b4 <HAL_SAI_MspInit+0x2d0>)
 8002688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800268c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002694:	4b46      	ldr	r3, [pc, #280]	@ (80027b0 <HAL_SAI_MspInit+0x2cc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	4a45      	ldr	r2, [pc, #276]	@ (80027b0 <HAL_SAI_MspInit+0x2cc>)
 800269c:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800269e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80026b6:	230d      	movs	r3, #13
 80026b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026c0:	4619      	mov	r1, r3
 80026c2:	4844      	ldr	r0, [pc, #272]	@ (80027d4 <HAL_SAI_MspInit+0x2f0>)
 80026c4:	f004 fe66 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80026e0:	230d      	movs	r3, #13
 80026e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026ea:	4619      	mov	r1, r3
 80026ec:	483a      	ldr	r0, [pc, #232]	@ (80027d8 <HAL_SAI_MspInit+0x2f4>)
 80026ee:	f004 fe51 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800270a:	230d      	movs	r3, #13
 800270c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002710:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002714:	4619      	mov	r1, r3
 8002716:	4830      	ldr	r0, [pc, #192]	@ (80027d8 <HAL_SAI_MspInit+0x2f4>)
 8002718:	f004 fe3c 	bl	8007394 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800271c:	4b2f      	ldr	r3, [pc, #188]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 800271e:	4a30      	ldr	r2, [pc, #192]	@ (80027e0 <HAL_SAI_MspInit+0x2fc>)
 8002720:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002722:	4b2e      	ldr	r3, [pc, #184]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002724:	2227      	movs	r2, #39	@ 0x27
 8002726:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002728:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800272e:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002734:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002736:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002738:	2208      	movs	r2, #8
 800273a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 800273c:	4b27      	ldr	r3, [pc, #156]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002742:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002744:	2202      	movs	r2, #2
 8002746:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002748:	4b24      	ldr	r3, [pc, #144]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800274e:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8002754:	4b21      	ldr	r3, [pc, #132]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002756:	2201      	movs	r2, #1
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 800275a:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 800275c:	2201      	movs	r2, #1
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002760:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002762:	2200      	movs	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002766:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 800276e:	2200      	movs	r2, #0
 8002770:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002772:	481a      	ldr	r0, [pc, #104]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002774:	f002 fdd0 	bl	8005318 <HAL_DMA_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_SAI_MspInit+0x29e>
    {
      Error_Handler();
 800277e:	f7fe ffeb 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800278a:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002790:	2110      	movs	r1, #16
 8002792:	4812      	ldr	r0, [pc, #72]	@ (80027dc <HAL_SAI_MspInit+0x2f8>)
 8002794:	f003 f960 	bl	8005a58 <HAL_DMA_ConfigChannelAttributes>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_SAI_MspInit+0x2be>
    {
      Error_Handler();
 800279e:	f7fe ffdb 	bl	8001758 <Error_Handler>
    }

    }
}
 80027a2:	bf00      	nop
 80027a4:	3790      	adds	r7, #144	@ 0x90
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40015804 	.word	0x40015804
 80027b0:	20001224 	.word	0x20001224
 80027b4:	46020c00 	.word	0x46020c00
 80027b8:	42020400 	.word	0x42020400
 80027bc:	42021800 	.word	0x42021800
 80027c0:	2000065c 	.word	0x2000065c
 80027c4:	20000680 	.word	0x20000680
 80027c8:	20000698 	.word	0x20000698
 80027cc:	400200d0 	.word	0x400200d0
 80027d0:	40015824 	.word	0x40015824
 80027d4:	42020000 	.word	0x42020000
 80027d8:	42020800 	.word	0x42020800
 80027dc:	200005e4 	.word	0x200005e4
 80027e0:	400201d0 	.word	0x400201d0

080027e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <NMI_Handler+0x4>

080027ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <MemManage_Handler+0x4>

080027fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <BusFault_Handler+0x4>

08002804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <UsageFault_Handler+0x4>

0800280c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283a:	f000 f979 	bl	8002b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}

08002842 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002846:	2002      	movs	r0, #2
 8002848:	f004 ff94 	bl	8007774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002854:	2010      	movs	r0, #16
 8002856:	f004 ff8d 	bl	8007774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}

0800285e <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002862:	2020      	movs	r0, #32
 8002864:	f004 ff86 	bl	8007774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002872:	f002 ff82 	bl	800577a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000017c 	.word	0x2000017c

08002880 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002884:	4802      	ldr	r0, [pc, #8]	@ (8002890 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002886:	f002 ff78 	bl	800577a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000698 	.word	0x20000698

08002894 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002898:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <GPDMA1_Channel2_IRQHandler+0x10>)
 800289a:	f002 ff6e 	bl	800577a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200001f4 	.word	0x200001f4

080028a8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80028ac:	4802      	ldr	r0, [pc, #8]	@ (80028b8 <GPDMA1_Channel3_IRQHandler+0x10>)
 80028ae:	f002 ff64 	bl	800577a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	200005e4 	.word	0x200005e4

080028bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028c0:	4802      	ldr	r0, [pc, #8]	@ (80028cc <ADC1_2_IRQHandler+0x10>)
 80028c2:	f001 f925 	bl	8003b10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000028 	.word	0x20000028

080028d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <I2C2_EV_IRQHandler+0x10>)
 80028d6:	f005 fa0f 	bl	8007cf8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000388 	.word	0x20000388

080028e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <I2C2_ER_IRQHandler+0x10>)
 80028ea:	f005 fa1f 	bl	8007d2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000388 	.word	0x20000388

080028f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <USART1_IRQHandler+0x10>)
 80028fe:	f00d f96d 	bl	800fbdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000075c 	.word	0x2000075c

0800290c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <LTDC_IRQHandler+0x10>)
 8002912:	f006 fc19 	bl	8009148 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200003dc 	.word	0x200003dc

08002920 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002924:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <SystemInit+0x68>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	4a17      	ldr	r2, [pc, #92]	@ (8002988 <SystemInit+0x68>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002934:	4b15      	ldr	r3, [pc, #84]	@ (800298c <SystemInit+0x6c>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800293a:	4b14      	ldr	r3, [pc, #80]	@ (800298c <SystemInit+0x6c>)
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <SystemInit+0x6c>)
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002946:	4b11      	ldr	r3, [pc, #68]	@ (800298c <SystemInit+0x6c>)
 8002948:	2200      	movs	r2, #0
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <SystemInit+0x6c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0e      	ldr	r2, [pc, #56]	@ (800298c <SystemInit+0x6c>)
 8002952:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002956:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800295a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <SystemInit+0x6c>)
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <SystemInit+0x6c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a09      	ldr	r2, [pc, #36]	@ (800298c <SystemInit+0x6c>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <SystemInit+0x6c>)
 8002970:	2200      	movs	r2, #0
 8002972:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002974:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <SystemInit+0x68>)
 8002976:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800297a:	609a      	str	r2, [r3, #8]
  #endif
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00
 800298c:	46020c00 	.word	0x46020c00

08002990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029c8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002994:	f7ff ffc4 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002998:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800299a:	e003      	b.n	80029a4 <LoopCopyDataInit>

0800299c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800299e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029a2:	3104      	adds	r1, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029a4:	480a      	ldr	r0, [pc, #40]	@ (80029d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029a6:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80029a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029ac:	d3f6      	bcc.n	800299c <CopyDataInit>
	ldr	r2, =_sbss
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029b0:	e002      	b.n	80029b8 <LoopFillZerobss>

080029b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029b4:	f842 3b04 	str.w	r3, [r2], #4

080029b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <LoopForever+0x16>)
	cmp	r2, r3
 80029ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029bc:	d3f9      	bcc.n	80029b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029be:	f00e fdcf 	bl	8011560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029c2:	f7fd fe03 	bl	80005cc <main>

080029c6 <LoopForever>:

LoopForever:
    b LoopForever
 80029c6:	e7fe      	b.n	80029c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80029c8:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80029cc:	080116d0 	.word	0x080116d0
	ldr	r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80029d4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80029d8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80029dc:	2000122c 	.word	0x2000122c

080029e0 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029e0:	e7fe      	b.n	80029e0 <ADC4_IRQHandler>
	...

080029e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_Init+0x50>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a11      	ldr	r2, [pc, #68]	@ (8002a34 <HAL_Init+0x50>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f002 fba8 	bl	800514a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80029fa:	f008 f951 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_Init+0x54>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	490c      	ldr	r1, [pc, #48]	@ (8002a3c <HAL_Init+0x58>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	4a0b      	ldr	r2, [pc, #44]	@ (8002a40 <HAL_Init+0x5c>)
 8002a12:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002a14:	2004      	movs	r0, #4
 8002a16:	f002 fbed 	bl	80051f4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1a:	200f      	movs	r0, #15
 8002a1c:	f000 f812 	bl	8002a44 <HAL_InitTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e002      	b.n	8002a30 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2a:	f7fe fe9b 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40022000 	.word	0x40022000
 8002a38:	46020c00 	.word	0x46020c00
 8002a3c:	080115c0 	.word	0x080115c0
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002a50:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_InitTick+0xdc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e05c      	b.n	8002b16 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002a5c:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <HAL_InitTick+0xe0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d10c      	bne.n	8002a82 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002a68:	4b2f      	ldr	r3, [pc, #188]	@ (8002b28 <HAL_InitTick+0xe4>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b20 <HAL_InitTick+0xdc>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e037      	b.n	8002af2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002a82:	f002 fc0f 	bl	80052a4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002a86:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d023      	beq.n	8002ad6 <HAL_InitTick+0x92>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d82d      	bhi.n	8002af0 <HAL_InitTick+0xac>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_InitTick+0x5e>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d00d      	beq.n	8002abc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002aa0:	e026      	b.n	8002af0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <HAL_InitTick+0xe4>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <HAL_InitTick+0xdc>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ab0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	60fb      	str	r3, [r7, #12]
        break;
 8002aba:	e01a      	b.n	8002af2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <HAL_InitTick+0xdc>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aca:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
        break;
 8002ad4:	e00d      	b.n	8002af2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_InitTick+0xdc>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	60fb      	str	r3, [r7, #12]
        break;
 8002aee:	e000      	b.n	8002af2 <HAL_InitTick+0xae>
        break;
 8002af0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f002 fb5c 	bl	80051b0 <HAL_SYSTICK_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e009      	b.n	8002b16 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b02:	2200      	movs	r2, #0
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0a:	f002 fb29 	bl	8005160 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002b0e:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <HAL_InitTick+0xe8>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000008 	.word	0x20000008
 8002b24:	e000e010 	.word	0xe000e010
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000008 	.word	0x20000008
 8002b54:	20001228 	.word	0x20001228

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20001228 	.word	0x20001228

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000008 	.word	0x20000008

08002bb8 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	f023 0201 	bic.w	r2, r3, #1
 8002bc8:	4904      	ldr	r1, [pc, #16]	@ (8002bdc <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	46000400 	.word	0x46000400

08002be0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bec:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002bf0:	4904      	ldr	r1, [pc, #16]	@ (8002c04 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	46000400 	.word	0x46000400

08002c08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	609a      	str	r2, [r3, #8]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <LL_ADC_SetResolution+0x3c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d104      	bne.n	8002c90 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f023 020c 	bic.w	r2, r3, #12
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	46021000 	.word	0x46021000

08002cb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3360      	adds	r3, #96	@ 0x60
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3360      	adds	r3, #96	@ 0x60
 8002d00:	461a      	mov	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b087      	sub	sp, #28
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3360      	adds	r3, #96	@ 0x60
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	601a      	str	r2, [r3, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3360      	adds	r3, #96	@ 0x60
 8002d64:	461a      	mov	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	601a      	str	r2, [r3, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3360      	adds	r3, #96	@ 0x60
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d002      	beq.n	8002df2 <LL_ADC_SetGainCompensation+0x32>
 8002dec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002df0:	e000      	b.n	8002df4 <LL_ADC_SetGainCompensation+0x34>
 8002df2:	2200      	movs	r2, #0
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2107      	movs	r1, #7
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	@ 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d020      	beq.n	8002ec2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3330      	adds	r3, #48	@ 0x30
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	4413      	add	r3, r2
 8002e92:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	211f      	movs	r1, #31
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 011f 	and.w	r1, r3, #31
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002ec0:	e02b      	b.n	8002f1a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	210f      	movs	r1, #15
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	e010      	b.n	8002f0c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	613b      	str	r3, [r7, #16]
  return result;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e003      	b.n	8002f0c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	f001 011f 	and.w	r1, r1, #31
 8002f12:	408b      	lsls	r3, r1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f1a:	bf00      	nop
 8002f1c:	3724      	adds	r7, #36	@ 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	46021000 	.word	0x46021000

08002f2c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2201      	movs	r2, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	e015      	b.n	8002f7c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	60fb      	str	r3, [r7, #12]
  return result;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2201      	movs	r2, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003004:	b480      	push	{r7}
 8003006:	b08b      	sub	sp, #44	@ 0x2c
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a2d      	ldr	r2, [pc, #180]	@ (80030c8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d042      	beq.n	800309e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <LL_ADC_SetChannelSamplingTime+0x28>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	e011      	b.n	8003050 <LL_ADC_SetChannelSamplingTime+0x4c>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	617b      	str	r3, [r7, #20]
  return result;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e003      	b.n	800304e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	0e5b      	lsrs	r3, r3, #25
 8003054:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003058:	460b      	mov	r3, r1
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	1ad2      	subs	r2, r2, r3
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3314      	adds	r3, #20
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	0e5b      	lsrs	r3, r3, #25
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2107      	movs	r1, #7
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	401a      	ands	r2, r3
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	431a      	orrs	r2, r3
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800309c:	e00e      	b.n	80030bc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	43db      	mvns	r3, r3
 80030a8:	401a      	ands	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0219      	lsls	r1, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	400b      	ands	r3, r1
 80030b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	615a      	str	r2, [r3, #20]
}
 80030bc:	bf00      	nop
 80030be:	372c      	adds	r7, #44	@ 0x2c
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	46021000 	.word	0x46021000

080030cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0318 	and.w	r3, r3, #24
 80030ee:	4908      	ldr	r1, [pc, #32]	@ (8003110 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030f0:	40d9      	lsrs	r1, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	400b      	ands	r3, r1
 80030f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	000fffff 	.word	0x000fffff

08003114 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 031f 	and.w	r3, r3, #31
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800315c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6093      	str	r3, [r2, #8]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003184:	d101      	bne.n	800318a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031d4:	d101      	bne.n	80031da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <LL_ADC_IsEnabled+0x18>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_ADC_IsEnabled+0x1a>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003246:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d101      	bne.n	8003276 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d101      	bne.n	800329c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b08b      	sub	sp, #44	@ 0x2c
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2ce      	b.n	800386a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a95      	ldr	r2, [pc, #596]	@ (8003530 <HAL_ADC_Init+0x284>)
 80032da:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fe fa57 	bl	8001798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff37 	bl	8003170 <LL_ADC_IsDeepPowerDownEnabled>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff1d 	bl	800314c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff52 	bl	80031c0 <LL_ADC_IsInternalRegulatorEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d115      	bne.n	800334e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff36 	bl	8003198 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800332c:	4b81      	ldr	r3, [pc, #516]	@ (8003534 <HAL_ADC_Init+0x288>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	4a81      	ldr	r2, [pc, #516]	@ (8003538 <HAL_ADC_Init+0x28c>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	3301      	adds	r3, #1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003340:	e002      	b.n	8003348 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3b01      	subs	r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f9      	bne.n	8003342 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff34 	bl	80031c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10e      	bne.n	800337c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003362:	f043 0210 	orr.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800336e:	f043 0201 	orr.w	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff6c 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 8003386:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 825f 	bne.w	8003854 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f040 825b 	bne.w	8003854 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff2c 	bl	8003210 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d14f      	bne.n	800345e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003530 <HAL_ADC_Init+0x284>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d037      	beq.n	8003438 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a5b      	ldr	r2, [pc, #364]	@ (800353c <HAL_ADC_Init+0x290>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_ADC_Init+0x130>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003540 <HAL_ADC_Init+0x294>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10e      	bne.n	80033fa <HAL_ADC_Init+0x14e>
 80033dc:	4857      	ldr	r0, [pc, #348]	@ (800353c <HAL_ADC_Init+0x290>)
 80033de:	f7ff ff17 	bl	8003210 <LL_ADC_IsEnabled>
 80033e2:	4604      	mov	r4, r0
 80033e4:	4856      	ldr	r0, [pc, #344]	@ (8003540 <HAL_ADC_Init+0x294>)
 80033e6:	f7ff ff13 	bl	8003210 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	4323      	orrs	r3, r4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e008      	b.n	800340c <HAL_ADC_Init+0x160>
 80033fa:	484d      	ldr	r0, [pc, #308]	@ (8003530 <HAL_ADC_Init+0x284>)
 80033fc:	f7ff ff08 	bl	8003210 <LL_ADC_IsEnabled>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d026      	beq.n	800345e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a49      	ldr	r2, [pc, #292]	@ (800353c <HAL_ADC_Init+0x290>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_ADC_Init+0x178>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a48      	ldr	r2, [pc, #288]	@ (8003540 <HAL_ADC_Init+0x294>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <HAL_ADC_Init+0x17c>
 8003424:	4a47      	ldr	r2, [pc, #284]	@ (8003544 <HAL_ADC_Init+0x298>)
 8003426:	e000      	b.n	800342a <HAL_ADC_Init+0x17e>
 8003428:	4a47      	ldr	r2, [pc, #284]	@ (8003548 <HAL_ADC_Init+0x29c>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f7ff fbe9 	bl	8002c08 <LL_ADC_SetCommonClock>
 8003436:	e012      	b.n	800345e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7ff fc14 	bl	8002c70 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003448:	4b3f      	ldr	r3, [pc, #252]	@ (8003548 <HAL_ADC_Init+0x29c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003458:	493b      	ldr	r1, [pc, #236]	@ (8003548 <HAL_ADC_Init+0x29c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a33      	ldr	r2, [pc, #204]	@ (8003530 <HAL_ADC_Init+0x284>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d010      	beq.n	800348a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800346e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003474:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800347a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003482:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003484:	4313      	orrs	r3, r2
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	e035      	b.n	80034f6 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7f1b      	ldrb	r3, [r3, #28]
 800348e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003496:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003498:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800349e:	2a00      	cmp	r2, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_ADC_Init+0x1fc>
 80034a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034a6:	e000      	b.n	80034aa <HAL_ADC_Init+0x1fe>
 80034a8:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034aa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80034b0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da04      	bge.n	80034c4 <HAL_ADC_Init+0x218>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c2:	e001      	b.n	80034c8 <HAL_ADC_Init+0x21c>
 80034c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80034c8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	491b      	ldr	r1, [pc, #108]	@ (800353c <HAL_ADC_Init+0x290>)
 80034d0:	428b      	cmp	r3, r1
 80034d2:	d004      	beq.n	80034de <HAL_ADC_Init+0x232>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4919      	ldr	r1, [pc, #100]	@ (8003540 <HAL_ADC_Init+0x294>)
 80034da:	428b      	cmp	r3, r1
 80034dc:	d103      	bne.n	80034e6 <HAL_ADC_Init+0x23a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e4:	e003      	b.n	80034ee <HAL_ADC_Init+0x242>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ec:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80034ee:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d131      	bne.n	8003564 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <HAL_ADC_Init+0x284>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	3b01      	subs	r3, #1
 8003510:	045b      	lsls	r3, r3, #17
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	4313      	orrs	r3, r2
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	e024      	b.n	8003564 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d113      	bne.n	800354c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	e01a      	b.n	8003564 <HAL_ADC_Init+0x2b8>
 800352e:	bf00      	nop
 8003530:	46021000 	.word	0x46021000
 8003534:	20000000 	.word	0x20000000
 8003538:	053e2d63 	.word	0x053e2d63
 800353c:	42028000 	.word	0x42028000
 8003540:	42028100 	.word	0x42028100
 8003544:	42028300 	.word	0x42028300
 8003548:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a75      	ldr	r2, [pc, #468]	@ (8003740 <HAL_ADC_Init+0x494>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	4313      	orrs	r3, r2
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	4313      	orrs	r3, r2
 8003588:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	4b6c      	ldr	r3, [pc, #432]	@ (8003744 <HAL_ADC_Init+0x498>)
 8003592:	4013      	ands	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	6a39      	ldr	r1, [r7, #32]
 800359a:	430b      	orrs	r3, r1
 800359c:	60d3      	str	r3, [r2, #12]
 800359e:	e031      	b.n	8003604 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ac:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	4313      	orrs	r3, r2
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4b61      	ldr	r3, [pc, #388]	@ (8003748 <HAL_ADC_Init+0x49c>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6a39      	ldr	r1, [r7, #32]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4d      	ldr	r2, [pc, #308]	@ (8003740 <HAL_ADC_Init+0x494>)
 800360a:	4293      	cmp	r3, r2
 800360c:	f000 80a4 	beq.w	8003758 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fe22 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 800361a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fe2f 	bl	8003284 <LL_ADC_INJ_IsConversionOngoing>
 8003626:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d166      	bne.n	80036fc <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d163      	bne.n	80036fc <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7f1b      	ldrb	r3, [r3, #28]
 8003638:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4943      	ldr	r1, [pc, #268]	@ (800374c <HAL_ADC_Init+0x4a0>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d004      	beq.n	800364e <HAL_ADC_Init+0x3a2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4941      	ldr	r1, [pc, #260]	@ (8003750 <HAL_ADC_Init+0x4a4>)
 800364a:	428b      	cmp	r3, r1
 800364c:	d102      	bne.n	8003654 <HAL_ADC_Init+0x3a8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003652:	e002      	b.n	800365a <HAL_ADC_Init+0x3ae>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800365a:	4313      	orrs	r3, r2
 800365c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003668:	f023 0303 	bic.w	r3, r3, #3
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	6a39      	ldr	r1, [r7, #32]
 8003672:	430b      	orrs	r3, r1
 8003674:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f7ff fb99 	bl	8002dc0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003694:	2b01      	cmp	r3, #1
 8003696:	d11e      	bne.n	80036d6 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369c:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003754 <HAL_ADC_Init+0x4a8>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80036ac:	0411      	lsls	r1, r2, #16
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80036b8:	4311      	orrs	r1, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80036be:	4311      	orrs	r1, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036c4:	0892      	lsrs	r2, r2, #2
 80036c6:	430a      	orrs	r2, r1
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	611a      	str	r2, [r3, #16]
 80036d4:	e007      	b.n	80036e6 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10c      	bne.n	800371e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f023 010f 	bic.w	r1, r3, #15
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
 800371c:	e007      	b.n	800372e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 020f 	bic.w	r2, r2, #15
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800373e:	e092      	b.n	8003866 <HAL_ADC_Init+0x5ba>
 8003740:	46021000 	.word	0x46021000
 8003744:	fff0c013 	.word	0xfff0c013
 8003748:	ffde800d 	.word	0xffde800d
 800374c:	42028000 	.word	0x42028000
 8003750:	42028100 	.word	0x42028100
 8003754:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800375e:	2b01      	cmp	r3, #1
 8003760:	d111      	bne.n	8003786 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800376a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003770:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003776:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	4313      	orrs	r3, r2
 800377c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b39      	ldr	r3, [pc, #228]	@ (8003874 <HAL_ADC_Init+0x5c8>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	69f9      	ldr	r1, [r7, #28]
 8003796:	430b      	orrs	r3, r1
 8003798:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a2:	461a      	mov	r2, r3
 80037a4:	2100      	movs	r1, #0
 80037a6:	f7ff fb2e 	bl	8002e06 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	461a      	mov	r2, r3
 80037b4:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80037b8:	f7ff fb25 	bl	8002e06 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d108      	bne.n	80037d6 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f062 020f 	orn	r2, r2, #15
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80037d4:	e018      	b.n	8003808 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037de:	d113      	bne.n	8003808 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f003 031c 	and.w	r3, r3, #28
 80037f2:	f06f 020f 	mvn.w	r2, #15
 80037f6:	fa02 f103 	lsl.w	r1, r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <HAL_ADC_Init+0x5cc>)
 8003810:	4013      	ands	r3, r2
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	429a      	cmp	r2, r3
 8003816:	d10b      	bne.n	8003830 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800382e:	e01a      	b.n	8003866 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003834:	f023 0312 	bic.w	r3, r3, #18
 8003838:	f043 0210 	orr.w	r2, r3, #16
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003852:	e008      	b.n	8003866 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003858:	f043 0210 	orr.w	r2, r3, #16
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800386a:	4618      	mov	r0, r3
 800386c:	372c      	adds	r7, #44	@ 0x2c
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	f7fffc02 	.word	0xf7fffc02
 8003878:	833ffff3 	.word	0x833ffff3

0800387c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0a2      	sub	sp, #136	@ 0x88
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a98      	ldr	r2, [pc, #608]	@ (8003af0 <HAL_ADC_Start_DMA+0x274>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_ADC_Start_DMA+0x20>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a97      	ldr	r2, [pc, #604]	@ (8003af4 <HAL_ADC_Start_DMA+0x278>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_Start_DMA+0x24>
 800389c:	4b96      	ldr	r3, [pc, #600]	@ (8003af8 <HAL_ADC_Start_DMA+0x27c>)
 800389e:	e000      	b.n	80038a2 <HAL_ADC_Start_DMA+0x26>
 80038a0:	4b96      	ldr	r3, [pc, #600]	@ (8003afc <HAL_ADC_Start_DMA+0x280>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fc36 	bl	8003114 <LL_ADC_GetMultimode>
 80038a8:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fcd5 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 8111 	bne.w	8003ade <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_Start_DMA+0x4e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e10e      	b.n	8003ae8 <HAL_ADC_Start_DMA+0x26c>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d003      	beq.n	80038e6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038e0:	2b09      	cmp	r3, #9
 80038e2:	f040 80f4 	bne.w	8003ace <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f001 fa2c 	bl	8004d44 <ADC_Enable>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038f2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 80e4 	bne.w	8003ac4 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003900:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7a      	ldr	r2, [pc, #488]	@ (8003b00 <HAL_ADC_Start_DMA+0x284>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d026      	beq.n	8003968 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	@ (8003af4 <HAL_ADC_Start_DMA+0x278>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d002      	beq.n	800392a <HAL_ADC_Start_DMA+0xae>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	e000      	b.n	800392c <HAL_ADC_Start_DMA+0xb0>
 800392a:	4b71      	ldr	r3, [pc, #452]	@ (8003af0 <HAL_ADC_Start_DMA+0x274>)
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	4293      	cmp	r3, r2
 8003932:	d002      	beq.n	800393a <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003934:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800393e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800394a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003956:	f023 0206 	bic.w	r2, r3, #6
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800395e:	e006      	b.n	800396e <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003966:	e002      	b.n	800396e <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a64      	ldr	r2, [pc, #400]	@ (8003b04 <HAL_ADC_Start_DMA+0x288>)
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	4a63      	ldr	r2, [pc, #396]	@ (8003b08 <HAL_ADC_Start_DMA+0x28c>)
 800397c:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	4a62      	ldr	r2, [pc, #392]	@ (8003b0c <HAL_ADC_Start_DMA+0x290>)
 8003984:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	221c      	movs	r2, #28
 800398c:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0210 	orr.w	r2, r2, #16
 80039a4:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a55      	ldr	r2, [pc, #340]	@ (8003b00 <HAL_ADC_Start_DMA+0x284>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d107      	bne.n	80039c0 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04f      	beq.n	8003a6e <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d046      	beq.n	8003a66 <HAL_ADC_Start_DMA+0x1ea>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d040      	beq.n	8003a66 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	f107 0310 	add.w	r3, r7, #16
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f002 fdf8 	bl	80065e8 <HAL_DMAEx_List_GetNodeConfig>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e072      	b.n	8003ae8 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d104      	bne.n	8003a12 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a10:	e00a      	b.n	8003a28 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d104      	bne.n	8003a22 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a20:	e002      	b.n	8003a28 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a34:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 fd1b 	bl	8006494 <HAL_DMAEx_List_Start_IT>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003a64:	e028      	b.n	8003ab8 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003a6c:	e024      	b.n	8003ab8 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d104      	bne.n	8003a82 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a80:	e00c      	b.n	8003a9c <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d104      	bne.n	8003a96 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a94:	e002      	b.n	8003a9c <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3340      	adds	r3, #64	@ 0x40
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aae:	f001 fd5f 	bl	8005570 <HAL_DMA_Start_IT>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fbba 	bl	8003236 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ac2:	e00f      	b.n	8003ae4 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003acc:	e00a      	b.n	8003ae4 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003adc:	e002      	b.n	8003ae4 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003ae4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3788      	adds	r7, #136	@ 0x88
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	42028000 	.word	0x42028000
 8003af4:	42028100 	.word	0x42028100
 8003af8:	42028300 	.word	0x42028300
 8003afc:	46021300 	.word	0x46021300
 8003b00:	46021000 	.word	0x46021000
 8003b04:	08004e79 	.word	0x08004e79
 8003b08:	08004f51 	.word	0x08004f51
 8003b0c:	08004f6d 	.word	0x08004f6d

08003b10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a77      	ldr	r2, [pc, #476]	@ (8003d10 <HAL_ADC_IRQHandler+0x200>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x30>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a76      	ldr	r2, [pc, #472]	@ (8003d14 <HAL_ADC_IRQHandler+0x204>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_IRQHandler+0x34>
 8003b40:	4b75      	ldr	r3, [pc, #468]	@ (8003d18 <HAL_ADC_IRQHandler+0x208>)
 8003b42:	e000      	b.n	8003b46 <HAL_ADC_IRQHandler+0x36>
 8003b44:	4b75      	ldr	r3, [pc, #468]	@ (8003d1c <HAL_ADC_IRQHandler+0x20c>)
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fae4 	bl	8003114 <LL_ADC_GetMultimode>
 8003b4c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <HAL_ADC_IRQHandler+0x78>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d012      	beq.n	8003b88 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b72:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f001 fa2e 	bl	8004fdc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2202      	movs	r2, #2
 8003b86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_ADC_IRQHandler+0x8c>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80d1 	beq.w	8003d4a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80cb 	beq.w	8003d4a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a53      	ldr	r2, [pc, #332]	@ (8003d20 <HAL_ADC_IRQHandler+0x210>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d06c      	beq.n	8003cb0 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff f932 	bl	8002e44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80aa 	beq.w	8003d3c <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a49      	ldr	r2, [pc, #292]	@ (8003d14 <HAL_ADC_IRQHandler+0x204>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d002      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0xe8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	e000      	b.n	8003bfa <HAL_ADC_IRQHandler+0xea>
 8003bf8:	4b45      	ldr	r3, [pc, #276]	@ (8003d10 <HAL_ADC_IRQHandler+0x200>)
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d008      	beq.n	8003c14 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d002      	beq.n	8003c14 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d104      	bne.n	8003c1e <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	e00c      	b.n	8003c38 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3c      	ldr	r2, [pc, #240]	@ (8003d14 <HAL_ADC_IRQHandler+0x204>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d002      	beq.n	8003c2e <HAL_ADC_IRQHandler+0x11e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	e000      	b.n	8003c30 <HAL_ADC_IRQHandler+0x120>
 8003c2e:	4b38      	ldr	r3, [pc, #224]	@ (8003d10 <HAL_ADC_IRQHandler+0x200>)
 8003c30:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d17c      	bne.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d175      	bne.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fb02 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11a      	bne.n	8003c96 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020c 	bic.w	r2, r2, #12
 8003c6e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d159      	bne.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	679a      	str	r2, [r3, #120]	@ 0x78
 8003c94:	e052      	b.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c9a:	f043 0210 	orr.w	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003cae:	e045      	b.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff f8c5 	bl	8002e44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03d      	beq.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d138      	bne.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d131      	bne.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fabe 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11d      	bne.n	8003d24 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020c 	bic.w	r2, r2, #12
 8003cf6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	679a      	str	r2, [r3, #120]	@ 0x78
 8003d0c:	e016      	b.n	8003d3c <HAL_ADC_IRQHandler+0x22c>
 8003d0e:	bf00      	nop
 8003d10:	42028000 	.word	0x42028000
 8003d14:	42028100 	.word	0x42028100
 8003d18:	42028300 	.word	0x42028300
 8003d1c:	46021300 	.word	0x46021300
 8003d20:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d28:	f043 0220 	orr.w	r2, r3, #32
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f99d 	bl	800407c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	220c      	movs	r2, #12
 8003d48:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a8c      	ldr	r2, [pc, #560]	@ (8003f80 <HAL_ADC_IRQHandler+0x470>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	f000 8095 	beq.w	8003e80 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_ADC_IRQHandler+0x25a>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8085 	beq.w	8003e80 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d07f      	beq.n	8003e80 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff f91e 	bl	8002fde <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003da2:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff f84b 	bl	8002e44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dae:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a73      	ldr	r2, [pc, #460]	@ (8003f84 <HAL_ADC_IRQHandler+0x474>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d002      	beq.n	8003dc0 <HAL_ADC_IRQHandler+0x2b0>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	e000      	b.n	8003dc2 <HAL_ADC_IRQHandler+0x2b2>
 8003dc0:	4b71      	ldr	r3, [pc, #452]	@ (8003f88 <HAL_ADC_IRQHandler+0x478>)
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d008      	beq.n	8003ddc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d002      	beq.n	8003ddc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b07      	cmp	r3, #7
 8003dda:	d104      	bne.n	8003de6 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	e00c      	b.n	8003e00 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a66      	ldr	r2, [pc, #408]	@ (8003f84 <HAL_ADC_IRQHandler+0x474>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d002      	beq.n	8003df6 <HAL_ADC_IRQHandler+0x2e6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	e000      	b.n	8003df8 <HAL_ADC_IRQHandler+0x2e8>
 8003df6:	4b64      	ldr	r3, [pc, #400]	@ (8003f88 <HAL_ADC_IRQHandler+0x478>)
 8003df8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d035      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x310>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02d      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d128      	bne.n	8003e72 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	2b40      	cmp	r3, #64	@ 0x40
 8003e2c:	d121      	bne.n	8003e72 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fa26 	bl	8003284 <LL_ADC_INJ_IsConversionOngoing>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d119      	bne.n	8003e72 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e4c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e6a:	f043 0201 	orr.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 f894 	bl	8004fa0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2260      	movs	r2, #96	@ 0x60
 8003e7e:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d011      	beq.n	8003eae <HAL_ADC_IRQHandler+0x39e>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00c      	beq.n	8003eae <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f8ff 	bl	80040a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2280      	movs	r2, #128	@ 0x80
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d012      	beq.n	8003ede <HAL_ADC_IRQHandler+0x3ce>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ec6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f001 f870 	bl	8004fb4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_ADC_IRQHandler+0x3fe>
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f001 f862 	bl	8004fc8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05d      	beq.n	8003fd4 <HAL_ADC_IRQHandler+0x4c4>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d058      	beq.n	8003fd4 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2e:	e03b      	b.n	8003fa8 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a12      	ldr	r2, [pc, #72]	@ (8003f80 <HAL_ADC_IRQHandler+0x470>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <HAL_ADC_IRQHandler+0x478>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_ADC_IRQHandler+0x444>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f84 <HAL_ADC_IRQHandler+0x474>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x448>
 8003f54:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <HAL_ADC_IRQHandler+0x47c>)
 8003f56:	e000      	b.n	8003f5a <HAL_ADC_IRQHandler+0x44a>
 8003f58:	4b0d      	ldr	r3, [pc, #52]	@ (8003f90 <HAL_ADC_IRQHandler+0x480>)
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f8e8 	bl	8003130 <LL_ADC_GetMultiDMATransfer>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003f66:	2301      	movs	r3, #1
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f6a:	e01d      	b.n	8003fa8 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7e:	e013      	b.n	8003fa8 <HAL_ADC_IRQHandler+0x498>
 8003f80:	46021000 	.word	0x46021000
 8003f84:	42028100 	.word	0x42028100
 8003f88:	42028000 	.word	0x42028000
 8003f8c:	42028300 	.word	0x42028300
 8003f90:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff f812 	bl	8002fc2 <LL_ADC_REG_GetDMATransfer>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10e      	bne.n	8003fcc <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbe:	f043 0202 	orr.w	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f876 	bl	80040b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01b      	beq.n	8004016 <HAL_ADC_IRQHandler+0x506>
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f877 	bl	80040f4 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a17      	ldr	r2, [pc, #92]	@ (8004078 <HAL_ADC_IRQHandler+0x568>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d126      	bne.n	800406e <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_ADC_IRQHandler+0x534>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f849 	bl	80040cc <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004042:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00f      	beq.n	800406e <HAL_ADC_IRQHandler+0x55e>
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f841 	bl	80040e0 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800406c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800406e:	bf00      	nop
 8004070:	3728      	adds	r7, #40	@ 0x28
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	46021000 	.word	0x46021000

0800407c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b0b7      	sub	sp, #220	@ 0xdc
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4aa8      	ldr	r2, [pc, #672]	@ (80043c4 <HAL_ADC_ConfigChannel+0x2bc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d103      	bne.n	800412e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004134:	2b01      	cmp	r3, #1
 8004136:	d102      	bne.n	800413e <HAL_ADC_ConfigChannel+0x36>
 8004138:	2302      	movs	r3, #2
 800413a:	f000 bdfe 	b.w	8004d3a <HAL_ADC_ConfigChannel+0xc32>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff f887 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 85c1 	bne.w	8004cda <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a99      	ldr	r2, [pc, #612]	@ (80043c4 <HAL_ADC_ConfigChannel+0x2bc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	f000 8409 	beq.w	8004976 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x7a>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2201      	movs	r2, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	e01d      	b.n	80041be <HAL_ADC_ConfigChannel+0xb6>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800419a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800419e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80041a6:	2320      	movs	r3, #32
 80041a8:	e004      	b.n	80041b4 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80041aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2201      	movs	r2, #1
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	69d1      	ldr	r1, [r2, #28]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	f7fe fe47 	bl	8002e6c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff f83b 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 80041e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff f847 	bl	8003284 <LL_ADC_INJ_IsConversionOngoing>
 80041f6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 81df 	bne.w	80045c2 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 81da 	bne.w	80045c2 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fe fef2 	bl	8003004 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b04      	cmp	r3, #4
 8004240:	d046      	beq.n	80042d0 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6919      	ldr	r1, [r3, #16]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004252:	f7fe fd2d 	bl	8002cb0 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6919      	ldr	r1, [r3, #16]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	461a      	mov	r2, r3
 8004264:	f7fe fd5b 	bl	8002d1e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	7e9b      	ldrb	r3, [r3, #26]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d11e      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x17e>
 8004280:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004284:	e000      	b.n	8004288 <HAL_ADC_ConfigChannel+0x180>
 8004286:	2300      	movs	r3, #0
 8004288:	461a      	mov	r2, r3
 800428a:	f7fe fd7e 	bl	8002d8a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800429a:	2b01      	cmp	r3, #1
 800429c:	d102      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x19c>
 800429e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80042a2:	e000      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x19e>
 80042a4:	2300      	movs	r3, #0
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7fe fd54 	bl	8002d54 <LL_ADC_SetOffsetSignedSaturation>
 80042ac:	e189      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2200      	movs	r2, #0
 80042b8:	4619      	mov	r1, r3
 80042ba:	f7fe fd66 	bl	8002d8a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2200      	movs	r2, #0
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fe fd43 	bl	8002d54 <LL_ADC_SetOffsetSignedSaturation>
 80042ce:	e178      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2100      	movs	r1, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fd0b 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 80042dc:	4603      	mov	r3, r0
 80042de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x1f4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe fd00 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 80042f2:	4603      	mov	r3, r0
 80042f4:	0e9b      	lsrs	r3, r3, #26
 80042f6:	f003 021f 	and.w	r2, r3, #31
 80042fa:	e01e      	b.n	800433a <HAL_ADC_ConfigChannel+0x232>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fcf5 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 8004308:	4603      	mov	r3, r0
 800430a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800431a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800431e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004322:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800432a:	2320      	movs	r3, #32
 800432c:	e004      	b.n	8004338 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800432e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x24a>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0e9b      	lsrs	r3, r3, #26
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	e018      	b.n	8004384 <HAL_ADC_ConfigChannel+0x27c>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004366:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800436a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800436e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004376:	2320      	movs	r3, #32
 8004378:	e004      	b.n	8004384 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800437a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2300      	movs	r3, #0
 8004392:	2100      	movs	r1, #0
 8004394:	f7fe fc8c 	bl	8002cb0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fca7 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x2c0>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fc9c 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 80043ba:	4603      	mov	r3, r0
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	f003 021f 	and.w	r2, r3, #31
 80043c2:	e020      	b.n	8004406 <HAL_ADC_ConfigChannel+0x2fe>
 80043c4:	46021000 	.word	0x46021000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2101      	movs	r1, #1
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fc8f 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80043e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80043ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e004      	b.n	8004404 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80043fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d105      	bne.n	800441e <HAL_ADC_ConfigChannel+0x316>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	e018      	b.n	8004450 <HAL_ADC_ConfigChannel+0x348>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800443a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004442:	2320      	movs	r3, #32
 8004444:	e004      	b.n	8004450 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004450:	429a      	cmp	r2, r3
 8004452:	d107      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2300      	movs	r3, #0
 800445e:	2101      	movs	r1, #1
 8004460:	f7fe fc26 	bl	8002cb0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fc41 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 8004470:	4603      	mov	r3, r0
 8004472:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x388>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fc36 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 8004486:	4603      	mov	r3, r0
 8004488:	0e9b      	lsrs	r3, r3, #26
 800448a:	f003 021f 	and.w	r2, r3, #31
 800448e:	e01a      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x3be>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2102      	movs	r1, #2
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fc2b 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 800449c:	4603      	mov	r3, r0
 800449e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80044a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80044ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80044b6:	2320      	movs	r3, #32
 80044b8:	e004      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80044ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <HAL_ADC_ConfigChannel+0x3d6>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	0e9b      	lsrs	r3, r3, #26
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	e011      	b.n	8004502 <HAL_ADC_ConfigChannel+0x3fa>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e6:	fa93 f3a3 	rbit	r3, r3
 80044ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80044ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80044f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80044f6:	2320      	movs	r3, #32
 80044f8:	e003      	b.n	8004502 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80044fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044fc:	fab3 f383 	clz	r3, r3
 8004500:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004502:	429a      	cmp	r2, r3
 8004504:	d107      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2300      	movs	r3, #0
 8004510:	2102      	movs	r1, #2
 8004512:	f7fe fbcd 	bl	8002cb0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2103      	movs	r1, #3
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe fbe8 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 8004522:	4603      	mov	r3, r0
 8004524:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x43a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2103      	movs	r1, #3
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fbdd 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 8004538:	4603      	mov	r3, r0
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	e017      	b.n	8004572 <HAL_ADC_ConfigChannel+0x46a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2103      	movs	r1, #3
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe fbd2 	bl	8002cf2 <LL_ADC_GetOffsetChannel>
 800454e:	4603      	mov	r3, r0
 8004550:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800455a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800455c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800455e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004564:	2320      	movs	r3, #32
 8004566:	e003      	b.n	8004570 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <HAL_ADC_ConfigChannel+0x482>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0e9b      	lsrs	r3, r3, #26
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	e011      	b.n	80045ae <HAL_ADC_ConfigChannel+0x4a6>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800459c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80045a2:	2320      	movs	r3, #32
 80045a4:	e003      	b.n	80045ae <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80045a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d107      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	2103      	movs	r1, #3
 80045be:	f7fe fb77 	bl	8002cb0 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fe22 	bl	8003210 <LL_ADC_IsEnabled>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 83ad 	bne.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f7fe fd73 	bl	80030cc <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045ee:	f040 80d6 	bne.w	800479e <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x50e>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	3301      	adds	r3, #1
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2b09      	cmp	r3, #9
 800460c:	bf94      	ite	ls
 800460e:	2301      	movls	r3, #1
 8004610:	2300      	movhi	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e019      	b.n	800464a <HAL_ADC_ConfigChannel+0x542>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004626:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800462e:	2320      	movs	r3, #32
 8004630:	e003      	b.n	800463a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	3301      	adds	r3, #1
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2b09      	cmp	r3, #9
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d04d      	beq.n	80046ea <HAL_ADC_ConfigChannel+0x5e2>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <HAL_ADC_ConfigChannel+0x562>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0e9b      	lsrs	r3, r3, #26
 8004660:	3301      	adds	r3, #1
 8004662:	069b      	lsls	r3, r3, #26
 8004664:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004668:	e015      	b.n	8004696 <HAL_ADC_ConfigChannel+0x58e>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004682:	2320      	movs	r3, #32
 8004684:	e003      	b.n	800468e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	3301      	adds	r3, #1
 8004690:	069b      	lsls	r3, r3, #26
 8004692:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x5ae>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0e9b      	lsrs	r3, r3, #26
 80046a8:	3301      	adds	r3, #1
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2101      	movs	r1, #1
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	e017      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x5de>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80046c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80046ce:	2320      	movs	r3, #32
 80046d0:	e003      	b.n	80046da <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80046d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3301      	adds	r3, #1
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	4313      	orrs	r3, r2
 80046e8:	e04e      	b.n	8004788 <HAL_ADC_ConfigChannel+0x680>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d107      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x5fe>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	0e9b      	lsrs	r3, r3, #26
 80046fc:	3301      	adds	r3, #1
 80046fe:	069b      	lsls	r3, r3, #26
 8004700:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004704:	e015      	b.n	8004732 <HAL_ADC_ConfigChannel+0x62a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800471e:	2320      	movs	r3, #32
 8004720:	e003      	b.n	800472a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004724:	fab3 f383 	clz	r3, r3
 8004728:	b2db      	uxtb	r3, r3
 800472a:	3301      	adds	r3, #1
 800472c:	069b      	lsls	r3, r3, #26
 800472e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x64a>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	0e9b      	lsrs	r3, r3, #26
 8004744:	3301      	adds	r3, #1
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	e017      	b.n	8004782 <HAL_ADC_ConfigChannel+0x67a>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	61bb      	str	r3, [r7, #24]
  return result;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e003      	b.n	8004776 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3301      	adds	r3, #1
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2101      	movs	r1, #1
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	4313      	orrs	r3, r2
 8004784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	461a      	mov	r2, r3
 8004796:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800479a:	f7fe fc33 	bl	8003004 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f280 82c3 	bge.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a92      	ldr	r2, [pc, #584]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_ADC_ConfigChannel+0x6b4>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a91      	ldr	r2, [pc, #580]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x6b8>
 80047bc:	4b90      	ldr	r3, [pc, #576]	@ (8004a00 <HAL_ADC_ConfigChannel+0x8f8>)
 80047be:	e000      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x6ba>
 80047c0:	4b90      	ldr	r3, [pc, #576]	@ (8004a04 <HAL_ADC_ConfigChannel+0x8fc>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fa46 	bl	8002c54 <LL_ADC_GetCommonPathInternalCh>
 80047c8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a89      	ldr	r2, [pc, #548]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_ADC_ConfigChannel+0x6d8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a88      	ldr	r2, [pc, #544]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10e      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x6f6>
 80047e0:	4885      	ldr	r0, [pc, #532]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 80047e2:	f7fe fd15 	bl	8003210 <LL_ADC_IsEnabled>
 80047e6:	4604      	mov	r4, r0
 80047e8:	4884      	ldr	r0, [pc, #528]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 80047ea:	f7fe fd11 	bl	8003210 <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4323      	orrs	r3, r4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	e008      	b.n	8004810 <HAL_ADC_ConfigChannel+0x708>
 80047fe:	4882      	ldr	r0, [pc, #520]	@ (8004a08 <HAL_ADC_ConfigChannel+0x900>)
 8004800:	f7fe fd06 	bl	8003210 <LL_ADC_IsEnabled>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf0c      	ite	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	2300      	movne	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80a6 	beq.w	8004962 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a0c <HAL_ADC_ConfigChannel+0x904>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d13c      	bne.n	800489a <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004824:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d136      	bne.n	800489a <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a71      	ldr	r2, [pc, #452]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00a      	beq.n	800484c <HAL_ADC_ConfigChannel+0x744>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a70      	ldr	r2, [pc, #448]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d005      	beq.n	800484c <HAL_ADC_ConfigChannel+0x744>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a70      	ldr	r2, [pc, #448]	@ (8004a08 <HAL_ADC_ConfigChannel+0x900>)
 8004846:	4293      	cmp	r3, r2
 8004848:	f040 826e 	bne.w	8004d28 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a69      	ldr	r2, [pc, #420]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_ADC_ConfigChannel+0x758>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a68      	ldr	r2, [pc, #416]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x75c>
 8004860:	4a67      	ldr	r2, [pc, #412]	@ (8004a00 <HAL_ADC_ConfigChannel+0x8f8>)
 8004862:	e000      	b.n	8004866 <HAL_ADC_ConfigChannel+0x75e>
 8004864:	4a67      	ldr	r2, [pc, #412]	@ (8004a04 <HAL_ADC_ConfigChannel+0x8fc>)
 8004866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f7fe f9dc 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004876:	4b66      	ldr	r3, [pc, #408]	@ (8004a10 <HAL_ADC_ConfigChannel+0x908>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	4a65      	ldr	r2, [pc, #404]	@ (8004a14 <HAL_ADC_ConfigChannel+0x90c>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	3301      	adds	r3, #1
 8004886:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004888:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800488a:	e002      	b.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	3b01      	subs	r3, #1
 8004890:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f9      	bne.n	800488c <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004898:	e246      	b.n	8004d28 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a18 <HAL_ADC_ConfigChannel+0x910>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d12b      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d125      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a50      	ldr	r2, [pc, #320]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00a      	beq.n	80048d0 <HAL_ADC_ConfigChannel+0x7c8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4f      	ldr	r2, [pc, #316]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d005      	beq.n	80048d0 <HAL_ADC_ConfigChannel+0x7c8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004a08 <HAL_ADC_ConfigChannel+0x900>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f040 822e 	bne.w	8004d2c <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a48      	ldr	r2, [pc, #288]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_ADC_ConfigChannel+0x7dc>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a47      	ldr	r2, [pc, #284]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x7e0>
 80048e4:	4a46      	ldr	r2, [pc, #280]	@ (8004a00 <HAL_ADC_ConfigChannel+0x8f8>)
 80048e6:	e000      	b.n	80048ea <HAL_ADC_ConfigChannel+0x7e2>
 80048e8:	4a46      	ldr	r2, [pc, #280]	@ (8004a04 <HAL_ADC_ConfigChannel+0x8fc>)
 80048ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe f99a 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048fa:	e217      	b.n	8004d2c <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a46      	ldr	r2, [pc, #280]	@ (8004a1c <HAL_ADC_ConfigChannel+0x914>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f040 8213 	bne.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800490c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004910:	2b00      	cmp	r3, #0
 8004912:	f040 820c 	bne.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a37      	ldr	r2, [pc, #220]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00a      	beq.n	8004936 <HAL_ADC_ConfigChannel+0x82e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a35      	ldr	r2, [pc, #212]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d005      	beq.n	8004936 <HAL_ADC_ConfigChannel+0x82e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a36      	ldr	r2, [pc, #216]	@ (8004a08 <HAL_ADC_ConfigChannel+0x900>)
 8004930:	4293      	cmp	r3, r2
 8004932:	f040 81fc 	bne.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2f      	ldr	r2, [pc, #188]	@ (80049f8 <HAL_ADC_ConfigChannel+0x8f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_ADC_ConfigChannel+0x842>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <HAL_ADC_ConfigChannel+0x8f4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_ADC_ConfigChannel+0x846>
 800494a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a00 <HAL_ADC_ConfigChannel+0x8f8>)
 800494c:	e000      	b.n	8004950 <HAL_ADC_ConfigChannel+0x848>
 800494e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a04 <HAL_ADC_ConfigChannel+0x8fc>)
 8004950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f7fe f967 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
 8004960:	e1e5      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004974:	e1db      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b02      	cmp	r3, #2
 8004984:	f000 811b 	beq.w	8004bbe <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004990:	d004      	beq.n	800499c <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004996:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <HAL_ADC_ConfigChannel+0x918>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d107      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fac1 	bl	8002f2c <LL_ADC_REG_SetSequencerChAdd>
 80049aa:	e059      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	210f      	movs	r1, #15
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	401a      	ands	r2, r3
 80049c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80049c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x8d4>
 80049d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	e027      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x924>
 80049dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80049e0:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	60fb      	str	r3, [r7, #12]
  return result;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d117      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80049f4:	2320      	movs	r3, #32
 80049f6:	e019      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x924>
 80049f8:	42028000 	.word	0x42028000
 80049fc:	42028100 	.word	0x42028100
 8004a00:	42028300 	.word	0x42028300
 8004a04:	46021300 	.word	0x46021300
 8004a08:	46021000 	.word	0x46021000
 8004a0c:	ce080000 	.word	0xce080000
 8004a10:	20000000 	.word	0x20000000
 8004a14:	053e2d63 	.word	0x053e2d63
 8004a18:	ca040000 	.word	0xca040000
 8004a1c:	80000001 	.word	0x80000001
 8004a20:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	6849      	ldr	r1, [r1, #4]
 8004a30:	f001 011f 	and.w	r1, r1, #31
 8004a34:	408b      	lsls	r3, r1
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d808      	bhi.n	8004a60 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7fe fa06 	bl	8002e6c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004a6e:	f7fe fac9 	bl	8003004 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f280 8159 	bge.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a9b      	ldr	r2, [pc, #620]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_ADC_ConfigChannel+0x988>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a9a      	ldr	r2, [pc, #616]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x98c>
 8004a90:	4b99      	ldr	r3, [pc, #612]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004a92:	e000      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x98e>
 8004a94:	4b99      	ldr	r3, [pc, #612]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe f8dc 	bl	8002c54 <LL_ADC_GetCommonPathInternalCh>
 8004a9c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a96      	ldr	r2, [pc, #600]	@ (8004d00 <HAL_ADC_ConfigChannel+0xbf8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d12b      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d125      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a8d      	ldr	r2, [pc, #564]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_ADC_ConfigChannel+0x9c2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a8b      	ldr	r2, [pc, #556]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <HAL_ADC_ConfigChannel+0x9c6>
 8004aca:	4a8b      	ldr	r2, [pc, #556]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004acc:	e000      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x9c8>
 8004ace:	4a8b      	ldr	r2, [pc, #556]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ad4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f7fe f8a7 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004ae0:	4b88      	ldr	r3, [pc, #544]	@ (8004d04 <HAL_ADC_ConfigChannel+0xbfc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	4a88      	ldr	r2, [pc, #544]	@ (8004d08 <HAL_ADC_ConfigChannel+0xc00>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	099b      	lsrs	r3, r3, #6
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004af2:	e002      	b.n	8004afa <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f9      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004b00:	e045      	b.n	8004b8e <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a81      	ldr	r2, [pc, #516]	@ (8004d0c <HAL_ADC_ConfigChannel+0xc04>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d11b      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a74      	ldr	r2, [pc, #464]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0xa24>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a73      	ldr	r2, [pc, #460]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0xa28>
 8004b2c:	4a72      	ldr	r2, [pc, #456]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b2e:	e000      	b.n	8004b32 <HAL_ADC_ConfigChannel+0xa2a>
 8004b30:	4a72      	ldr	r2, [pc, #456]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004b32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f7fe f876 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
 8004b42:	e024      	b.n	8004b8e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a71      	ldr	r2, [pc, #452]	@ (8004d10 <HAL_ADC_ConfigChannel+0xc08>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d11f      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d115      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a64      	ldr	r2, [pc, #400]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_ADC_ConfigChannel+0xa66>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a62      	ldr	r2, [pc, #392]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0xa6a>
 8004b6e:	4a62      	ldr	r2, [pc, #392]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b70:	e000      	b.n	8004b74 <HAL_ADC_ConfigChannel+0xa6c>
 8004b72:	4a62      	ldr	r2, [pc, #392]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7fe f855 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
 8004b84:	e003      	b.n	8004b8e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a62      	ldr	r2, [pc, #392]	@ (8004d14 <HAL_ADC_ConfigChannel+0xc0c>)
 8004b8c:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a61      	ldr	r2, [pc, #388]	@ (8004d18 <HAL_ADC_ConfigChannel+0xc10>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	f040 80ca 	bne.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f040 80c3 	bne.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004bbc:	e0b7      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc6:	d004      	beq.n	8004bd2 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004bcc:	4a53      	ldr	r2, [pc, #332]	@ (8004d1c <HAL_ADC_ConfigChannel+0xc14>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d106      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe f9d9 	bl	8002f92 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f280 80a2 	bge.w	8004d2e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a40      	ldr	r2, [pc, #256]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_ADC_ConfigChannel+0xaf6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a3e      	ldr	r2, [pc, #248]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0xafa>
 8004bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c00:	e000      	b.n	8004c04 <HAL_ADC_ConfigChannel+0xafc>
 8004c02:	4b3e      	ldr	r3, [pc, #248]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe f825 	bl	8002c54 <LL_ADC_GetCommonPathInternalCh>
 8004c0a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a43      	ldr	r2, [pc, #268]	@ (8004d20 <HAL_ADC_ConfigChannel+0xc18>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d115      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a34      	ldr	r2, [pc, #208]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_ADC_ConfigChannel+0xb24>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a33      	ldr	r2, [pc, #204]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0xb28>
 8004c2c:	4a32      	ldr	r2, [pc, #200]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c2e:	e000      	b.n	8004c32 <HAL_ADC_ConfigChannel+0xb2a>
 8004c30:	4a32      	ldr	r2, [pc, #200]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004c32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7fd fff6 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
 8004c42:	e034      	b.n	8004cae <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a36      	ldr	r2, [pc, #216]	@ (8004d24 <HAL_ADC_ConfigChannel+0xc1c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d115      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a27      	ldr	r2, [pc, #156]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_ADC_ConfigChannel+0xb5a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a25      	ldr	r2, [pc, #148]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0xb5e>
 8004c62:	4a25      	ldr	r2, [pc, #148]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c64:	e000      	b.n	8004c68 <HAL_ADC_ConfigChannel+0xb60>
 8004c66:	4a25      	ldr	r2, [pc, #148]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f7fd ffdb 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
 8004c78:	e019      	b.n	8004cae <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a24      	ldr	r2, [pc, #144]	@ (8004d10 <HAL_ADC_ConfigChannel+0xc08>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d114      	bne.n	8004cae <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a19      	ldr	r2, [pc, #100]	@ (8004cf0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_ADC_ConfigChannel+0xb90>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <HAL_ADC_ConfigChannel+0xbec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0xb94>
 8004c98:	4a17      	ldr	r2, [pc, #92]	@ (8004cf8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c9a:	e000      	b.n	8004c9e <HAL_ADC_ConfigChannel+0xb96>
 8004c9c:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <HAL_ADC_ConfigChannel+0xbf4>)
 8004c9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ca2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7fd ffc0 	bl	8002c2e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	@ (8004d18 <HAL_ADC_ConfigChannel+0xc10>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d13a      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d134      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004cd8:	e029      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004cec:	e01f      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
 8004cee:	bf00      	nop
 8004cf0:	42028000 	.word	0x42028000
 8004cf4:	42028100 	.word	0x42028100
 8004cf8:	42028300 	.word	0x42028300
 8004cfc:	46021300 	.word	0x46021300
 8004d00:	b6002000 	.word	0xb6002000
 8004d04:	20000000 	.word	0x20000000
 8004d08:	053e2d63 	.word	0x053e2d63
 8004d0c:	ba004000 	.word	0xba004000
 8004d10:	80000001 	.word	0x80000001
 8004d14:	b2001000 	.word	0xb2001000
 8004d18:	d7200000 	.word	0xd7200000
 8004d1c:	80000010 	.word	0x80000010
 8004d20:	ce080000 	.word	0xce080000
 8004d24:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d2c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004d36:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	37dc      	adds	r7, #220	@ 0xdc
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd90      	pop	{r4, r7, pc}
 8004d42:	bf00      	nop

08004d44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe fa5d 	bl	8003210 <LL_ADC_IsEnabled>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d17b      	bne.n	8004e54 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	4b3f      	ldr	r3, [pc, #252]	@ (8004e60 <ADC_Enable+0x11c>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d6e:	f043 0210 	orr.w	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e067      	b.n	8004e56 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fa28 	bl	80031e8 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <ADC_Enable+0x66>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2f      	ldr	r2, [pc, #188]	@ (8004e64 <ADC_Enable+0x120>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d054      	beq.n	8004e54 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004daa:	f7fd fed5 	bl	8002b58 <HAL_GetTick>
 8004dae:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e68 <ADC_Enable+0x124>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <ADC_Enable+0x80>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8004e6c <ADC_Enable+0x128>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <ADC_Enable+0x84>
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <ADC_Enable+0x12c>)
 8004dc6:	e000      	b.n	8004dca <ADC_Enable+0x86>
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e74 <ADC_Enable+0x130>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe f9a2 	bl	8003114 <LL_ADC_GetMultimode>
 8004dd0:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a25      	ldr	r2, [pc, #148]	@ (8004e6c <ADC_Enable+0x128>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d002      	beq.n	8004de2 <ADC_Enable+0x9e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	e000      	b.n	8004de4 <ADC_Enable+0xa0>
 8004de2:	4b21      	ldr	r3, [pc, #132]	@ (8004e68 <ADC_Enable+0x124>)
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d02c      	beq.n	8004e46 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d130      	bne.n	8004e54 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004df2:	e028      	b.n	8004e46 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fa09 	bl	8003210 <LL_ADC_IsEnabled>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe f9ed 	bl	80031e8 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e0e:	f7fd fea3 	bl	8002b58 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d914      	bls.n	8004e46 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d00d      	beq.n	8004e46 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e2e:	f043 0210 	orr.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e007      	b.n	8004e56 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d1cf      	bne.n	8004df4 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	8000003f 	.word	0x8000003f
 8004e64:	46021000 	.word	0x46021000
 8004e68:	42028000 	.word	0x42028000
 8004e6c:	42028100 	.word	0x42028100
 8004e70:	42028300 	.word	0x42028300
 8004e74:	46021300 	.word	0x46021300

08004e78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e8a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d14b      	bne.n	8004f2a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d021      	beq.n	8004ef0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fd ffc7 	bl	8002e44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d032      	beq.n	8004f22 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d12b      	bne.n	8004f22 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ece:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11f      	bne.n	8004f22 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	679a      	str	r2, [r3, #120]	@ 0x78
 8004eee:	e018      	b.n	8004f22 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d111      	bne.n	8004f22 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d105      	bne.n	8004f22 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff f8aa 	bl	800407c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f28:	e00e      	b.n	8004f48 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff f8be 	bl	80040b8 <HAL_ADC_ErrorCallback>
}
 8004f3c:	e004      	b.n	8004f48 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff f896 	bl	8004090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f8a:	f043 0204 	orr.w	r2, r3, #4
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff f890 	bl	80040b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <__NVIC_SetPriorityGrouping+0x44>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800500c:	4013      	ands	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800501c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005022:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <__NVIC_SetPriorityGrouping+0x44>)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	60d3      	str	r3, [r2, #12]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800503c:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <__NVIC_GetPriorityGrouping+0x18>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	f003 0307 	and.w	r3, r3, #7
}
 8005046:	4618      	mov	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800505e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	db0b      	blt.n	800507e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	f003 021f 	and.w	r2, r3, #31
 800506c:	4907      	ldr	r1, [pc, #28]	@ (800508c <__NVIC_EnableIRQ+0x38>)
 800506e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2001      	movs	r0, #1
 8005076:	fa00 f202 	lsl.w	r2, r0, r2
 800507a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	e000e100 	.word	0xe000e100

08005090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800509c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	db0a      	blt.n	80050ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	490c      	ldr	r1, [pc, #48]	@ (80050dc <__NVIC_SetPriority+0x4c>)
 80050aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050ae:	0112      	lsls	r2, r2, #4
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	440b      	add	r3, r1
 80050b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b8:	e00a      	b.n	80050d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	4908      	ldr	r1, [pc, #32]	@ (80050e0 <__NVIC_SetPriority+0x50>)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	3b04      	subs	r3, #4
 80050c8:	0112      	lsls	r2, r2, #4
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	440b      	add	r3, r1
 80050ce:	761a      	strb	r2, [r3, #24]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	e000e100 	.word	0xe000e100
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	@ 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f1c3 0307 	rsb	r3, r3, #7
 80050fe:	2b04      	cmp	r3, #4
 8005100:	bf28      	it	cs
 8005102:	2304      	movcs	r3, #4
 8005104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3304      	adds	r3, #4
 800510a:	2b06      	cmp	r3, #6
 800510c:	d902      	bls.n	8005114 <NVIC_EncodePriority+0x30>
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3b03      	subs	r3, #3
 8005112:	e000      	b.n	8005116 <NVIC_EncodePriority+0x32>
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005118:	f04f 32ff 	mov.w	r2, #4294967295
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43da      	mvns	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	401a      	ands	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800512c:	f04f 31ff 	mov.w	r1, #4294967295
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	43d9      	mvns	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800513c:	4313      	orrs	r3, r2
         );
}
 800513e:	4618      	mov	r0, r3
 8005140:	3724      	adds	r7, #36	@ 0x24
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff ff4c 	bl	8004ff0 <__NVIC_SetPriorityGrouping>
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800516e:	f7ff ff63 	bl	8005038 <__NVIC_GetPriorityGrouping>
 8005172:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	6978      	ldr	r0, [r7, #20]
 800517a:	f7ff ffb3 	bl	80050e4 <NVIC_EncodePriority>
 800517e:	4602      	mov	r2, r0
 8005180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff82 	bl	8005090 <__NVIC_SetPriority>
}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800519e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff ff56 	bl	8005054 <__NVIC_EnableIRQ>
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051c0:	d301      	bcc.n	80051c6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80051c2:	2301      	movs	r3, #1
 80051c4:	e00d      	b.n	80051e2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80051c6:	4a0a      	ldr	r2, [pc, #40]	@ (80051f0 <HAL_SYSTICK_Config+0x40>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80051ce:	4b08      	ldr	r3, [pc, #32]	@ (80051f0 <HAL_SYSTICK_Config+0x40>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80051d4:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_SYSTICK_Config+0x40>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a05      	ldr	r2, [pc, #20]	@ (80051f0 <HAL_SYSTICK_Config+0x40>)
 80051da:	f043 0303 	orr.w	r3, r3, #3
 80051de:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	e000e010 	.word	0xe000e010

080051f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d844      	bhi.n	800528c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005202:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	0800522b 	.word	0x0800522b
 800520c:	08005249 	.word	0x08005249
 8005210:	0800526b 	.word	0x0800526b
 8005214:	0800528d 	.word	0x0800528d
 8005218:	0800521d 	.word	0x0800521d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800521c:	4b1f      	ldr	r3, [pc, #124]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	6013      	str	r3, [r2, #0]
      break;
 8005228:	e031      	b.n	800528e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800522a:	4b1c      	ldr	r3, [pc, #112]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005230:	f023 0304 	bic.w	r3, r3, #4
 8005234:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005236:	4b1a      	ldr	r3, [pc, #104]	@ (80052a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800523c:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800523e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005246:	e022      	b.n	800528e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005248:	4b14      	ldr	r3, [pc, #80]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a13      	ldr	r2, [pc, #76]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800524e:	f023 0304 	bic.w	r3, r3, #4
 8005252:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005254:	4b12      	ldr	r3, [pc, #72]	@ (80052a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800525a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800525e:	4a10      	ldr	r2, [pc, #64]	@ (80052a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005260:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005268:	e011      	b.n	800528e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800526a:	4b0c      	ldr	r3, [pc, #48]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a0b      	ldr	r2, [pc, #44]	@ (800529c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005276:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800527c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005280:	4a07      	ldr	r2, [pc, #28]	@ (80052a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005282:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800528a:	e000      	b.n	800528e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800528c:	bf00      	nop
  }
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	e000e010 	.word	0xe000e010
 80052a0:	46020c00 	.word	0x46020c00

080052a4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80052aa:	4b19      	ldr	r3, [pc, #100]	@ (8005310 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80052b6:	2304      	movs	r3, #4
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	e021      	b.n	8005300 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80052bc:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80052be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052c2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80052c6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052ce:	d011      	beq.n	80052f4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052d6:	d810      	bhi.n	80052fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e4:	d003      	beq.n	80052ee <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80052e6:	e008      	b.n	80052fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80052e8:	2300      	movs	r3, #0
 80052ea:	607b      	str	r3, [r7, #4]
        break;
 80052ec:	e008      	b.n	8005300 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80052ee:	2301      	movs	r3, #1
 80052f0:	607b      	str	r3, [r7, #4]
        break;
 80052f2:	e005      	b.n	8005300 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80052f4:	2302      	movs	r3, #2
 80052f6:	607b      	str	r3, [r7, #4]
        break;
 80052f8:	e002      	b.n	8005300 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
        break;
 80052fe:	bf00      	nop
    }
  }
  return systick_source;
 8005300:	687b      	ldr	r3, [r7, #4]
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e010 	.word	0xe000e010
 8005314:	46020c00 	.word	0x46020c00

08005318 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005320:	f7fd fc1a 	bl	8002b58 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0db      	b.n	80054e8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6e      	ldr	r2, [pc, #440]	@ (80054f0 <HAL_DMA_Init+0x1d8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f000 809f 	beq.w	800547a <HAL_DMA_Init+0x162>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a6c      	ldr	r2, [pc, #432]	@ (80054f4 <HAL_DMA_Init+0x1dc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	f000 8099 	beq.w	800547a <HAL_DMA_Init+0x162>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a6a      	ldr	r2, [pc, #424]	@ (80054f8 <HAL_DMA_Init+0x1e0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	f000 8093 	beq.w	800547a <HAL_DMA_Init+0x162>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a68      	ldr	r2, [pc, #416]	@ (80054fc <HAL_DMA_Init+0x1e4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	f000 808d 	beq.w	800547a <HAL_DMA_Init+0x162>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a66      	ldr	r2, [pc, #408]	@ (8005500 <HAL_DMA_Init+0x1e8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	f000 8087 	beq.w	800547a <HAL_DMA_Init+0x162>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a64      	ldr	r2, [pc, #400]	@ (8005504 <HAL_DMA_Init+0x1ec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	f000 8081 	beq.w	800547a <HAL_DMA_Init+0x162>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a62      	ldr	r2, [pc, #392]	@ (8005508 <HAL_DMA_Init+0x1f0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d07b      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a61      	ldr	r2, [pc, #388]	@ (800550c <HAL_DMA_Init+0x1f4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d076      	beq.n	800547a <HAL_DMA_Init+0x162>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5f      	ldr	r2, [pc, #380]	@ (8005510 <HAL_DMA_Init+0x1f8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d071      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5e      	ldr	r2, [pc, #376]	@ (8005514 <HAL_DMA_Init+0x1fc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d06c      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005518 <HAL_DMA_Init+0x200>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d067      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5b      	ldr	r2, [pc, #364]	@ (800551c <HAL_DMA_Init+0x204>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d062      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a59      	ldr	r2, [pc, #356]	@ (8005520 <HAL_DMA_Init+0x208>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d05d      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a58      	ldr	r2, [pc, #352]	@ (8005524 <HAL_DMA_Init+0x20c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d058      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a56      	ldr	r2, [pc, #344]	@ (8005528 <HAL_DMA_Init+0x210>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d053      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a55      	ldr	r2, [pc, #340]	@ (800552c <HAL_DMA_Init+0x214>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d04e      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a53      	ldr	r2, [pc, #332]	@ (8005530 <HAL_DMA_Init+0x218>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d049      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a52      	ldr	r2, [pc, #328]	@ (8005534 <HAL_DMA_Init+0x21c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d044      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a50      	ldr	r2, [pc, #320]	@ (8005538 <HAL_DMA_Init+0x220>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d03f      	beq.n	800547a <HAL_DMA_Init+0x162>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a4f      	ldr	r2, [pc, #316]	@ (800553c <HAL_DMA_Init+0x224>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d03a      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a4d      	ldr	r2, [pc, #308]	@ (8005540 <HAL_DMA_Init+0x228>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d035      	beq.n	800547a <HAL_DMA_Init+0x162>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a4c      	ldr	r2, [pc, #304]	@ (8005544 <HAL_DMA_Init+0x22c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d030      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4a      	ldr	r2, [pc, #296]	@ (8005548 <HAL_DMA_Init+0x230>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02b      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a49      	ldr	r2, [pc, #292]	@ (800554c <HAL_DMA_Init+0x234>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d026      	beq.n	800547a <HAL_DMA_Init+0x162>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a47      	ldr	r2, [pc, #284]	@ (8005550 <HAL_DMA_Init+0x238>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d021      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a46      	ldr	r2, [pc, #280]	@ (8005554 <HAL_DMA_Init+0x23c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01c      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a44      	ldr	r2, [pc, #272]	@ (8005558 <HAL_DMA_Init+0x240>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <HAL_DMA_Init+0x162>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a43      	ldr	r2, [pc, #268]	@ (800555c <HAL_DMA_Init+0x244>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d012      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a41      	ldr	r2, [pc, #260]	@ (8005560 <HAL_DMA_Init+0x248>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00d      	beq.n	800547a <HAL_DMA_Init+0x162>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a40      	ldr	r2, [pc, #256]	@ (8005564 <HAL_DMA_Init+0x24c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d008      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a3e      	ldr	r2, [pc, #248]	@ (8005568 <HAL_DMA_Init+0x250>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <HAL_DMA_Init+0x162>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a3d      	ldr	r2, [pc, #244]	@ (800556c <HAL_DMA_Init+0x254>)
 8005478:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0206 	orr.w	r2, r2, #6
 8005498:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800549a:	e00f      	b.n	80054bc <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800549c:	f7fd fb5c 	bl	8002b58 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d908      	bls.n	80054bc <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2210      	movs	r2, #16
 80054ae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2203      	movs	r2, #3
 80054b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e015      	b.n	80054e8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e8      	bne.n	800549c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fb26 	bl	8005b1c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40020050 	.word	0x40020050
 80054f4:	50020050 	.word	0x50020050
 80054f8:	400200d0 	.word	0x400200d0
 80054fc:	500200d0 	.word	0x500200d0
 8005500:	40020150 	.word	0x40020150
 8005504:	50020150 	.word	0x50020150
 8005508:	400201d0 	.word	0x400201d0
 800550c:	500201d0 	.word	0x500201d0
 8005510:	40020250 	.word	0x40020250
 8005514:	50020250 	.word	0x50020250
 8005518:	400202d0 	.word	0x400202d0
 800551c:	500202d0 	.word	0x500202d0
 8005520:	40020350 	.word	0x40020350
 8005524:	50020350 	.word	0x50020350
 8005528:	400203d0 	.word	0x400203d0
 800552c:	500203d0 	.word	0x500203d0
 8005530:	40020450 	.word	0x40020450
 8005534:	50020450 	.word	0x50020450
 8005538:	400204d0 	.word	0x400204d0
 800553c:	500204d0 	.word	0x500204d0
 8005540:	40020550 	.word	0x40020550
 8005544:	50020550 	.word	0x50020550
 8005548:	400205d0 	.word	0x400205d0
 800554c:	500205d0 	.word	0x500205d0
 8005550:	40020650 	.word	0x40020650
 8005554:	50020650 	.word	0x50020650
 8005558:	400206d0 	.word	0x400206d0
 800555c:	500206d0 	.word	0x500206d0
 8005560:	40020750 	.word	0x40020750
 8005564:	50020750 	.word	0x50020750
 8005568:	400207d0 	.word	0x400207d0
 800556c:	500207d0 	.word	0x500207d0

08005570 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e04f      	b.n	8005628 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_DMA_Start_IT+0x26>
 8005592:	2302      	movs	r3, #2
 8005594:	e048      	b.n	8005628 <HAL_DMA_Start_IT+0xb8>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d136      	bne.n	8005618 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa86 	bl	8005ad0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80055d2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ea:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005602:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	e007      	b.n	8005628 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005638:	f7fd fa8e 	bl	8002b58 <HAL_GetTick>
 800563c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e06b      	b.n	8005720 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d008      	beq.n	8005666 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e05c      	b.n	8005720 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0204 	orr.w	r2, r2, #4
 8005674:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2205      	movs	r2, #5
 800567a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800567e:	e020      	b.n	80056c2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005680:	f7fd fa6a 	bl	8002b58 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b05      	cmp	r3, #5
 800568c:	d919      	bls.n	80056c2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005692:	f043 0210 	orr.w	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2203      	movs	r2, #3
 800569e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b2:	2201      	movs	r2, #1
 80056b4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e02e      	b.n	8005720 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0d7      	beq.n	8005680 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0202 	orr.w	r2, r2, #2
 80056de:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2204      	movs	r2, #4
 80056e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80056f0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570a:	2201      	movs	r2, #1
 800570c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e019      	b.n	800576e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d004      	beq.n	8005750 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e00e      	b.n	800576e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2204      	movs	r2, #4
 8005754:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005766:	f043 0304 	orr.w	r3, r3, #4
 800576a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800578a:	f023 030f 	bic.w	r3, r3, #15
 800578e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005798:	3b50      	subs	r3, #80	@ 0x50
 800579a:	09db      	lsrs	r3, r3, #7
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2201      	movs	r2, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 813b 	beq.w	8005a30 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d011      	beq.n	80057ec <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e4:	f043 0201 	orr.w	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005810:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005816:	f043 0202 	orr.w	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d011      	beq.n	8005850 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005842:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	f043 0204 	orr.w	r2, r3, #4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d011      	beq.n	8005882 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005874:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	f043 0208 	orr.w	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800588c:	2b00      	cmp	r3, #0
 800588e:	d013      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00c      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058a6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d04c      	beq.n	8005960 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d045      	beq.n	8005960 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058dc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d12e      	bne.n	8005948 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058f8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0202 	orr.w	r2, r2, #2
 8005908:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005922:	2201      	movs	r2, #1
 8005924:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d07a      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
        }

        return;
 8005946:	e075      	b.n	8005a34 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2205      	movs	r2, #5
 800594c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d039      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d032      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d116      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005998:	2b00      	cmp	r3, #0
 800599a:	d111      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a8:	2201      	movs	r2, #1
 80059aa:	731a      	strb	r2, [r3, #12]
 80059ac:	e008      	b.n	80059c0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80059c8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d025      	beq.n	8005a36 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0202 	orr.w	r2, r2, #2
 80059f8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a12:	2201      	movs	r2, #1
 8005a14:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
 8005a2e:	e002      	b.n	8005a36 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005a34:	bf00      	nop
    }
  }
}
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a4a:	b2db      	uxtb	r3, r3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e02b      	b.n	8005ac4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005a74:	f023 030f 	bic.w	r3, r3, #15
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a82:	3b50      	subs	r3, #80	@ 0x50
 8005a84:	09db      	lsrs	r3, r3, #7
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	f003 0311 	and.w	r3, r3, #17
 8005aa2:	2b11      	cmp	r3, #17
 8005aa4:	d106      	bne.n	8005ab4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	e006      	b.n	8005ac2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	401a      	ands	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	b291      	uxth	r1, r2
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005afc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a53      	ldr	r2, [pc, #332]	@ (8005ca8 <DMA_Init+0x18c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f000 80a0 	beq.w	8005ca2 <DMA_Init+0x186>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a51      	ldr	r2, [pc, #324]	@ (8005cac <DMA_Init+0x190>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	f000 809a 	beq.w	8005ca2 <DMA_Init+0x186>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a4f      	ldr	r2, [pc, #316]	@ (8005cb0 <DMA_Init+0x194>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	f000 8094 	beq.w	8005ca2 <DMA_Init+0x186>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a4d      	ldr	r2, [pc, #308]	@ (8005cb4 <DMA_Init+0x198>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	f000 808e 	beq.w	8005ca2 <DMA_Init+0x186>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a4b      	ldr	r2, [pc, #300]	@ (8005cb8 <DMA_Init+0x19c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	f000 8088 	beq.w	8005ca2 <DMA_Init+0x186>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a49      	ldr	r2, [pc, #292]	@ (8005cbc <DMA_Init+0x1a0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	f000 8082 	beq.w	8005ca2 <DMA_Init+0x186>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a47      	ldr	r2, [pc, #284]	@ (8005cc0 <DMA_Init+0x1a4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d07c      	beq.n	8005ca2 <DMA_Init+0x186>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a45      	ldr	r2, [pc, #276]	@ (8005cc4 <DMA_Init+0x1a8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d077      	beq.n	8005ca2 <DMA_Init+0x186>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a44      	ldr	r2, [pc, #272]	@ (8005cc8 <DMA_Init+0x1ac>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d072      	beq.n	8005ca2 <DMA_Init+0x186>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a42      	ldr	r2, [pc, #264]	@ (8005ccc <DMA_Init+0x1b0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d06d      	beq.n	8005ca2 <DMA_Init+0x186>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a41      	ldr	r2, [pc, #260]	@ (8005cd0 <DMA_Init+0x1b4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d068      	beq.n	8005ca2 <DMA_Init+0x186>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd4 <DMA_Init+0x1b8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d063      	beq.n	8005ca2 <DMA_Init+0x186>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd8 <DMA_Init+0x1bc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d05e      	beq.n	8005ca2 <DMA_Init+0x186>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a3c      	ldr	r2, [pc, #240]	@ (8005cdc <DMA_Init+0x1c0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d059      	beq.n	8005ca2 <DMA_Init+0x186>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce0 <DMA_Init+0x1c4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d054      	beq.n	8005ca2 <DMA_Init+0x186>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a39      	ldr	r2, [pc, #228]	@ (8005ce4 <DMA_Init+0x1c8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d04f      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a38      	ldr	r2, [pc, #224]	@ (8005ce8 <DMA_Init+0x1cc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d04a      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a36      	ldr	r2, [pc, #216]	@ (8005cec <DMA_Init+0x1d0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d045      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a35      	ldr	r2, [pc, #212]	@ (8005cf0 <DMA_Init+0x1d4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d040      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a33      	ldr	r2, [pc, #204]	@ (8005cf4 <DMA_Init+0x1d8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d03b      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a32      	ldr	r2, [pc, #200]	@ (8005cf8 <DMA_Init+0x1dc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d036      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a30      	ldr	r2, [pc, #192]	@ (8005cfc <DMA_Init+0x1e0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d031      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2f      	ldr	r2, [pc, #188]	@ (8005d00 <DMA_Init+0x1e4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d02c      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d04 <DMA_Init+0x1e8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d027      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2c      	ldr	r2, [pc, #176]	@ (8005d08 <DMA_Init+0x1ec>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a2a      	ldr	r2, [pc, #168]	@ (8005d0c <DMA_Init+0x1f0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a29      	ldr	r2, [pc, #164]	@ (8005d10 <DMA_Init+0x1f4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a27      	ldr	r2, [pc, #156]	@ (8005d14 <DMA_Init+0x1f8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a26      	ldr	r2, [pc, #152]	@ (8005d18 <DMA_Init+0x1fc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a24      	ldr	r2, [pc, #144]	@ (8005d1c <DMA_Init+0x200>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a23      	ldr	r2, [pc, #140]	@ (8005d20 <DMA_Init+0x204>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <DMA_Init+0x186>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a21      	ldr	r2, [pc, #132]	@ (8005d24 <DMA_Init+0x208>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d142      	bne.n	8005d28 <DMA_Init+0x20c>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e041      	b.n	8005d2a <DMA_Init+0x20e>
 8005ca6:	bf00      	nop
 8005ca8:	40020050 	.word	0x40020050
 8005cac:	50020050 	.word	0x50020050
 8005cb0:	400200d0 	.word	0x400200d0
 8005cb4:	500200d0 	.word	0x500200d0
 8005cb8:	40020150 	.word	0x40020150
 8005cbc:	50020150 	.word	0x50020150
 8005cc0:	400201d0 	.word	0x400201d0
 8005cc4:	500201d0 	.word	0x500201d0
 8005cc8:	40020250 	.word	0x40020250
 8005ccc:	50020250 	.word	0x50020250
 8005cd0:	400202d0 	.word	0x400202d0
 8005cd4:	500202d0 	.word	0x500202d0
 8005cd8:	40020350 	.word	0x40020350
 8005cdc:	50020350 	.word	0x50020350
 8005ce0:	400203d0 	.word	0x400203d0
 8005ce4:	500203d0 	.word	0x500203d0
 8005ce8:	40020450 	.word	0x40020450
 8005cec:	50020450 	.word	0x50020450
 8005cf0:	400204d0 	.word	0x400204d0
 8005cf4:	500204d0 	.word	0x500204d0
 8005cf8:	40020550 	.word	0x40020550
 8005cfc:	50020550 	.word	0x50020550
 8005d00:	400205d0 	.word	0x400205d0
 8005d04:	500205d0 	.word	0x500205d0
 8005d08:	40020650 	.word	0x40020650
 8005d0c:	50020650 	.word	0x50020650
 8005d10:	400206d0 	.word	0x400206d0
 8005d14:	500206d0 	.word	0x500206d0
 8005d18:	40020750 	.word	0x40020750
 8005d1c:	50020750 	.word	0x50020750
 8005d20:	400207d0 	.word	0x400207d0
 8005d24:	500207d0 	.word	0x500207d0
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d012      	beq.n	8005d54 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d36:	3b01      	subs	r3, #1
 8005d38:	051b      	lsls	r3, r3, #20
 8005d3a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005d3e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	3b01      	subs	r3, #1
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005d4c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d86:	f040 80b0 	bne.w	8005eea <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a82      	ldr	r2, [pc, #520]	@ (8005f98 <DMA_Init+0x47c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	f000 80a0 	beq.w	8005ed6 <DMA_Init+0x3ba>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a80      	ldr	r2, [pc, #512]	@ (8005f9c <DMA_Init+0x480>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f000 809a 	beq.w	8005ed6 <DMA_Init+0x3ba>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a7e      	ldr	r2, [pc, #504]	@ (8005fa0 <DMA_Init+0x484>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f000 8094 	beq.w	8005ed6 <DMA_Init+0x3ba>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a7c      	ldr	r2, [pc, #496]	@ (8005fa4 <DMA_Init+0x488>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	f000 808e 	beq.w	8005ed6 <DMA_Init+0x3ba>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a7a      	ldr	r2, [pc, #488]	@ (8005fa8 <DMA_Init+0x48c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	f000 8088 	beq.w	8005ed6 <DMA_Init+0x3ba>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a78      	ldr	r2, [pc, #480]	@ (8005fac <DMA_Init+0x490>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	f000 8082 	beq.w	8005ed6 <DMA_Init+0x3ba>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a76      	ldr	r2, [pc, #472]	@ (8005fb0 <DMA_Init+0x494>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d07c      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a74      	ldr	r2, [pc, #464]	@ (8005fb4 <DMA_Init+0x498>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d077      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a73      	ldr	r2, [pc, #460]	@ (8005fb8 <DMA_Init+0x49c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d072      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a71      	ldr	r2, [pc, #452]	@ (8005fbc <DMA_Init+0x4a0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d06d      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a70      	ldr	r2, [pc, #448]	@ (8005fc0 <DMA_Init+0x4a4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d068      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc4 <DMA_Init+0x4a8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d063      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6d      	ldr	r2, [pc, #436]	@ (8005fc8 <DMA_Init+0x4ac>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d05e      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6b      	ldr	r2, [pc, #428]	@ (8005fcc <DMA_Init+0x4b0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d059      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6a      	ldr	r2, [pc, #424]	@ (8005fd0 <DMA_Init+0x4b4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d054      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a68      	ldr	r2, [pc, #416]	@ (8005fd4 <DMA_Init+0x4b8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04f      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a67      	ldr	r2, [pc, #412]	@ (8005fd8 <DMA_Init+0x4bc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d04a      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a65      	ldr	r2, [pc, #404]	@ (8005fdc <DMA_Init+0x4c0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d045      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a64      	ldr	r2, [pc, #400]	@ (8005fe0 <DMA_Init+0x4c4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d040      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a62      	ldr	r2, [pc, #392]	@ (8005fe4 <DMA_Init+0x4c8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d03b      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a61      	ldr	r2, [pc, #388]	@ (8005fe8 <DMA_Init+0x4cc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d036      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8005fec <DMA_Init+0x4d0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d031      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5e      	ldr	r2, [pc, #376]	@ (8005ff0 <DMA_Init+0x4d4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d02c      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a5c      	ldr	r2, [pc, #368]	@ (8005ff4 <DMA_Init+0x4d8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d027      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ff8 <DMA_Init+0x4dc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a59      	ldr	r2, [pc, #356]	@ (8005ffc <DMA_Init+0x4e0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01d      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a58      	ldr	r2, [pc, #352]	@ (8006000 <DMA_Init+0x4e4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a56      	ldr	r2, [pc, #344]	@ (8006004 <DMA_Init+0x4e8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a55      	ldr	r2, [pc, #340]	@ (8006008 <DMA_Init+0x4ec>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a53      	ldr	r2, [pc, #332]	@ (800600c <DMA_Init+0x4f0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a52      	ldr	r2, [pc, #328]	@ (8006010 <DMA_Init+0x4f4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <DMA_Init+0x3ba>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a50      	ldr	r2, [pc, #320]	@ (8006014 <DMA_Init+0x4f8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <DMA_Init+0x3be>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <DMA_Init+0x3c0>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00d      	beq.n	8005efc <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e008      	b.n	8005efc <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef2:	d103      	bne.n	8005efc <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005efa:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f02:	4b45      	ldr	r3, [pc, #276]	@ (8006018 <DMA_Init+0x4fc>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2200      	movs	r2, #0
 8005f16:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a36      	ldr	r2, [pc, #216]	@ (8005ff8 <DMA_Init+0x4dc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d022      	beq.n	8005f68 <DMA_Init+0x44c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a35      	ldr	r2, [pc, #212]	@ (8005ffc <DMA_Init+0x4e0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d01d      	beq.n	8005f68 <DMA_Init+0x44c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a33      	ldr	r2, [pc, #204]	@ (8006000 <DMA_Init+0x4e4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d018      	beq.n	8005f68 <DMA_Init+0x44c>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a32      	ldr	r2, [pc, #200]	@ (8006004 <DMA_Init+0x4e8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d013      	beq.n	8005f68 <DMA_Init+0x44c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a30      	ldr	r2, [pc, #192]	@ (8006008 <DMA_Init+0x4ec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00e      	beq.n	8005f68 <DMA_Init+0x44c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800600c <DMA_Init+0x4f0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d009      	beq.n	8005f68 <DMA_Init+0x44c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2d      	ldr	r2, [pc, #180]	@ (8006010 <DMA_Init+0x4f4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d004      	beq.n	8005f68 <DMA_Init+0x44c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2c      	ldr	r2, [pc, #176]	@ (8006014 <DMA_Init+0x4f8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d101      	bne.n	8005f6c <DMA_Init+0x450>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <DMA_Init+0x452>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40020050 	.word	0x40020050
 8005f9c:	50020050 	.word	0x50020050
 8005fa0:	400200d0 	.word	0x400200d0
 8005fa4:	500200d0 	.word	0x500200d0
 8005fa8:	40020150 	.word	0x40020150
 8005fac:	50020150 	.word	0x50020150
 8005fb0:	400201d0 	.word	0x400201d0
 8005fb4:	500201d0 	.word	0x500201d0
 8005fb8:	40020250 	.word	0x40020250
 8005fbc:	50020250 	.word	0x50020250
 8005fc0:	400202d0 	.word	0x400202d0
 8005fc4:	500202d0 	.word	0x500202d0
 8005fc8:	40020350 	.word	0x40020350
 8005fcc:	50020350 	.word	0x50020350
 8005fd0:	400203d0 	.word	0x400203d0
 8005fd4:	500203d0 	.word	0x500203d0
 8005fd8:	40020450 	.word	0x40020450
 8005fdc:	50020450 	.word	0x50020450
 8005fe0:	400204d0 	.word	0x400204d0
 8005fe4:	500204d0 	.word	0x500204d0
 8005fe8:	40020550 	.word	0x40020550
 8005fec:	50020550 	.word	0x50020550
 8005ff0:	400205d0 	.word	0x400205d0
 8005ff4:	500205d0 	.word	0x500205d0
 8005ff8:	40020650 	.word	0x40020650
 8005ffc:	50020650 	.word	0x50020650
 8006000:	400206d0 	.word	0x400206d0
 8006004:	500206d0 	.word	0x500206d0
 8006008:	40020750 	.word	0x40020750
 800600c:	50020750 	.word	0x50020750
 8006010:	400207d0 	.word	0x400207d0
 8006014:	500207d0 	.word	0x500207d0
 8006018:	3c803180 	.word	0x3c803180

0800601c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e053      	b.n	80060d6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fb fdd4 	bl	8001bf0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800605a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6851      	ldr	r1, [r2, #4]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	69d2      	ldr	r2, [r2, #28]
 8006066:	4311      	orrs	r1, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	430b      	orrs	r3, r1
 800606e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006076:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6891      	ldr	r1, [r2, #8]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6992      	ldr	r2, [r2, #24]
 8006086:	4311      	orrs	r1, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	430b      	orrs	r3, r1
 800608e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	041b      	lsls	r3, r3, #16
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68d1      	ldr	r1, [r2, #12]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	430b      	orrs	r3, r1
 80060a4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	051a      	lsls	r2, r3, #20
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	055b      	lsls	r3, r3, #21
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_DMA2D_ConfigLayer+0x24>
 8006100:	2302      	movs	r3, #2
 8006102:	e092      	b.n	800622a <HAL_DMA2D_ConfigLayer+0x14a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	3328      	adds	r3, #40	@ 0x28
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	4413      	add	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006138:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006144:	4b3c      	ldr	r3, [pc, #240]	@ (8006238 <HAL_DMA2D_ConfigLayer+0x158>)
 8006146:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b0a      	cmp	r3, #10
 800614e:	d003      	beq.n	8006158 <HAL_DMA2D_ConfigLayer+0x78>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b09      	cmp	r3, #9
 8006156:	d107      	bne.n	8006168 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	e005      	b.n	8006174 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	061b      	lsls	r3, r3, #24
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d120      	bne.n	80061bc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	43db      	mvns	r3, r3
 8006184:	ea02 0103 	and.w	r1, r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	430a      	orrs	r2, r1
 8006190:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b0a      	cmp	r3, #10
 80061a2:	d003      	beq.n	80061ac <HAL_DMA2D_ConfigLayer+0xcc>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b09      	cmp	r3, #9
 80061aa:	d135      	bne.n	8006218 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80061b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ba:	e02d      	b.n	8006218 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b0b      	cmp	r3, #11
 80061c2:	d109      	bne.n	80061d8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	049b      	lsls	r3, r3, #18
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80061d6:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	ea02 0103 	and.w	r1, r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b0a      	cmp	r3, #10
 8006200:	d003      	beq.n	800620a <HAL_DMA2D_ConfigLayer+0x12a>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b09      	cmp	r3, #9
 8006208:	d106      	bne.n	8006218 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006216:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	ff33000f 	.word	0xff33000f

0800623c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006244:	f7fc fc88 	bl	8002b58 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0db      	b.n	800640c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a6e      	ldr	r2, [pc, #440]	@ (8006414 <HAL_DMAEx_List_Init+0x1d8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	f000 809f 	beq.w	800639e <HAL_DMAEx_List_Init+0x162>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a6c      	ldr	r2, [pc, #432]	@ (8006418 <HAL_DMAEx_List_Init+0x1dc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	f000 8099 	beq.w	800639e <HAL_DMAEx_List_Init+0x162>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a6a      	ldr	r2, [pc, #424]	@ (800641c <HAL_DMAEx_List_Init+0x1e0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	f000 8093 	beq.w	800639e <HAL_DMAEx_List_Init+0x162>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a68      	ldr	r2, [pc, #416]	@ (8006420 <HAL_DMAEx_List_Init+0x1e4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	f000 808d 	beq.w	800639e <HAL_DMAEx_List_Init+0x162>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a66      	ldr	r2, [pc, #408]	@ (8006424 <HAL_DMAEx_List_Init+0x1e8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	f000 8087 	beq.w	800639e <HAL_DMAEx_List_Init+0x162>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a64      	ldr	r2, [pc, #400]	@ (8006428 <HAL_DMAEx_List_Init+0x1ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f000 8081 	beq.w	800639e <HAL_DMAEx_List_Init+0x162>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a62      	ldr	r2, [pc, #392]	@ (800642c <HAL_DMAEx_List_Init+0x1f0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d07b      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a61      	ldr	r2, [pc, #388]	@ (8006430 <HAL_DMAEx_List_Init+0x1f4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d076      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006434 <HAL_DMAEx_List_Init+0x1f8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d071      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5e      	ldr	r2, [pc, #376]	@ (8006438 <HAL_DMAEx_List_Init+0x1fc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d06c      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5c      	ldr	r2, [pc, #368]	@ (800643c <HAL_DMAEx_List_Init+0x200>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d067      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a5b      	ldr	r2, [pc, #364]	@ (8006440 <HAL_DMAEx_List_Init+0x204>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d062      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a59      	ldr	r2, [pc, #356]	@ (8006444 <HAL_DMAEx_List_Init+0x208>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d05d      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a58      	ldr	r2, [pc, #352]	@ (8006448 <HAL_DMAEx_List_Init+0x20c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d058      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a56      	ldr	r2, [pc, #344]	@ (800644c <HAL_DMAEx_List_Init+0x210>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d053      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a55      	ldr	r2, [pc, #340]	@ (8006450 <HAL_DMAEx_List_Init+0x214>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d04e      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a53      	ldr	r2, [pc, #332]	@ (8006454 <HAL_DMAEx_List_Init+0x218>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d049      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a52      	ldr	r2, [pc, #328]	@ (8006458 <HAL_DMAEx_List_Init+0x21c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d044      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a50      	ldr	r2, [pc, #320]	@ (800645c <HAL_DMAEx_List_Init+0x220>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d03f      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a4f      	ldr	r2, [pc, #316]	@ (8006460 <HAL_DMAEx_List_Init+0x224>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d03a      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a4d      	ldr	r2, [pc, #308]	@ (8006464 <HAL_DMAEx_List_Init+0x228>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d035      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a4c      	ldr	r2, [pc, #304]	@ (8006468 <HAL_DMAEx_List_Init+0x22c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d030      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a4a      	ldr	r2, [pc, #296]	@ (800646c <HAL_DMAEx_List_Init+0x230>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d02b      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a49      	ldr	r2, [pc, #292]	@ (8006470 <HAL_DMAEx_List_Init+0x234>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d026      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a47      	ldr	r2, [pc, #284]	@ (8006474 <HAL_DMAEx_List_Init+0x238>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d021      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a46      	ldr	r2, [pc, #280]	@ (8006478 <HAL_DMAEx_List_Init+0x23c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d01c      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a44      	ldr	r2, [pc, #272]	@ (800647c <HAL_DMAEx_List_Init+0x240>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d017      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a43      	ldr	r2, [pc, #268]	@ (8006480 <HAL_DMAEx_List_Init+0x244>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d012      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a41      	ldr	r2, [pc, #260]	@ (8006484 <HAL_DMAEx_List_Init+0x248>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00d      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a40      	ldr	r2, [pc, #256]	@ (8006488 <HAL_DMAEx_List_Init+0x24c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d008      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a3e      	ldr	r2, [pc, #248]	@ (800648c <HAL_DMAEx_List_Init+0x250>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <HAL_DMAEx_List_Init+0x162>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a3d      	ldr	r2, [pc, #244]	@ (8006490 <HAL_DMAEx_List_Init+0x254>)
 800639c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695a      	ldr	r2, [r3, #20]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0206 	orr.w	r2, r2, #6
 80063bc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80063be:	e00f      	b.n	80063e0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80063c0:	f7fc fbca 	bl	8002b58 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d908      	bls.n	80063e0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2210      	movs	r2, #16
 80063d2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2203      	movs	r2, #3
 80063d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e015      	b.n	800640c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e8      	bne.n	80063c0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fae0 	bl	80069b4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40020050 	.word	0x40020050
 8006418:	50020050 	.word	0x50020050
 800641c:	400200d0 	.word	0x400200d0
 8006420:	500200d0 	.word	0x500200d0
 8006424:	40020150 	.word	0x40020150
 8006428:	50020150 	.word	0x50020150
 800642c:	400201d0 	.word	0x400201d0
 8006430:	500201d0 	.word	0x500201d0
 8006434:	40020250 	.word	0x40020250
 8006438:	50020250 	.word	0x50020250
 800643c:	400202d0 	.word	0x400202d0
 8006440:	500202d0 	.word	0x500202d0
 8006444:	40020350 	.word	0x40020350
 8006448:	50020350 	.word	0x50020350
 800644c:	400203d0 	.word	0x400203d0
 8006450:	500203d0 	.word	0x500203d0
 8006454:	40020450 	.word	0x40020450
 8006458:	50020450 	.word	0x50020450
 800645c:	400204d0 	.word	0x400204d0
 8006460:	500204d0 	.word	0x500204d0
 8006464:	40020550 	.word	0x40020550
 8006468:	50020550 	.word	0x50020550
 800646c:	400205d0 	.word	0x400205d0
 8006470:	500205d0 	.word	0x500205d0
 8006474:	40020650 	.word	0x40020650
 8006478:	50020650 	.word	0x50020650
 800647c:	400206d0 	.word	0x400206d0
 8006480:	500206d0 	.word	0x500206d0
 8006484:	40020750 	.word	0x40020750
 8006488:	50020750 	.word	0x50020750
 800648c:	400207d0 	.word	0x400207d0
 8006490:	500207d0 	.word	0x500207d0

08006494 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_DMAEx_List_Start_IT+0x16>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e082      	b.n	80065b4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80064b4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064c0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d005      	beq.n	80064d4 <HAL_DMAEx_List_Start_IT+0x40>
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d16a      	bne.n	80065a4 <HAL_DMAEx_List_Start_IT+0x110>
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d067      	beq.n	80065a4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d157      	bne.n	8006590 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_DMAEx_List_Start_IT+0x5a>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e062      	b.n	80065b4 <HAL_DMAEx_List_Start_IT+0x120>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006502:	2202      	movs	r2, #2
 8006504:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006510:	2200      	movs	r2, #0
 8006512:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006522:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800653a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695a      	ldr	r2, [r3, #20]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006552:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f107 010c 	add.w	r1, r7, #12
 800655e:	2200      	movs	r2, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fe47 	bl	80071f4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	0c0b      	lsrs	r3, r1, #16
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006584:	4013      	ands	r3, r2
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	430b      	orrs	r3, r1
 800658e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e007      	b.n	80065b4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2240      	movs	r2, #64	@ 0x40
 80065a8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_DMAEx_List_BuildNode+0x16>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e004      	b.n	80065e0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fb43 	bl	8006c64 <DMA_List_BuildNode>

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_DMAEx_List_GetNodeConfig+0x16>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e004      	b.n	800660c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fc7f 	bl	8006f08 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08c      	sub	sp, #48	@ 0x30
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_DMAEx_List_InsertNode+0x18>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e0b6      	b.n	800679e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d104      	bne.n	8006642 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2204      	movs	r2, #4
 800663c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e0ad      	b.n	800679e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fd66 	bl	800711c <DMA_List_CheckNodesBaseAddresses>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2205      	movs	r2, #5
 800665a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e09e      	b.n	800679e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fd87 	bl	800717c <DMA_List_CheckNodesTypes>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2204      	movs	r2, #4
 8006678:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e08f      	b.n	800679e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2202      	movs	r2, #2
 8006682:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800668a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800668e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fdad 	bl	80071f4 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11a      	bne.n	80066d8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	e06c      	b.n	8006790 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80066c2:	4013      	ands	r3, r2
 80066c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066c8:	4319      	orrs	r1, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2202      	movs	r2, #2
 80066d4:	609a      	str	r2, [r3, #8]
 80066d6:	e05b      	b.n	8006790 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80066e8:	4013      	ands	r3, r2
 80066ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ee:	4319      	orrs	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e043      	b.n	8006786 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006702:	f107 0314 	add.w	r3, r7, #20
 8006706:	461a      	mov	r2, r3
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 fda2 	bl	8007254 <DMA_List_FindNode>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d132      	bne.n	800677c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	d11a      	bne.n	8006756 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	461a      	mov	r2, r3
 800672e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006732:	4013      	ands	r3, r2
 8006734:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006738:	4319      	orrs	r1, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006746:	4013      	ands	r3, r2
 8006748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800674a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800674c:	4319      	orrs	r1, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006754:	e017      	b.n	8006786 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800676c:	4013      	ands	r3, r2
 800676e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006772:	4319      	orrs	r1, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800677a:	e004      	b.n	8006786 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2206      	movs	r2, #6
 8006780:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e00b      	b.n	800679e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3730      	adds	r7, #48	@ 0x30
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b08a      	sub	sp, #40	@ 0x28
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e052      	b.n	800685e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e049      	b.n	800685e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00c      	beq.n	80067ec <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d101      	bne.n	80067e2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e03d      	b.n	800685e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e038      	b.n	800685e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d104      	bne.n	80067fe <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2204      	movs	r2, #4
 80067f8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e02f      	b.n	800685e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f107 0220 	add.w	r2, r7, #32
 8006812:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fcec 	bl	80071f4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006820:	f107 030c 	add.w	r3, r7, #12
 8006824:	461a      	mov	r2, r3
 8006826:	2100      	movs	r1, #0
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fd13 	bl	8007254 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006838:	4013      	ands	r3, r2
 800683a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4610      	mov	r0, r2
 8006840:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006842:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006844:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3728      	adds	r7, #40	@ 0x28
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_DMAEx_List_LinkQ+0x16>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e072      	b.n	8006968 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006888:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d002      	beq.n	800689c <HAL_DMAEx_List_LinkQ+0x34>
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b05      	cmp	r3, #5
 800689a:	d108      	bne.n	80068ae <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2240      	movs	r2, #64	@ 0x40
 80068a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e05c      	b.n	8006968 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	7b1b      	ldrb	r3, [r3, #12]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d104      	bne.n	80068c2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2201      	movs	r2, #1
 80068bc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e052      	b.n	8006968 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006974 <HAL_DMAEx_List_LinkQ+0x10c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d022      	beq.n	8006912 <HAL_DMAEx_List_LinkQ+0xaa>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a29      	ldr	r2, [pc, #164]	@ (8006978 <HAL_DMAEx_List_LinkQ+0x110>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01d      	beq.n	8006912 <HAL_DMAEx_List_LinkQ+0xaa>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a28      	ldr	r2, [pc, #160]	@ (800697c <HAL_DMAEx_List_LinkQ+0x114>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d018      	beq.n	8006912 <HAL_DMAEx_List_LinkQ+0xaa>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <HAL_DMAEx_List_LinkQ+0x118>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <HAL_DMAEx_List_LinkQ+0xaa>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a25      	ldr	r2, [pc, #148]	@ (8006984 <HAL_DMAEx_List_LinkQ+0x11c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00e      	beq.n	8006912 <HAL_DMAEx_List_LinkQ+0xaa>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a23      	ldr	r2, [pc, #140]	@ (8006988 <HAL_DMAEx_List_LinkQ+0x120>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d009      	beq.n	8006912 <HAL_DMAEx_List_LinkQ+0xaa>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a22      	ldr	r2, [pc, #136]	@ (800698c <HAL_DMAEx_List_LinkQ+0x124>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d004      	beq.n	8006912 <HAL_DMAEx_List_LinkQ+0xaa>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <HAL_DMAEx_List_LinkQ+0x128>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d101      	bne.n	8006916 <HAL_DMAEx_List_LinkQ+0xae>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <HAL_DMAEx_List_LinkQ+0xb0>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10b      	bne.n	8006934 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2203      	movs	r2, #3
 800692e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e019      	b.n	8006968 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006938:	2b81      	cmp	r3, #129	@ 0x81
 800693a:	d108      	bne.n	800694e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10d      	bne.n	8006960 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2204      	movs	r2, #4
 8006948:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e00c      	b.n	8006968 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2204      	movs	r2, #4
 800695a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e003      	b.n	8006968 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40020650 	.word	0x40020650
 8006978:	50020650 	.word	0x50020650
 800697c:	400206d0 	.word	0x400206d0
 8006980:	500206d0 	.word	0x500206d0
 8006984:	40020750 	.word	0x40020750
 8006988:	50020750 	.word	0x50020750
 800698c:	400207d0 	.word	0x400207d0
 8006990:	500207d0 	.word	0x500207d0

08006994 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	b2db      	uxtb	r3, r3
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a85      	ldr	r2, [pc, #532]	@ (8006be4 <DMA_List_Init+0x230>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	f000 80a0 	beq.w	8006b14 <DMA_List_Init+0x160>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a83      	ldr	r2, [pc, #524]	@ (8006be8 <DMA_List_Init+0x234>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	f000 809a 	beq.w	8006b14 <DMA_List_Init+0x160>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a81      	ldr	r2, [pc, #516]	@ (8006bec <DMA_List_Init+0x238>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	f000 8094 	beq.w	8006b14 <DMA_List_Init+0x160>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a7f      	ldr	r2, [pc, #508]	@ (8006bf0 <DMA_List_Init+0x23c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	f000 808e 	beq.w	8006b14 <DMA_List_Init+0x160>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a7d      	ldr	r2, [pc, #500]	@ (8006bf4 <DMA_List_Init+0x240>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f000 8088 	beq.w	8006b14 <DMA_List_Init+0x160>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a7b      	ldr	r2, [pc, #492]	@ (8006bf8 <DMA_List_Init+0x244>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	f000 8082 	beq.w	8006b14 <DMA_List_Init+0x160>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a79      	ldr	r2, [pc, #484]	@ (8006bfc <DMA_List_Init+0x248>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d07c      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a78      	ldr	r2, [pc, #480]	@ (8006c00 <DMA_List_Init+0x24c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d077      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a76      	ldr	r2, [pc, #472]	@ (8006c04 <DMA_List_Init+0x250>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d072      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a75      	ldr	r2, [pc, #468]	@ (8006c08 <DMA_List_Init+0x254>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d06d      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a73      	ldr	r2, [pc, #460]	@ (8006c0c <DMA_List_Init+0x258>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d068      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a72      	ldr	r2, [pc, #456]	@ (8006c10 <DMA_List_Init+0x25c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d063      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a70      	ldr	r2, [pc, #448]	@ (8006c14 <DMA_List_Init+0x260>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d05e      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6f      	ldr	r2, [pc, #444]	@ (8006c18 <DMA_List_Init+0x264>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d059      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a6d      	ldr	r2, [pc, #436]	@ (8006c1c <DMA_List_Init+0x268>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d054      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a6c      	ldr	r2, [pc, #432]	@ (8006c20 <DMA_List_Init+0x26c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d04f      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6a      	ldr	r2, [pc, #424]	@ (8006c24 <DMA_List_Init+0x270>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d04a      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a69      	ldr	r2, [pc, #420]	@ (8006c28 <DMA_List_Init+0x274>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d045      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a67      	ldr	r2, [pc, #412]	@ (8006c2c <DMA_List_Init+0x278>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d040      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a66      	ldr	r2, [pc, #408]	@ (8006c30 <DMA_List_Init+0x27c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d03b      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a64      	ldr	r2, [pc, #400]	@ (8006c34 <DMA_List_Init+0x280>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d036      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a63      	ldr	r2, [pc, #396]	@ (8006c38 <DMA_List_Init+0x284>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d031      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a61      	ldr	r2, [pc, #388]	@ (8006c3c <DMA_List_Init+0x288>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d02c      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a60      	ldr	r2, [pc, #384]	@ (8006c40 <DMA_List_Init+0x28c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d027      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8006c44 <DMA_List_Init+0x290>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d022      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8006c48 <DMA_List_Init+0x294>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d01d      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a5b      	ldr	r2, [pc, #364]	@ (8006c4c <DMA_List_Init+0x298>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d018      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8006c50 <DMA_List_Init+0x29c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a58      	ldr	r2, [pc, #352]	@ (8006c54 <DMA_List_Init+0x2a0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00e      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a57      	ldr	r2, [pc, #348]	@ (8006c58 <DMA_List_Init+0x2a4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d009      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a55      	ldr	r2, [pc, #340]	@ (8006c5c <DMA_List_Init+0x2a8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <DMA_List_Init+0x160>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a54      	ldr	r2, [pc, #336]	@ (8006c60 <DMA_List_Init+0x2ac>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d101      	bne.n	8006b18 <DMA_List_Init+0x164>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <DMA_List_Init+0x166>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006b4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2200      	movs	r2, #0
 8006b54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a36      	ldr	r2, [pc, #216]	@ (8006c44 <DMA_List_Init+0x290>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <DMA_List_Init+0x202>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a34      	ldr	r2, [pc, #208]	@ (8006c48 <DMA_List_Init+0x294>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01d      	beq.n	8006bb6 <DMA_List_Init+0x202>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a33      	ldr	r2, [pc, #204]	@ (8006c4c <DMA_List_Init+0x298>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <DMA_List_Init+0x202>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a31      	ldr	r2, [pc, #196]	@ (8006c50 <DMA_List_Init+0x29c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <DMA_List_Init+0x202>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a30      	ldr	r2, [pc, #192]	@ (8006c54 <DMA_List_Init+0x2a0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <DMA_List_Init+0x202>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8006c58 <DMA_List_Init+0x2a4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <DMA_List_Init+0x202>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8006c5c <DMA_List_Init+0x2a8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <DMA_List_Init+0x202>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c60 <DMA_List_Init+0x2ac>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d101      	bne.n	8006bba <DMA_List_Init+0x206>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <DMA_List_Init+0x208>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	40020050 	.word	0x40020050
 8006be8:	50020050 	.word	0x50020050
 8006bec:	400200d0 	.word	0x400200d0
 8006bf0:	500200d0 	.word	0x500200d0
 8006bf4:	40020150 	.word	0x40020150
 8006bf8:	50020150 	.word	0x50020150
 8006bfc:	400201d0 	.word	0x400201d0
 8006c00:	500201d0 	.word	0x500201d0
 8006c04:	40020250 	.word	0x40020250
 8006c08:	50020250 	.word	0x50020250
 8006c0c:	400202d0 	.word	0x400202d0
 8006c10:	500202d0 	.word	0x500202d0
 8006c14:	40020350 	.word	0x40020350
 8006c18:	50020350 	.word	0x50020350
 8006c1c:	400203d0 	.word	0x400203d0
 8006c20:	500203d0 	.word	0x500203d0
 8006c24:	40020450 	.word	0x40020450
 8006c28:	50020450 	.word	0x50020450
 8006c2c:	400204d0 	.word	0x400204d0
 8006c30:	500204d0 	.word	0x500204d0
 8006c34:	40020550 	.word	0x40020550
 8006c38:	50020550 	.word	0x50020550
 8006c3c:	400205d0 	.word	0x400205d0
 8006c40:	500205d0 	.word	0x500205d0
 8006c44:	40020650 	.word	0x40020650
 8006c48:	50020650 	.word	0x50020650
 8006c4c:	400206d0 	.word	0x400206d0
 8006c50:	500206d0 	.word	0x500206d0
 8006c54:	40020750 	.word	0x40020750
 8006c58:	50020750 	.word	0x50020750
 8006c5c:	400207d0 	.word	0x400207d0
 8006c60:	500207d0 	.word	0x500207d0

08006c64 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006c76:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006c7c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006c82:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006c88:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d017      	beq.n	8006cca <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	3b01      	subs	r3, #1
 8006cae:	051b      	lsls	r3, r3, #20
 8006cb0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006cb4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006cc2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6859      	ldr	r1, [r3, #4]
 8006cd2:	f240 237f 	movw	r3, #639	@ 0x27f
 8006cd6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce6:	d10c      	bne.n	8006d02 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d011      	beq.n	8006d18 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	605a      	str	r2, [r3, #4]
 8006d00:	e00a      	b.n	8006d18 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d0a:	d105      	bne.n	8006d18 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00f      	beq.n	8006d40 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006d38:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d04e      	beq.n	8006df4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	0419      	lsls	r1, r3, #16
 8006d62:	4b67      	ldr	r3, [pc, #412]	@ (8006f00 <DMA_List_BuildNode+0x29c>)
 8006d64:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006d66:	431a      	orrs	r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da06      	bge.n	8006d82 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	e005      	b.n	8006d8e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	da06      	bge.n	8006da4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	609a      	str	r2, [r3, #8]
 8006da2:	e005      	b.n	8006db0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da06      	bge.n	8006dc6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	e005      	b.n	8006dd2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da06      	bge.n	8006de8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	609a      	str	r2, [r3, #8]
 8006de6:	e005      	b.n	8006df4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d059      	beq.n	8006ec4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da09      	bge.n	8006e2c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1c:	425b      	negs	r3, r3
 8006e1e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	615a      	str	r2, [r3, #20]
 8006e2a:	e005      	b.n	8006e38 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e30:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da0d      	bge.n	8006e5c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e44:	425b      	negs	r3, r3
 8006e46:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	0419      	lsls	r1, r3, #16
 8006e50:	4b2c      	ldr	r3, [pc, #176]	@ (8006f04 <DMA_List_BuildNode+0x2a0>)
 8006e52:	400b      	ands	r3, r1
 8006e54:	431a      	orrs	r2, r3
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	615a      	str	r2, [r3, #20]
 8006e5a:	e009      	b.n	8006e70 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e64:	0419      	lsls	r1, r3, #16
 8006e66:	4b27      	ldr	r3, [pc, #156]	@ (8006f04 <DMA_List_BuildNode+0x2a0>)
 8006e68:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da08      	bge.n	8006e8a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7c:	425b      	negs	r3, r3
 8006e7e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	619a      	str	r2, [r3, #24]
 8006e88:	e004      	b.n	8006e94 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	da0b      	bge.n	8006eb4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006eac:	431a      	orrs	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	619a      	str	r2, [r3, #24]
 8006eb2:	e007      	b.n	8006ec4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ebc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006ee4:	e005      	b.n	8006ef2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	07ff0000 	.word	0x07ff0000
 8006f04:	1fff0000 	.word	0x1fff0000

08006f08 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0208 	and.w	r2, r3, #8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0203 	and.w	r2, r3, #3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f56:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006f60:	0d1b      	lsrs	r3, r3, #20
 8006f62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f66:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	4b66      	ldr	r3, [pc, #408]	@ (8007118 <DMA_List_GetNodeConfig+0x210>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fa2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e013      	b.n	8006fd6 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	e002      	b.n	8006fd6 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	b29a      	uxth	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007034:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	64da      	str	r2, [r3, #76]	@ 0x4c
 800703a:	e002      	b.n	8007042 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d04a      	beq.n	80070f4 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007068:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800706a:	89fa      	ldrh	r2, [r7, #14]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	b29b      	uxth	r3, r3
 8007078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800707c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800707e:	89fa      	ldrh	r2, [r7, #14]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007094:	425a      	negs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070aa:	425a      	negs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80070b6:	89fa      	ldrh	r2, [r7, #14]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80070c4:	89fa      	ldrh	r2, [r7, #14]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070da:	425a      	negs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da11      	bge.n	800710c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ec:	425a      	negs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80070f2:	e00b      	b.n	800710c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800710c:	bf00      	nop
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	0c002000 	.word	0x0c002000

0800711c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4313      	orrs	r3, r2
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e00a      	b.n	800715e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e004      	b.n	800715e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	429a      	cmp	r2, r3
 8007168:	d001      	beq.n	800716e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e00e      	b.n	80071ba <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	e006      	b.n	80071ba <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d007      	beq.n	80071d0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d001      	beq.n	80071d0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80071cc:	2302      	movs	r3, #2
 80071ce:	e00b      	b.n	80071e8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d001      	beq.n	80071e6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e000      	b.n	80071e8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4a0d      	ldr	r2, [pc, #52]	@ (800724c <DMA_List_GetCLLRNodeInfo+0x58>)
 8007216:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2207      	movs	r2, #7
 8007222:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007224:	e00b      	b.n	800723e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4a08      	ldr	r2, [pc, #32]	@ (8007250 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007230:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2205      	movs	r2, #5
 800723c:	601a      	str	r2, [r3, #0]
}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	fe010000 	.word	0xfe010000
 8007250:	f8010000 	.word	0xf8010000

08007254 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007254:	b480      	push	{r7}
 8007256:	b089      	sub	sp, #36	@ 0x24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d142      	bne.n	80072fe <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007278:	e01d      	b.n	80072b6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800728a:	4013      	ands	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e00f      	b.n	80072b0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	4413      	add	r3, r2
 80072a0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80072a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80072ac:	4013      	ands	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d3dc      	bcc.n	800727a <DMA_List_FindNode+0x26>
 80072c0:	e029      	b.n	8007316 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d107      	bne.n	80072d8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80072d2:	4013      	ands	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	e00f      	b.n	80072f8 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4413      	add	r3, r2
 80072e8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80072f0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80072f4:	4013      	ands	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	429a      	cmp	r2, r3
 8007306:	d206      	bcs.n	8007316 <DMA_List_FindNode+0xc2>
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800730e:	4013      	ands	r3, r2
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	429a      	cmp	r2, r3
 8007314:	d1d5      	bne.n	80072c2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007322:	4013      	ands	r3, r2
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	429a      	cmp	r2, r3
 8007328:	d001      	beq.n	800732e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800732a:	2301      	movs	r3, #1
 800732c:	e02b      	b.n	8007386 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	041b      	lsls	r3, r3, #16
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	461a      	mov	r2, r3
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00f      	beq.n	8007384 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	461a      	mov	r2, r3
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007370:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007374:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3724      	adds	r7, #36	@ 0x24
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
	...

08007394 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007394:	b480      	push	{r7}
 8007396:	b089      	sub	sp, #36	@ 0x24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80073a6:	e1ba      	b.n	800771e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	2101      	movs	r1, #1
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	4013      	ands	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 81aa 	beq.w	8007718 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a55      	ldr	r2, [pc, #340]	@ (800751c <HAL_GPIO_Init+0x188>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d15d      	bne.n	8007488 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80073d2:	2201      	movs	r2, #1
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	43db      	mvns	r3, r3
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	4013      	ands	r3, r2
 80073e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0201 	and.w	r2, r3, #1
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80073fc:	4a48      	ldr	r2, [pc, #288]	@ (8007520 <HAL_GPIO_Init+0x18c>)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007404:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007406:	4a46      	ldr	r2, [pc, #280]	@ (8007520 <HAL_GPIO_Init+0x18c>)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4413      	add	r3, r2
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	08da      	lsrs	r2, r3, #3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	3208      	adds	r2, #8
 800741a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	220f      	movs	r2, #15
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	43db      	mvns	r3, r3
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	4013      	ands	r3, r2
 8007434:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	220b      	movs	r2, #11
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	4313      	orrs	r3, r2
 8007448:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	08da      	lsrs	r2, r3, #3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	3208      	adds	r2, #8
 8007452:	69f9      	ldr	r1, [r7, #28]
 8007454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	2203      	movs	r2, #3
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	43db      	mvns	r3, r3
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	4013      	ands	r3, r2
 800746e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	2202      	movs	r2, #2
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	4313      	orrs	r3, r2
 800747e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	e067      	b.n	8007558 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d003      	beq.n	8007498 <HAL_GPIO_Init+0x104>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b12      	cmp	r3, #18
 8007496:	d145      	bne.n	8007524 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	08da      	lsrs	r2, r3, #3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3208      	adds	r2, #8
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	220f      	movs	r2, #15
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	4013      	ands	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	08da      	lsrs	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3208      	adds	r2, #8
 80074de:	69f9      	ldr	r1, [r7, #28]
 80074e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	2203      	movs	r2, #3
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	43db      	mvns	r3, r3
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	4013      	ands	r3, r2
 80074fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f003 0203 	and.w	r2, r3, #3
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	4313      	orrs	r3, r2
 8007510:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	e01e      	b.n	8007558 <HAL_GPIO_Init+0x1c4>
 800751a:	bf00      	nop
 800751c:	46020000 	.word	0x46020000
 8007520:	08011618 	.word	0x08011618
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	2203      	movs	r2, #3
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	43db      	mvns	r3, r3
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	4013      	ands	r3, r2
 800753a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f003 0203 	and.w	r2, r3, #3
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	4313      	orrs	r3, r2
 8007550:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d00b      	beq.n	8007578 <HAL_GPIO_Init+0x1e4>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d007      	beq.n	8007578 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800756c:	2b11      	cmp	r3, #17
 800756e:	d003      	beq.n	8007578 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b12      	cmp	r3, #18
 8007576:	d130      	bne.n	80075da <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	2203      	movs	r2, #3
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	43db      	mvns	r3, r3
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	4013      	ands	r3, r2
 800758e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	4313      	orrs	r3, r2
 80075a0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80075ae:	2201      	movs	r2, #1
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	43db      	mvns	r3, r3
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	4013      	ands	r3, r2
 80075bc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	091b      	lsrs	r3, r3, #4
 80075c4:	f003 0201 	and.w	r2, r3, #1
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	fa02 f303 	lsl.w	r3, r2, r3
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d017      	beq.n	8007612 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	2203      	movs	r2, #3
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	43db      	mvns	r3, r3
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	4013      	ands	r3, r2
 80075f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	4313      	orrs	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d07c      	beq.n	8007718 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800761e:	4a47      	ldr	r2, [pc, #284]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	089b      	lsrs	r3, r3, #2
 8007624:	3318      	adds	r3, #24
 8007626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	220f      	movs	r2, #15
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	4013      	ands	r3, r2
 8007640:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	0a9a      	lsrs	r2, r3, #10
 8007646:	4b3e      	ldr	r3, [pc, #248]	@ (8007740 <HAL_GPIO_Init+0x3ac>)
 8007648:	4013      	ands	r3, r2
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	f002 0203 	and.w	r2, r2, #3
 8007650:	00d2      	lsls	r2, r2, #3
 8007652:	4093      	lsls	r3, r2
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	4313      	orrs	r3, r2
 8007658:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800765a:	4938      	ldr	r1, [pc, #224]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	089b      	lsrs	r3, r3, #2
 8007660:	3318      	adds	r3, #24
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007668:	4b34      	ldr	r3, [pc, #208]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	43db      	mvns	r3, r3
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	4013      	ands	r3, r2
 8007676:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800768c:	4a2b      	ldr	r2, [pc, #172]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007692:	4b2a      	ldr	r3, [pc, #168]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	43db      	mvns	r3, r3
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	4013      	ands	r3, r2
 80076a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80076b6:	4a21      	ldr	r2, [pc, #132]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80076bc:	4b1f      	ldr	r3, [pc, #124]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 80076be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	43db      	mvns	r3, r3
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	4013      	ands	r3, r2
 80076cc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80076e2:	4a16      	ldr	r2, [pc, #88]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80076ea:	4b14      	ldr	r3, [pc, #80]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 80076ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	43db      	mvns	r3, r3
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	4013      	ands	r3, r2
 80076fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007710:	4a0a      	ldr	r2, [pc, #40]	@ (800773c <HAL_GPIO_Init+0x3a8>)
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	3301      	adds	r3, #1
 800771c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	f47f ae3d 	bne.w	80073a8 <HAL_GPIO_Init+0x14>
  }
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	3724      	adds	r7, #36	@ 0x24
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	46022000 	.word	0x46022000
 8007740:	002f7f7f 	.word	0x002f7f7f

08007744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	807b      	strh	r3, [r7, #2]
 8007750:	4613      	mov	r3, r2
 8007752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007754:	787b      	ldrb	r3, [r7, #1]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800775a:	887a      	ldrh	r2, [r7, #2]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007760:	e002      	b.n	8007768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007762:	887a      	ldrh	r2, [r7, #2]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800777e:	4b0f      	ldr	r3, [pc, #60]	@ (80077bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	4013      	ands	r3, r2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d006      	beq.n	8007798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800778a:	4a0c      	ldr	r2, [pc, #48]	@ (80077bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 f814 	bl	80077c0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007798:	4b08      	ldr	r3, [pc, #32]	@ (80077bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d006      	beq.n	80077b2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80077a4:	4a05      	ldr	r2, [pc, #20]	@ (80077bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f812 	bl	80077d6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	46022000 	.word	0x46022000

080077c0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	4603      	mov	r3, r0
 80077de:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e08d      	b.n	800791a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fa fa7a 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2224      	movs	r2, #36	@ 0x24
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0201 	bic.w	r2, r2, #1
 800782e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800783c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800784c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007862:	609a      	str	r2, [r3, #8]
 8007864:	e006      	b.n	8007874 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007872:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b02      	cmp	r3, #2
 800787a:	d108      	bne.n	800788e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800788a:	605a      	str	r2, [r3, #4]
 800788c:	e007      	b.n	800789e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800789c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69d9      	ldr	r1, [r3, #28]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	461a      	mov	r2, r3
 8007930:	460b      	mov	r3, r1
 8007932:	817b      	strh	r3, [r7, #10]
 8007934:	4613      	mov	r3, r2
 8007936:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b20      	cmp	r3, #32
 8007942:	f040 80da 	bne.w	8007afa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_I2C_Master_Transmit+0x30>
 8007950:	2302      	movs	r3, #2
 8007952:	e0d3      	b.n	8007afc <HAL_I2C_Master_Transmit+0x1d8>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800795c:	f7fb f8fc 	bl	8002b58 <HAL_GetTick>
 8007960:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	2319      	movs	r3, #25
 8007968:	2201      	movs	r2, #1
 800796a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 ff73 	bl	800885a <I2C_WaitOnFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e0be      	b.n	8007afc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2221      	movs	r2, #33	@ 0x21
 8007982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2210      	movs	r2, #16
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	893a      	ldrh	r2, [r7, #8]
 800799e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2bff      	cmp	r3, #255	@ 0xff
 80079ae:	d90e      	bls.n	80079ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	22ff      	movs	r2, #255	@ 0xff
 80079b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	8979      	ldrh	r1, [r7, #10]
 80079be:	4b51      	ldr	r3, [pc, #324]	@ (8007b04 <HAL_I2C_Master_Transmit+0x1e0>)
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f001 f996 	bl	8008cf8 <I2C_TransferConfig>
 80079cc:	e06c      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	8979      	ldrh	r1, [r7, #10]
 80079e0:	4b48      	ldr	r3, [pc, #288]	@ (8007b04 <HAL_I2C_Master_Transmit+0x1e0>)
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 f985 	bl	8008cf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80079ee:	e05b      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	6a39      	ldr	r1, [r7, #32]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 ff89 	bl	800890c <I2C_WaitOnTXISFlagUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e07b      	b.n	8007afc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d034      	beq.n	8007aa8 <HAL_I2C_Master_Transmit+0x184>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d130      	bne.n	8007aa8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2180      	movs	r1, #128	@ 0x80
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 ff02 	bl	800885a <I2C_WaitOnFlagUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e04d      	b.n	8007afc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2bff      	cmp	r3, #255	@ 0xff
 8007a68:	d90e      	bls.n	8007a88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	22ff      	movs	r2, #255	@ 0xff
 8007a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	8979      	ldrh	r1, [r7, #10]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f001 f939 	bl	8008cf8 <I2C_TransferConfig>
 8007a86:	e00f      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	8979      	ldrh	r1, [r7, #10]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f001 f928 	bl	8008cf8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d19e      	bne.n	80079f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	6a39      	ldr	r1, [r7, #32]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 ff6f 	bl	800899a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e01a      	b.n	8007afc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2220      	movs	r2, #32
 8007acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6859      	ldr	r1, [r3, #4]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b08 <HAL_I2C_Master_Transmit+0x1e4>)
 8007ada:	400b      	ands	r3, r1
 8007adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e000      	b.n	8007afc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007afa:	2302      	movs	r3, #2
  }
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	80002000 	.word	0x80002000
 8007b08:	fe00e800 	.word	0xfe00e800

08007b0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	461a      	mov	r2, r3
 8007b18:	460b      	mov	r3, r1
 8007b1a:	817b      	strh	r3, [r7, #10]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	f040 80db 	bne.w	8007ce4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_I2C_Master_Receive+0x30>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e0d4      	b.n	8007ce6 <HAL_I2C_Master_Receive+0x1da>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b44:	f7fb f808 	bl	8002b58 <HAL_GetTick>
 8007b48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	2319      	movs	r3, #25
 8007b50:	2201      	movs	r2, #1
 8007b52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fe7f 	bl	800885a <I2C_WaitOnFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e0bf      	b.n	8007ce6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2222      	movs	r2, #34	@ 0x22
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2210      	movs	r2, #16
 8007b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	893a      	ldrh	r2, [r7, #8]
 8007b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2bff      	cmp	r3, #255	@ 0xff
 8007b96:	d90e      	bls.n	8007bb6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	22ff      	movs	r2, #255	@ 0xff
 8007b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	8979      	ldrh	r1, [r7, #10]
 8007ba6:	4b52      	ldr	r3, [pc, #328]	@ (8007cf0 <HAL_I2C_Master_Receive+0x1e4>)
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f001 f8a2 	bl	8008cf8 <I2C_TransferConfig>
 8007bb4:	e06d      	b.n	8007c92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	8979      	ldrh	r1, [r7, #10]
 8007bc8:	4b49      	ldr	r3, [pc, #292]	@ (8007cf0 <HAL_I2C_Master_Receive+0x1e4>)
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f001 f891 	bl	8008cf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007bd6:	e05c      	b.n	8007c92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	6a39      	ldr	r1, [r7, #32]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 ff1f 	bl	8008a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e07c      	b.n	8007ce6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d034      	beq.n	8007c92 <HAL_I2C_Master_Receive+0x186>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d130      	bne.n	8007c92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2180      	movs	r1, #128	@ 0x80
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fe0d 	bl	800885a <I2C_WaitOnFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e04d      	b.n	8007ce6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2bff      	cmp	r3, #255	@ 0xff
 8007c52:	d90e      	bls.n	8007c72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	22ff      	movs	r2, #255	@ 0xff
 8007c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	8979      	ldrh	r1, [r7, #10]
 8007c62:	2300      	movs	r3, #0
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f001 f844 	bl	8008cf8 <I2C_TransferConfig>
 8007c70:	e00f      	b.n	8007c92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	8979      	ldrh	r1, [r7, #10]
 8007c84:	2300      	movs	r3, #0
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f001 f833 	bl	8008cf8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d19d      	bne.n	8007bd8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	6a39      	ldr	r1, [r7, #32]
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fe7a 	bl	800899a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e01a      	b.n	8007ce6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6859      	ldr	r1, [r3, #4]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf4 <HAL_I2C_Master_Receive+0x1e8>)
 8007cc4:	400b      	ands	r3, r1
 8007cc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e000      	b.n	8007ce6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007ce4:	2302      	movs	r3, #2
  }
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	80002400 	.word	0x80002400
 8007cf4:	fe00e800 	.word	0xfe00e800

08007cf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
  }
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00f      	beq.n	8007d6e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5c:	f043 0201 	orr.w	r2, r3, #1
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d6c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00f      	beq.n	8007d98 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d86:	f043 0208 	orr.w	r2, r3, #8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d96:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00f      	beq.n	8007dc2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007db0:	f043 0202 	orr.w	r2, r3, #2
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dc0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f003 030b 	and.w	r3, r3, #11
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fbe7 	bl	80085a8 <I2C_ITError>
  }
}
 8007dda:	bf00      	nop
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
 8007e16:	4613      	mov	r3, r2
 8007e18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b086      	sub	sp, #24
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <I2C_Slave_ISR_IT+0x24>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e0e2      	b.n	800804c <I2C_Slave_ISR_IT+0x1ea>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d009      	beq.n	8007eac <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007ea2:	6939      	ldr	r1, [r7, #16]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f9b5 	bl	8008214 <I2C_ITSlaveCplt>
 8007eaa:	e0ca      	b.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f003 0310 	and.w	r3, r3, #16
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d04b      	beq.n	8007f4e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d046      	beq.n	8007f4e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d128      	bne.n	8007f1c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b28      	cmp	r3, #40	@ 0x28
 8007ed4:	d108      	bne.n	8007ee8 <I2C_Slave_ISR_IT+0x86>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007edc:	d104      	bne.n	8007ee8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ede:	6939      	ldr	r1, [r7, #16]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 fb0d 	bl	8008500 <I2C_ITListenCplt>
 8007ee6:	e031      	b.n	8007f4c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b29      	cmp	r3, #41	@ 0x29
 8007ef2:	d10e      	bne.n	8007f12 <I2C_Slave_ISR_IT+0xb0>
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007efa:	d00a      	beq.n	8007f12 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2210      	movs	r2, #16
 8007f02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 fc66 	bl	80087d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f926 	bl	800815c <I2C_ITSlaveSeqCplt>
 8007f10:	e01c      	b.n	8007f4c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2210      	movs	r2, #16
 8007f18:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007f1a:	e08f      	b.n	800803c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2210      	movs	r2, #16
 8007f22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f28:	f043 0204 	orr.w	r2, r3, #4
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <I2C_Slave_ISR_IT+0xdc>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f3c:	d17e      	bne.n	800803c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f42:	4619      	mov	r1, r3
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fb2f 	bl	80085a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007f4a:	e077      	b.n	800803c <I2C_Slave_ISR_IT+0x1da>
 8007f4c:	e076      	b.n	800803c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02f      	beq.n	8007fb8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02a      	beq.n	8007fb8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d018      	beq.n	8007f9e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d14b      	bne.n	8008040 <I2C_Slave_ISR_IT+0x1de>
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fae:	d047      	beq.n	8008040 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f8d3 	bl	800815c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007fb6:	e043      	b.n	8008040 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d009      	beq.n	8007fd6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007fcc:	6939      	ldr	r1, [r7, #16]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f840 	bl	8008054 <I2C_ITAddrCplt>
 8007fd4:	e035      	b.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d030      	beq.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d02b      	beq.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d018      	beq.n	8008026 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff8:	781a      	ldrb	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008024:	e00d      	b.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800802c:	d002      	beq.n	8008034 <I2C_Slave_ISR_IT+0x1d2>
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d106      	bne.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f891 	bl	800815c <I2C_ITSlaveSeqCplt>
 800803a:	e002      	b.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008040:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800806a:	2b28      	cmp	r3, #40	@ 0x28
 800806c:	d16a      	bne.n	8008144 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	0c1b      	lsrs	r3, r3, #16
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	0c1b      	lsrs	r3, r3, #16
 8008086:	b29b      	uxth	r3, r3
 8008088:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800808c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	b29b      	uxth	r3, r3
 8008096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800809a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80080a8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d138      	bne.n	8008124 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80080b2:	897b      	ldrh	r3, [r7, #10]
 80080b4:	09db      	lsrs	r3, r3, #7
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	89bb      	ldrh	r3, [r7, #12]
 80080ba:	4053      	eors	r3, r2
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f003 0306 	and.w	r3, r3, #6
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d11c      	bne.n	8008100 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80080c6:	897b      	ldrh	r3, [r7, #10]
 80080c8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d13b      	bne.n	8008154 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2208      	movs	r2, #8
 80080e8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080f2:	89ba      	ldrh	r2, [r7, #12]
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff fe86 	bl	8007e0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80080fe:	e029      	b.n	8008154 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008100:	893b      	ldrh	r3, [r7, #8]
 8008102:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008104:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fe27 	bl	8008d5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008116:	89ba      	ldrh	r2, [r7, #12]
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fe74 	bl	8007e0a <HAL_I2C_AddrCallback>
}
 8008122:	e017      	b.n	8008154 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fe17 	bl	8008d5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008136:	89ba      	ldrh	r2, [r7, #12]
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fe64 	bl	8007e0a <HAL_I2C_AddrCallback>
}
 8008142:	e007      	b.n	8008154 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2208      	movs	r2, #8
 800814a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d008      	beq.n	8008190 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e00c      	b.n	80081aa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081a8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b29      	cmp	r3, #41	@ 0x29
 80081b4:	d112      	bne.n	80081dc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2228      	movs	r2, #40	@ 0x28
 80081ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2221      	movs	r2, #33	@ 0x21
 80081c2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80081c4:	2101      	movs	r1, #1
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fdc8 	bl	8008d5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fe04 	bl	8007de2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081da:	e017      	b.n	800820c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e6:	d111      	bne.n	800820c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2228      	movs	r2, #40	@ 0x28
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2222      	movs	r2, #34	@ 0x22
 80081f4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081f6:	2102      	movs	r1, #2
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fdaf 	bl	8008d5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fdf5 	bl	8007df6 <HAL_I2C_SlaveRxCpltCallback>
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008236:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2220      	movs	r2, #32
 800823e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	2b21      	cmp	r3, #33	@ 0x21
 8008244:	d002      	beq.n	800824c <I2C_ITSlaveCplt+0x38>
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b29      	cmp	r3, #41	@ 0x29
 800824a:	d108      	bne.n	800825e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800824c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fd83 	bl	8008d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2221      	movs	r2, #33	@ 0x21
 800825a:	631a      	str	r2, [r3, #48]	@ 0x30
 800825c:	e019      	b.n	8008292 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	2b22      	cmp	r3, #34	@ 0x22
 8008262:	d002      	beq.n	800826a <I2C_ITSlaveCplt+0x56>
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	2b2a      	cmp	r3, #42	@ 0x2a
 8008268:	d108      	bne.n	800827c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800826a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fd74 	bl	8008d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2222      	movs	r2, #34	@ 0x22
 8008278:	631a      	str	r2, [r3, #48]	@ 0x30
 800827a:	e00a      	b.n	8008292 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	2b28      	cmp	r3, #40	@ 0x28
 8008280:	d107      	bne.n	8008292 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008282:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fd68 	bl	8008d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082a0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6859      	ldr	r1, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b92      	ldr	r3, [pc, #584]	@ (80084f8 <I2C_ITSlaveCplt+0x2e4>)
 80082ae:	400b      	ands	r3, r1
 80082b0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa8f 	bl	80087d6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01c      	beq.n	80082fc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d031      	beq.n	800833e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082e2:	b29c      	uxth	r4, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fb53 	bl	8006994 <HAL_DMAEx_GetFifoLevel>
 80082ee:	4603      	mov	r3, r0
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	4423      	add	r3, r4
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082fa:	e020      	b.n	800833e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d01b      	beq.n	800833e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008314:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00f      	beq.n	800833e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008326:	b29c      	uxth	r4, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fb31 	bl	8006994 <HAL_DMAEx_GetFifoLevel>
 8008332:	4603      	mov	r3, r0
 8008334:	b29b      	uxth	r3, r3
 8008336:	4423      	add	r3, r4
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	d020      	beq.n	800838a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f023 0304 	bic.w	r3, r3, #4
 800834e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835a:	b2d2      	uxtb	r2, r2
 800835c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008380:	b29b      	uxth	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008398:	f043 0204 	orr.w	r2, r3, #4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f003 0310 	and.w	r3, r3, #16
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d049      	beq.n	800843e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d044      	beq.n	800843e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d128      	bne.n	8008410 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b28      	cmp	r3, #40	@ 0x28
 80083c8:	d108      	bne.n	80083dc <I2C_ITSlaveCplt+0x1c8>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083d0:	d104      	bne.n	80083dc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80083d2:	6979      	ldr	r1, [r7, #20]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f893 	bl	8008500 <I2C_ITListenCplt>
 80083da:	e030      	b.n	800843e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b29      	cmp	r3, #41	@ 0x29
 80083e6:	d10e      	bne.n	8008406 <I2C_ITSlaveCplt+0x1f2>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083ee:	d00a      	beq.n	8008406 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2210      	movs	r2, #16
 80083f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f9ec 	bl	80087d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff feac 	bl	800815c <I2C_ITSlaveSeqCplt>
 8008404:	e01b      	b.n	800843e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2210      	movs	r2, #16
 800840c:	61da      	str	r2, [r3, #28]
 800840e:	e016      	b.n	800843e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2210      	movs	r2, #16
 8008416:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841c:	f043 0204 	orr.w	r2, r3, #4
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <I2C_ITSlaveCplt+0x21e>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008430:	d105      	bne.n	800843e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f8b5 	bl	80085a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008450:	2b00      	cmp	r3, #0
 8008452:	d010      	beq.n	8008476 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f8a4 	bl	80085a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b28      	cmp	r3, #40	@ 0x28
 800846a:	d141      	bne.n	80084f0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800846c:	6979      	ldr	r1, [r7, #20]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f846 	bl	8008500 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008474:	e03c      	b.n	80084f0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800847e:	d014      	beq.n	80084aa <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff fe6b 	bl	800815c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a1c      	ldr	r2, [pc, #112]	@ (80084fc <I2C_ITSlaveCplt+0x2e8>)
 800848a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fcbf 	bl	8007e26 <HAL_I2C_ListenCpltCallback>
}
 80084a8:	e022      	b.n	80084f0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b22      	cmp	r3, #34	@ 0x22
 80084b4:	d10e      	bne.n	80084d4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff fc92 	bl	8007df6 <HAL_I2C_SlaveRxCpltCallback>
}
 80084d2:	e00d      	b.n	80084f0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fc79 	bl	8007de2 <HAL_I2C_SlaveTxCpltCallback>
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd90      	pop	{r4, r7, pc}
 80084f8:	fe00e800 	.word	0xfe00e800
 80084fc:	ffff0000 	.word	0xffff0000

08008500 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a25      	ldr	r2, [pc, #148]	@ (80085a4 <I2C_ITListenCplt+0xa4>)
 800850e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2220      	movs	r2, #32
 800851a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d022      	beq.n	800857c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d012      	beq.n	800857c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855a:	3b01      	subs	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008574:	f043 0204 	orr.w	r2, r3, #4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800857c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fbeb 	bl	8008d5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2210      	movs	r2, #16
 800858c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff fc45 	bl	8007e26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	ffff0000 	.word	0xffff0000

080085a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085b8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a6d      	ldr	r2, [pc, #436]	@ (800877c <I2C_ITError+0x1d4>)
 80085c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	2b28      	cmp	r3, #40	@ 0x28
 80085de:	d005      	beq.n	80085ec <I2C_ITError+0x44>
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b29      	cmp	r3, #41	@ 0x29
 80085e4:	d002      	beq.n	80085ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ea:	d10b      	bne.n	8008604 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80085ec:	2103      	movs	r1, #3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fbb4 	bl	8008d5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2228      	movs	r2, #40	@ 0x28
 80085f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a60      	ldr	r2, [pc, #384]	@ (8008780 <I2C_ITError+0x1d8>)
 8008600:	635a      	str	r2, [r3, #52]	@ 0x34
 8008602:	e030      	b.n	8008666 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008604:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fba7 	bl	8008d5c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f8e1 	bl	80087d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b60      	cmp	r3, #96	@ 0x60
 800861e:	d01f      	beq.n	8008660 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b20      	cmp	r3, #32
 8008634:	d114      	bne.n	8008660 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b10      	cmp	r3, #16
 8008642:	d109      	bne.n	8008658 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2210      	movs	r2, #16
 800864a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008650:	f043 0204 	orr.w	r2, r3, #4
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2220      	movs	r2, #32
 800865e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008670:	2b00      	cmp	r3, #0
 8008672:	d039      	beq.n	80086e8 <I2C_ITError+0x140>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b11      	cmp	r3, #17
 8008678:	d002      	beq.n	8008680 <I2C_ITError+0xd8>
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b21      	cmp	r3, #33	@ 0x21
 800867e:	d133      	bne.n	80086e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800868a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800868e:	d107      	bne.n	80086a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800869e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd f9c9 	bl	8005a3c <HAL_DMA_GetState>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d017      	beq.n	80086e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b4:	4a33      	ldr	r2, [pc, #204]	@ (8008784 <I2C_ITError+0x1dc>)
 80086b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fd f82f 	bl	8005728 <HAL_DMA_Abort_IT>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d04d      	beq.n	800876c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80086da:	4610      	mov	r0, r2
 80086dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086de:	e045      	b.n	800876c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f851 	bl	8008788 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086e6:	e041      	b.n	800876c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d039      	beq.n	8008764 <I2C_ITError+0x1bc>
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2b12      	cmp	r3, #18
 80086f4:	d002      	beq.n	80086fc <I2C_ITError+0x154>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b22      	cmp	r3, #34	@ 0x22
 80086fa:	d133      	bne.n	8008764 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800870a:	d107      	bne.n	800871c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800871a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd f98b 	bl	8005a3c <HAL_DMA_GetState>
 8008726:	4603      	mov	r3, r0
 8008728:	2b01      	cmp	r3, #1
 800872a:	d017      	beq.n	800875c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008730:	4a14      	ldr	r2, [pc, #80]	@ (8008784 <I2C_ITError+0x1dc>)
 8008732:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008740:	4618      	mov	r0, r3
 8008742:	f7fc fff1 	bl	8005728 <HAL_DMA_Abort_IT>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d011      	beq.n	8008770 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008756:	4610      	mov	r0, r2
 8008758:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800875a:	e009      	b.n	8008770 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f813 	bl	8008788 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008762:	e005      	b.n	8008770 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f80f 	bl	8008788 <I2C_TreatErrorCallback>
  }
}
 800876a:	e002      	b.n	8008772 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008770:	bf00      	nop
}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	ffff0000 	.word	0xffff0000
 8008780:	08007e63 	.word	0x08007e63
 8008784:	0800881f 	.word	0x0800881f

08008788 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b60      	cmp	r3, #96	@ 0x60
 800879a:	d10e      	bne.n	80087ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fb4b 	bl	8007e4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087b8:	e009      	b.n	80087ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff fb36 	bl	8007e3a <HAL_I2C_ErrorCallback>
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d103      	bne.n	80087f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2200      	movs	r2, #0
 80087f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d007      	beq.n	8008812 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	619a      	str	r2, [r3, #24]
  }
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008838:	2200      	movs	r2, #0
 800883a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008848:	2200      	movs	r2, #0
 800884a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff ff9b 	bl	8008788 <I2C_TreatErrorCallback>
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800886a:	e03b      	b.n	80088e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f961 	bl	8008b38 <I2C_IsErrorOccurred>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e041      	b.n	8008904 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008886:	d02d      	beq.n	80088e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008888:	f7fa f966 	bl	8002b58 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d302      	bcc.n	800889e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d122      	bne.n	80088e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	bf0c      	ite	eq
 80088ae:	2301      	moveq	r3, #1
 80088b0:	2300      	movne	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d113      	bne.n	80088e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c0:	f043 0220 	orr.w	r2, r3, #32
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e00f      	b.n	8008904 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4013      	ands	r3, r2
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	bf0c      	ite	eq
 80088f4:	2301      	moveq	r3, #1
 80088f6:	2300      	movne	r3, #0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d0b4      	beq.n	800886c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008918:	e033      	b.n	8008982 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 f90a 	bl	8008b38 <I2C_IsErrorOccurred>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e031      	b.n	8008992 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d025      	beq.n	8008982 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008936:	f7fa f90f 	bl	8002b58 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	429a      	cmp	r2, r3
 8008944:	d302      	bcc.n	800894c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d11a      	bne.n	8008982 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d013      	beq.n	8008982 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800895e:	f043 0220 	orr.w	r2, r3, #32
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e007      	b.n	8008992 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b02      	cmp	r3, #2
 800898e:	d1c4      	bne.n	800891a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089a6:	e02f      	b.n	8008a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f8c3 	bl	8008b38 <I2C_IsErrorOccurred>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e02d      	b.n	8008a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089bc:	f7fa f8cc 	bl	8002b58 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d11a      	bne.n	8008a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d013      	beq.n	8008a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e4:	f043 0220 	orr.w	r2, r3, #32
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e007      	b.n	8008a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d1c8      	bne.n	80089a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008a30:	e071      	b.n	8008b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 f87e 	bl	8008b38 <I2C_IsErrorOccurred>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d13b      	bne.n	8008acc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d138      	bne.n	8008acc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d105      	bne.n	8008a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	2b10      	cmp	r3, #16
 8008a80:	d121      	bne.n	8008ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2210      	movs	r2, #16
 8008a88:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2204      	movs	r2, #4
 8008a8e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2220      	movs	r2, #32
 8008a96:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6859      	ldr	r1, [r3, #4]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b24      	ldr	r3, [pc, #144]	@ (8008b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008aa4:	400b      	ands	r3, r1
 8008aa6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	75fb      	strb	r3, [r7, #23]
 8008ac4:	e002      	b.n	8008acc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008acc:	f7fa f844 	bl	8002b58 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d302      	bcc.n	8008ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d119      	bne.n	8008b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d116      	bne.n	8008b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d00f      	beq.n	8008b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008afa:	f043 0220 	orr.w	r2, r3, #32
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d002      	beq.n	8008b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d083      	beq.n	8008a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	fe00e800 	.word	0xfe00e800

08008b38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	@ 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d068      	beq.n	8008c36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2210      	movs	r2, #16
 8008b6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b6c:	e049      	b.n	8008c02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d045      	beq.n	8008c02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008b76:	f7f9 ffef 	bl	8002b58 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d302      	bcc.n	8008b8c <I2C_IsErrorOccurred+0x54>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d13a      	bne.n	8008c02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bae:	d121      	bne.n	8008bf4 <I2C_IsErrorOccurred+0xbc>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bb6:	d01d      	beq.n	8008bf4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008bb8:	7cfb      	ldrb	r3, [r7, #19]
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d01a      	beq.n	8008bf4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008bce:	f7f9 ffc3 	bl	8002b58 <HAL_GetTick>
 8008bd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bd4:	e00e      	b.n	8008bf4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008bd6:	f7f9 ffbf 	bl	8002b58 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b19      	cmp	r3, #25
 8008be2:	d907      	bls.n	8008bf4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	f043 0320 	orr.w	r3, r3, #32
 8008bea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008bf2:	e006      	b.n	8008c02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d1e9      	bne.n	8008bd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d003      	beq.n	8008c18 <I2C_IsErrorOccurred+0xe0>
 8008c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0aa      	beq.n	8008b6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2220      	movs	r2, #32
 8008c26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	f043 0304 	orr.w	r3, r3, #4
 8008c2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	f043 0308 	orr.w	r3, r3, #8
 8008c70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008c7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00b      	beq.n	8008ca4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	f043 0302 	orr.w	r3, r3, #2
 8008c92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01c      	beq.n	8008ce6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff fd92 	bl	80087d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6859      	ldr	r1, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <I2C_IsErrorOccurred+0x1bc>)
 8008cbe:	400b      	ands	r3, r1
 8008cc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3728      	adds	r7, #40	@ 0x28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	fe00e800 	.word	0xfe00e800

08008cf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	607b      	str	r3, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	817b      	strh	r3, [r7, #10]
 8008d06:	4613      	mov	r3, r2
 8008d08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d0a:	897b      	ldrh	r3, [r7, #10]
 8008d0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d10:	7a7b      	ldrb	r3, [r7, #9]
 8008d12:	041b      	lsls	r3, r3, #16
 8008d14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	0d5b      	lsrs	r3, r3, #21
 8008d32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008d36:	4b08      	ldr	r3, [pc, #32]	@ (8008d58 <I2C_TransferConfig+0x60>)
 8008d38:	430b      	orrs	r3, r1
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	ea02 0103 	and.w	r1, r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d4a:	bf00      	nop
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	03ff63ff 	.word	0x03ff63ff

08008d5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008d6c:	887b      	ldrh	r3, [r7, #2]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00f      	beq.n	8008d96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008d7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008d8a:	2b28      	cmp	r3, #40	@ 0x28
 8008d8c:	d003      	beq.n	8008d96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008d94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008d96:	887b      	ldrh	r3, [r7, #2]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00f      	beq.n	8008dc0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008da6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008db4:	2b28      	cmp	r3, #40	@ 0x28
 8008db6:	d003      	beq.n	8008dc0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008dbe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008dc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da03      	bge.n	8008dd0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008dce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008dd0:	887b      	ldrh	r3, [r7, #2]
 8008dd2:	2b10      	cmp	r3, #16
 8008dd4:	d103      	bne.n	8008dde <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008ddc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008dde:	887b      	ldrh	r3, [r7, #2]
 8008de0:	2b20      	cmp	r3, #32
 8008de2:	d103      	bne.n	8008dec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f043 0320 	orr.w	r3, r3, #32
 8008dea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008dec:	887b      	ldrh	r3, [r7, #2]
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d103      	bne.n	8008dfa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6819      	ldr	r1, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	43da      	mvns	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	400a      	ands	r2, r1
 8008e0a:	601a      	str	r2, [r3, #0]
}
 8008e0c:	bf00      	nop
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	d138      	bne.n	8008ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e032      	b.n	8008ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2224      	movs	r2, #36	@ 0x24
 8008e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0201 	bic.w	r2, r2, #1
 8008e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6819      	ldr	r1, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0201 	orr.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e000      	b.n	8008ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ea0:	2302      	movs	r3, #2
  }
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d139      	bne.n	8008f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d101      	bne.n	8008ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e033      	b.n	8008f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2224      	movs	r2, #36	@ 0x24
 8008ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0201 	bic.w	r2, r2, #1
 8008ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	021b      	lsls	r3, r3, #8
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0201 	orr.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e000      	b.n	8008f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f38:	2302      	movs	r3, #2
  }
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008f54:	4b0b      	ldr	r3, [pc, #44]	@ (8008f84 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	73fb      	strb	r3, [r7, #15]
 8008f64:	e007      	b.n	8008f76 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008f66:	4b07      	ldr	r3, [pc, #28]	@ (8008f84 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f023 0204 	bic.w	r2, r3, #4
 8008f6e:	4905      	ldr	r1, [pc, #20]	@ (8008f84 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	40030400 	.word	0x40030400

08008f88 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008f8c:	4b05      	ldr	r3, [pc, #20]	@ (8008fa4 <HAL_ICACHE_Enable+0x1c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a04      	ldr	r2, [pc, #16]	@ (8008fa4 <HAL_ICACHE_Enable+0x1c>)
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40030400 	.word	0x40030400

08008fa8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e0bf      	b.n	800913a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7f8 ff8a 	bl	8001ee8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008fea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6999      	ldr	r1, [r3, #24]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009000:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6899      	ldr	r1, [r3, #8]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b4a      	ldr	r3, [pc, #296]	@ (8009144 <HAL_LTDC_Init+0x19c>)
 800901c:	400b      	ands	r3, r1
 800901e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	041b      	lsls	r3, r3, #16
 8009026:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6899      	ldr	r1, [r3, #8]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68d9      	ldr	r1, [r3, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	4b3e      	ldr	r3, [pc, #248]	@ (8009144 <HAL_LTDC_Init+0x19c>)
 800904a:	400b      	ands	r3, r1
 800904c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68d9      	ldr	r1, [r3, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a1a      	ldr	r2, [r3, #32]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6919      	ldr	r1, [r3, #16]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b33      	ldr	r3, [pc, #204]	@ (8009144 <HAL_LTDC_Init+0x19c>)
 8009078:	400b      	ands	r3, r1
 800907a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009080:	041b      	lsls	r3, r3, #16
 8009082:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6919      	ldr	r1, [r3, #16]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6959      	ldr	r1, [r3, #20]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	4b27      	ldr	r3, [pc, #156]	@ (8009144 <HAL_LTDC_Init+0x19c>)
 80090a6:	400b      	ands	r3, r1
 80090a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ae:	041b      	lsls	r3, r3, #16
 80090b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6959      	ldr	r1, [r3, #20]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80090ce:	021b      	lsls	r3, r3, #8
 80090d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80090ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0206 	orr.w	r2, r2, #6
 8009116:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	f000f800 	.word	0xf000f800

08009148 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800915e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d023      	beq.n	80091b2 <HAL_LTDC_IRQHandler+0x6a>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01e      	beq.n	80091b2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0204 	bic.w	r2, r2, #4
 8009182:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2204      	movs	r2, #4
 800918a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009192:	f043 0201 	orr.w	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2204      	movs	r2, #4
 80091a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f86f 	bl	8009290 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d023      	beq.n	8009204 <HAL_LTDC_IRQHandler+0xbc>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01e      	beq.n	8009204 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0202 	bic.w	r2, r2, #2
 80091d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2202      	movs	r2, #2
 80091dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80091e4:	f043 0202 	orr.w	r2, r3, #2
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2204      	movs	r2, #4
 80091f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f846 	bl	8009290 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01b      	beq.n	8009246 <HAL_LTDC_IRQHandler+0xfe>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0201 	bic.w	r2, r2, #1
 8009226:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2201      	movs	r2, #1
 800922e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f82f 	bl	80092a4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01b      	beq.n	8009288 <HAL_LTDC_IRQHandler+0x140>
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d016      	beq.n	8009288 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0208 	bic.w	r2, r2, #8
 8009268:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2208      	movs	r2, #8
 8009270:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f818 	bl	80092b8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80092cc:	b5b0      	push	{r4, r5, r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_LTDC_ConfigLayer+0x1a>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e02c      	b.n	8009340 <HAL_LTDC_ConfigLayer+0x74>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2202      	movs	r2, #2
 80092f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2134      	movs	r1, #52	@ 0x34
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	4413      	add	r3, r2
 8009302:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	4614      	mov	r4, r2
 800930a:	461d      	mov	r5, r3
 800930c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800930e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 f811 	bl	8009348 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2201      	movs	r2, #1
 800932c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bdb0      	pop	{r4, r5, r7, pc}

08009348 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009348:	b480      	push	{r7}
 800934a:	b089      	sub	sp, #36	@ 0x24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	0c1b      	lsrs	r3, r3, #16
 8009360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009364:	4413      	add	r3, r2
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	01db      	lsls	r3, r3, #7
 8009374:	4413      	add	r3, r2
 8009376:	3384      	adds	r3, #132	@ 0x84
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	4611      	mov	r1, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	01d2      	lsls	r2, r2, #7
 8009384:	440a      	add	r2, r1
 8009386:	3284      	adds	r2, #132	@ 0x84
 8009388:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800938c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	0c1b      	lsrs	r3, r3, #16
 800939a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800939e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80093a0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4619      	mov	r1, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	01db      	lsls	r3, r3, #7
 80093ac:	440b      	add	r3, r1
 80093ae:	3384      	adds	r3, #132	@ 0x84
 80093b0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80093b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093c6:	4413      	add	r3, r2
 80093c8:	041b      	lsls	r3, r3, #16
 80093ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	01db      	lsls	r3, r3, #7
 80093d6:	4413      	add	r3, r2
 80093d8:	3384      	adds	r3, #132	@ 0x84
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	4611      	mov	r1, r2
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	01d2      	lsls	r2, r2, #7
 80093e6:	440a      	add	r2, r1
 80093e8:	3284      	adds	r2, #132	@ 0x84
 80093ea:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80093ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093fe:	4413      	add	r3, r2
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4619      	mov	r1, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	01db      	lsls	r3, r3, #7
 800940c:	440b      	add	r3, r1
 800940e:	3384      	adds	r3, #132	@ 0x84
 8009410:	4619      	mov	r1, r3
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	4313      	orrs	r3, r2
 8009416:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	01db      	lsls	r3, r3, #7
 8009422:	4413      	add	r3, r2
 8009424:	3384      	adds	r3, #132	@ 0x84
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	6812      	ldr	r2, [r2, #0]
 800942c:	4611      	mov	r1, r2
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	01d2      	lsls	r2, r2, #7
 8009432:	440a      	add	r2, r1
 8009434:	3284      	adds	r2, #132	@ 0x84
 8009436:	f023 0307 	bic.w	r3, r3, #7
 800943a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	01db      	lsls	r3, r3, #7
 8009446:	4413      	add	r3, r2
 8009448:	3384      	adds	r3, #132	@ 0x84
 800944a:	461a      	mov	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009462:	041b      	lsls	r3, r3, #16
 8009464:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	061b      	lsls	r3, r3, #24
 800946c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009474:	461a      	mov	r2, r3
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	431a      	orrs	r2, r3
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	431a      	orrs	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4619      	mov	r1, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	01db      	lsls	r3, r3, #7
 8009488:	440b      	add	r3, r1
 800948a:	3384      	adds	r3, #132	@ 0x84
 800948c:	4619      	mov	r1, r3
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	4313      	orrs	r3, r2
 8009492:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	01db      	lsls	r3, r3, #7
 800949e:	4413      	add	r3, r2
 80094a0:	3384      	adds	r3, #132	@ 0x84
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	6812      	ldr	r2, [r2, #0]
 80094a8:	4611      	mov	r1, r2
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	01d2      	lsls	r2, r2, #7
 80094ae:	440a      	add	r2, r1
 80094b0:	3284      	adds	r2, #132	@ 0x84
 80094b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80094b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	01db      	lsls	r3, r3, #7
 80094c2:	4413      	add	r3, r2
 80094c4:	3384      	adds	r3, #132	@ 0x84
 80094c6:	461a      	mov	r2, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	01db      	lsls	r3, r3, #7
 80094d8:	4413      	add	r3, r2
 80094da:	3384      	adds	r3, #132	@ 0x84
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	6812      	ldr	r2, [r2, #0]
 80094e2:	4611      	mov	r1, r2
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	01d2      	lsls	r2, r2, #7
 80094e8:	440a      	add	r2, r1
 80094ea:	3284      	adds	r2, #132	@ 0x84
 80094ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80094f0:	f023 0307 	bic.w	r3, r3, #7
 80094f4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	69da      	ldr	r2, [r3, #28]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	6809      	ldr	r1, [r1, #0]
 8009502:	4608      	mov	r0, r1
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	01c9      	lsls	r1, r1, #7
 8009508:	4401      	add	r1, r0
 800950a:	3184      	adds	r1, #132	@ 0x84
 800950c:	4313      	orrs	r3, r2
 800950e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	01db      	lsls	r3, r3, #7
 800951a:	4413      	add	r3, r2
 800951c:	3384      	adds	r3, #132	@ 0x84
 800951e:	461a      	mov	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009524:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800952e:	2304      	movs	r3, #4
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	e01b      	b.n	800956c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d102      	bne.n	8009542 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800953c:	2303      	movs	r3, #3
 800953e:	61fb      	str	r3, [r7, #28]
 8009540:	e014      	b.n	800956c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b04      	cmp	r3, #4
 8009548:	d00b      	beq.n	8009562 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800954e:	2b02      	cmp	r3, #2
 8009550:	d007      	beq.n	8009562 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009556:	2b03      	cmp	r3, #3
 8009558:	d003      	beq.n	8009562 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800955e:	2b07      	cmp	r3, #7
 8009560:	d102      	bne.n	8009568 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009562:	2302      	movs	r3, #2
 8009564:	61fb      	str	r3, [r7, #28]
 8009566:	e001      	b.n	800956c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009568:	2301      	movs	r3, #1
 800956a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	01db      	lsls	r3, r3, #7
 8009576:	4413      	add	r3, r2
 8009578:	3384      	adds	r3, #132	@ 0x84
 800957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	4611      	mov	r1, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	01d2      	lsls	r2, r2, #7
 8009586:	440a      	add	r2, r1
 8009588:	3284      	adds	r2, #132	@ 0x84
 800958a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800958e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009594:	69fa      	ldr	r2, [r7, #28]
 8009596:	fb02 f303 	mul.w	r3, r2, r3
 800959a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	6859      	ldr	r1, [r3, #4]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	1acb      	subs	r3, r1, r3
 80095a6:	69f9      	ldr	r1, [r7, #28]
 80095a8:	fb01 f303 	mul.w	r3, r1, r3
 80095ac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	6809      	ldr	r1, [r1, #0]
 80095b2:	4608      	mov	r0, r1
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	01c9      	lsls	r1, r1, #7
 80095b8:	4401      	add	r1, r0
 80095ba:	3184      	adds	r1, #132	@ 0x84
 80095bc:	4313      	orrs	r3, r2
 80095be:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	01db      	lsls	r3, r3, #7
 80095ca:	4413      	add	r3, r2
 80095cc:	3384      	adds	r3, #132	@ 0x84
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	4611      	mov	r1, r2
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	01d2      	lsls	r2, r2, #7
 80095da:	440a      	add	r2, r1
 80095dc:	3284      	adds	r2, #132	@ 0x84
 80095de:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80095e2:	f023 0307 	bic.w	r3, r3, #7
 80095e6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	01db      	lsls	r3, r3, #7
 80095f2:	4413      	add	r3, r2
 80095f4:	3384      	adds	r3, #132	@ 0x84
 80095f6:	461a      	mov	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	01db      	lsls	r3, r3, #7
 8009608:	4413      	add	r3, r2
 800960a:	3384      	adds	r3, #132	@ 0x84
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	6812      	ldr	r2, [r2, #0]
 8009612:	4611      	mov	r1, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	01d2      	lsls	r2, r2, #7
 8009618:	440a      	add	r2, r1
 800961a:	3284      	adds	r2, #132	@ 0x84
 800961c:	f043 0301 	orr.w	r3, r3, #1
 8009620:	6013      	str	r3, [r2, #0]
}
 8009622:	bf00      	nop
 8009624:	3724      	adds	r7, #36	@ 0x24
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af02      	add	r7, sp, #8
 8009634:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e0fe      	b.n	800983e <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7f8 febf 	bl	80023d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2203      	movs	r2, #3
 800965e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f007 fccb 	bl	8011002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7c1a      	ldrb	r2, [r3, #16]
 8009674:	f88d 2000 	strb.w	r2, [sp]
 8009678:	3304      	adds	r3, #4
 800967a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800967c:	f007 fc92 	bl	8010fa4 <USB_CoreInit>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e0d5      	b.n	800983e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2100      	movs	r1, #0
 8009698:	4618      	mov	r0, r3
 800969a:	f007 fcc3 	bl	8011024 <USB_SetCurrentMode>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0c6      	b.n	800983e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
 80096b4:	e04a      	b.n	800974c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80096b6:	7bfa      	ldrb	r2, [r7, #15]
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	3315      	adds	r3, #21
 80096c6:	2201      	movs	r2, #1
 80096c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80096ca:	7bfa      	ldrb	r2, [r7, #15]
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	3314      	adds	r3, #20
 80096da:	7bfa      	ldrb	r2, [r7, #15]
 80096dc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80096de:	7bfa      	ldrb	r2, [r7, #15]
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	b298      	uxth	r0, r3
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	4613      	mov	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	440b      	add	r3, r1
 80096f0:	332e      	adds	r3, #46	@ 0x2e
 80096f2:	4602      	mov	r2, r0
 80096f4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80096f6:	7bfa      	ldrb	r2, [r7, #15]
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4613      	mov	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	3318      	adds	r3, #24
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800970a:	7bfa      	ldrb	r2, [r7, #15]
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	4613      	mov	r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	440b      	add	r3, r1
 8009718:	331c      	adds	r3, #28
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800971e:	7bfa      	ldrb	r2, [r7, #15]
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	4613      	mov	r3, r2
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	440b      	add	r3, r1
 800972c:	3320      	adds	r3, #32
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009732:	7bfa      	ldrb	r2, [r7, #15]
 8009734:	6879      	ldr	r1, [r7, #4]
 8009736:	4613      	mov	r3, r2
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	4413      	add	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	440b      	add	r3, r1
 8009740:	3324      	adds	r3, #36	@ 0x24
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	3301      	adds	r3, #1
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	791b      	ldrb	r3, [r3, #4]
 8009750:	7bfa      	ldrb	r2, [r7, #15]
 8009752:	429a      	cmp	r2, r3
 8009754:	d3af      	bcc.n	80096b6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
 800975a:	e044      	b.n	80097e6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800975c:	7bfa      	ldrb	r2, [r7, #15]
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	4613      	mov	r3, r2
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009772:	7bfa      	ldrb	r2, [r7, #15]
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009784:	7bfa      	ldrb	r2, [r7, #15]
 8009786:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009788:	7bfa      	ldrb	r2, [r7, #15]
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800979e:	7bfa      	ldrb	r2, [r7, #15]
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80097b4:	7bfa      	ldrb	r2, [r7, #15]
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	4613      	mov	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80097c6:	2200      	movs	r2, #0
 80097c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80097ca:	7bfa      	ldrb	r2, [r7, #15]
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	4613      	mov	r3, r2
 80097d0:	00db      	lsls	r3, r3, #3
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	440b      	add	r3, r1
 80097d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	3301      	adds	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	791b      	ldrb	r3, [r3, #4]
 80097ea:	7bfa      	ldrb	r2, [r7, #15]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d3b5      	bcc.n	800975c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	7c1a      	ldrb	r2, [r3, #16]
 80097f8:	f88d 2000 	strb.w	r2, [sp]
 80097fc:	3304      	adds	r3, #4
 80097fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009800:	f007 fc5c 	bl	80110bc <USB_DevInit>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d005      	beq.n	8009816 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e013      	b.n	800983e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	7b1b      	ldrb	r3, [r3, #12]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d102      	bne.n	8009832 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f80a 	bl	8009846 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f007 fe29 	bl	801148e <USB_DevDisconnect>

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009878:	f043 0303 	orr.w	r3, r3, #3
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
	...

08009890 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009894:	4b05      	ldr	r3, [pc, #20]	@ (80098ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009898:	4a04      	ldr	r2, [pc, #16]	@ (80098ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80098a0:	bf00      	nop
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	46020800 	.word	0x46020800

080098b0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80098b8:	4b39      	ldr	r3, [pc, #228]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098c0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d10b      	bne.n	80098e2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098d0:	d905      	bls.n	80098de <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80098d2:	4b33      	ldr	r3, [pc, #204]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	4a32      	ldr	r2, [pc, #200]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098dc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	e057      	b.n	8009992 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e8:	d90a      	bls.n	8009900 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80098ea:	4b2d      	ldr	r3, [pc, #180]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	4a2a      	ldr	r2, [pc, #168]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098fc:	60d3      	str	r3, [r2, #12]
 80098fe:	e007      	b.n	8009910 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009900:	4b27      	ldr	r3, [pc, #156]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009908:	4925      	ldr	r1, [pc, #148]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4313      	orrs	r3, r2
 800990e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009910:	4b24      	ldr	r3, [pc, #144]	@ (80099a4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a24      	ldr	r2, [pc, #144]	@ (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009916:	fba2 2303 	umull	r2, r3, r2, r3
 800991a:	099b      	lsrs	r3, r3, #6
 800991c:	2232      	movs	r2, #50	@ 0x32
 800991e:	fb02 f303 	mul.w	r3, r2, r3
 8009922:	4a21      	ldr	r2, [pc, #132]	@ (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009924:	fba2 2303 	umull	r2, r3, r2, r3
 8009928:	099b      	lsrs	r3, r3, #6
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800992e:	e002      	b.n	8009936 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3b01      	subs	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009936:	4b1a      	ldr	r3, [pc, #104]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1f3      	bne.n	8009930 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01b      	beq.n	8009986 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800994e:	4b15      	ldr	r3, [pc, #84]	@ (80099a4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a15      	ldr	r2, [pc, #84]	@ (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009954:	fba2 2303 	umull	r2, r3, r2, r3
 8009958:	099b      	lsrs	r3, r3, #6
 800995a:	2232      	movs	r2, #50	@ 0x32
 800995c:	fb02 f303 	mul.w	r3, r2, r3
 8009960:	4a11      	ldr	r2, [pc, #68]	@ (80099a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009962:	fba2 2303 	umull	r2, r3, r2, r3
 8009966:	099b      	lsrs	r3, r3, #6
 8009968:	3301      	adds	r3, #1
 800996a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800996c:	e002      	b.n	8009974 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3b01      	subs	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009974:	4b0a      	ldr	r3, [pc, #40]	@ (80099a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1f3      	bne.n	800996e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e000      	b.n	8009992 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	46020800 	.word	0x46020800
 80099a4:	20000000 	.word	0x20000000
 80099a8:	10624dd3 	.word	0x10624dd3

080099ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80099b0:	4b04      	ldr	r3, [pc, #16]	@ (80099c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80099b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	46020800 	.word	0x46020800

080099c8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80099d0:	4b22      	ldr	r3, [pc, #136]	@ (8009a5c <HAL_PWREx_ConfigSupply+0x94>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a22      	ldr	r2, [pc, #136]	@ (8009a60 <HAL_PWREx_ConfigSupply+0x98>)
 80099d6:	fba2 2303 	umull	r2, r3, r2, r3
 80099da:	099b      	lsrs	r3, r3, #6
 80099dc:	2232      	movs	r2, #50	@ 0x32
 80099de:	fb02 f303 	mul.w	r3, r2, r3
 80099e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009a60 <HAL_PWREx_ConfigSupply+0x98>)
 80099e4:	fba2 2303 	umull	r2, r3, r2, r3
 80099e8:	099b      	lsrs	r3, r3, #6
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d113      	bne.n	8009a1c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80099f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 80099fa:	f023 0302 	bic.w	r3, r3, #2
 80099fe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a00:	e002      	b.n	8009a08 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a08:	4b16      	ldr	r3, [pc, #88]	@ (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d116      	bne.n	8009a42 <HAL_PWREx_ConfigSupply+0x7a>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f3      	bne.n	8009a02 <HAL_PWREx_ConfigSupply+0x3a>
 8009a1a:	e012      	b.n	8009a42 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009a1c:	4b11      	ldr	r3, [pc, #68]	@ (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	4a10      	ldr	r2, [pc, #64]	@ (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a22:	f043 0302 	orr.w	r3, r3, #2
 8009a26:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a28:	e002      	b.n	8009a30 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009a30:	4b0c      	ldr	r3, [pc, #48]	@ (8009a64 <HAL_PWREx_ConfigSupply+0x9c>)
 8009a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a34:	f003 0302 	and.w	r3, r3, #2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d102      	bne.n	8009a42 <HAL_PWREx_ConfigSupply+0x7a>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f3      	bne.n	8009a2a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e000      	b.n	8009a4e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20000000 	.word	0x20000000
 8009a60:	10624dd3 	.word	0x10624dd3
 8009a64:	46020800 	.word	0x46020800

08009a68 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009a6c:	4b05      	ldr	r3, [pc, #20]	@ (8009a84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a04      	ldr	r2, [pc, #16]	@ (8009a84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a76:	6113      	str	r3, [r2, #16]
}
 8009a78:	bf00      	nop
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	46020800 	.word	0x46020800

08009a88 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009a8c:	4b05      	ldr	r3, [pc, #20]	@ (8009aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	4a04      	ldr	r2, [pc, #16]	@ (8009aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009a92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a96:	6113      	str	r3, [r2, #16]
}
 8009a98:	bf00      	nop
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	46020800 	.word	0x46020800

08009aa8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009aac:	4b05      	ldr	r3, [pc, #20]	@ (8009ac4 <HAL_PWREx_EnableVddA+0x1c>)
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	4a04      	ldr	r2, [pc, #16]	@ (8009ac4 <HAL_PWREx_EnableVddA+0x1c>)
 8009ab2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ab6:	6113      	str	r3, [r2, #16]
}
 8009ab8:	bf00      	nop
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	46020800 	.word	0x46020800

08009ac8 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009ace:	f7ff ff6d 	bl	80099ac <HAL_PWREx_GetVoltageRange>
 8009ad2:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ada:	d003      	beq.n	8009ae4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ae2:	d107      	bne.n	8009af4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009ae4:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	4a05      	ldr	r2, [pc, #20]	@ (8009b00 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009aea:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009aee:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	e000      	b.n	8009af6 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	46020800 	.word	0x46020800

08009b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08e      	sub	sp, #56	@ 0x38
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f000 bec8 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b1e:	4b99      	ldr	r3, [pc, #612]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	f003 030c 	and.w	r3, r3, #12
 8009b26:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b28:	4b96      	ldr	r3, [pc, #600]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2c:	f003 0303 	and.w	r3, r3, #3
 8009b30:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0310 	and.w	r3, r3, #16
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 816c 	beq.w	8009e18 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d007      	beq.n	8009b56 <HAL_RCC_OscConfig+0x52>
 8009b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b48:	2b0c      	cmp	r3, #12
 8009b4a:	f040 80de 	bne.w	8009d0a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f040 80da 	bne.w	8009d0a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d102      	bne.n	8009b64 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f000 bea5 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b68:	4b86      	ldr	r3, [pc, #536]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d004      	beq.n	8009b7e <HAL_RCC_OscConfig+0x7a>
 8009b74:	4b83      	ldr	r3, [pc, #524]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009b7c:	e005      	b.n	8009b8a <HAL_RCC_OscConfig+0x86>
 8009b7e:	4b81      	ldr	r3, [pc, #516]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b84:	041b      	lsls	r3, r3, #16
 8009b86:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d255      	bcs.n	8009c3a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 f9d9 	bl	800af50 <RCC_SetFlashLatencyFromMSIRange>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f000 be82 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009baa:	4b76      	ldr	r3, [pc, #472]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	4a75      	ldr	r2, [pc, #468]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009bb4:	6093      	str	r3, [r2, #8]
 8009bb6:	4b73      	ldr	r3, [pc, #460]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc2:	4970      	ldr	r1, [pc, #448]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bcc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009bd0:	d309      	bcc.n	8009be6 <HAL_RCC_OscConfig+0xe2>
 8009bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f023 021f 	bic.w	r2, r3, #31
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	4969      	ldr	r1, [pc, #420]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60cb      	str	r3, [r1, #12]
 8009be4:	e07e      	b.n	8009ce4 <HAL_RCC_OscConfig+0x1e0>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	da0a      	bge.n	8009c04 <HAL_RCC_OscConfig+0x100>
 8009bee:	4b65      	ldr	r3, [pc, #404]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	015b      	lsls	r3, r3, #5
 8009bfc:	4961      	ldr	r1, [pc, #388]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60cb      	str	r3, [r1, #12]
 8009c02:	e06f      	b.n	8009ce4 <HAL_RCC_OscConfig+0x1e0>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c0c:	d30a      	bcc.n	8009c24 <HAL_RCC_OscConfig+0x120>
 8009c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	029b      	lsls	r3, r3, #10
 8009c1c:	4959      	ldr	r1, [pc, #356]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	60cb      	str	r3, [r1, #12]
 8009c22:	e05f      	b.n	8009ce4 <HAL_RCC_OscConfig+0x1e0>
 8009c24:	4b57      	ldr	r3, [pc, #348]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	03db      	lsls	r3, r3, #15
 8009c32:	4954      	ldr	r1, [pc, #336]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	60cb      	str	r3, [r1, #12]
 8009c38:	e054      	b.n	8009ce4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009c3a:	4b52      	ldr	r3, [pc, #328]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	4a51      	ldr	r2, [pc, #324]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c44:	6093      	str	r3, [r2, #8]
 8009c46:	4b4f      	ldr	r3, [pc, #316]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c52:	494c      	ldr	r1, [pc, #304]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009c60:	d309      	bcc.n	8009c76 <HAL_RCC_OscConfig+0x172>
 8009c62:	4b48      	ldr	r3, [pc, #288]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	f023 021f 	bic.w	r2, r3, #31
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	4945      	ldr	r1, [pc, #276]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	60cb      	str	r3, [r1, #12]
 8009c74:	e028      	b.n	8009cc8 <HAL_RCC_OscConfig+0x1c4>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da0a      	bge.n	8009c94 <HAL_RCC_OscConfig+0x190>
 8009c7e:	4b41      	ldr	r3, [pc, #260]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	015b      	lsls	r3, r3, #5
 8009c8c:	493d      	ldr	r1, [pc, #244]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60cb      	str	r3, [r1, #12]
 8009c92:	e019      	b.n	8009cc8 <HAL_RCC_OscConfig+0x1c4>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c9c:	d30a      	bcc.n	8009cb4 <HAL_RCC_OscConfig+0x1b0>
 8009c9e:	4b39      	ldr	r3, [pc, #228]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	029b      	lsls	r3, r3, #10
 8009cac:	4935      	ldr	r1, [pc, #212]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60cb      	str	r3, [r1, #12]
 8009cb2:	e009      	b.n	8009cc8 <HAL_RCC_OscConfig+0x1c4>
 8009cb4:	4b33      	ldr	r3, [pc, #204]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	03db      	lsls	r3, r3, #15
 8009cc2:	4930      	ldr	r1, [pc, #192]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10a      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 f93c 	bl	800af50 <RCC_SetFlashLatencyFromMSIRange>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f000 bde5 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009ce4:	f001 f8de 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009ce8:	4b27      	ldr	r3, [pc, #156]	@ (8009d88 <HAL_RCC_OscConfig+0x284>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7f8 fea9 	bl	8002a44 <HAL_InitTick>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 808a 	beq.w	8009e16 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d06:	f000 bdd2 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d066      	beq.n	8009de0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009d12:	4b1c      	ldr	r3, [pc, #112]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a1b      	ldr	r2, [pc, #108]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d18:	f043 0301 	orr.w	r3, r3, #1
 8009d1c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d1e:	f7f8 ff1b 	bl	8002b58 <HAL_GetTick>
 8009d22:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009d24:	e009      	b.n	8009d3a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d26:	f7f8 ff17 	bl	8002b58 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d902      	bls.n	8009d3a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	f000 bdba 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009d3a:	4b12      	ldr	r3, [pc, #72]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0304 	and.w	r3, r3, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0ef      	beq.n	8009d26 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009d46:	4b0f      	ldr	r3, [pc, #60]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d50:	6093      	str	r3, [r2, #8]
 8009d52:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5e:	4909      	ldr	r1, [pc, #36]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d68:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009d6c:	d30e      	bcc.n	8009d8c <HAL_RCC_OscConfig+0x288>
 8009d6e:	4b05      	ldr	r3, [pc, #20]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f023 021f 	bic.w	r2, r3, #31
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	4902      	ldr	r1, [pc, #8]	@ (8009d84 <HAL_RCC_OscConfig+0x280>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60cb      	str	r3, [r1, #12]
 8009d80:	e04a      	b.n	8009e18 <HAL_RCC_OscConfig+0x314>
 8009d82:	bf00      	nop
 8009d84:	46020c00 	.word	0x46020c00
 8009d88:	20000004 	.word	0x20000004
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	da0a      	bge.n	8009daa <HAL_RCC_OscConfig+0x2a6>
 8009d94:	4b98      	ldr	r3, [pc, #608]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	015b      	lsls	r3, r3, #5
 8009da2:	4995      	ldr	r1, [pc, #596]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60cb      	str	r3, [r1, #12]
 8009da8:	e036      	b.n	8009e18 <HAL_RCC_OscConfig+0x314>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db2:	d30a      	bcc.n	8009dca <HAL_RCC_OscConfig+0x2c6>
 8009db4:	4b90      	ldr	r3, [pc, #576]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	029b      	lsls	r3, r3, #10
 8009dc2:	498d      	ldr	r1, [pc, #564]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60cb      	str	r3, [r1, #12]
 8009dc8:	e026      	b.n	8009e18 <HAL_RCC_OscConfig+0x314>
 8009dca:	4b8b      	ldr	r3, [pc, #556]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	03db      	lsls	r3, r3, #15
 8009dd8:	4987      	ldr	r1, [pc, #540]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60cb      	str	r3, [r1, #12]
 8009dde:	e01b      	b.n	8009e18 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009de0:	4b85      	ldr	r3, [pc, #532]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a84      	ldr	r2, [pc, #528]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009de6:	f023 0301 	bic.w	r3, r3, #1
 8009dea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009dec:	f7f8 feb4 	bl	8002b58 <HAL_GetTick>
 8009df0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009df2:	e009      	b.n	8009e08 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009df4:	f7f8 feb0 	bl	8002b58 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d902      	bls.n	8009e08 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	f000 bd53 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009e08:	4b7b      	ldr	r3, [pc, #492]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1ef      	bne.n	8009df4 <HAL_RCC_OscConfig+0x2f0>
 8009e14:	e000      	b.n	8009e18 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009e16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 808b 	beq.w	8009f3c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	d005      	beq.n	8009e38 <HAL_RCC_OscConfig+0x334>
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2e:	2b0c      	cmp	r3, #12
 8009e30:	d109      	bne.n	8009e46 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d106      	bne.n	8009e46 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d17d      	bne.n	8009f3c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f000 bd34 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e4e:	d106      	bne.n	8009e5e <HAL_RCC_OscConfig+0x35a>
 8009e50:	4b69      	ldr	r3, [pc, #420]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a68      	ldr	r2, [pc, #416]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	e041      	b.n	8009ee2 <HAL_RCC_OscConfig+0x3de>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e66:	d112      	bne.n	8009e8e <HAL_RCC_OscConfig+0x38a>
 8009e68:	4b63      	ldr	r3, [pc, #396]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a62      	ldr	r2, [pc, #392]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	4b60      	ldr	r3, [pc, #384]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a5f      	ldr	r2, [pc, #380]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e7a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	4b5d      	ldr	r3, [pc, #372]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a5c      	ldr	r2, [pc, #368]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	e029      	b.n	8009ee2 <HAL_RCC_OscConfig+0x3de>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009e96:	d112      	bne.n	8009ebe <HAL_RCC_OscConfig+0x3ba>
 8009e98:	4b57      	ldr	r3, [pc, #348]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a56      	ldr	r2, [pc, #344]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009e9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	4b54      	ldr	r3, [pc, #336]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a53      	ldr	r2, [pc, #332]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	4b51      	ldr	r3, [pc, #324]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a50      	ldr	r2, [pc, #320]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	e011      	b.n	8009ee2 <HAL_RCC_OscConfig+0x3de>
 8009ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	4b4b      	ldr	r3, [pc, #300]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a4a      	ldr	r2, [pc, #296]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	4b48      	ldr	r3, [pc, #288]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a47      	ldr	r2, [pc, #284]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009edc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ee0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d014      	beq.n	8009f14 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009eea:	f7f8 fe35 	bl	8002b58 <HAL_GetTick>
 8009eee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ef0:	e009      	b.n	8009f06 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ef2:	f7f8 fe31 	bl	8002b58 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	2b64      	cmp	r3, #100	@ 0x64
 8009efe:	d902      	bls.n	8009f06 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	f000 bcd4 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f06:	4b3c      	ldr	r3, [pc, #240]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0ef      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x3ee>
 8009f12:	e013      	b.n	8009f3c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009f14:	f7f8 fe20 	bl	8002b58 <HAL_GetTick>
 8009f18:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f1a:	e009      	b.n	8009f30 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f1c:	f7f8 fe1c 	bl	8002b58 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b64      	cmp	r3, #100	@ 0x64
 8009f28:	d902      	bls.n	8009f30 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	f000 bcbf 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f30:	4b31      	ldr	r3, [pc, #196]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1ef      	bne.n	8009f1c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d05f      	beq.n	800a008 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d005      	beq.n	8009f5a <HAL_RCC_OscConfig+0x456>
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	2b0c      	cmp	r3, #12
 8009f52:	d114      	bne.n	8009f7e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d111      	bne.n	8009f7e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d102      	bne.n	8009f68 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f000 bca3 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009f68:	4b23      	ldr	r3, [pc, #140]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	041b      	lsls	r3, r3, #16
 8009f76:	4920      	ldr	r1, [pc, #128]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009f7c:	e044      	b.n	800a008 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d024      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009f86:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f92:	f7f8 fde1 	bl	8002b58 <HAL_GetTick>
 8009f96:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f98:	e009      	b.n	8009fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f9a:	f7f8 fddd 	bl	8002b58 <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d902      	bls.n	8009fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	f000 bc80 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009fae:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0ef      	beq.n	8009f9a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009fba:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	490b      	ldr	r1, [pc, #44]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	610b      	str	r3, [r1, #16]
 8009fce:	e01b      	b.n	800a008 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009fd0:	4b09      	ldr	r3, [pc, #36]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a08      	ldr	r2, [pc, #32]	@ (8009ff8 <HAL_RCC_OscConfig+0x4f4>)
 8009fd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009fdc:	f7f8 fdbc 	bl	8002b58 <HAL_GetTick>
 8009fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fe2:	e00b      	b.n	8009ffc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fe4:	f7f8 fdb8 	bl	8002b58 <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d904      	bls.n	8009ffc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	f000 bc5b 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
 8009ff8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ffc:	4baf      	ldr	r3, [pc, #700]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1ed      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0308 	and.w	r3, r3, #8
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 80c8 	beq.w	800a1a6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a016:	2300      	movs	r3, #0
 800a018:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a01c:	4ba7      	ldr	r3, [pc, #668]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a01e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	d111      	bne.n	800a04e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a02a:	4ba4      	ldr	r3, [pc, #656]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a02c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a030:	4aa2      	ldr	r2, [pc, #648]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a032:	f043 0304 	orr.w	r3, r3, #4
 800a036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a03a:	4ba0      	ldr	r3, [pc, #640]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a03c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a04e:	4b9c      	ldr	r3, [pc, #624]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d119      	bne.n	800a08e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a05a:	4b99      	ldr	r3, [pc, #612]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05e:	4a98      	ldr	r2, [pc, #608]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a066:	f7f8 fd77 	bl	8002b58 <HAL_GetTick>
 800a06a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a06c:	e009      	b.n	800a082 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a06e:	f7f8 fd73 	bl	8002b58 <HAL_GetTick>
 800a072:	4602      	mov	r2, r0
 800a074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d902      	bls.n	800a082 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	f000 bc16 	b.w	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a082:	4b8f      	ldr	r3, [pc, #572]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0ef      	beq.n	800a06e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d05f      	beq.n	800a156 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a096:	4b89      	ldr	r3, [pc, #548]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a09c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d037      	beq.n	800a11c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d006      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e3f4      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01b      	beq.n	800a106 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a0ce:	4b7b      	ldr	r3, [pc, #492]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a0d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0d4:	4a79      	ldr	r2, [pc, #484]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a0d6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a0da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800a0de:	f7f8 fd3b 	bl	8002b58 <HAL_GetTick>
 800a0e2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a0e4:	e008      	b.n	800a0f8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0e6:	f7f8 fd37 	bl	8002b58 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	2b05      	cmp	r3, #5
 800a0f2:	d901      	bls.n	800a0f8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e3da      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a0f8:	4b70      	ldr	r3, [pc, #448]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a0fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1ef      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a106:	4b6d      	ldr	r3, [pc, #436]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a10c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	4969      	ldr	r1, [pc, #420]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a116:	4313      	orrs	r3, r2
 800a118:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a11c:	4b67      	ldr	r3, [pc, #412]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a11e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a122:	4a66      	ldr	r2, [pc, #408]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a124:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a128:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a12c:	f7f8 fd14 	bl	8002b58 <HAL_GetTick>
 800a130:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a132:	e008      	b.n	800a146 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a134:	f7f8 fd10 	bl	8002b58 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2b05      	cmp	r3, #5
 800a140:	d901      	bls.n	800a146 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e3b3      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a146:	4b5d      	ldr	r3, [pc, #372]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a14c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0ef      	beq.n	800a134 <HAL_RCC_OscConfig+0x630>
 800a154:	e01b      	b.n	800a18e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a156:	4b59      	ldr	r3, [pc, #356]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a15c:	4a57      	ldr	r2, [pc, #348]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a15e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a162:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a166:	f7f8 fcf7 	bl	8002b58 <HAL_GetTick>
 800a16a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a16c:	e008      	b.n	800a180 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a16e:	f7f8 fcf3 	bl	8002b58 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b05      	cmp	r3, #5
 800a17a:	d901      	bls.n	800a180 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e396      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a180:	4b4e      	ldr	r3, [pc, #312]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1ef      	bne.n	800a16e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a18e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a192:	2b01      	cmp	r3, #1
 800a194:	d107      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a196:	4b49      	ldr	r3, [pc, #292]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a19c:	4a47      	ldr	r2, [pc, #284]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a19e:	f023 0304 	bic.w	r3, r3, #4
 800a1a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0304 	and.w	r3, r3, #4
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 8111 	beq.w	800a3d6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1ba:	4b40      	ldr	r3, [pc, #256]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a1bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d111      	bne.n	800a1ec <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1c8:	4b3c      	ldr	r3, [pc, #240]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a1ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1ce:	4a3b      	ldr	r2, [pc, #236]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a1d0:	f043 0304 	orr.w	r3, r3, #4
 800a1d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a1d8:	4b38      	ldr	r3, [pc, #224]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a1da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1de:	f003 0304 	and.w	r3, r3, #4
 800a1e2:	613b      	str	r3, [r7, #16]
 800a1e4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a1ec:	4b34      	ldr	r3, [pc, #208]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d118      	bne.n	800a22a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a1f8:	4b31      	ldr	r3, [pc, #196]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fc:	4a30      	ldr	r2, [pc, #192]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a204:	f7f8 fca8 	bl	8002b58 <HAL_GetTick>
 800a208:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a20a:	e008      	b.n	800a21e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a20c:	f7f8 fca4 	bl	8002b58 <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d901      	bls.n	800a21e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e347      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a21e:	4b28      	ldr	r3, [pc, #160]	@ (800a2c0 <HAL_RCC_OscConfig+0x7bc>)
 800a220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0f0      	beq.n	800a20c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d01f      	beq.n	800a276 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f003 0304 	and.w	r3, r3, #4
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d010      	beq.n	800a264 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a242:	4b1e      	ldr	r3, [pc, #120]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a248:	4a1c      	ldr	r2, [pc, #112]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a24a:	f043 0304 	orr.w	r3, r3, #4
 800a24e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a252:	4b1a      	ldr	r3, [pc, #104]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a258:	4a18      	ldr	r2, [pc, #96]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a25a:	f043 0301 	orr.w	r3, r3, #1
 800a25e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a262:	e018      	b.n	800a296 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a264:	4b15      	ldr	r3, [pc, #84]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a26a:	4a14      	ldr	r2, [pc, #80]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a26c:	f043 0301 	orr.w	r3, r3, #1
 800a270:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a274:	e00f      	b.n	800a296 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a276:	4b11      	ldr	r3, [pc, #68]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a27c:	4a0f      	ldr	r2, [pc, #60]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a27e:	f023 0301 	bic.w	r3, r3, #1
 800a282:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a28c:	4a0b      	ldr	r2, [pc, #44]	@ (800a2bc <HAL_RCC_OscConfig+0x7b8>)
 800a28e:	f023 0304 	bic.w	r3, r3, #4
 800a292:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d057      	beq.n	800a34e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a29e:	f7f8 fc5b 	bl	8002b58 <HAL_GetTick>
 800a2a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2a4:	e00e      	b.n	800a2c4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2a6:	f7f8 fc57 	bl	8002b58 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d905      	bls.n	800a2c4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e2f8      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
 800a2bc:	46020c00 	.word	0x46020c00
 800a2c0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2c4:	4b9c      	ldr	r3, [pc, #624]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a2c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0e9      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d01b      	beq.n	800a316 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a2de:	4b96      	ldr	r3, [pc, #600]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a2e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2e4:	4a94      	ldr	r2, [pc, #592]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a2e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a2ee:	e00a      	b.n	800a306 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2f0:	f7f8 fc32 	bl	8002b58 <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d901      	bls.n	800a306 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e2d3      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a306:	4b8c      	ldr	r3, [pc, #560]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a30c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a310:	2b00      	cmp	r3, #0
 800a312:	d0ed      	beq.n	800a2f0 <HAL_RCC_OscConfig+0x7ec>
 800a314:	e053      	b.n	800a3be <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a316:	4b88      	ldr	r3, [pc, #544]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a31c:	4a86      	ldr	r2, [pc, #536]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a31e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a322:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a326:	e00a      	b.n	800a33e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a328:	f7f8 fc16 	bl	8002b58 <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a336:	4293      	cmp	r3, r2
 800a338:	d901      	bls.n	800a33e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e2b7      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a33e:	4b7e      	ldr	r3, [pc, #504]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1ed      	bne.n	800a328 <HAL_RCC_OscConfig+0x824>
 800a34c:	e037      	b.n	800a3be <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a34e:	f7f8 fc03 	bl	8002b58 <HAL_GetTick>
 800a352:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a354:	e00a      	b.n	800a36c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a356:	f7f8 fbff 	bl	8002b58 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a364:	4293      	cmp	r3, r2
 800a366:	d901      	bls.n	800a36c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e2a0      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a36c:	4b72      	ldr	r3, [pc, #456]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a36e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1ed      	bne.n	800a356 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a37a:	4b6f      	ldr	r3, [pc, #444]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a37c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01a      	beq.n	800a3be <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a388:	4b6b      	ldr	r3, [pc, #428]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a38a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a38e:	4a6a      	ldr	r2, [pc, #424]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a394:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a398:	e00a      	b.n	800a3b0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a39a:	f7f8 fbdd 	bl	8002b58 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e27e      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a3b0:	4b61      	ldr	r3, [pc, #388]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a3b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1ed      	bne.n	800a39a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d107      	bne.n	800a3d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3c6:	4b5c      	ldr	r3, [pc, #368]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a3c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3cc:	4a5a      	ldr	r2, [pc, #360]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a3ce:	f023 0304 	bic.w	r3, r3, #4
 800a3d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0320 	and.w	r3, r3, #32
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d036      	beq.n	800a450 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d019      	beq.n	800a41e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a3ea:	4b53      	ldr	r3, [pc, #332]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a52      	ldr	r2, [pc, #328]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a3f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a3f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3f6:	f7f8 fbaf 	bl	8002b58 <HAL_GetTick>
 800a3fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a3fc:	e008      	b.n	800a410 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3fe:	f7f8 fbab 	bl	8002b58 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d901      	bls.n	800a410 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e24e      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a410:	4b49      	ldr	r3, [pc, #292]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0f0      	beq.n	800a3fe <HAL_RCC_OscConfig+0x8fa>
 800a41c:	e018      	b.n	800a450 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a41e:	4b46      	ldr	r3, [pc, #280]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a45      	ldr	r2, [pc, #276]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a424:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a428:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a42a:	f7f8 fb95 	bl	8002b58 <HAL_GetTick>
 800a42e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a430:	e008      	b.n	800a444 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a432:	f7f8 fb91 	bl	8002b58 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e234      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a444:	4b3c      	ldr	r3, [pc, #240]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1f0      	bne.n	800a432 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d036      	beq.n	800a4ca <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a460:	2b00      	cmp	r3, #0
 800a462:	d019      	beq.n	800a498 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a464:	4b34      	ldr	r3, [pc, #208]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a33      	ldr	r2, [pc, #204]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a46a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a46e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a470:	f7f8 fb72 	bl	8002b58 <HAL_GetTick>
 800a474:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a476:	e008      	b.n	800a48a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a478:	f7f8 fb6e 	bl	8002b58 <HAL_GetTick>
 800a47c:	4602      	mov	r2, r0
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d901      	bls.n	800a48a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e211      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a48a:	4b2b      	ldr	r3, [pc, #172]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0f0      	beq.n	800a478 <HAL_RCC_OscConfig+0x974>
 800a496:	e018      	b.n	800a4ca <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a498:	4b27      	ldr	r3, [pc, #156]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a26      	ldr	r2, [pc, #152]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a49e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a4a4:	f7f8 fb58 	bl	8002b58 <HAL_GetTick>
 800a4a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a4ac:	f7f8 fb54 	bl	8002b58 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e1f7      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a4be:	4b1e      	ldr	r3, [pc, #120]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f0      	bne.n	800a4ac <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d07f      	beq.n	800a5d6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d062      	beq.n	800a5a4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a4de:	4b16      	ldr	r3, [pc, #88]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	4a15      	ldr	r2, [pc, #84]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a4e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4e8:	6093      	str	r3, [r2, #8]
 800a4ea:	4b13      	ldr	r3, [pc, #76]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	4910      	ldr	r1, [pc, #64]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a500:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a504:	d309      	bcc.n	800a51a <HAL_RCC_OscConfig+0xa16>
 800a506:	4b0c      	ldr	r3, [pc, #48]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f023 021f 	bic.w	r2, r3, #31
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	4909      	ldr	r1, [pc, #36]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a514:	4313      	orrs	r3, r2
 800a516:	60cb      	str	r3, [r1, #12]
 800a518:	e02a      	b.n	800a570 <HAL_RCC_OscConfig+0xa6c>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51e:	2b00      	cmp	r3, #0
 800a520:	da0c      	bge.n	800a53c <HAL_RCC_OscConfig+0xa38>
 800a522:	4b05      	ldr	r3, [pc, #20]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	015b      	lsls	r3, r3, #5
 800a530:	4901      	ldr	r1, [pc, #4]	@ (800a538 <HAL_RCC_OscConfig+0xa34>)
 800a532:	4313      	orrs	r3, r2
 800a534:	60cb      	str	r3, [r1, #12]
 800a536:	e01b      	b.n	800a570 <HAL_RCC_OscConfig+0xa6c>
 800a538:	46020c00 	.word	0x46020c00
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a544:	d30a      	bcc.n	800a55c <HAL_RCC_OscConfig+0xa58>
 800a546:	4ba1      	ldr	r3, [pc, #644]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	029b      	lsls	r3, r3, #10
 800a554:	499d      	ldr	r1, [pc, #628]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a556:	4313      	orrs	r3, r2
 800a558:	60cb      	str	r3, [r1, #12]
 800a55a:	e009      	b.n	800a570 <HAL_RCC_OscConfig+0xa6c>
 800a55c:	4b9b      	ldr	r3, [pc, #620]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	03db      	lsls	r3, r3, #15
 800a56a:	4998      	ldr	r1, [pc, #608]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a56c:	4313      	orrs	r3, r2
 800a56e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a570:	4b96      	ldr	r3, [pc, #600]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a95      	ldr	r2, [pc, #596]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a576:	f043 0310 	orr.w	r3, r3, #16
 800a57a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a57c:	f7f8 faec 	bl	8002b58 <HAL_GetTick>
 800a580:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a582:	e008      	b.n	800a596 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a584:	f7f8 fae8 	bl	8002b58 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d901      	bls.n	800a596 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e18b      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a596:	4b8d      	ldr	r3, [pc, #564]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0320 	and.w	r3, r3, #32
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0f0      	beq.n	800a584 <HAL_RCC_OscConfig+0xa80>
 800a5a2:	e018      	b.n	800a5d6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a5a4:	4b89      	ldr	r3, [pc, #548]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a88      	ldr	r2, [pc, #544]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a5aa:	f023 0310 	bic.w	r3, r3, #16
 800a5ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a5b0:	f7f8 fad2 	bl	8002b58 <HAL_GetTick>
 800a5b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a5b6:	e008      	b.n	800a5ca <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a5b8:	f7f8 face 	bl	8002b58 <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d901      	bls.n	800a5ca <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e171      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a5ca:	4b80      	ldr	r3, [pc, #512]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1f0      	bne.n	800a5b8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 8166 	beq.w	800a8ac <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5e6:	4b79      	ldr	r3, [pc, #484]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	f003 030c 	and.w	r3, r3, #12
 800a5ee:	2b0c      	cmp	r3, #12
 800a5f0:	f000 80f2 	beq.w	800a7d8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	f040 80c5 	bne.w	800a788 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a5fe:	4b73      	ldr	r3, [pc, #460]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a72      	ldr	r2, [pc, #456]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a604:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a608:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a60a:	f7f8 faa5 	bl	8002b58 <HAL_GetTick>
 800a60e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a610:	e008      	b.n	800a624 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a612:	f7f8 faa1 	bl	8002b58 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d901      	bls.n	800a624 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e144      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a624:	4b69      	ldr	r3, [pc, #420]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1f0      	bne.n	800a612 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a630:	4b66      	ldr	r3, [pc, #408]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d111      	bne.n	800a662 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a63e:	4b63      	ldr	r3, [pc, #396]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a644:	4a61      	ldr	r2, [pc, #388]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a646:	f043 0304 	orr.w	r3, r3, #4
 800a64a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a64e:	4b5f      	ldr	r3, [pc, #380]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a662:	4b5b      	ldr	r3, [pc, #364]	@ (800a7d0 <HAL_RCC_OscConfig+0xccc>)
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a66a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a66e:	d102      	bne.n	800a676 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a670:	2301      	movs	r3, #1
 800a672:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a676:	4b56      	ldr	r3, [pc, #344]	@ (800a7d0 <HAL_RCC_OscConfig+0xccc>)
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4a55      	ldr	r2, [pc, #340]	@ (800a7d0 <HAL_RCC_OscConfig+0xccc>)
 800a67c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a680:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a682:	4b52      	ldr	r3, [pc, #328]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a68a:	f023 0303 	bic.w	r3, r3, #3
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a696:	3a01      	subs	r2, #1
 800a698:	0212      	lsls	r2, r2, #8
 800a69a:	4311      	orrs	r1, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	494a      	ldr	r1, [pc, #296]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a6a8:	4b48      	ldr	r3, [pc, #288]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a6aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6ac:	4b49      	ldr	r3, [pc, #292]	@ (800a7d4 <HAL_RCC_OscConfig+0xcd0>)
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a6b4:	3a01      	subs	r2, #1
 800a6b6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a6be:	3a01      	subs	r2, #1
 800a6c0:	0252      	lsls	r2, r2, #9
 800a6c2:	b292      	uxth	r2, r2
 800a6c4:	4311      	orrs	r1, r2
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a6ca:	3a01      	subs	r2, #1
 800a6cc:	0412      	lsls	r2, r2, #16
 800a6ce:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a6d2:	4311      	orrs	r1, r2
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a6d8:	3a01      	subs	r2, #1
 800a6da:	0612      	lsls	r2, r2, #24
 800a6dc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	493a      	ldr	r1, [pc, #232]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a6e8:	4b38      	ldr	r3, [pc, #224]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	4a37      	ldr	r2, [pc, #220]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a6ee:	f023 0310 	bic.w	r3, r3, #16
 800a6f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6f8:	4a34      	ldr	r2, [pc, #208]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a6fe:	4b33      	ldr	r3, [pc, #204]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a702:	4a32      	ldr	r2, [pc, #200]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a704:	f043 0310 	orr.w	r3, r3, #16
 800a708:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a70a:	4b30      	ldr	r3, [pc, #192]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70e:	f023 020c 	bic.w	r2, r3, #12
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a716:	492d      	ldr	r1, [pc, #180]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a71c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a720:	2b01      	cmp	r3, #1
 800a722:	d105      	bne.n	800a730 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a724:	4b2a      	ldr	r3, [pc, #168]	@ (800a7d0 <HAL_RCC_OscConfig+0xccc>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4a29      	ldr	r2, [pc, #164]	@ (800a7d0 <HAL_RCC_OscConfig+0xccc>)
 800a72a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a72e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a730:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a734:	2b01      	cmp	r3, #1
 800a736:	d107      	bne.n	800a748 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a738:	4b24      	ldr	r3, [pc, #144]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a73a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a73e:	4a23      	ldr	r2, [pc, #140]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a740:	f023 0304 	bic.w	r3, r3, #4
 800a744:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a748:	4b20      	ldr	r3, [pc, #128]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a1f      	ldr	r2, [pc, #124]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a74e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a752:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a754:	f7f8 fa00 	bl	8002b58 <HAL_GetTick>
 800a758:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a75a:	e008      	b.n	800a76e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a75c:	f7f8 f9fc 	bl	8002b58 <HAL_GetTick>
 800a760:	4602      	mov	r2, r0
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	2b02      	cmp	r3, #2
 800a768:	d901      	bls.n	800a76e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e09f      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a76e:	4b17      	ldr	r3, [pc, #92]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0f0      	beq.n	800a75c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a77a:	4b14      	ldr	r3, [pc, #80]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77e:	4a13      	ldr	r2, [pc, #76]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a784:	6293      	str	r3, [r2, #40]	@ 0x28
 800a786:	e091      	b.n	800a8ac <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a788:	4b10      	ldr	r3, [pc, #64]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a0f      	ldr	r2, [pc, #60]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a78e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a792:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a794:	f7f8 f9e0 	bl	8002b58 <HAL_GetTick>
 800a798:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a79a:	e008      	b.n	800a7ae <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a79c:	f7f8 f9dc 	bl	8002b58 <HAL_GetTick>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d901      	bls.n	800a7ae <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e07f      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a7ae:	4b07      	ldr	r3, [pc, #28]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f0      	bne.n	800a79c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a7ba:	4b04      	ldr	r3, [pc, #16]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7be:	4a03      	ldr	r2, [pc, #12]	@ (800a7cc <HAL_RCC_OscConfig+0xcc8>)
 800a7c0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	6293      	str	r3, [r2, #40]	@ 0x28
 800a7ca:	e06f      	b.n	800a8ac <HAL_RCC_OscConfig+0xda8>
 800a7cc:	46020c00 	.word	0x46020c00
 800a7d0:	46020800 	.word	0x46020800
 800a7d4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a7d8:	4b37      	ldr	r3, [pc, #220]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7dc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7de:	4b36      	ldr	r3, [pc, #216]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d039      	beq.n	800a860 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	f003 0203 	and.w	r2, r3, #3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d132      	bne.n	800a860 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	0a1b      	lsrs	r3, r3, #8
 800a7fe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a806:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a808:	429a      	cmp	r2, r3
 800a80a:	d129      	bne.n	800a860 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a816:	429a      	cmp	r2, r3
 800a818:	d122      	bne.n	800a860 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a824:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a826:	429a      	cmp	r2, r3
 800a828:	d11a      	bne.n	800a860 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	0a5b      	lsrs	r3, r3, #9
 800a82e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a836:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a838:	429a      	cmp	r2, r3
 800a83a:	d111      	bne.n	800a860 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	0c1b      	lsrs	r3, r3, #16
 800a840:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a848:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d108      	bne.n	800a860 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	0e1b      	lsrs	r3, r3, #24
 800a852:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a85a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d001      	beq.n	800a864 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e024      	b.n	800a8ae <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a864:	4b14      	ldr	r3, [pc, #80]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a868:	08db      	lsrs	r3, r3, #3
 800a86a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a872:	429a      	cmp	r2, r3
 800a874:	d01a      	beq.n	800a8ac <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a876:	4b10      	ldr	r3, [pc, #64]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87a:	4a0f      	ldr	r2, [pc, #60]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a87c:	f023 0310 	bic.w	r3, r3, #16
 800a880:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a882:	f7f8 f969 	bl	8002b58 <HAL_GetTick>
 800a886:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a888:	bf00      	nop
 800a88a:	f7f8 f965 	bl	8002b58 <HAL_GetTick>
 800a88e:	4602      	mov	r2, r0
 800a890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a892:	4293      	cmp	r3, r2
 800a894:	d0f9      	beq.n	800a88a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a89a:	4a07      	ldr	r2, [pc, #28]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a8a0:	4b05      	ldr	r3, [pc, #20]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a4:	4a04      	ldr	r2, [pc, #16]	@ (800a8b8 <HAL_RCC_OscConfig+0xdb4>)
 800a8a6:	f043 0310 	orr.w	r3, r3, #16
 800a8aa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3738      	adds	r7, #56	@ 0x38
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	46020c00 	.word	0x46020c00

0800a8bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e1d9      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8d0:	4b9b      	ldr	r3, [pc, #620]	@ (800ab40 <HAL_RCC_ClockConfig+0x284>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 030f 	and.w	r3, r3, #15
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d910      	bls.n	800a900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8de:	4b98      	ldr	r3, [pc, #608]	@ (800ab40 <HAL_RCC_ClockConfig+0x284>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f023 020f 	bic.w	r2, r3, #15
 800a8e6:	4996      	ldr	r1, [pc, #600]	@ (800ab40 <HAL_RCC_ClockConfig+0x284>)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ee:	4b94      	ldr	r3, [pc, #592]	@ (800ab40 <HAL_RCC_ClockConfig+0x284>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 030f 	and.w	r3, r3, #15
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d001      	beq.n	800a900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e1c1      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0310 	and.w	r3, r3, #16
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d010      	beq.n	800a92e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	695a      	ldr	r2, [r3, #20]
 800a910:	4b8c      	ldr	r3, [pc, #560]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a918:	429a      	cmp	r2, r3
 800a91a:	d908      	bls.n	800a92e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a91c:	4b89      	ldr	r3, [pc, #548]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a920:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	695b      	ldr	r3, [r3, #20]
 800a928:	4986      	ldr	r1, [pc, #536]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0308 	and.w	r3, r3, #8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d012      	beq.n	800a960 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	4b81      	ldr	r3, [pc, #516]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	091b      	lsrs	r3, r3, #4
 800a944:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a948:	429a      	cmp	r2, r3
 800a94a:	d909      	bls.n	800a960 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a94c:	4b7d      	ldr	r3, [pc, #500]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	011b      	lsls	r3, r3, #4
 800a95a:	497a      	ldr	r1, [pc, #488]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d010      	beq.n	800a98e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	4b74      	ldr	r3, [pc, #464]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a978:	429a      	cmp	r2, r3
 800a97a:	d908      	bls.n	800a98e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a97c:	4b71      	ldr	r3, [pc, #452]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	496e      	ldr	r1, [pc, #440]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0302 	and.w	r3, r3, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d010      	beq.n	800a9bc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	689a      	ldr	r2, [r3, #8]
 800a99e:	4b69      	ldr	r3, [pc, #420]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f003 030f 	and.w	r3, r3, #15
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d908      	bls.n	800a9bc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a9aa:	4b66      	ldr	r3, [pc, #408]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	f023 020f 	bic.w	r2, r3, #15
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	4963      	ldr	r1, [pc, #396]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 80d2 	beq.w	800ab6e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d143      	bne.n	800aa5e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9d6:	4b5b      	ldr	r3, [pc, #364]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a9d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d110      	bne.n	800aa06 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a9e4:	4b57      	ldr	r3, [pc, #348]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a9e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9ea:	4a56      	ldr	r2, [pc, #344]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a9ec:	f043 0304 	orr.w	r3, r3, #4
 800a9f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a9f4:	4b53      	ldr	r3, [pc, #332]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800a9f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	60bb      	str	r3, [r7, #8]
 800aa00:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800aa02:	2301      	movs	r3, #1
 800aa04:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800aa06:	f7f8 f8a7 	bl	8002b58 <HAL_GetTick>
 800aa0a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800aa0c:	4b4e      	ldr	r3, [pc, #312]	@ (800ab48 <HAL_RCC_ClockConfig+0x28c>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00f      	beq.n	800aa38 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800aa18:	e008      	b.n	800aa2c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800aa1a:	f7f8 f89d 	bl	8002b58 <HAL_GetTick>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d901      	bls.n	800aa2c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e12b      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800aa2c:	4b46      	ldr	r3, [pc, #280]	@ (800ab48 <HAL_RCC_ClockConfig+0x28c>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d0f0      	beq.n	800aa1a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d107      	bne.n	800aa4e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800aa3e:	4b41      	ldr	r3, [pc, #260]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aa40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa44:	4a3f      	ldr	r2, [pc, #252]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aa46:	f023 0304 	bic.w	r3, r3, #4
 800aa4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aa4e:	4b3d      	ldr	r3, [pc, #244]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d121      	bne.n	800aa9e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e112      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d107      	bne.n	800aa76 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa66:	4b37      	ldr	r3, [pc, #220]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d115      	bne.n	800aa9e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e106      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d107      	bne.n	800aa8e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800aa7e:	4b31      	ldr	r3, [pc, #196]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0304 	and.w	r3, r3, #4
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d109      	bne.n	800aa9e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e0fa      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa8e:	4b2d      	ldr	r3, [pc, #180]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e0f2      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800aa9e:	4b29      	ldr	r3, [pc, #164]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	f023 0203 	bic.w	r2, r3, #3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	4926      	ldr	r1, [pc, #152]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aaac:	4313      	orrs	r3, r2
 800aaae:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800aab0:	f7f8 f852 	bl	8002b58 <HAL_GetTick>
 800aab4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d112      	bne.n	800aae4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aabe:	e00a      	b.n	800aad6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aac0:	f7f8 f84a 	bl	8002b58 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aace:	4293      	cmp	r3, r2
 800aad0:	d901      	bls.n	800aad6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e0d6      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aad6:	4b1b      	ldr	r3, [pc, #108]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f003 030c 	and.w	r3, r3, #12
 800aade:	2b0c      	cmp	r3, #12
 800aae0:	d1ee      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x204>
 800aae2:	e044      	b.n	800ab6e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d112      	bne.n	800ab12 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aaec:	e00a      	b.n	800ab04 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaee:	f7f8 f833 	bl	8002b58 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d901      	bls.n	800ab04 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e0bf      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab04:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	f003 030c 	and.w	r3, r3, #12
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d1ee      	bne.n	800aaee <HAL_RCC_ClockConfig+0x232>
 800ab10:	e02d      	b.n	800ab6e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d123      	bne.n	800ab62 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab1a:	e00a      	b.n	800ab32 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab1c:	f7f8 f81c 	bl	8002b58 <HAL_GetTick>
 800ab20:	4602      	mov	r2, r0
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d901      	bls.n	800ab32 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e0a8      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab32:	4b04      	ldr	r3, [pc, #16]	@ (800ab44 <HAL_RCC_ClockConfig+0x288>)
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	f003 030c 	and.w	r3, r3, #12
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1ee      	bne.n	800ab1c <HAL_RCC_ClockConfig+0x260>
 800ab3e:	e016      	b.n	800ab6e <HAL_RCC_ClockConfig+0x2b2>
 800ab40:	40022000 	.word	0x40022000
 800ab44:	46020c00 	.word	0x46020c00
 800ab48:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab4c:	f7f8 f804 	bl	8002b58 <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d901      	bls.n	800ab62 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e090      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab62:	4b4a      	ldr	r3, [pc, #296]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	f003 030c 	and.w	r3, r3, #12
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d1ee      	bne.n	800ab4c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d010      	beq.n	800ab9c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	689a      	ldr	r2, [r3, #8]
 800ab7e:	4b43      	ldr	r3, [pc, #268]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	f003 030f 	and.w	r3, r3, #15
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d208      	bcs.n	800ab9c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ab8a:	4b40      	ldr	r3, [pc, #256]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f023 020f 	bic.w	r2, r3, #15
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	493d      	ldr	r1, [pc, #244]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab9c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac90 <HAL_RCC_ClockConfig+0x3d4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 030f 	and.w	r3, r3, #15
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d210      	bcs.n	800abcc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abaa:	4b39      	ldr	r3, [pc, #228]	@ (800ac90 <HAL_RCC_ClockConfig+0x3d4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f023 020f 	bic.w	r2, r3, #15
 800abb2:	4937      	ldr	r1, [pc, #220]	@ (800ac90 <HAL_RCC_ClockConfig+0x3d4>)
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abba:	4b35      	ldr	r3, [pc, #212]	@ (800ac90 <HAL_RCC_ClockConfig+0x3d4>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 030f 	and.w	r3, r3, #15
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d001      	beq.n	800abcc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e05b      	b.n	800ac84 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d010      	beq.n	800abfa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68da      	ldr	r2, [r3, #12]
 800abdc:	4b2b      	ldr	r3, [pc, #172]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d208      	bcs.n	800abfa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800abe8:	4b28      	ldr	r3, [pc, #160]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	4925      	ldr	r1, [pc, #148]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0308 	and.w	r3, r3, #8
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d012      	beq.n	800ac2c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691a      	ldr	r2, [r3, #16]
 800ac0a:	4b20      	ldr	r3, [pc, #128]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	091b      	lsrs	r3, r3, #4
 800ac10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d209      	bcs.n	800ac2c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800ac18:	4b1c      	ldr	r3, [pc, #112]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	011b      	lsls	r3, r3, #4
 800ac26:	4919      	ldr	r1, [pc, #100]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 0310 	and.w	r3, r3, #16
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d010      	beq.n	800ac5a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	695a      	ldr	r2, [r3, #20]
 800ac3c:	4b13      	ldr	r3, [pc, #76]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d208      	bcs.n	800ac5a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800ac48:	4b10      	ldr	r3, [pc, #64]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	490d      	ldr	r1, [pc, #52]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ac5a:	f000 f821 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4b0a      	ldr	r3, [pc, #40]	@ (800ac8c <HAL_RCC_ClockConfig+0x3d0>)
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	f003 030f 	and.w	r3, r3, #15
 800ac68:	490a      	ldr	r1, [pc, #40]	@ (800ac94 <HAL_RCC_ClockConfig+0x3d8>)
 800ac6a:	5ccb      	ldrb	r3, [r1, r3]
 800ac6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac70:	4a09      	ldr	r2, [pc, #36]	@ (800ac98 <HAL_RCC_ClockConfig+0x3dc>)
 800ac72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ac74:	4b09      	ldr	r3, [pc, #36]	@ (800ac9c <HAL_RCC_ClockConfig+0x3e0>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7f7 fee3 	bl	8002a44 <HAL_InitTick>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]

  return status;
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3718      	adds	r7, #24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	46020c00 	.word	0x46020c00
 800ac90:	40022000 	.word	0x40022000
 800ac94:	080115c0 	.word	0x080115c0
 800ac98:	20000000 	.word	0x20000000
 800ac9c:	20000004 	.word	0x20000004

0800aca0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b08b      	sub	sp, #44	@ 0x2c
 800aca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acae:	4b78      	ldr	r3, [pc, #480]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	f003 030c 	and.w	r3, r3, #12
 800acb6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800acb8:	4b75      	ldr	r3, [pc, #468]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800acba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acbc:	f003 0303 	and.w	r3, r3, #3
 800acc0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <HAL_RCC_GetSysClockFreq+0x34>
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b0c      	cmp	r3, #12
 800accc:	d121      	bne.n	800ad12 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d11e      	bne.n	800ad12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800acd4:	4b6e      	ldr	r3, [pc, #440]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d107      	bne.n	800acf0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ace0:	4b6b      	ldr	r3, [pc, #428]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ace2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ace6:	0b1b      	lsrs	r3, r3, #12
 800ace8:	f003 030f 	and.w	r3, r3, #15
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
 800acee:	e005      	b.n	800acfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800acf0:	4b67      	ldr	r3, [pc, #412]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	0f1b      	lsrs	r3, r3, #28
 800acf6:	f003 030f 	and.w	r3, r3, #15
 800acfa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800acfc:	4a65      	ldr	r2, [pc, #404]	@ (800ae94 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800acfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad04:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d110      	bne.n	800ad2e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ad10:	e00d      	b.n	800ad2e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad12:	4b5f      	ldr	r3, [pc, #380]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	f003 030c 	and.w	r3, r3, #12
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d102      	bne.n	800ad24 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ad1e:	4b5e      	ldr	r3, [pc, #376]	@ (800ae98 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ad20:	623b      	str	r3, [r7, #32]
 800ad22:	e004      	b.n	800ad2e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	2b08      	cmp	r3, #8
 800ad28:	d101      	bne.n	800ad2e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ad2a:	4b5b      	ldr	r3, [pc, #364]	@ (800ae98 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ad2c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b0c      	cmp	r3, #12
 800ad32:	f040 80a5 	bne.w	800ae80 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ad36:	4b56      	ldr	r3, [pc, #344]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ad40:	4b53      	ldr	r3, [pc, #332]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad44:	0a1b      	lsrs	r3, r3, #8
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ad4e:	4b50      	ldr	r3, [pc, #320]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad52:	091b      	lsrs	r3, r3, #4
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ad5a:	4b4d      	ldr	r3, [pc, #308]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad5e:	08db      	lsrs	r3, r3, #3
 800ad60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	fb02 f303 	mul.w	r3, r2, r3
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad72:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d003      	beq.n	800ad84 <HAL_RCC_GetSysClockFreq+0xe4>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d022      	beq.n	800adc8 <HAL_RCC_GetSysClockFreq+0x128>
 800ad82:	e043      	b.n	800ae0c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800ae9c <HAL_RCC_GetSysClockFreq+0x1fc>
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b3e      	ldr	r3, [pc, #248]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ada6:	ed97 6a01 	vldr	s12, [r7, #4]
 800adaa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800aea0 <HAL_RCC_GetSysClockFreq+0x200>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc6:	e046      	b.n	800ae56 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800ae9c <HAL_RCC_GetSysClockFreq+0x1fc>
 800add6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adda:	4b2d      	ldr	r3, [pc, #180]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800addc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800adea:	ed97 6a01 	vldr	s12, [r7, #4]
 800adee:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800aea0 <HAL_RCC_GetSysClockFreq+0x200>
 800adf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800adf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800adfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae0a:	e024      	b.n	800ae56 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	ee07 3a90 	vmov	s15, r3
 800ae1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae24:	4b1a      	ldr	r3, [pc, #104]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2c:	ee07 3a90 	vmov	s15, r3
 800ae30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ae34:	ed97 6a01 	vldr	s12, [r7, #4]
 800ae38:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800aea0 <HAL_RCC_GetSysClockFreq+0x200>
 800ae3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ae44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae48:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae54:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800ae56:	4b0e      	ldr	r3, [pc, #56]	@ (800ae90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae5a:	0e1b      	lsrs	r3, r3, #24
 800ae5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae60:	3301      	adds	r3, #1
 800ae62:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae7a:	ee17 3a90 	vmov	r3, s15
 800ae7e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800ae80:	6a3b      	ldr	r3, [r7, #32]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	372c      	adds	r7, #44	@ 0x2c
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	46020c00 	.word	0x46020c00
 800ae94:	080115d8 	.word	0x080115d8
 800ae98:	00f42400 	.word	0x00f42400
 800ae9c:	4b742400 	.word	0x4b742400
 800aea0:	46000000 	.word	0x46000000

0800aea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aea8:	f7ff fefa 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800aeac:	4602      	mov	r2, r0
 800aeae:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <HAL_RCC_GetHCLKFreq+0x28>)
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	f003 030f 	and.w	r3, r3, #15
 800aeb6:	4906      	ldr	r1, [pc, #24]	@ (800aed0 <HAL_RCC_GetHCLKFreq+0x2c>)
 800aeb8:	5ccb      	ldrb	r3, [r1, r3]
 800aeba:	fa22 f303 	lsr.w	r3, r2, r3
 800aebe:	4a05      	ldr	r2, [pc, #20]	@ (800aed4 <HAL_RCC_GetHCLKFreq+0x30>)
 800aec0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800aec2:	4b04      	ldr	r3, [pc, #16]	@ (800aed4 <HAL_RCC_GetHCLKFreq+0x30>)
 800aec4:	681b      	ldr	r3, [r3, #0]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	46020c00 	.word	0x46020c00
 800aed0:	080115c0 	.word	0x080115c0
 800aed4:	20000000 	.word	0x20000000

0800aed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800aedc:	f7ff ffe2 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800aee0:	4602      	mov	r2, r0
 800aee2:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	091b      	lsrs	r3, r3, #4
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	4903      	ldr	r1, [pc, #12]	@ (800aefc <HAL_RCC_GetPCLK1Freq+0x24>)
 800aeee:	5ccb      	ldrb	r3, [r1, r3]
 800aef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	46020c00 	.word	0x46020c00
 800aefc:	080115d0 	.word	0x080115d0

0800af00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800af04:	f7ff ffce 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800af08:	4602      	mov	r2, r0
 800af0a:	4b05      	ldr	r3, [pc, #20]	@ (800af20 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	0a1b      	lsrs	r3, r3, #8
 800af10:	f003 0307 	and.w	r3, r3, #7
 800af14:	4903      	ldr	r1, [pc, #12]	@ (800af24 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af16:	5ccb      	ldrb	r3, [r1, r3]
 800af18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	46020c00 	.word	0x46020c00
 800af24:	080115d0 	.word	0x080115d0

0800af28 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800af2c:	f7ff ffba 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800af30:	4602      	mov	r2, r0
 800af32:	4b05      	ldr	r3, [pc, #20]	@ (800af48 <HAL_RCC_GetPCLK3Freq+0x20>)
 800af34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af36:	091b      	lsrs	r3, r3, #4
 800af38:	f003 0307 	and.w	r3, r3, #7
 800af3c:	4903      	ldr	r1, [pc, #12]	@ (800af4c <HAL_RCC_GetPCLK3Freq+0x24>)
 800af3e:	5ccb      	ldrb	r3, [r1, r3]
 800af40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af44:	4618      	mov	r0, r3
 800af46:	bd80      	pop	{r7, pc}
 800af48:	46020c00 	.word	0x46020c00
 800af4c:	080115d0 	.word	0x080115d0

0800af50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800af58:	4b3e      	ldr	r3, [pc, #248]	@ (800b054 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800af5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af5e:	f003 0304 	and.w	r3, r3, #4
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800af66:	f7fe fd21 	bl	80099ac <HAL_PWREx_GetVoltageRange>
 800af6a:	6178      	str	r0, [r7, #20]
 800af6c:	e019      	b.n	800afa2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800af6e:	4b39      	ldr	r3, [pc, #228]	@ (800b054 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800af70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af74:	4a37      	ldr	r2, [pc, #220]	@ (800b054 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800af76:	f043 0304 	orr.w	r3, r3, #4
 800af7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800af7e:	4b35      	ldr	r3, [pc, #212]	@ (800b054 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800af80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800af8c:	f7fe fd0e 	bl	80099ac <HAL_PWREx_GetVoltageRange>
 800af90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800af92:	4b30      	ldr	r3, [pc, #192]	@ (800b054 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800af94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af98:	4a2e      	ldr	r2, [pc, #184]	@ (800b054 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800af9a:	f023 0304 	bic.w	r3, r3, #4
 800af9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800afa8:	d003      	beq.n	800afb2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afb0:	d109      	bne.n	800afc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afb8:	d202      	bcs.n	800afc0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800afba:	2301      	movs	r3, #1
 800afbc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800afbe:	e033      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800afc0:	2300      	movs	r3, #0
 800afc2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800afc4:	e030      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afcc:	d208      	bcs.n	800afe0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afd4:	d102      	bne.n	800afdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800afd6:	2303      	movs	r3, #3
 800afd8:	613b      	str	r3, [r7, #16]
 800afda:	e025      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e035      	b.n	800b04c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe6:	d90f      	bls.n	800b008 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d109      	bne.n	800b002 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aff4:	d902      	bls.n	800affc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800aff6:	2300      	movs	r3, #0
 800aff8:	613b      	str	r3, [r7, #16]
 800affa:	e015      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800affc:	2301      	movs	r3, #1
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	e012      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
 800b006:	e00f      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b00e:	d109      	bne.n	800b024 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b016:	d102      	bne.n	800b01e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b018:	2301      	movs	r3, #1
 800b01a:	613b      	str	r3, [r7, #16]
 800b01c:	e004      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b01e:	2302      	movs	r3, #2
 800b020:	613b      	str	r3, [r7, #16]
 800b022:	e001      	b.n	800b028 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b024:	2301      	movs	r3, #1
 800b026:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b028:	4b0b      	ldr	r3, [pc, #44]	@ (800b058 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f023 020f 	bic.w	r2, r3, #15
 800b030:	4909      	ldr	r1, [pc, #36]	@ (800b058 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	4313      	orrs	r3, r2
 800b036:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b038:	4b07      	ldr	r3, [pc, #28]	@ (800b058 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 030f 	and.w	r3, r3, #15
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	429a      	cmp	r2, r3
 800b044:	d001      	beq.n	800b04a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	46020c00 	.word	0x46020c00
 800b058:	40022000 	.word	0x40022000

0800b05c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b05c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b060:	b0c8      	sub	sp, #288	@ 0x120
 800b062:	af00      	add	r7, sp, #0
 800b064:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b068:	2300      	movs	r3, #0
 800b06a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b06e:	2300      	movs	r3, #0
 800b070:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	f002 0401 	and.w	r4, r2, #1
 800b080:	2500      	movs	r5, #0
 800b082:	ea54 0305 	orrs.w	r3, r4, r5
 800b086:	d00b      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b088:	4bd5      	ldr	r3, [pc, #852]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b08a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b08e:	f023 0103 	bic.w	r1, r3, #3
 800b092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b098:	4ad1      	ldr	r2, [pc, #836]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b09a:	430b      	orrs	r3, r1
 800b09c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b0a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f002 0802 	and.w	r8, r2, #2
 800b0ac:	f04f 0900 	mov.w	r9, #0
 800b0b0:	ea58 0309 	orrs.w	r3, r8, r9
 800b0b4:	d00b      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b0b6:	4bca      	ldr	r3, [pc, #808]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0bc:	f023 010c 	bic.w	r1, r3, #12
 800b0c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0c6:	4ac6      	ldr	r2, [pc, #792]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f002 0a04 	and.w	sl, r2, #4
 800b0da:	f04f 0b00 	mov.w	fp, #0
 800b0de:	ea5a 030b 	orrs.w	r3, sl, fp
 800b0e2:	d00b      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b0e4:	4bbe      	ldr	r3, [pc, #760]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0ea:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0f4:	4aba      	ldr	r2, [pc, #744]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0f6:	430b      	orrs	r3, r1
 800b0f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b0fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	f002 0308 	and.w	r3, r2, #8
 800b108:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b10c:	2300      	movs	r3, #0
 800b10e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b112:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b116:	460b      	mov	r3, r1
 800b118:	4313      	orrs	r3, r2
 800b11a:	d00b      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b11c:	4bb0      	ldr	r3, [pc, #704]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b11e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b122:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b12a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b12c:	4aac      	ldr	r2, [pc, #688]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b12e:	430b      	orrs	r3, r1
 800b130:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	f002 0310 	and.w	r3, r2, #16
 800b140:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b144:	2300      	movs	r3, #0
 800b146:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b14a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b14e:	460b      	mov	r3, r1
 800b150:	4313      	orrs	r3, r2
 800b152:	d00b      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b154:	4ba2      	ldr	r3, [pc, #648]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b15a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b15e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b164:	4a9e      	ldr	r2, [pc, #632]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b166:	430b      	orrs	r3, r1
 800b168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b178:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b17c:	2300      	movs	r3, #0
 800b17e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b182:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b186:	460b      	mov	r3, r1
 800b188:	4313      	orrs	r3, r2
 800b18a:	d00b      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b18c:	4b94      	ldr	r3, [pc, #592]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b18e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b192:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b19c:	4a90      	ldr	r2, [pc, #576]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	f002 0320 	and.w	r3, r2, #32
 800b1b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b1ba:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	d00b      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b1c4:	4b86      	ldr	r3, [pc, #536]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1ca:	f023 0107 	bic.w	r1, r3, #7
 800b1ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1d4:	4a82      	ldr	r2, [pc, #520]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b1e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b1f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	d00b      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b1fc:	4b78      	ldr	r3, [pc, #480]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b202:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b20a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b20c:	4a74      	ldr	r2, [pc, #464]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b20e:	430b      	orrs	r3, r1
 800b210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b224:	2300      	movs	r3, #0
 800b226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b22a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b22e:	460b      	mov	r3, r1
 800b230:	4313      	orrs	r3, r2
 800b232:	d00b      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b234:	4b6a      	ldr	r3, [pc, #424]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b23a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b244:	4a66      	ldr	r2, [pc, #408]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b246:	430b      	orrs	r3, r1
 800b248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b25c:	2300      	movs	r3, #0
 800b25e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b262:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b266:	460b      	mov	r3, r1
 800b268:	4313      	orrs	r3, r2
 800b26a:	d00b      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b26c:	4b5c      	ldr	r3, [pc, #368]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b26e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b272:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b27a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b27c:	4a58      	ldr	r2, [pc, #352]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b27e:	430b      	orrs	r3, r1
 800b280:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b294:	2300      	movs	r3, #0
 800b296:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b29a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	d00b      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b2a4:	4b4e      	ldr	r3, [pc, #312]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2aa:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b2ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2b4:	4a4a      	ldr	r2, [pc, #296]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2b6:	430b      	orrs	r3, r1
 800b2b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b2bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b2c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	d00b      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b2dc:	4b40      	ldr	r3, [pc, #256]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2e2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2ee:	430b      	orrs	r3, r1
 800b2f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b304:	2300      	movs	r3, #0
 800b306:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b30a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b30e:	460b      	mov	r3, r1
 800b310:	4313      	orrs	r3, r2
 800b312:	d00c      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b314:	4b32      	ldr	r3, [pc, #200]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b31a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b326:	4a2e      	ldr	r2, [pc, #184]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b328:	430b      	orrs	r3, r1
 800b32a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b33a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b33e:	2300      	movs	r3, #0
 800b340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b344:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b348:	460b      	mov	r3, r1
 800b34a:	4313      	orrs	r3, r2
 800b34c:	d00c      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b34e:	4b24      	ldr	r3, [pc, #144]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b354:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b360:	4a1f      	ldr	r2, [pc, #124]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b362:	430b      	orrs	r3, r1
 800b364:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b378:	2300      	movs	r3, #0
 800b37a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b37e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b382:	460b      	mov	r3, r1
 800b384:	4313      	orrs	r3, r2
 800b386:	d00c      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b388:	4b15      	ldr	r3, [pc, #84]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b38a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b38e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b39a:	4a11      	ldr	r2, [pc, #68]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b39c:	430b      	orrs	r3, r1
 800b39e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b3ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b3b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	d010      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b3c2:	4b07      	ldr	r3, [pc, #28]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3d4:	4a02      	ldr	r2, [pc, #8]	@ (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3d6:	430b      	orrs	r3, r1
 800b3d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b3dc:	e002      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b3de:	bf00      	nop
 800b3e0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b3f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b3fe:	460b      	mov	r3, r1
 800b400:	4313      	orrs	r3, r2
 800b402:	d04c      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b408:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b40c:	2b80      	cmp	r3, #128	@ 0x80
 800b40e:	d02d      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b410:	2b80      	cmp	r3, #128	@ 0x80
 800b412:	d827      	bhi.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b414:	2b60      	cmp	r3, #96	@ 0x60
 800b416:	d02b      	beq.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b418:	2b60      	cmp	r3, #96	@ 0x60
 800b41a:	d823      	bhi.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b41c:	2b40      	cmp	r3, #64	@ 0x40
 800b41e:	d006      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b420:	2b40      	cmp	r3, #64	@ 0x40
 800b422:	d81f      	bhi.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b424:	2b00      	cmp	r3, #0
 800b426:	d009      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b428:	2b20      	cmp	r3, #32
 800b42a:	d011      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b42c:	e01a      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b42e:	4bc0      	ldr	r3, [pc, #768]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b432:	4abf      	ldr	r2, [pc, #764]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b438:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b43a:	e01a      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b440:	3308      	adds	r3, #8
 800b442:	4618      	mov	r0, r3
 800b444:	f002 fcd6 	bl	800ddf4 <RCCEx_PLL2_Config>
 800b448:	4603      	mov	r3, r0
 800b44a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b44e:	e010      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b454:	332c      	adds	r3, #44	@ 0x2c
 800b456:	4618      	mov	r0, r3
 800b458:	f002 fd64 	bl	800df24 <RCCEx_PLL3_Config>
 800b45c:	4603      	mov	r3, r0
 800b45e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b462:	e006      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b46a:	e002      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b46c:	bf00      	nop
 800b46e:	e000      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b470:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b472:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10d      	bne.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b47a:	4bad      	ldr	r3, [pc, #692]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b47c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b480:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b488:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b48c:	4aa8      	ldr	r2, [pc, #672]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b48e:	430b      	orrs	r3, r1
 800b490:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b494:	e003      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b496:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b49a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b4aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4b4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	d053      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b4be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b4c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4ca:	d033      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b4cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4d0:	d82c      	bhi.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b4d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4d6:	d02f      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b4d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4dc:	d826      	bhi.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b4de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4e2:	d008      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4e8:	d820      	bhi.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b4ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4f2:	d011      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b4f4:	e01a      	b.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4f6:	4b8e      	ldr	r3, [pc, #568]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fa:	4a8d      	ldr	r2, [pc, #564]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b500:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b502:	e01a      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b508:	3308      	adds	r3, #8
 800b50a:	4618      	mov	r0, r3
 800b50c:	f002 fc72 	bl	800ddf4 <RCCEx_PLL2_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b516:	e010      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b51c:	332c      	adds	r3, #44	@ 0x2c
 800b51e:	4618      	mov	r0, r3
 800b520:	f002 fd00 	bl	800df24 <RCCEx_PLL3_Config>
 800b524:	4603      	mov	r3, r0
 800b526:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b52a:	e006      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b532:	e002      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b534:	bf00      	nop
 800b536:	e000      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b53a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10d      	bne.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b542:	4b7b      	ldr	r3, [pc, #492]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b544:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b548:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b54c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b554:	4a76      	ldr	r2, [pc, #472]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b556:	430b      	orrs	r3, r1
 800b558:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b55c:	e003      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b55e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b562:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b576:	2300      	movs	r3, #0
 800b578:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b57c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b580:	460b      	mov	r3, r1
 800b582:	4313      	orrs	r3, r2
 800b584:	d046      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b58a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b58e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b592:	d028      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b594:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b598:	d821      	bhi.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b59a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b59e:	d022      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b5a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5a4:	d81b      	bhi.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b5a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5aa:	d01c      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b5ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5b0:	d815      	bhi.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b5b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5b6:	d008      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b5b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5bc:	d80f      	bhi.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d011      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b5c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5c6:	d00e      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b5c8:	e009      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b5ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f002 fc0f 	bl	800ddf4 <RCCEx_PLL2_Config>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5dc:	e004      	b.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5e4:	e000      	b.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b5e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10d      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b5f0:	4b4f      	ldr	r3, [pc, #316]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5f6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b602:	4a4b      	ldr	r2, [pc, #300]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b604:	430b      	orrs	r3, r1
 800b606:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b60a:	e003      	b.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b60c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b610:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b624:	2300      	movs	r3, #0
 800b626:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b62a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b62e:	460b      	mov	r3, r1
 800b630:	4313      	orrs	r3, r2
 800b632:	d03f      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b63c:	2b04      	cmp	r3, #4
 800b63e:	d81e      	bhi.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b640:	a201      	add	r2, pc, #4	@ (adr r2, 800b648 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b646:	bf00      	nop
 800b648:	0800b687 	.word	0x0800b687
 800b64c:	0800b65d 	.word	0x0800b65d
 800b650:	0800b66b 	.word	0x0800b66b
 800b654:	0800b687 	.word	0x0800b687
 800b658:	0800b687 	.word	0x0800b687
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b65c:	4b34      	ldr	r3, [pc, #208]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b660:	4a33      	ldr	r2, [pc, #204]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b666:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b668:	e00e      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66e:	332c      	adds	r3, #44	@ 0x2c
 800b670:	4618      	mov	r0, r3
 800b672:	f002 fc57 	bl	800df24 <RCCEx_PLL3_Config>
 800b676:	4603      	mov	r3, r0
 800b678:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b67c:	e004      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b684:	e000      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b686:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b688:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10d      	bne.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b690:	4b27      	ldr	r3, [pc, #156]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b696:	f023 0107 	bic.w	r1, r3, #7
 800b69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6a2:	4a23      	ldr	r2, [pc, #140]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b6a4:	430b      	orrs	r3, r1
 800b6a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b6aa:	e003      	b.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6b0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b6c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	d04c      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b6dc:	d02a      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b6de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b6e2:	d821      	bhi.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b6e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b6e8:	d026      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b6ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b6ee:	d81b      	bhi.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b6f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6f4:	d00e      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b6f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6fa:	d815      	bhi.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d01d      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b704:	d110      	bne.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b706:	4b0a      	ldr	r3, [pc, #40]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70a:	4a09      	ldr	r2, [pc, #36]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b70c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b710:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b712:	e014      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b718:	332c      	adds	r3, #44	@ 0x2c
 800b71a:	4618      	mov	r0, r3
 800b71c:	f002 fc02 	bl	800df24 <RCCEx_PLL3_Config>
 800b720:	4603      	mov	r3, r0
 800b722:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b726:	e00a      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b72e:	e006      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b730:	46020c00 	.word	0x46020c00
        break;
 800b734:	bf00      	nop
 800b736:	e002      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b738:	bf00      	nop
 800b73a:	e000      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b73c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b73e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10d      	bne.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b746:	4baf      	ldr	r3, [pc, #700]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b74c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b754:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b758:	4aaa      	ldr	r2, [pc, #680]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b75a:	430b      	orrs	r3, r1
 800b75c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b760:	e003      	b.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b762:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b766:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b776:	673b      	str	r3, [r7, #112]	@ 0x70
 800b778:	2300      	movs	r3, #0
 800b77a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b77c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b780:	460b      	mov	r3, r1
 800b782:	4313      	orrs	r3, r2
 800b784:	f000 80b5 	beq.w	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b788:	2300      	movs	r3, #0
 800b78a:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b78e:	4b9d      	ldr	r3, [pc, #628]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d113      	bne.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b79c:	4b99      	ldr	r3, [pc, #612]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b79e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b7a2:	4a98      	ldr	r2, [pc, #608]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7a4:	f043 0304 	orr.w	r3, r3, #4
 800b7a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b7ac:	4b95      	ldr	r3, [pc, #596]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b7b2:	f003 0304 	and.w	r3, r3, #4
 800b7b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b7ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b7c4:	4b90      	ldr	r3, [pc, #576]	@ (800ba08 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c8:	4a8f      	ldr	r2, [pc, #572]	@ (800ba08 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b7ca:	f043 0301 	orr.w	r3, r3, #1
 800b7ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7d0:	f7f7 f9c2 	bl	8002b58 <HAL_GetTick>
 800b7d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b7d8:	e00b      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7da:	f7f7 f9bd 	bl	8002b58 <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d903      	bls.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7f0:	e005      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b7f2:	4b85      	ldr	r3, [pc, #532]	@ (800ba08 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0ed      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b7fe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b802:	2b00      	cmp	r3, #0
 800b804:	d165      	bne.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b806:	4b7f      	ldr	r3, [pc, #508]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b80c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b810:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b814:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d023      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b820:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b828:	4293      	cmp	r3, r2
 800b82a:	d01b      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b82c:	4b75      	ldr	r3, [pc, #468]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b82e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b836:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b83a:	4b72      	ldr	r3, [pc, #456]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b83c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b840:	4a70      	ldr	r2, [pc, #448]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b846:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b84a:	4b6e      	ldr	r3, [pc, #440]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b84c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b850:	4a6c      	ldr	r2, [pc, #432]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b856:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b85a:	4a6a      	ldr	r2, [pc, #424]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b85c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b860:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d019      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b870:	f7f7 f972 	bl	8002b58 <HAL_GetTick>
 800b874:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b878:	e00d      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b87a:	f7f7 f96d 	bl	8002b58 <HAL_GetTick>
 800b87e:	4602      	mov	r2, r0
 800b880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b884:	1ad2      	subs	r2, r2, r3
 800b886:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d903      	bls.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b88e:	2303      	movs	r3, #3
 800b890:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b894:	e006      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b896:	4b5b      	ldr	r3, [pc, #364]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d0ea      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b8a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10d      	bne.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b8ac:	4b55      	ldr	r3, [pc, #340]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b8ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b8b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b8be:	4a51      	ldr	r2, [pc, #324]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b8c6:	e008      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8cc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b8d0:	e003      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8d6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b8da:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d107      	bne.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8e2:	4b48      	ldr	r3, [pc, #288]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b8e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8e8:	4a46      	ldr	r2, [pc, #280]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b8ea:	f023 0304 	bic.w	r3, r3, #4
 800b8ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b8f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b8fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b900:	2300      	movs	r3, #0
 800b902:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b904:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b908:	460b      	mov	r3, r1
 800b90a:	4313      	orrs	r3, r2
 800b90c:	d042      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b90e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b912:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b916:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b91a:	d022      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b91c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b920:	d81b      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b926:	d011      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b92c:	d815      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d019      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b932:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b936:	d110      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b93c:	3308      	adds	r3, #8
 800b93e:	4618      	mov	r0, r3
 800b940:	f002 fa58 	bl	800ddf4 <RCCEx_PLL2_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b94a:	e00d      	b.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b94c:	4b2d      	ldr	r3, [pc, #180]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b950:	4a2c      	ldr	r2, [pc, #176]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b956:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b958:	e006      	b.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b960:	e002      	b.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b962:	bf00      	nop
 800b964:	e000      	b.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b966:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b968:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10d      	bne.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b970:	4b24      	ldr	r3, [pc, #144]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b976:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b97e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b982:	4a20      	ldr	r2, [pc, #128]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b984:	430b      	orrs	r3, r1
 800b986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b98a:	e003      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b990:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b9a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9a6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	d031      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b9b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9bc:	d00b      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b9be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9c2:	d804      	bhi.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d008      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b9c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9cc:	d007      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b9d4:	e004      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b9d6:	bf00      	nop
 800b9d8:	e002      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b9da:	bf00      	nop
 800b9dc:	e000      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b9de:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b9e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d111      	bne.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b9e8:	4b06      	ldr	r3, [pc, #24]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9fa:	4a02      	ldr	r2, [pc, #8]	@ (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ba02:	e007      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800ba04:	46020c00 	.word	0x46020c00
 800ba08:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba0c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba10:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800ba14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ba20:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba22:	2300      	movs	r3, #0
 800ba24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	d00c      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800ba30:	4bb2      	ldr	r3, [pc, #712]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba36:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800ba3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ba42:	4aae      	ldr	r2, [pc, #696]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba44:	430b      	orrs	r3, r1
 800ba46:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800ba4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ba56:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba58:	2300      	movs	r3, #0
 800ba5a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba5c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ba60:	460b      	mov	r3, r1
 800ba62:	4313      	orrs	r3, r2
 800ba64:	d019      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800ba66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba72:	d105      	bne.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ba74:	4ba1      	ldr	r3, [pc, #644]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba78:	4aa0      	ldr	r2, [pc, #640]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba7e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800ba80:	4b9e      	ldr	r3, [pc, #632]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba86:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ba8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba92:	4a9a      	ldr	r2, [pc, #616]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba94:	430b      	orrs	r3, r1
 800ba96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800ba9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800baa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800baa8:	2300      	movs	r3, #0
 800baaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bab0:	460b      	mov	r3, r1
 800bab2:	4313      	orrs	r3, r2
 800bab4:	d00c      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800bab6:	4b91      	ldr	r3, [pc, #580]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800babc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bac8:	4a8c      	ldr	r2, [pc, #560]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baca:	430b      	orrs	r3, r1
 800bacc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800bad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800badc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bade:	2300      	movs	r3, #0
 800bae0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bae2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bae6:	460b      	mov	r3, r1
 800bae8:	4313      	orrs	r3, r2
 800baea:	d00c      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800baec:	4b83      	ldr	r3, [pc, #524]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800baf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800baf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bafe:	4a7f      	ldr	r2, [pc, #508]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb00:	430b      	orrs	r3, r1
 800bb02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800bb06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bb12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb14:	2300      	movs	r3, #0
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	d00c      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800bb22:	4b76      	ldr	r3, [pc, #472]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb28:	f023 0118 	bic.w	r1, r3, #24
 800bb2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb30:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800bb34:	4a71      	ldr	r2, [pc, #452]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb36:	430b      	orrs	r3, r1
 800bb38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bb3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800bb48:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bb52:	460b      	mov	r3, r1
 800bb54:	4313      	orrs	r3, r2
 800bb56:	d032      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800bb58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bb60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb64:	d105      	bne.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb66:	4b65      	ldr	r3, [pc, #404]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb6a:	4a64      	ldr	r2, [pc, #400]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb70:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800bb72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bb7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb7e:	d108      	bne.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb84:	3308      	adds	r3, #8
 800bb86:	4618      	mov	r0, r3
 800bb88:	f002 f934 	bl	800ddf4 <RCCEx_PLL2_Config>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800bb92:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10d      	bne.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800bb9a:	4b58      	ldr	r3, [pc, #352]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bba0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bbac:	4a53      	ldr	r2, [pc, #332]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bbb4:	e003      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbba:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800bbbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	d04a      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800bbda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bbe2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bbe6:	d01e      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800bbe8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bbec:	d825      	bhi.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bbee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbf2:	d00e      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800bbf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbf8:	d81f      	bhi.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d021      	beq.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800bbfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc02:	d11a      	bne.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc04:	4b3d      	ldr	r3, [pc, #244]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc08:	4a3c      	ldr	r2, [pc, #240]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc0e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bc10:	e018      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bc12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc16:	3308      	adds	r3, #8
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f002 f8eb 	bl	800ddf4 <RCCEx_PLL2_Config>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bc24:	e00e      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc2a:	332c      	adds	r3, #44	@ 0x2c
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f002 f979 	bl	800df24 <RCCEx_PLL3_Config>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bc38:	e004      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc40:	e000      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800bc42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc44:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10d      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800bc4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bc56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bc5e:	4927      	ldr	r1, [pc, #156]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc60:	4313      	orrs	r3, r2
 800bc62:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc66:	e003      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc68:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc6c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800bc70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800bc7c:	623b      	str	r3, [r7, #32]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc82:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bc86:	460b      	mov	r3, r1
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	d03d      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bc8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc98:	d00e      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800bc9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc9e:	d815      	bhi.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d017      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bca8:	d110      	bne.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcaa:	4b14      	ldr	r3, [pc, #80]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcae:	4a13      	ldr	r2, [pc, #76]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcb4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bcb6:	e00e      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bcb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f002 f898 	bl	800ddf4 <RCCEx_PLL2_Config>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bcca:	e004      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bcd2:	e000      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bcd4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bcd6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d110      	bne.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bcde:	4b07      	ldr	r3, [pc, #28]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bce4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf0:	4902      	ldr	r1, [pc, #8]	@ (800bcfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bcf8:	e006      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bcfa:	bf00      	nop
 800bcfc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd04:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bd08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bd14:	61bb      	str	r3, [r7, #24]
 800bd16:	2300      	movs	r3, #0
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4313      	orrs	r3, r2
 800bd22:	d00c      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bd24:	4b68      	ldr	r3, [pc, #416]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bd26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd2a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bd2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bd36:	4964      	ldr	r1, [pc, #400]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	2100      	movs	r1, #0
 800bd48:	6139      	str	r1, [r7, #16]
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd54:	460b      	mov	r3, r1
 800bd56:	4313      	orrs	r3, r2
 800bd58:	d036      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bd5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00c      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bd66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd6a:	d113      	bne.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd70:	3308      	adds	r3, #8
 800bd72:	4618      	mov	r0, r3
 800bd74:	f002 f83e 	bl	800ddf4 <RCCEx_PLL2_Config>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bd7e:	e00d      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bd80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd84:	332c      	adds	r3, #44	@ 0x2c
 800bd86:	4618      	mov	r0, r3
 800bd88:	f002 f8cc 	bl	800df24 <RCCEx_PLL3_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bd92:	e003      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd9c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10d      	bne.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bda4:	4b48      	ldr	r3, [pc, #288]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bda6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdaa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bdae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bdb6:	4944      	ldr	r1, [pc, #272]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bdbe:	e003      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdc4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bdc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	f003 0304 	and.w	r3, r3, #4
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bdde:	460b      	mov	r3, r1
 800bde0:	4313      	orrs	r3, r2
 800bde2:	d024      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bde4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d108      	bne.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bdf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdf4:	332c      	adds	r3, #44	@ 0x2c
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f002 f894 	bl	800df24 <RCCEx_PLL3_Config>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800be02:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10d      	bne.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800be0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be10:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800be14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800be1c:	492a      	ldr	r1, [pc, #168]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800be24:	e003      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be26:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be2a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800be2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	2100      	movs	r1, #0
 800be38:	6039      	str	r1, [r7, #0]
 800be3a:	f003 0308 	and.w	r3, r3, #8
 800be3e:	607b      	str	r3, [r7, #4]
 800be40:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be44:	460b      	mov	r3, r1
 800be46:	4313      	orrs	r3, r2
 800be48:	d036      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800be4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800be52:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800be56:	d00d      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800be58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800be5c:	d811      	bhi.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800be5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be62:	d012      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800be64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be68:	d80b      	bhi.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00d      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800be6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be72:	d106      	bne.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800be74:	4b14      	ldr	r3, [pc, #80]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be78:	4a13      	ldr	r2, [pc, #76]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be7e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800be80:	e004      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be88:	e000      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800be8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be8c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10d      	bne.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800be94:	4b0c      	ldr	r3, [pc, #48]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800be9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bea2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bea6:	4908      	ldr	r1, [pc, #32]	@ (800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bea8:	4313      	orrs	r3, r2
 800beaa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800beae:	e003      	b.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800beb4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800beb8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bec2:	46bd      	mov	sp, r7
 800bec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bec8:	46020c00 	.word	0x46020c00

0800becc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800becc:	b480      	push	{r7}
 800bece:	b089      	sub	sp, #36	@ 0x24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bed4:	4ba6      	ldr	r3, [pc, #664]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bedc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bede:	4ba4      	ldr	r3, [pc, #656]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee2:	f003 0303 	and.w	r3, r3, #3
 800bee6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bee8:	4ba1      	ldr	r3, [pc, #644]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800beea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beec:	0a1b      	lsrs	r3, r3, #8
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	3301      	adds	r3, #1
 800bef4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bef6:	4b9e      	ldr	r3, [pc, #632]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800befa:	091b      	lsrs	r3, r3, #4
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bf02:	4b9b      	ldr	r3, [pc, #620]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf06:	08db      	lsrs	r3, r3, #3
 800bf08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	fb02 f303 	mul.w	r3, r2, r3
 800bf12:	ee07 3a90 	vmov	s15, r3
 800bf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d062      	beq.n	800bfea <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	f200 8081 	bhi.w	800c02e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d024      	beq.n	800bf7c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d17a      	bne.n	800c02e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf42:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bf46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf4a:	4b89      	ldr	r3, [pc, #548]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf5e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bf62:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf7a:	e08f      	b.n	800c09c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bf7c:	4b7c      	ldr	r3, [pc, #496]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d005      	beq.n	800bf94 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bf88:	4b79      	ldr	r3, [pc, #484]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	0f1b      	lsrs	r3, r3, #28
 800bf8e:	f003 030f 	and.w	r3, r3, #15
 800bf92:	e006      	b.n	800bfa2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bf94:	4b76      	ldr	r3, [pc, #472]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bf9a:	041b      	lsls	r3, r3, #16
 800bf9c:	0f1b      	lsrs	r3, r3, #28
 800bf9e:	f003 030f 	and.w	r3, r3, #15
 800bfa2:	4a76      	ldr	r2, [pc, #472]	@ (800c17c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	ee07 3a90 	vmov	s15, r3
 800bfc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc8:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfcc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bfd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bfe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfe8:	e058      	b.n	800c09c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffc:	4b5c      	ldr	r3, [pc, #368]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c004:	ee07 3a90 	vmov	s15, r3
 800c008:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c00c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c010:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c014:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c018:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c01c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c020:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c024:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c028:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c02c:	e036      	b.n	800c09c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c02e:	4b50      	ldr	r3, [pc, #320]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d005      	beq.n	800c046 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800c03a:	4b4d      	ldr	r3, [pc, #308]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	0f1b      	lsrs	r3, r3, #28
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	e006      	b.n	800c054 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800c046:	4b4a      	ldr	r3, [pc, #296]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c04c:	041b      	lsls	r3, r3, #16
 800c04e:	0f1b      	lsrs	r3, r3, #28
 800c050:	f003 030f 	and.w	r3, r3, #15
 800c054:	4a49      	ldr	r2, [pc, #292]	@ (800c17c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c05a:	ee07 3a90 	vmov	s15, r3
 800c05e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	ee07 3a90 	vmov	s15, r3
 800c076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c07e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c09a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c09c:	4b34      	ldr	r3, [pc, #208]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d017      	beq.n	800c0d8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c0a8:	4b31      	ldr	r3, [pc, #196]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c0aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0ac:	0a5b      	lsrs	r3, r3, #9
 800c0ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c0ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0be:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c0c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ce:	ee17 2a90 	vmov	r2, s15
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	e002      	b.n	800c0de <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c0de:	4b24      	ldr	r3, [pc, #144]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c0e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d017      	beq.n	800c11a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c0ea:	4b21      	ldr	r3, [pc, #132]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0ee:	0c1b      	lsrs	r3, r3, #16
 800c0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0f4:	ee07 3a90 	vmov	s15, r3
 800c0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c0fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c100:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c104:	edd7 6a07 	vldr	s13, [r7, #28]
 800c108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c110:	ee17 2a90 	vmov	r2, s15
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	605a      	str	r2, [r3, #4]
 800c118:	e002      	b.n	800c120 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c120:	4b13      	ldr	r3, [pc, #76]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d017      	beq.n	800c15c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c12c:	4b10      	ldr	r3, [pc, #64]	@ (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c130:	0e1b      	lsrs	r3, r3, #24
 800c132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c136:	ee07 3a90 	vmov	s15, r3
 800c13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800c13e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c142:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c146:	edd7 6a07 	vldr	s13, [r7, #28]
 800c14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c152:	ee17 2a90 	vmov	r2, s15
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c15a:	e002      	b.n	800c162 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	609a      	str	r2, [r3, #8]
}
 800c162:	bf00      	nop
 800c164:	3724      	adds	r7, #36	@ 0x24
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	46020c00 	.word	0x46020c00
 800c174:	4b742400 	.word	0x4b742400
 800c178:	46000000 	.word	0x46000000
 800c17c:	080115d8 	.word	0x080115d8

0800c180 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c180:	b480      	push	{r7}
 800c182:	b089      	sub	sp, #36	@ 0x24
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c188:	4ba6      	ldr	r3, [pc, #664]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c18a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c190:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c192:	4ba4      	ldr	r3, [pc, #656]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c19c:	4ba1      	ldr	r3, [pc, #644]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a0:	0a1b      	lsrs	r3, r3, #8
 800c1a2:	f003 030f 	and.w	r3, r3, #15
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c1aa:	4b9e      	ldr	r3, [pc, #632]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ae:	091b      	lsrs	r3, r3, #4
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c1b6:	4b9b      	ldr	r3, [pc, #620]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ba:	08db      	lsrs	r3, r3, #3
 800c1bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	fb02 f303 	mul.w	r3, r2, r3
 800c1c6:	ee07 3a90 	vmov	s15, r3
 800c1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d062      	beq.n	800c29e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	f200 8081 	bhi.w	800c2e2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d024      	beq.n	800c230 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d17a      	bne.n	800c2e2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fe:	4b89      	ldr	r3, [pc, #548]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c20e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c212:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c216:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c21e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c222:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c22e:	e08f      	b.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c230:	4b7c      	ldr	r3, [pc, #496]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d005      	beq.n	800c248 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c23c:	4b79      	ldr	r3, [pc, #484]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	0f1b      	lsrs	r3, r3, #28
 800c242:	f003 030f 	and.w	r3, r3, #15
 800c246:	e006      	b.n	800c256 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c248:	4b76      	ldr	r3, [pc, #472]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c24a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c24e:	041b      	lsls	r3, r3, #16
 800c250:	0f1b      	lsrs	r3, r3, #28
 800c252:	f003 030f 	and.w	r3, r3, #15
 800c256:	4a76      	ldr	r2, [pc, #472]	@ (800c430 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c25c:	ee07 3a90 	vmov	s15, r3
 800c260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	ee07 3a90 	vmov	s15, r3
 800c278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c27c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c280:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c28c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c290:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c294:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c298:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c29c:	e058      	b.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	ee07 3a90 	vmov	s15, r3
 800c2a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c2ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2b0:	4b5c      	ldr	r3, [pc, #368]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2b8:	ee07 3a90 	vmov	s15, r3
 800c2bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2c0:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2c4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c2c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c2cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c2d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2e0:	e036      	b.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c2e2:	4b50      	ldr	r3, [pc, #320]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d005      	beq.n	800c2fa <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c2ee:	4b4d      	ldr	r3, [pc, #308]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	0f1b      	lsrs	r3, r3, #28
 800c2f4:	f003 030f 	and.w	r3, r3, #15
 800c2f8:	e006      	b.n	800c308 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c2fa:	4b4a      	ldr	r3, [pc, #296]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c2fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c300:	041b      	lsls	r3, r3, #16
 800c302:	0f1b      	lsrs	r3, r3, #28
 800c304:	f003 030f 	and.w	r3, r3, #15
 800c308:	4a49      	ldr	r2, [pc, #292]	@ (800c430 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	ee07 3a90 	vmov	s15, r3
 800c31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c32e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c332:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c342:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c34e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c350:	4b34      	ldr	r3, [pc, #208]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d017      	beq.n	800c38c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c35c:	4b31      	ldr	r3, [pc, #196]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c35e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c360:	0a5b      	lsrs	r3, r3, #9
 800c362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c36e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c372:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c376:	edd7 6a07 	vldr	s13, [r7, #28]
 800c37a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c37e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c382:	ee17 2a90 	vmov	r2, s15
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	e002      	b.n	800c392 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c392:	4b24      	ldr	r3, [pc, #144]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d017      	beq.n	800c3ce <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c39e:	4b21      	ldr	r3, [pc, #132]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3a2:	0c1b      	lsrs	r3, r3, #16
 800c3a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3a8:	ee07 3a90 	vmov	s15, r3
 800c3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c3b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3b4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c3b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3c4:	ee17 2a90 	vmov	r2, s15
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	605a      	str	r2, [r3, #4]
 800c3cc:	e002      	b.n	800c3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c3d4:	4b13      	ldr	r3, [pc, #76]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d017      	beq.n	800c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c3e0:	4b10      	ldr	r3, [pc, #64]	@ (800c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e4:	0e1b      	lsrs	r3, r3, #24
 800c3e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3ea:	ee07 3a90 	vmov	s15, r3
 800c3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c3f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c3fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c406:	ee17 2a90 	vmov	r2, s15
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c40e:	e002      	b.n	800c416 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	609a      	str	r2, [r3, #8]
}
 800c416:	bf00      	nop
 800c418:	3724      	adds	r7, #36	@ 0x24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	46020c00 	.word	0x46020c00
 800c428:	4b742400 	.word	0x4b742400
 800c42c:	46000000 	.word	0x46000000
 800c430:	080115d8 	.word	0x080115d8

0800c434 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c434:	b480      	push	{r7}
 800c436:	b089      	sub	sp, #36	@ 0x24
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c43c:	4ba6      	ldr	r3, [pc, #664]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c43e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c444:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c446:	4ba4      	ldr	r3, [pc, #656]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c44a:	f003 0303 	and.w	r3, r3, #3
 800c44e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c450:	4ba1      	ldr	r3, [pc, #644]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c454:	0a1b      	lsrs	r3, r3, #8
 800c456:	f003 030f 	and.w	r3, r3, #15
 800c45a:	3301      	adds	r3, #1
 800c45c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c45e:	4b9e      	ldr	r3, [pc, #632]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c462:	091b      	lsrs	r3, r3, #4
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c46a:	4b9b      	ldr	r3, [pc, #620]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c46c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c46e:	08db      	lsrs	r3, r3, #3
 800c470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	fb02 f303 	mul.w	r3, r2, r3
 800c47a:	ee07 3a90 	vmov	s15, r3
 800c47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c482:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d062      	beq.n	800c552 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	2b03      	cmp	r3, #3
 800c490:	f200 8081 	bhi.w	800c596 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d024      	beq.n	800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d17a      	bne.n	800c596 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4aa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b2:	4b89      	ldr	r3, [pc, #548]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4c6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4de:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c4e2:	e08f      	b.n	800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c4e4:	4b7c      	ldr	r3, [pc, #496]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d005      	beq.n	800c4fc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c4f0:	4b79      	ldr	r3, [pc, #484]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	0f1b      	lsrs	r3, r3, #28
 800c4f6:	f003 030f 	and.w	r3, r3, #15
 800c4fa:	e006      	b.n	800c50a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c4fc:	4b76      	ldr	r3, [pc, #472]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c502:	041b      	lsls	r3, r3, #16
 800c504:	0f1b      	lsrs	r3, r3, #28
 800c506:	f003 030f 	and.w	r3, r3, #15
 800c50a:	4a76      	ldr	r2, [pc, #472]	@ (800c6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c510:	ee07 3a90 	vmov	s15, r3
 800c514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	ee07 3a90 	vmov	s15, r3
 800c51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	ee07 3a90 	vmov	s15, r3
 800c52c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c530:	ed97 6a02 	vldr	s12, [r7, #8]
 800c534:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c53c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c540:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c544:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c54c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c550:	e058      	b.n	800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	ee07 3a90 	vmov	s15, r3
 800c558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c564:	4b5c      	ldr	r3, [pc, #368]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c574:	ed97 6a02 	vldr	s12, [r7, #8]
 800c578:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c580:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c584:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c588:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c590:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c594:	e036      	b.n	800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c596:	4b50      	ldr	r3, [pc, #320]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d005      	beq.n	800c5ae <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c5a2:	4b4d      	ldr	r3, [pc, #308]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	0f1b      	lsrs	r3, r3, #28
 800c5a8:	f003 030f 	and.w	r3, r3, #15
 800c5ac:	e006      	b.n	800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c5ae:	4b4a      	ldr	r3, [pc, #296]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c5b4:	041b      	lsls	r3, r3, #16
 800c5b6:	0f1b      	lsrs	r3, r3, #28
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	4a49      	ldr	r2, [pc, #292]	@ (800c6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	ee07 3a90 	vmov	s15, r3
 800c5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5e6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c602:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c604:	4b34      	ldr	r3, [pc, #208]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d017      	beq.n	800c640 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c610:	4b31      	ldr	r3, [pc, #196]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c614:	0a5b      	lsrs	r3, r3, #9
 800c616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c61a:	ee07 3a90 	vmov	s15, r3
 800c61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c626:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c62a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c636:	ee17 2a90 	vmov	r2, s15
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	e002      	b.n	800c646 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c646:	4b24      	ldr	r3, [pc, #144]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c64a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d017      	beq.n	800c682 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c652:	4b21      	ldr	r3, [pc, #132]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c656:	0c1b      	lsrs	r3, r3, #16
 800c658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c65c:	ee07 3a90 	vmov	s15, r3
 800c660:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c668:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c66c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c678:	ee17 2a90 	vmov	r2, s15
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	605a      	str	r2, [r3, #4]
 800c680:	e002      	b.n	800c688 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c688:	4b13      	ldr	r3, [pc, #76]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c68a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c68c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d017      	beq.n	800c6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c694:	4b10      	ldr	r3, [pc, #64]	@ (800c6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c698:	0e1b      	lsrs	r3, r3, #24
 800c69a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c69e:	ee07 3a90 	vmov	s15, r3
 800c6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c6a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c6aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c6ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6ba:	ee17 2a90 	vmov	r2, s15
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c6c2:	e002      	b.n	800c6ca <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	609a      	str	r2, [r3, #8]
}
 800c6ca:	bf00      	nop
 800c6cc:	3724      	adds	r7, #36	@ 0x24
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	46020c00 	.word	0x46020c00
 800c6dc:	4b742400 	.word	0x4b742400
 800c6e0:	46000000 	.word	0x46000000
 800c6e4:	080115d8 	.word	0x080115d8

0800c6e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08e      	sub	sp, #56	@ 0x38
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c6fa:	430b      	orrs	r3, r1
 800c6fc:	d145      	bne.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c6fe:	4ba7      	ldr	r3, [pc, #668]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c708:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c70a:	4ba4      	ldr	r3, [pc, #656]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c70c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c710:	f003 0302 	and.w	r3, r3, #2
 800c714:	2b02      	cmp	r3, #2
 800c716:	d108      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c71e:	d104      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c724:	637b      	str	r3, [r7, #52]	@ 0x34
 800c726:	f001 bb5a 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c72a:	4b9c      	ldr	r3, [pc, #624]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c72c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c738:	d114      	bne.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c740:	d110      	bne.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c742:	4b96      	ldr	r3, [pc, #600]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c74c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c750:	d103      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c752:	23fa      	movs	r3, #250	@ 0xfa
 800c754:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c756:	f001 bb42 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c75a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c75e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c760:	f001 bb3d 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c764:	4b8d      	ldr	r3, [pc, #564]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c76c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c770:	d107      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c778:	d103      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c77a:	4b89      	ldr	r3, [pc, #548]	@ (800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c77c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c77e:	f001 bb2e 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c782:	2300      	movs	r3, #0
 800c784:	637b      	str	r3, [r7, #52]	@ 0x34
 800c786:	f001 bb2a 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c78a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c78e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c792:	430b      	orrs	r3, r1
 800c794:	d151      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c796:	4b81      	ldr	r3, [pc, #516]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c798:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c79c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c7a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a4:	2b80      	cmp	r3, #128	@ 0x80
 800c7a6:	d035      	beq.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7aa:	2b80      	cmp	r3, #128	@ 0x80
 800c7ac:	d841      	bhi.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b0:	2b60      	cmp	r3, #96	@ 0x60
 800c7b2:	d02a      	beq.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b6:	2b60      	cmp	r3, #96	@ 0x60
 800c7b8:	d83b      	bhi.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7bc:	2b40      	cmp	r3, #64	@ 0x40
 800c7be:	d009      	beq.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c2:	2b40      	cmp	r3, #64	@ 0x40
 800c7c4:	d835      	bhi.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00c      	beq.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	d012      	beq.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c7d2:	e02e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff fb77 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7e2:	f001 bafc 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7e6:	f107 0318 	add.w	r3, r7, #24
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff fcc8 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7f4:	f001 baf3 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7f8:	f107 030c 	add.w	r3, r7, #12
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7ff fe19 	bl	800c434 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c806:	f001 baea 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c80a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c80e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c810:	f001 bae5 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c814:	4b61      	ldr	r3, [pc, #388]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c81c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c820:	d103      	bne.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c822:	4b60      	ldr	r3, [pc, #384]	@ (800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c824:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c826:	f001 bada 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c82a:	2300      	movs	r3, #0
 800c82c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c82e:	f001 bad6 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c832:	2300      	movs	r3, #0
 800c834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c836:	f001 bad2 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c83a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c83e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c842:	430b      	orrs	r3, r1
 800c844:	d158      	bne.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c846:	4b55      	ldr	r3, [pc, #340]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c848:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c84c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c850:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c858:	d03b      	beq.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c860:	d846      	bhi.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c868:	d02e      	beq.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c86c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c870:	d83e      	bhi.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c878:	d00b      	beq.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c880:	d836      	bhi.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00d      	beq.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c88a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c88e:	d012      	beq.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c890:	e02e      	b.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c896:	4618      	mov	r0, r3
 800c898:	f7ff fb18 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8a0:	f001 ba9d 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8a4:	f107 0318 	add.w	r3, r7, #24
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7ff fc69 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8b2:	f001 ba94 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8b6:	f107 030c 	add.w	r3, r7, #12
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff fdba 	bl	800c434 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8c4:	f001 ba8b 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c8c8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c8cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8ce:	f001 ba86 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8d2:	4b32      	ldr	r3, [pc, #200]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8de:	d103      	bne.n	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c8e0:	4b30      	ldr	r3, [pc, #192]	@ (800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c8e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c8e4:	f001 ba7b 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8ec:	f001 ba77 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8f4:	f001 ba73 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8fc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c900:	430b      	orrs	r3, r1
 800c902:	d126      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c904:	4b25      	ldr	r3, [pc, #148]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c906:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c90a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c90e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c910:	4b22      	ldr	r3, [pc, #136]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c91c:	d106      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c920:	2b00      	cmp	r3, #0
 800c922:	d103      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c924:	4b1f      	ldr	r3, [pc, #124]	@ (800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c926:	637b      	str	r3, [r7, #52]	@ 0x34
 800c928:	f001 ba59 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c92c:	4b1b      	ldr	r3, [pc, #108]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c938:	d107      	bne.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c940:	d103      	bne.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c942:	4b19      	ldr	r3, [pc, #100]	@ (800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c944:	637b      	str	r3, [r7, #52]	@ 0x34
 800c946:	f001 ba4a 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c94a:	2300      	movs	r3, #0
 800c94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c94e:	f001 ba46 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c956:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c95a:	430b      	orrs	r3, r1
 800c95c:	d16e      	bne.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c95e:	4b0f      	ldr	r3, [pc, #60]	@ (800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c964:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c968:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c970:	d03d      	beq.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c974:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c978:	d85c      	bhi.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c980:	d014      	beq.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c988:	d854      	bhi.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d01f      	beq.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c996:	d012      	beq.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c998:	e04c      	b.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c99a:	bf00      	nop
 800c99c:	46020c00 	.word	0x46020c00
 800c9a0:	0007a120 	.word	0x0007a120
 800c9a4:	00f42400 	.word	0x00f42400
 800c9a8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7ff fa8b 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9ba:	f001 ba10 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9be:	f107 0318 	add.w	r3, r7, #24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7ff fbdc 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9cc:	f001 ba07 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c9d0:	4ba7      	ldr	r3, [pc, #668]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c9d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9dc:	d103      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c9de:	4ba5      	ldr	r3, [pc, #660]	@ (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c9e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c9e2:	f001 b9fc 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9ea:	f001 b9f8 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c9ee:	4ba0      	ldr	r3, [pc, #640]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 0320 	and.w	r3, r3, #32
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	d118      	bne.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c9fa:	4b9d      	ldr	r3, [pc, #628]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ca06:	4b9a      	ldr	r3, [pc, #616]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	0e1b      	lsrs	r3, r3, #24
 800ca0c:	f003 030f 	and.w	r3, r3, #15
 800ca10:	e006      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ca12:	4b97      	ldr	r3, [pc, #604]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca18:	041b      	lsls	r3, r3, #16
 800ca1a:	0e1b      	lsrs	r3, r3, #24
 800ca1c:	f003 030f 	and.w	r3, r3, #15
 800ca20:	4a95      	ldr	r2, [pc, #596]	@ (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ca22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ca28:	f001 b9d9 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca30:	f001 b9d5 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800ca34:	2300      	movs	r3, #0
 800ca36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca38:	f001 b9d1 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ca3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca40:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800ca44:	430b      	orrs	r3, r1
 800ca46:	d17f      	bne.n	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ca48:	4b89      	ldr	r3, [pc, #548]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ca4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca52:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d165      	bne.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ca5a:	4b85      	ldr	r3, [pc, #532]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca60:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ca64:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca68:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ca6c:	d034      	beq.n	800cad8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca70:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ca74:	d853      	bhi.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ca76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca7c:	d00b      	beq.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca84:	d84b      	bhi.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ca86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d016      	beq.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ca92:	d009      	beq.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ca94:	e043      	b.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7ff fa16 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800caa4:	f001 b99b 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa8:	f107 0318 	add.w	r3, r7, #24
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff fb67 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cab6:	f001 b992 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800caba:	4b6d      	ldr	r3, [pc, #436]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cac6:	d103      	bne.n	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800cac8:	4b6a      	ldr	r3, [pc, #424]	@ (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800caca:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800cacc:	f001 b987 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800cad0:	2300      	movs	r3, #0
 800cad2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cad4:	f001 b983 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cad8:	4b65      	ldr	r3, [pc, #404]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f003 0320 	and.w	r3, r3, #32
 800cae0:	2b20      	cmp	r3, #32
 800cae2:	d118      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cae4:	4b62      	ldr	r3, [pc, #392]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800caec:	2b00      	cmp	r3, #0
 800caee:	d005      	beq.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800caf0:	4b5f      	ldr	r3, [pc, #380]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	0e1b      	lsrs	r3, r3, #24
 800caf6:	f003 030f 	and.w	r3, r3, #15
 800cafa:	e006      	b.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800cafc:	4b5c      	ldr	r3, [pc, #368]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cafe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb02:	041b      	lsls	r3, r3, #16
 800cb04:	0e1b      	lsrs	r3, r3, #24
 800cb06:	f003 030f 	and.w	r3, r3, #15
 800cb0a:	4a5b      	ldr	r2, [pc, #364]	@ (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800cb0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb10:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800cb12:	f001 b964 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800cb16:	2300      	movs	r3, #0
 800cb18:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cb1a:	f001 b960 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cb22:	f001 b95c 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb2c:	d108      	bne.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff f9ca 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800cb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb3c:	f001 b94f 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800cb40:	2300      	movs	r3, #0
 800cb42:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb44:	f001 b94b 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800cb48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb4c:	1e51      	subs	r1, r2, #1
 800cb4e:	430b      	orrs	r3, r1
 800cb50:	d136      	bne.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800cb52:	4b47      	ldr	r3, [pc, #284]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb58:	f003 0303 	and.w	r3, r3, #3
 800cb5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d104      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800cb64:	f7fe f9cc 	bl	800af00 <HAL_RCC_GetPCLK2Freq>
 800cb68:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb6a:	f001 b938 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d104      	bne.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb74:	f7fe f894 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800cb78:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb7a:	f001 b930 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800cb7e:	4b3c      	ldr	r3, [pc, #240]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb8a:	d106      	bne.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d103      	bne.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800cb92:	4b3a      	ldr	r3, [pc, #232]	@ (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cb94:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb96:	f001 b922 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800cb9a:	4b35      	ldr	r3, [pc, #212]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cba0:	f003 0302 	and.w	r3, r3, #2
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d107      	bne.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800cba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	d104      	bne.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800cbae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbb4:	f001 b913 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbbc:	f001 b90f 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800cbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc4:	1e91      	subs	r1, r2, #2
 800cbc6:	430b      	orrs	r3, r1
 800cbc8:	d136      	bne.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800cbca:	4b29      	ldr	r3, [pc, #164]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cbd0:	f003 030c 	and.w	r3, r3, #12
 800cbd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d104      	bne.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbdc:	f7fe f97c 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800cbe0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbe2:	f001 b8fc 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	d104      	bne.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbec:	f7fe f858 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800cbf0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbf2:	f001 b8f4 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800cbf6:	4b1e      	ldr	r3, [pc, #120]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc02:	d106      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc06:	2b08      	cmp	r3, #8
 800cc08:	d103      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800cc0a:	4b1c      	ldr	r3, [pc, #112]	@ (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cc0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc0e:	f001 b8e6 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800cc12:	4b17      	ldr	r3, [pc, #92]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc18:	f003 0302 	and.w	r3, r3, #2
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d107      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800cc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc22:	2b0c      	cmp	r3, #12
 800cc24:	d104      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800cc26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc2c:	f001 b8d7 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc34:	f001 b8d3 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800cc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc3c:	1f11      	subs	r1, r2, #4
 800cc3e:	430b      	orrs	r3, r1
 800cc40:	d13f      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800cc42:	4b0b      	ldr	r3, [pc, #44]	@ (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cc4c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d104      	bne.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc54:	f7fe f940 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800cc58:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc5a:	f001 b8c0 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc60:	2b10      	cmp	r3, #16
 800cc62:	d10d      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc64:	f7fe f81c 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800cc68:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc6a:	f001 b8b8 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cc6e:	bf00      	nop
 800cc70:	46020c00 	.word	0x46020c00
 800cc74:	02dc6c00 	.word	0x02dc6c00
 800cc78:	080115d8 	.word	0x080115d8
 800cc7c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cc80:	4ba8      	ldr	r3, [pc, #672]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc8c:	d106      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	2b20      	cmp	r3, #32
 800cc92:	d103      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800cc94:	4ba4      	ldr	r3, [pc, #656]	@ (800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc98:	f001 b8a1 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800cc9c:	4ba1      	ldr	r3, [pc, #644]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cca2:	f003 0302 	and.w	r3, r3, #2
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d107      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	2b30      	cmp	r3, #48	@ 0x30
 800ccae:	d104      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ccb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccb6:	f001 b892 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccbe:	f001 b88e 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ccc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccc6:	f1a2 0108 	sub.w	r1, r2, #8
 800ccca:	430b      	orrs	r3, r1
 800cccc:	d136      	bne.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ccce:	4b95      	ldr	r3, [pc, #596]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccd4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ccd8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d104      	bne.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cce0:	f7fe f8fa 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800cce4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cce6:	f001 b87a 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ccea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccec:	2b40      	cmp	r3, #64	@ 0x40
 800ccee:	d104      	bne.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccf0:	f7fd ffd6 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800ccf4:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccf6:	f001 b872 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ccfa:	4b8a      	ldr	r3, [pc, #552]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd06:	d106      	bne.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0a:	2b80      	cmp	r3, #128	@ 0x80
 800cd0c:	d103      	bne.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cd0e:	4b86      	ldr	r3, [pc, #536]	@ (800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd10:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd12:	f001 b864 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cd16:	4b83      	ldr	r3, [pc, #524]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd1c:	f003 0302 	and.w	r3, r3, #2
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d107      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd26:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd28:	d104      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cd2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd30:	f001 b855 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cd34:	2300      	movs	r3, #0
 800cd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd38:	f001 b851 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cd3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd40:	f1a2 0110 	sub.w	r1, r2, #16
 800cd44:	430b      	orrs	r3, r1
 800cd46:	d139      	bne.n	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cd48:	4b76      	ldr	r3, [pc, #472]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd52:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d104      	bne.n	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd5a:	f7fe f8bd 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800cd5e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd60:	f001 b83d 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd6a:	d104      	bne.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd6c:	f7fd ff98 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800cd70:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd72:	f001 b834 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cd76:	4b6b      	ldr	r3, [pc, #428]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd82:	d107      	bne.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd8a:	d103      	bne.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cd8c:	4b66      	ldr	r3, [pc, #408]	@ (800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd90:	f001 b825 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cd94:	4b63      	ldr	r3, [pc, #396]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd9a:	f003 0302 	and.w	r3, r3, #2
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d108      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cda8:	d104      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cdaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdae:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdb0:	f001 b815 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdb8:	f001 b811 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cdbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdc0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cdc4:	430b      	orrs	r3, r1
 800cdc6:	d139      	bne.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cdc8:	4b56      	ldr	r3, [pc, #344]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cdce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cdd2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d104      	bne.n	800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cdda:	f7fe f87d 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800cdde:	6378      	str	r0, [r7, #52]	@ 0x34
 800cde0:	f000 bffd 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdea:	d104      	bne.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cdec:	f7fd ff58 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800cdf0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdf2:	f000 bff4 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cdf6:	4b4b      	ldr	r3, [pc, #300]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce02:	d107      	bne.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ce04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce0a:	d103      	bne.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ce0c:	4b46      	ldr	r3, [pc, #280]	@ (800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce10:	f000 bfe5 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ce14:	4b43      	ldr	r3, [pc, #268]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce1a:	f003 0302 	and.w	r3, r3, #2
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d108      	bne.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ce22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce28:	d104      	bne.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ce2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce30:	f000 bfd5 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce38:	f000 bfd1 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800ce3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce40:	f1a2 0120 	sub.w	r1, r2, #32
 800ce44:	430b      	orrs	r3, r1
 800ce46:	d158      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ce48:	4b36      	ldr	r3, [pc, #216]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce4e:	f003 0307 	and.w	r3, r3, #7
 800ce52:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ce54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d104      	bne.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800ce5a:	f7fe f865 	bl	800af28 <HAL_RCC_GetPCLK3Freq>
 800ce5e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce60:	f000 bfbd 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800ce64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d104      	bne.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ce6a:	f7fd ff19 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800ce6e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce70:	f000 bfb5 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ce74:	4b2b      	ldr	r3, [pc, #172]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce80:	d106      	bne.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d103      	bne.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800ce88:	4b27      	ldr	r3, [pc, #156]	@ (800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce8c:	f000 bfa7 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ce90:	4b24      	ldr	r3, [pc, #144]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce96:	f003 0302 	and.w	r3, r3, #2
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d107      	bne.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea0:	2b03      	cmp	r3, #3
 800cea2:	d104      	bne.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceaa:	f000 bf98 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ceae:	4b1d      	ldr	r3, [pc, #116]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0320 	and.w	r3, r3, #32
 800ceb6:	2b20      	cmp	r3, #32
 800ceb8:	d11b      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800ceba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cebc:	2b04      	cmp	r3, #4
 800cebe:	d118      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cec0:	4b18      	ldr	r3, [pc, #96]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d005      	beq.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800cecc:	4b15      	ldr	r3, [pc, #84]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	0e1b      	lsrs	r3, r3, #24
 800ced2:	f003 030f 	and.w	r3, r3, #15
 800ced6:	e006      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ced8:	4b12      	ldr	r3, [pc, #72]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ceda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cede:	041b      	lsls	r3, r3, #16
 800cee0:	0e1b      	lsrs	r3, r3, #24
 800cee2:	f003 030f 	and.w	r3, r3, #15
 800cee6:	4a11      	ldr	r2, [pc, #68]	@ (800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceec:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceee:	f000 bf76 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef6:	f000 bf72 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefe:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cf02:	430b      	orrs	r3, r1
 800cf04:	d172      	bne.n	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800cf06:	4b07      	ldr	r3, [pc, #28]	@ (800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cf10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf18:	d10a      	bne.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cf1a:	f7fd fec1 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800cf1e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf20:	f000 bf5d 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cf24:	46020c00 	.word	0x46020c00
 800cf28:	00f42400 	.word	0x00f42400
 800cf2c:	080115d8 	.word	0x080115d8
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf36:	d108      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf38:	f107 0318 	add.w	r3, r7, #24
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff f91f 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf46:	f000 bf4a 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d104      	bne.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cf50:	f7fd ffa8 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800cf54:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf56:	f000 bf42 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cf60:	d122      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf62:	4bb0      	ldr	r3, [pc, #704]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d118      	bne.n	800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf6e:	4bad      	ldr	r3, [pc, #692]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d005      	beq.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800cf7a:	4baa      	ldr	r3, [pc, #680]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	0e1b      	lsrs	r3, r3, #24
 800cf80:	f003 030f 	and.w	r3, r3, #15
 800cf84:	e006      	b.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cf86:	4ba7      	ldr	r3, [pc, #668]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf8c:	041b      	lsls	r3, r3, #16
 800cf8e:	0e1b      	lsrs	r3, r3, #24
 800cf90:	f003 030f 	and.w	r3, r3, #15
 800cf94:	4aa4      	ldr	r2, [pc, #656]	@ (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cf96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf9c:	f000 bf1f 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfa4:	f000 bf1b 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cfa8:	4b9e      	ldr	r3, [pc, #632]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfb4:	d107      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cfbc:	d103      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800cfbe:	4b9b      	ldr	r3, [pc, #620]	@ (800d22c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cfc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfc2:	f000 bf0c 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800cfc6:	4b97      	ldr	r3, [pc, #604]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfd2:	d107      	bne.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cfda:	d103      	bne.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800cfdc:	4b93      	ldr	r3, [pc, #588]	@ (800d22c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cfde:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfe0:	f000 befd 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfe8:	f000 bef9 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800cfec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cff0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cff4:	430b      	orrs	r3, r1
 800cff6:	d158      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cff8:	4b8a      	ldr	r3, [pc, #552]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cffa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cffe:	f003 0307 	and.w	r3, r3, #7
 800d002:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d006:	2b04      	cmp	r3, #4
 800d008:	d84b      	bhi.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800d00a:	a201      	add	r2, pc, #4	@ (adr r2, 800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d010:	0800d049 	.word	0x0800d049
 800d014:	0800d025 	.word	0x0800d025
 800d018:	0800d037 	.word	0x0800d037
 800d01c:	0800d053 	.word	0x0800d053
 800d020:	0800d05d 	.word	0x0800d05d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d028:	4618      	mov	r0, r3
 800d02a:	f7fe ff4f 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d032:	f000 bed4 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d036:	f107 030c 	add.w	r3, r7, #12
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff f9fa 	bl	800c434 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d044:	f000 becb 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d048:	f7fd ff2c 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800d04c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d04e:	f000 bec6 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d052:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d056:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d058:	f000 bec1 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d05c:	4b71      	ldr	r3, [pc, #452]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f003 0320 	and.w	r3, r3, #32
 800d064:	2b20      	cmp	r3, #32
 800d066:	d118      	bne.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d068:	4b6e      	ldr	r3, [pc, #440]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d005      	beq.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d074:	4b6b      	ldr	r3, [pc, #428]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	0e1b      	lsrs	r3, r3, #24
 800d07a:	f003 030f 	and.w	r3, r3, #15
 800d07e:	e006      	b.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d080:	4b68      	ldr	r3, [pc, #416]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d086:	041b      	lsls	r3, r3, #16
 800d088:	0e1b      	lsrs	r3, r3, #24
 800d08a:	f003 030f 	and.w	r3, r3, #15
 800d08e:	4a66      	ldr	r2, [pc, #408]	@ (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d094:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d096:	f000 bea2 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d09a:	2300      	movs	r3, #0
 800d09c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d09e:	f000 be9e 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0a6:	f000 be9a 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d0aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ae:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800d0b2:	430b      	orrs	r3, r1
 800d0b4:	d167      	bne.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d0b6:	4b5b      	ldr	r3, [pc, #364]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d0b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d0bc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d0c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d0c8:	d036      	beq.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d0d0:	d855      	bhi.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d0d8:	d029      	beq.n	800d12e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800d0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d0e0:	d84d      	bhi.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0e8:	d013      	beq.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0f0:	d845      	bhi.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d015      	beq.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0fe:	d13e      	bne.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fee1 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d10e:	f000 be66 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d112:	f107 030c 	add.w	r3, r7, #12
 800d116:	4618      	mov	r0, r3
 800d118:	f7ff f98c 	bl	800c434 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d120:	f000 be5d 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d124:	f7fd febe 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800d128:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d12a:	f000 be58 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d12e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d132:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d134:	f000 be53 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d138:	4b3a      	ldr	r3, [pc, #232]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 0320 	and.w	r3, r3, #32
 800d140:	2b20      	cmp	r3, #32
 800d142:	d118      	bne.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d144:	4b37      	ldr	r3, [pc, #220]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800d150:	4b34      	ldr	r3, [pc, #208]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	0e1b      	lsrs	r3, r3, #24
 800d156:	f003 030f 	and.w	r3, r3, #15
 800d15a:	e006      	b.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d15c:	4b31      	ldr	r3, [pc, #196]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d15e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d162:	041b      	lsls	r3, r3, #16
 800d164:	0e1b      	lsrs	r3, r3, #24
 800d166:	f003 030f 	and.w	r3, r3, #15
 800d16a:	4a2f      	ldr	r2, [pc, #188]	@ (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d172:	f000 be34 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d176:	2300      	movs	r3, #0
 800d178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d17a:	f000 be30 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d182:	f000 be2c 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d18a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d18e:	430b      	orrs	r3, r1
 800d190:	d152      	bne.n	800d238 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d192:	4b24      	ldr	r3, [pc, #144]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d198:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d19c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d104      	bne.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d1a4:	f7fd fe98 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800d1a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1aa:	f000 be18 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1b4:	d104      	bne.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d1b6:	f7fd fd73 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d1ba:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1bc:	f000 be0f 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d1c0:	4b18      	ldr	r3, [pc, #96]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1cc:	d107      	bne.n	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1d4:	d103      	bne.n	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d1d6:	4b15      	ldr	r3, [pc, #84]	@ (800d22c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1da:	f000 be00 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d1de:	4b11      	ldr	r3, [pc, #68]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f003 0320 	and.w	r3, r3, #32
 800d1e6:	2b20      	cmp	r3, #32
 800d1e8:	d122      	bne.n	800d230 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1f0:	d11e      	bne.n	800d230 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d005      	beq.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d1fe:	4b09      	ldr	r3, [pc, #36]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	0e1b      	lsrs	r3, r3, #24
 800d204:	f003 030f 	and.w	r3, r3, #15
 800d208:	e006      	b.n	800d218 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d20a:	4b06      	ldr	r3, [pc, #24]	@ (800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d20c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d210:	041b      	lsls	r3, r3, #16
 800d212:	0e1b      	lsrs	r3, r3, #24
 800d214:	f003 030f 	and.w	r3, r3, #15
 800d218:	4a03      	ldr	r2, [pc, #12]	@ (800d228 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d21e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d220:	f000 bddd 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d224:	46020c00 	.word	0x46020c00
 800d228:	080115d8 	.word	0x080115d8
 800d22c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d230:	2300      	movs	r3, #0
 800d232:	637b      	str	r3, [r7, #52]	@ 0x34
 800d234:	f000 bdd3 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d23c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d240:	430b      	orrs	r3, r1
 800d242:	d14c      	bne.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d244:	4ba8      	ldr	r3, [pc, #672]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d24a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d24e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d252:	2b00      	cmp	r3, #0
 800d254:	d104      	bne.n	800d260 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d256:	f7fd fe3f 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800d25a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d25c:	f000 bdbf 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d266:	d104      	bne.n	800d272 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d268:	f7fd fd1a 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d26c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d26e:	f000 bdb6 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d272:	4b9d      	ldr	r3, [pc, #628]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d27a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d27e:	d107      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d286:	d103      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d288:	4b98      	ldr	r3, [pc, #608]	@ (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d28c:	f000 bda7 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d290:	4b95      	ldr	r3, [pc, #596]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f003 0320 	and.w	r3, r3, #32
 800d298:	2b20      	cmp	r3, #32
 800d29a:	d11c      	bne.n	800d2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d2a2:	d118      	bne.n	800d2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2a4:	4b90      	ldr	r3, [pc, #576]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d005      	beq.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d2b0:	4b8d      	ldr	r3, [pc, #564]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	0e1b      	lsrs	r3, r3, #24
 800d2b6:	f003 030f 	and.w	r3, r3, #15
 800d2ba:	e006      	b.n	800d2ca <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d2bc:	4b8a      	ldr	r3, [pc, #552]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2c2:	041b      	lsls	r3, r3, #16
 800d2c4:	0e1b      	lsrs	r3, r3, #24
 800d2c6:	f003 030f 	and.w	r3, r3, #15
 800d2ca:	4a89      	ldr	r2, [pc, #548]	@ (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d2:	f000 bd84 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2da:	f000 bd80 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d2de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2e2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d2e6:	430b      	orrs	r3, r1
 800d2e8:	d158      	bne.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d2ea:	4b7f      	ldr	r3, [pc, #508]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d2f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d2f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f8:	2bc0      	cmp	r3, #192	@ 0xc0
 800d2fa:	d028      	beq.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800d300:	d848      	bhi.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d304:	2b80      	cmp	r3, #128	@ 0x80
 800d306:	d00e      	beq.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30a:	2b80      	cmp	r3, #128	@ 0x80
 800d30c:	d842      	bhi.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d316:	2b40      	cmp	r3, #64	@ 0x40
 800d318:	d014      	beq.n	800d344 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d31a:	e03b      	b.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d31c:	f7fd fe04 	bl	800af28 <HAL_RCC_GetPCLK3Freq>
 800d320:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d322:	f000 bd5c 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d326:	4b70      	ldr	r3, [pc, #448]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d32e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d332:	d103      	bne.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d334:	4b6d      	ldr	r3, [pc, #436]	@ (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d336:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d338:	f000 bd51 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d33c:	2300      	movs	r3, #0
 800d33e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d340:	f000 bd4d 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d344:	f7fd fcac 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d348:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d34a:	f000 bd48 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d34e:	4b66      	ldr	r3, [pc, #408]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b20      	cmp	r3, #32
 800d358:	d118      	bne.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d35a:	4b63      	ldr	r3, [pc, #396]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d362:	2b00      	cmp	r3, #0
 800d364:	d005      	beq.n	800d372 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d366:	4b60      	ldr	r3, [pc, #384]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d368:	689b      	ldr	r3, [r3, #8]
 800d36a:	0e1b      	lsrs	r3, r3, #24
 800d36c:	f003 030f 	and.w	r3, r3, #15
 800d370:	e006      	b.n	800d380 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d372:	4b5d      	ldr	r3, [pc, #372]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d378:	041b      	lsls	r3, r3, #16
 800d37a:	0e1b      	lsrs	r3, r3, #24
 800d37c:	f003 030f 	and.w	r3, r3, #15
 800d380:	4a5b      	ldr	r2, [pc, #364]	@ (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d386:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d388:	f000 bd29 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d38c:	2300      	movs	r3, #0
 800d38e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d390:	f000 bd25 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d394:	2300      	movs	r3, #0
 800d396:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d398:	f000 bd21 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3a0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d3a4:	430b      	orrs	r3, r1
 800d3a6:	d14c      	bne.n	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d3a8:	4b4f      	ldr	r3, [pc, #316]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d3b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d104      	bne.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d3ba:	f7fd fd8d 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800d3be:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3c0:	f000 bd0d 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d3ca:	d104      	bne.n	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d3cc:	f7fd fc68 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d3d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3d2:	f000 bd04 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d3d6:	4b44      	ldr	r3, [pc, #272]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3e2:	d107      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3ea:	d103      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d3ec:	4b3f      	ldr	r3, [pc, #252]	@ (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d3ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3f0:	f000 bcf5 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d3f4:	4b3c      	ldr	r3, [pc, #240]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 0320 	and.w	r3, r3, #32
 800d3fc:	2b20      	cmp	r3, #32
 800d3fe:	d11c      	bne.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d402:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d406:	d118      	bne.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d408:	4b37      	ldr	r3, [pc, #220]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d410:	2b00      	cmp	r3, #0
 800d412:	d005      	beq.n	800d420 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d414:	4b34      	ldr	r3, [pc, #208]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	0e1b      	lsrs	r3, r3, #24
 800d41a:	f003 030f 	and.w	r3, r3, #15
 800d41e:	e006      	b.n	800d42e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d420:	4b31      	ldr	r3, [pc, #196]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d426:	041b      	lsls	r3, r3, #16
 800d428:	0e1b      	lsrs	r3, r3, #24
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	4a30      	ldr	r2, [pc, #192]	@ (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d434:	637b      	str	r3, [r7, #52]	@ 0x34
 800d436:	f000 bcd2 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d43a:	2300      	movs	r3, #0
 800d43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d43e:	f000 bcce 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d442:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d446:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d44a:	430b      	orrs	r3, r1
 800d44c:	d152      	bne.n	800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d44e:	4b26      	ldr	r3, [pc, #152]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d454:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d458:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d104      	bne.n	800d46a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d460:	f7fd fd3a 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800d464:	6378      	str	r0, [r7, #52]	@ 0x34
 800d466:	f000 bcba 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d46c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d470:	d104      	bne.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d472:	f7fd fc15 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d476:	6378      	str	r0, [r7, #52]	@ 0x34
 800d478:	f000 bcb1 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d47c:	4b1a      	ldr	r3, [pc, #104]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d488:	d107      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d490:	d103      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d492:	4b16      	ldr	r3, [pc, #88]	@ (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d494:	637b      	str	r3, [r7, #52]	@ 0x34
 800d496:	f000 bca2 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d49a:	4b13      	ldr	r3, [pc, #76]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b20      	cmp	r3, #32
 800d4a4:	d11c      	bne.n	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d4ac:	d118      	bne.n	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d005      	beq.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	0e1b      	lsrs	r3, r3, #24
 800d4c0:	f003 030f 	and.w	r3, r3, #15
 800d4c4:	e006      	b.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d4c6:	4b08      	ldr	r3, [pc, #32]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4cc:	041b      	lsls	r3, r3, #16
 800d4ce:	0e1b      	lsrs	r3, r3, #24
 800d4d0:	f003 030f 	and.w	r3, r3, #15
 800d4d4:	4a06      	ldr	r2, [pc, #24]	@ (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4dc:	f000 bc7f 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e4:	f000 bc7b 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d4e8:	46020c00 	.word	0x46020c00
 800d4ec:	00f42400 	.word	0x00f42400
 800d4f0:	080115d8 	.word	0x080115d8
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	d14c      	bne.n	800d59a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d500:	4ba6      	ldr	r3, [pc, #664]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d502:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d506:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d50a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d104      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d512:	f7fd fce1 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800d516:	6378      	str	r0, [r7, #52]	@ 0x34
 800d518:	f000 bc61 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d522:	d104      	bne.n	800d52e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d524:	f7fd fbbc 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d528:	6378      	str	r0, [r7, #52]	@ 0x34
 800d52a:	f000 bc58 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d52e:	4b9b      	ldr	r3, [pc, #620]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d53a:	d107      	bne.n	800d54c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d53e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d542:	d103      	bne.n	800d54c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d544:	4b96      	ldr	r3, [pc, #600]	@ (800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d546:	637b      	str	r3, [r7, #52]	@ 0x34
 800d548:	f000 bc49 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d54c:	4b93      	ldr	r3, [pc, #588]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f003 0320 	and.w	r3, r3, #32
 800d554:	2b20      	cmp	r3, #32
 800d556:	d11c      	bne.n	800d592 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d55a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d55e:	d118      	bne.n	800d592 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d560:	4b8e      	ldr	r3, [pc, #568]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d56c:	4b8b      	ldr	r3, [pc, #556]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	0e1b      	lsrs	r3, r3, #24
 800d572:	f003 030f 	and.w	r3, r3, #15
 800d576:	e006      	b.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d578:	4b88      	ldr	r3, [pc, #544]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d57a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d57e:	041b      	lsls	r3, r3, #16
 800d580:	0e1b      	lsrs	r3, r3, #24
 800d582:	f003 030f 	and.w	r3, r3, #15
 800d586:	4a87      	ldr	r2, [pc, #540]	@ (800d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d58c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d58e:	f000 bc26 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d592:	2300      	movs	r3, #0
 800d594:	637b      	str	r3, [r7, #52]	@ 0x34
 800d596:	f000 bc22 	b.w	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d59a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d59e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d5a2:	430b      	orrs	r3, r1
 800d5a4:	d164      	bne.n	800d670 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d5a6:	4b7d      	ldr	r3, [pc, #500]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d5ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d5b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d120      	bne.n	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d5b8:	4b78      	ldr	r3, [pc, #480]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 0320 	and.w	r3, r3, #32
 800d5c0:	2b20      	cmp	r3, #32
 800d5c2:	d117      	bne.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d5c4:	4b75      	ldr	r3, [pc, #468]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d005      	beq.n	800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d5d0:	4b72      	ldr	r3, [pc, #456]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	0e1b      	lsrs	r3, r3, #24
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	e006      	b.n	800d5ea <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d5dc:	4b6f      	ldr	r3, [pc, #444]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d5e2:	041b      	lsls	r3, r3, #16
 800d5e4:	0e1b      	lsrs	r3, r3, #24
 800d5e6:	f003 030f 	and.w	r3, r3, #15
 800d5ea:	4a6e      	ldr	r2, [pc, #440]	@ (800d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f2:	e3f4      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f8:	e3f1      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d5fa:	4b68      	ldr	r3, [pc, #416]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d608:	d112      	bne.n	800d630 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d610:	d10e      	bne.n	800d630 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d612:	4b62      	ldr	r3, [pc, #392]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d61c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d620:	d102      	bne.n	800d628 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d622:	23fa      	movs	r3, #250	@ 0xfa
 800d624:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d626:	e3da      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d628:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d62c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d62e:	e3d6      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d630:	4b5a      	ldr	r3, [pc, #360]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d63c:	d106      	bne.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d644:	d102      	bne.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d646:	4b56      	ldr	r3, [pc, #344]	@ (800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d648:	637b      	str	r3, [r7, #52]	@ 0x34
 800d64a:	e3c8      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d64c:	4b53      	ldr	r3, [pc, #332]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d64e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d652:	f003 0302 	and.w	r3, r3, #2
 800d656:	2b02      	cmp	r3, #2
 800d658:	d107      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d660:	d103      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d666:	637b      	str	r3, [r7, #52]	@ 0x34
 800d668:	e3b9      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d66a:	2300      	movs	r3, #0
 800d66c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d66e:	e3b6      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d674:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d678:	430b      	orrs	r3, r1
 800d67a:	d164      	bne.n	800d746 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d67c:	4b47      	ldr	r3, [pc, #284]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d67e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d682:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d686:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d120      	bne.n	800d6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d68e:	4b43      	ldr	r3, [pc, #268]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 0320 	and.w	r3, r3, #32
 800d696:	2b20      	cmp	r3, #32
 800d698:	d117      	bne.n	800d6ca <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d69a:	4b40      	ldr	r3, [pc, #256]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d6a6:	4b3d      	ldr	r3, [pc, #244]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	0e1b      	lsrs	r3, r3, #24
 800d6ac:	f003 030f 	and.w	r3, r3, #15
 800d6b0:	e006      	b.n	800d6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d6b2:	4b3a      	ldr	r3, [pc, #232]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d6b8:	041b      	lsls	r3, r3, #16
 800d6ba:	0e1b      	lsrs	r3, r3, #24
 800d6bc:	f003 030f 	and.w	r3, r3, #15
 800d6c0:	4a38      	ldr	r2, [pc, #224]	@ (800d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6c8:	e389      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ce:	e386      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d6d0:	4b32      	ldr	r3, [pc, #200]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6de:	d112      	bne.n	800d706 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6e6:	d10e      	bne.n	800d706 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d6e8:	4b2c      	ldr	r3, [pc, #176]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d6f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6f6:	d102      	bne.n	800d6fe <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d6f8:	23fa      	movs	r3, #250	@ 0xfa
 800d6fa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d6fc:	e36f      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d6fe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d702:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d704:	e36b      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d706:	4b25      	ldr	r3, [pc, #148]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d70e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d712:	d106      	bne.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d716:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d71a:	d102      	bne.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d71c:	4b20      	ldr	r3, [pc, #128]	@ (800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d720:	e35d      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d722:	4b1e      	ldr	r3, [pc, #120]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d728:	f003 0302 	and.w	r3, r3, #2
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d107      	bne.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d732:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d736:	d103      	bne.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d73e:	e34e      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d740:	2300      	movs	r3, #0
 800d742:	637b      	str	r3, [r7, #52]	@ 0x34
 800d744:	e34b      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d74a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d74e:	430b      	orrs	r3, r1
 800d750:	d14e      	bne.n	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d752:	4b12      	ldr	r3, [pc, #72]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d758:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d75c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d760:	2b00      	cmp	r3, #0
 800d762:	d103      	bne.n	800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d764:	f7fd fbb8 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800d768:	6378      	str	r0, [r7, #52]	@ 0x34
 800d76a:	e338      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d76c:	4b0b      	ldr	r3, [pc, #44]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d76e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d77a:	d119      	bne.n	800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d782:	d115      	bne.n	800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d784:	4b05      	ldr	r3, [pc, #20]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d78a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d78e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d792:	d109      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d794:	23fa      	movs	r3, #250	@ 0xfa
 800d796:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d798:	e321      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d79a:	bf00      	nop
 800d79c:	46020c00 	.word	0x46020c00
 800d7a0:	00f42400 	.word	0x00f42400
 800d7a4:	080115d8 	.word	0x080115d8
      }
      else
      {
        frequency = LSI_VALUE;
 800d7a8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d7ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d7ae:	e316      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d7b0:	4ba8      	ldr	r3, [pc, #672]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7bc:	d106      	bne.n	800d7cc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d7c4:	d102      	bne.n	800d7cc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d7c6:	4ba4      	ldr	r3, [pc, #656]	@ (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d7c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ca:	e308      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d7cc:	4ba1      	ldr	r3, [pc, #644]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7d2:	f003 0302 	and.w	r3, r3, #2
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	d107      	bne.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d7e0:	d103      	bne.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d7e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7e8:	e2f9      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ee:	e2f6      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d7f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7f4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d7f8:	430b      	orrs	r3, r1
 800d7fa:	d12d      	bne.n	800d858 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d7fc:	4b95      	ldr	r3, [pc, #596]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d802:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d806:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d808:	4b92      	ldr	r3, [pc, #584]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d814:	d105      	bne.n	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d102      	bne.n	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d81c:	4b8e      	ldr	r3, [pc, #568]	@ (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d81e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d820:	e2dd      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d828:	d107      	bne.n	800d83a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d82a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fb4c 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d836:	637b      	str	r3, [r7, #52]	@ 0x34
 800d838:	e2d1      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d840:	d107      	bne.n	800d852 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d842:	f107 0318 	add.w	r3, r7, #24
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe fc9a 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d850:	e2c5      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d852:	2300      	movs	r3, #0
 800d854:	637b      	str	r3, [r7, #52]	@ 0x34
 800d856:	e2c2      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d85c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d860:	430b      	orrs	r3, r1
 800d862:	d156      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d864:	4b7b      	ldr	r3, [pc, #492]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d86a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d86e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d876:	d028      	beq.n	800d8ca <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d87e:	d845      	bhi.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d886:	d013      	beq.n	800d8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d88e:	d83d      	bhi.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	2b00      	cmp	r3, #0
 800d894:	d004      	beq.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d89c:	d004      	beq.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d89e:	e035      	b.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d8a0:	f7fd fb2e 	bl	800af00 <HAL_RCC_GetPCLK2Freq>
 800d8a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8a6:	e29a      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d8a8:	f7fd f9fa 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d8ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8ae:	e296      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8b0:	4b68      	ldr	r3, [pc, #416]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8bc:	d102      	bne.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d8be:	4b66      	ldr	r3, [pc, #408]	@ (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d8c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8c2:	e28c      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8c8:	e289      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d8ca:	4b62      	ldr	r3, [pc, #392]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f003 0320 	and.w	r3, r3, #32
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d117      	bne.n	800d906 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8d6:	4b5f      	ldr	r3, [pc, #380]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d8e2:	4b5c      	ldr	r3, [pc, #368]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	0e1b      	lsrs	r3, r3, #24
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	e006      	b.n	800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d8ee:	4b59      	ldr	r3, [pc, #356]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d8f4:	041b      	lsls	r3, r3, #16
 800d8f6:	0e1b      	lsrs	r3, r3, #24
 800d8f8:	f003 030f 	and.w	r3, r3, #15
 800d8fc:	4a57      	ldr	r2, [pc, #348]	@ (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d902:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d904:	e26b      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d906:	2300      	movs	r3, #0
 800d908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d90a:	e268      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d90c:	2300      	movs	r3, #0
 800d90e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d910:	e265      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d916:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d91a:	430b      	orrs	r3, r1
 800d91c:	d156      	bne.n	800d9cc <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d91e:	4b4d      	ldr	r3, [pc, #308]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d928:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d930:	d028      	beq.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d934:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d938:	d845      	bhi.n	800d9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d940:	d013      	beq.n	800d96a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d948:	d83d      	bhi.n	800d9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d956:	d004      	beq.n	800d962 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d958:	e035      	b.n	800d9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d95a:	f7fd fabd 	bl	800aed8 <HAL_RCC_GetPCLK1Freq>
 800d95e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d960:	e23d      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d962:	f7fd f99d 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800d966:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d968:	e239      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d96a:	4b3a      	ldr	r3, [pc, #232]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d976:	d102      	bne.n	800d97e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d978:	4b37      	ldr	r3, [pc, #220]	@ (800da58 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d97a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d97c:	e22f      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d97e:	2300      	movs	r3, #0
 800d980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d982:	e22c      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d984:	4b33      	ldr	r3, [pc, #204]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0320 	and.w	r3, r3, #32
 800d98c:	2b20      	cmp	r3, #32
 800d98e:	d117      	bne.n	800d9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d990:	4b30      	ldr	r3, [pc, #192]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d005      	beq.n	800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d99c:	4b2d      	ldr	r3, [pc, #180]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	0e1b      	lsrs	r3, r3, #24
 800d9a2:	f003 030f 	and.w	r3, r3, #15
 800d9a6:	e006      	b.n	800d9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d9a8:	4b2a      	ldr	r3, [pc, #168]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9ae:	041b      	lsls	r3, r3, #16
 800d9b0:	0e1b      	lsrs	r3, r3, #24
 800d9b2:	f003 030f 	and.w	r3, r3, #15
 800d9b6:	4a29      	ldr	r2, [pc, #164]	@ (800da5c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9be:	e20e      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9c4:	e20b      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9ca:	e208      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d9cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9d0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d9d4:	430b      	orrs	r3, r1
 800d9d6:	d17c      	bne.n	800dad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d9d8:	4b1e      	ldr	r3, [pc, #120]	@ (800da54 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9de:	f003 0318 	and.w	r3, r3, #24
 800d9e2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e6:	2b18      	cmp	r3, #24
 800d9e8:	d870      	bhi.n	800dacc <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d9ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f0:	0800da61 	.word	0x0800da61
 800d9f4:	0800dacd 	.word	0x0800dacd
 800d9f8:	0800dacd 	.word	0x0800dacd
 800d9fc:	0800dacd 	.word	0x0800dacd
 800da00:	0800dacd 	.word	0x0800dacd
 800da04:	0800dacd 	.word	0x0800dacd
 800da08:	0800dacd 	.word	0x0800dacd
 800da0c:	0800dacd 	.word	0x0800dacd
 800da10:	0800da69 	.word	0x0800da69
 800da14:	0800dacd 	.word	0x0800dacd
 800da18:	0800dacd 	.word	0x0800dacd
 800da1c:	0800dacd 	.word	0x0800dacd
 800da20:	0800dacd 	.word	0x0800dacd
 800da24:	0800dacd 	.word	0x0800dacd
 800da28:	0800dacd 	.word	0x0800dacd
 800da2c:	0800dacd 	.word	0x0800dacd
 800da30:	0800da71 	.word	0x0800da71
 800da34:	0800dacd 	.word	0x0800dacd
 800da38:	0800dacd 	.word	0x0800dacd
 800da3c:	0800dacd 	.word	0x0800dacd
 800da40:	0800dacd 	.word	0x0800dacd
 800da44:	0800dacd 	.word	0x0800dacd
 800da48:	0800dacd 	.word	0x0800dacd
 800da4c:	0800dacd 	.word	0x0800dacd
 800da50:	0800da8b 	.word	0x0800da8b
 800da54:	46020c00 	.word	0x46020c00
 800da58:	00f42400 	.word	0x00f42400
 800da5c:	080115d8 	.word	0x080115d8
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800da60:	f7fd fa62 	bl	800af28 <HAL_RCC_GetPCLK3Freq>
 800da64:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da66:	e1ba      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da68:	f7fd f91a 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800da6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da6e:	e1b6      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da70:	4b9f      	ldr	r3, [pc, #636]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da7c:	d102      	bne.n	800da84 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800da7e:	4b9d      	ldr	r3, [pc, #628]	@ (800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800da80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800da82:	e1ac      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800da84:	2300      	movs	r3, #0
 800da86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da88:	e1a9      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da8a:	4b99      	ldr	r3, [pc, #612]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 0320 	and.w	r3, r3, #32
 800da92:	2b20      	cmp	r3, #32
 800da94:	d117      	bne.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da96:	4b96      	ldr	r3, [pc, #600]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d005      	beq.n	800daae <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800daa2:	4b93      	ldr	r3, [pc, #588]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	0e1b      	lsrs	r3, r3, #24
 800daa8:	f003 030f 	and.w	r3, r3, #15
 800daac:	e006      	b.n	800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800daae:	4b90      	ldr	r3, [pc, #576]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dab4:	041b      	lsls	r3, r3, #16
 800dab6:	0e1b      	lsrs	r3, r3, #24
 800dab8:	f003 030f 	and.w	r3, r3, #15
 800dabc:	4a8e      	ldr	r2, [pc, #568]	@ (800dcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800dabe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dac2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dac4:	e18b      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dac6:	2300      	movs	r3, #0
 800dac8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daca:	e188      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dacc:	2300      	movs	r3, #0
 800dace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dad0:	e185      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800dad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800dada:	430b      	orrs	r3, r1
 800dadc:	d155      	bne.n	800db8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800dade:	4b84      	ldr	r3, [pc, #528]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dae4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800dae8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800daea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800daf0:	d013      	beq.n	800db1a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800daf8:	d844      	bhi.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db00:	d013      	beq.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db08:	d83c      	bhi.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800db0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d014      	beq.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800db10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db16:	d014      	beq.n	800db42 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800db18:	e034      	b.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db1a:	f107 0318 	add.w	r3, r7, #24
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe fb2e 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db28:	e159      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe f9cc 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800db34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db38:	e151      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800db3a:	f7fd f8b1 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800db3e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db40:	e14d      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800db42:	4b6b      	ldr	r3, [pc, #428]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 0320 	and.w	r3, r3, #32
 800db4a:	2b20      	cmp	r3, #32
 800db4c:	d117      	bne.n	800db7e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db4e:	4b68      	ldr	r3, [pc, #416]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db56:	2b00      	cmp	r3, #0
 800db58:	d005      	beq.n	800db66 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800db5a:	4b65      	ldr	r3, [pc, #404]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	0e1b      	lsrs	r3, r3, #24
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	e006      	b.n	800db74 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800db66:	4b62      	ldr	r3, [pc, #392]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db6c:	041b      	lsls	r3, r3, #16
 800db6e:	0e1b      	lsrs	r3, r3, #24
 800db70:	f003 030f 	and.w	r3, r3, #15
 800db74:	4a60      	ldr	r2, [pc, #384]	@ (800dcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800db76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db7a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800db7c:	e12f      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db82:	e12c      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db84:	2300      	movs	r3, #0
 800db86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db88:	e129      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800db8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db8e:	1e59      	subs	r1, r3, #1
 800db90:	ea52 0301 	orrs.w	r3, r2, r1
 800db94:	d13c      	bne.n	800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800db96:	4b56      	ldr	r3, [pc, #344]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db9c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800dba0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dba8:	d027      	beq.n	800dbfa <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dbb0:	d82b      	bhi.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dbb8:	d017      	beq.n	800dbea <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dbc0:	d823      	bhi.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dbce:	d004      	beq.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800dbd0:	e01b      	b.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800dbd2:	f7fd f865 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800dbd6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dbd8:	e101      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fe f974 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbe8:	e0f9      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbea:	f107 0318 	add.w	r3, r7, #24
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fac6 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbf8:	e0f1      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbfa:	f107 030c 	add.w	r3, r7, #12
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe fc18 	bl	800c434 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc08:	e0e9      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc0e:	e0e6      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800dc10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc14:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800dc18:	430b      	orrs	r3, r1
 800dc1a:	d131      	bne.n	800dc80 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800dc1c:	4b34      	ldr	r3, [pc, #208]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc26:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800dc28:	4b31      	ldr	r3, [pc, #196]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d106      	bne.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800dc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d103      	bne.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800dc3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc40:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc42:	e0cc      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800dc44:	4b2a      	ldr	r3, [pc, #168]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dc4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc52:	d112      	bne.n	800dc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800dc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc5a:	d10e      	bne.n	800dc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dc5c:	4b24      	ldr	r3, [pc, #144]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dc62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dc66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc6a:	d102      	bne.n	800dc72 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800dc6c:	23fa      	movs	r3, #250	@ 0xfa
 800dc6e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dc70:	e0b5      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dc72:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dc76:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dc78:	e0b1      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc7e:	e0ae      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800dc80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc84:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dc88:	430b      	orrs	r3, r1
 800dc8a:	d13b      	bne.n	800dd04 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800dc8c:	4b18      	ldr	r3, [pc, #96]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dc92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dc96:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800dc98:	4b15      	ldr	r3, [pc, #84]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dca4:	d105      	bne.n	800dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800dca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d102      	bne.n	800dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800dcac:	4b13      	ldr	r3, [pc, #76]	@ (800dcfc <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800dcae:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcb0:	e095      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800dcb2:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dcba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcbe:	d106      	bne.n	800dcce <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcc6:	d102      	bne.n	800dcce <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800dcc8:	4b0d      	ldr	r3, [pc, #52]	@ (800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800dcca:	637b      	str	r3, [r7, #52]	@ 0x34
 800dccc:	e087      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800dcce:	4b08      	ldr	r3, [pc, #32]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dcd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcda:	d106      	bne.n	800dcea <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dce2:	d102      	bne.n	800dcea <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800dce4:	4b03      	ldr	r3, [pc, #12]	@ (800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800dce6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dce8:	e079      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800dcea:	2300      	movs	r3, #0
 800dcec:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcee:	e076      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dcf0:	46020c00 	.word	0x46020c00
 800dcf4:	00f42400 	.word	0x00f42400
 800dcf8:	080115d8 	.word	0x080115d8
 800dcfc:	02dc6c00 	.word	0x02dc6c00
 800dd00:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800dd04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd08:	1e99      	subs	r1, r3, #2
 800dd0a:	ea52 0301 	orrs.w	r3, r2, r1
 800dd0e:	d120      	bne.n	800dd52 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800dd10:	4b35      	ldr	r3, [pc, #212]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dd12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dd1a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d004      	beq.n	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800dd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dd28:	d008      	beq.n	800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800dd2a:	e00f      	b.n	800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd2c:	f107 030c 	add.w	r3, r7, #12
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe fb7f 	bl	800c434 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dd3a:	e050      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd3c:	f107 0318 	add.w	r3, r7, #24
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fe fa1d 	bl	800c180 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dd4a:	e048      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dd50:	e045      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800dd52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd56:	f1a3 0108 	sub.w	r1, r3, #8
 800dd5a:	ea52 0301 	orrs.w	r3, r2, r1
 800dd5e:	d13c      	bne.n	800ddda <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800dd60:	4b21      	ldr	r3, [pc, #132]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dd62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dd6a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800dd6c:	4b1e      	ldr	r3, [pc, #120]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd78:	d105      	bne.n	800dd86 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d102      	bne.n	800dd86 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800dd80:	4b1a      	ldr	r3, [pc, #104]	@ (800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800dd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd84:	e02b      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800dd86:	4b18      	ldr	r3, [pc, #96]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd92:	d106      	bne.n	800dda2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800dd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd9a:	d102      	bne.n	800dda2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800dd9c:	4b14      	ldr	r3, [pc, #80]	@ (800ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800dd9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dda0:	e01d      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dda8:	d107      	bne.n	800ddba <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe f88c 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddb8:	e011      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800ddba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800ddc0:	d108      	bne.n	800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe f880 	bl	800becc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddce:	085b      	lsrs	r3, r3, #1
 800ddd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddd2:	e004      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddd8:	e001      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800ddde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3738      	adds	r7, #56	@ 0x38
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	46020c00 	.word	0x46020c00
 800ddec:	00f42400 	.word	0x00f42400
 800ddf0:	007a1200 	.word	0x007a1200

0800ddf4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800ddfc:	4b47      	ldr	r3, [pc, #284]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a46      	ldr	r2, [pc, #280]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de08:	f7f4 fea6 	bl	8002b58 <HAL_GetTick>
 800de0c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de0e:	e008      	b.n	800de22 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de10:	f7f4 fea2 	bl	8002b58 <HAL_GetTick>
 800de14:	4602      	mov	r2, r0
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d901      	bls.n	800de22 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e077      	b.n	800df12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de22:	4b3e      	ldr	r3, [pc, #248]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1f0      	bne.n	800de10 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800de2e:	4b3b      	ldr	r3, [pc, #236]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800de36:	f023 0303 	bic.w	r3, r3, #3
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	6811      	ldr	r1, [r2, #0]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	6852      	ldr	r2, [r2, #4]
 800de42:	3a01      	subs	r2, #1
 800de44:	0212      	lsls	r2, r2, #8
 800de46:	430a      	orrs	r2, r1
 800de48:	4934      	ldr	r1, [pc, #208]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de4a:	4313      	orrs	r3, r2
 800de4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800de4e:	4b33      	ldr	r3, [pc, #204]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de52:	4b33      	ldr	r3, [pc, #204]	@ (800df20 <RCCEx_PLL2_Config+0x12c>)
 800de54:	4013      	ands	r3, r2
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	6892      	ldr	r2, [r2, #8]
 800de5a:	3a01      	subs	r2, #1
 800de5c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	68d2      	ldr	r2, [r2, #12]
 800de64:	3a01      	subs	r2, #1
 800de66:	0252      	lsls	r2, r2, #9
 800de68:	b292      	uxth	r2, r2
 800de6a:	4311      	orrs	r1, r2
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	6912      	ldr	r2, [r2, #16]
 800de70:	3a01      	subs	r2, #1
 800de72:	0412      	lsls	r2, r2, #16
 800de74:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800de78:	4311      	orrs	r1, r2
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	6952      	ldr	r2, [r2, #20]
 800de7e:	3a01      	subs	r2, #1
 800de80:	0612      	lsls	r2, r2, #24
 800de82:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800de86:	430a      	orrs	r2, r1
 800de88:	4924      	ldr	r1, [pc, #144]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de8a:	4313      	orrs	r3, r2
 800de8c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800de8e:	4b23      	ldr	r3, [pc, #140]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de92:	f023 020c 	bic.w	r2, r3, #12
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	4920      	ldr	r1, [pc, #128]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800de9c:	4313      	orrs	r3, r2
 800de9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dea0:	4b1e      	ldr	r3, [pc, #120]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800dea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a1b      	ldr	r3, [r3, #32]
 800dea8:	491c      	ldr	r1, [pc, #112]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800deaa:	4313      	orrs	r3, r2
 800deac:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800deae:	4b1b      	ldr	r3, [pc, #108]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800deb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deb2:	4a1a      	ldr	r2, [pc, #104]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800deb4:	f023 0310 	bic.w	r3, r3, #16
 800deb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800deba:	4b18      	ldr	r3, [pc, #96]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800debc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800debe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dec2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	69d2      	ldr	r2, [r2, #28]
 800deca:	00d2      	lsls	r2, r2, #3
 800decc:	4913      	ldr	r1, [pc, #76]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800dece:	4313      	orrs	r3, r2
 800ded0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ded2:	4b12      	ldr	r3, [pc, #72]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800ded4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded6:	4a11      	ldr	r2, [pc, #68]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800ded8:	f043 0310 	orr.w	r3, r3, #16
 800dedc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dede:	4b0f      	ldr	r3, [pc, #60]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a0e      	ldr	r2, [pc, #56]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800dee4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dee8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800deea:	f7f4 fe35 	bl	8002b58 <HAL_GetTick>
 800deee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800def0:	e008      	b.n	800df04 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800def2:	f7f4 fe31 	bl	8002b58 <HAL_GetTick>
 800def6:	4602      	mov	r2, r0
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	2b02      	cmp	r3, #2
 800defe:	d901      	bls.n	800df04 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800df00:	2303      	movs	r3, #3
 800df02:	e006      	b.n	800df12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df04:	4b05      	ldr	r3, [pc, #20]	@ (800df1c <RCCEx_PLL2_Config+0x128>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d0f0      	beq.n	800def2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800df10:	2300      	movs	r3, #0

}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	46020c00 	.word	0x46020c00
 800df20:	80800000 	.word	0x80800000

0800df24 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800df2c:	4b47      	ldr	r3, [pc, #284]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a46      	ldr	r2, [pc, #280]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800df32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800df38:	f7f4 fe0e 	bl	8002b58 <HAL_GetTick>
 800df3c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df3e:	e008      	b.n	800df52 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df40:	f7f4 fe0a 	bl	8002b58 <HAL_GetTick>
 800df44:	4602      	mov	r2, r0
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	d901      	bls.n	800df52 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800df4e:	2303      	movs	r3, #3
 800df50:	e077      	b.n	800e042 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df52:	4b3e      	ldr	r3, [pc, #248]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1f0      	bne.n	800df40 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800df5e:	4b3b      	ldr	r3, [pc, #236]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800df60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df62:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800df66:	f023 0303 	bic.w	r3, r3, #3
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	6811      	ldr	r1, [r2, #0]
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	6852      	ldr	r2, [r2, #4]
 800df72:	3a01      	subs	r2, #1
 800df74:	0212      	lsls	r2, r2, #8
 800df76:	430a      	orrs	r2, r1
 800df78:	4934      	ldr	r1, [pc, #208]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800df7a:	4313      	orrs	r3, r2
 800df7c:	630b      	str	r3, [r1, #48]	@ 0x30
 800df7e:	4b33      	ldr	r3, [pc, #204]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800df80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df82:	4b33      	ldr	r3, [pc, #204]	@ (800e050 <RCCEx_PLL3_Config+0x12c>)
 800df84:	4013      	ands	r3, r2
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	6892      	ldr	r2, [r2, #8]
 800df8a:	3a01      	subs	r2, #1
 800df8c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	68d2      	ldr	r2, [r2, #12]
 800df94:	3a01      	subs	r2, #1
 800df96:	0252      	lsls	r2, r2, #9
 800df98:	b292      	uxth	r2, r2
 800df9a:	4311      	orrs	r1, r2
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	6912      	ldr	r2, [r2, #16]
 800dfa0:	3a01      	subs	r2, #1
 800dfa2:	0412      	lsls	r2, r2, #16
 800dfa4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dfa8:	4311      	orrs	r1, r2
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	6952      	ldr	r2, [r2, #20]
 800dfae:	3a01      	subs	r2, #1
 800dfb0:	0612      	lsls	r2, r2, #24
 800dfb2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	4924      	ldr	r1, [pc, #144]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800dfbe:	4b23      	ldr	r3, [pc, #140]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc2:	f023 020c 	bic.w	r2, r3, #12
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	4920      	ldr	r1, [pc, #128]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800dfd0:	4b1e      	ldr	r3, [pc, #120]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a1b      	ldr	r3, [r3, #32]
 800dfd8:	491c      	ldr	r1, [pc, #112]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800dfde:	4b1b      	ldr	r3, [pc, #108]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfe2:	4a1a      	ldr	r2, [pc, #104]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfe4:	f023 0310 	bic.w	r3, r3, #16
 800dfe8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dfea:	4b18      	ldr	r3, [pc, #96]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dfec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dff2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	69d2      	ldr	r2, [r2, #28]
 800dffa:	00d2      	lsls	r2, r2, #3
 800dffc:	4913      	ldr	r1, [pc, #76]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800dffe:	4313      	orrs	r3, r2
 800e000:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800e002:	4b12      	ldr	r3, [pc, #72]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800e004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e006:	4a11      	ldr	r2, [pc, #68]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800e008:	f043 0310 	orr.w	r3, r3, #16
 800e00c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800e00e:	4b0f      	ldr	r3, [pc, #60]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a0e      	ldr	r2, [pc, #56]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800e014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e018:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e01a:	f7f4 fd9d 	bl	8002b58 <HAL_GetTick>
 800e01e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e020:	e008      	b.n	800e034 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e022:	f7f4 fd99 	bl	8002b58 <HAL_GetTick>
 800e026:	4602      	mov	r2, r0
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d901      	bls.n	800e034 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e030:	2303      	movs	r3, #3
 800e032:	e006      	b.n	800e042 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e034:	4b05      	ldr	r3, [pc, #20]	@ (800e04c <RCCEx_PLL3_Config+0x128>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d0f0      	beq.n	800e022 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	46020c00 	.word	0x46020c00
 800e050:	80800000 	.word	0x80800000

0800e054 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d071      	beq.n	800e14a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d106      	bne.n	800e080 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7f4 f882 	bl	8002184 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2202      	movs	r2, #2
 800e084:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e088:	4b32      	ldr	r3, [pc, #200]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	f003 0310 	and.w	r3, r3, #16
 800e090:	2b10      	cmp	r3, #16
 800e092:	d051      	beq.n	800e138 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e094:	4b2f      	ldr	r3, [pc, #188]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e096:	22ca      	movs	r2, #202	@ 0xca
 800e098:	625a      	str	r2, [r3, #36]	@ 0x24
 800e09a:	4b2e      	ldr	r3, [pc, #184]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e09c:	2253      	movs	r2, #83	@ 0x53
 800e09e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f88b 	bl	800e1bc <RTC_EnterInitMode>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e0aa:	7bfb      	ldrb	r3, [r7, #15]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d13f      	bne.n	800e130 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e0b0:	4b28      	ldr	r3, [pc, #160]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e0b2:	699b      	ldr	r3, [r3, #24]
 800e0b4:	4a27      	ldr	r2, [pc, #156]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e0b6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800e0ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0be:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e0c0:	4b24      	ldr	r3, [pc, #144]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e0c2:	699a      	ldr	r2, [r3, #24]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6859      	ldr	r1, [r3, #4]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	691b      	ldr	r3, [r3, #16]
 800e0cc:	4319      	orrs	r1, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	430b      	orrs	r3, r1
 800e0d4:	491f      	ldr	r1, [pc, #124]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	68da      	ldr	r2, [r3, #12]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	041b      	lsls	r3, r3, #16
 800e0e4:	491b      	ldr	r1, [pc, #108]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e0ea:	4b1a      	ldr	r3, [pc, #104]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0fa:	430b      	orrs	r3, r1
 800e0fc:	4915      	ldr	r1, [pc, #84]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e0fe:	4313      	orrs	r3, r2
 800e100:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 f896 	bl	800e234 <RTC_ExitInitMode>
 800e108:	4603      	mov	r3, r0
 800e10a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10e      	bne.n	800e130 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800e112:	4b10      	ldr	r3, [pc, #64]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e114:	699b      	ldr	r3, [r3, #24]
 800e116:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a19      	ldr	r1, [r3, #32]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	69db      	ldr	r3, [r3, #28]
 800e122:	4319      	orrs	r1, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	430b      	orrs	r3, r1
 800e12a:	490a      	ldr	r1, [pc, #40]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e12c:	4313      	orrs	r3, r2
 800e12e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e130:	4b08      	ldr	r3, [pc, #32]	@ (800e154 <HAL_RTC_Init+0x100>)
 800e132:	22ff      	movs	r2, #255	@ 0xff
 800e134:	625a      	str	r2, [r3, #36]	@ 0x24
 800e136:	e001      	b.n	800e13c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e13c:	7bfb      	ldrb	r3, [r7, #15]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d103      	bne.n	800e14a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2201      	movs	r2, #1
 800e146:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	46007800 	.word	0x46007800

0800e158 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800e160:	4b15      	ldr	r3, [pc, #84]	@ (800e1b8 <HAL_RTC_WaitForSynchro+0x60>)
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	4a14      	ldr	r2, [pc, #80]	@ (800e1b8 <HAL_RTC_WaitForSynchro+0x60>)
 800e166:	f023 0320 	bic.w	r3, r3, #32
 800e16a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e16c:	f7f4 fcf4 	bl	8002b58 <HAL_GetTick>
 800e170:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e172:	e013      	b.n	800e19c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e174:	f7f4 fcf0 	bl	8002b58 <HAL_GetTick>
 800e178:	4602      	mov	r2, r0
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e182:	d90b      	bls.n	800e19c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e184:	4b0c      	ldr	r3, [pc, #48]	@ (800e1b8 <HAL_RTC_WaitForSynchro+0x60>)
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	f003 0320 	and.w	r3, r3, #32
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10c      	bne.n	800e1aa <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2203      	movs	r2, #3
 800e194:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800e198:	2303      	movs	r3, #3
 800e19a:	e008      	b.n	800e1ae <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e19c:	4b06      	ldr	r3, [pc, #24]	@ (800e1b8 <HAL_RTC_WaitForSynchro+0x60>)
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	f003 0320 	and.w	r3, r3, #32
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d0e5      	beq.n	800e174 <HAL_RTC_WaitForSynchro+0x1c>
 800e1a8:	e000      	b.n	800e1ac <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e1aa:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	46007800 	.word	0x46007800

0800e1bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e1c8:	4b19      	ldr	r3, [pc, #100]	@ (800e230 <RTC_EnterInitMode+0x74>)
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d128      	bne.n	800e226 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e1d4:	4b16      	ldr	r3, [pc, #88]	@ (800e230 <RTC_EnterInitMode+0x74>)
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	4a15      	ldr	r2, [pc, #84]	@ (800e230 <RTC_EnterInitMode+0x74>)
 800e1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1de:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e1e0:	f7f4 fcba 	bl	8002b58 <HAL_GetTick>
 800e1e4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e1e6:	e013      	b.n	800e210 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e1e8:	f7f4 fcb6 	bl	8002b58 <HAL_GetTick>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e1f6:	d90b      	bls.n	800e210 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e1f8:	4b0d      	ldr	r3, [pc, #52]	@ (800e230 <RTC_EnterInitMode+0x74>)
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e200:	2b00      	cmp	r3, #0
 800e202:	d10f      	bne.n	800e224 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2203      	movs	r2, #3
 800e20c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e210:	4b07      	ldr	r3, [pc, #28]	@ (800e230 <RTC_EnterInitMode+0x74>)
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d104      	bne.n	800e226 <RTC_EnterInitMode+0x6a>
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
 800e21e:	2b03      	cmp	r3, #3
 800e220:	d1e2      	bne.n	800e1e8 <RTC_EnterInitMode+0x2c>
 800e222:	e000      	b.n	800e226 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e224:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e226:	7bfb      	ldrb	r3, [r7, #15]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	46007800 	.word	0x46007800

0800e234 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e240:	4b1a      	ldr	r3, [pc, #104]	@ (800e2ac <RTC_ExitInitMode+0x78>)
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	4a19      	ldr	r2, [pc, #100]	@ (800e2ac <RTC_ExitInitMode+0x78>)
 800e246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e24a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e24c:	4b17      	ldr	r3, [pc, #92]	@ (800e2ac <RTC_ExitInitMode+0x78>)
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	f003 0320 	and.w	r3, r3, #32
 800e254:	2b00      	cmp	r3, #0
 800e256:	d10c      	bne.n	800e272 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff ff7d 	bl	800e158 <HAL_RTC_WaitForSynchro>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d01e      	beq.n	800e2a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2203      	movs	r2, #3
 800e268:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e26c:	2303      	movs	r3, #3
 800e26e:	73fb      	strb	r3, [r7, #15]
 800e270:	e017      	b.n	800e2a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e272:	4b0e      	ldr	r3, [pc, #56]	@ (800e2ac <RTC_ExitInitMode+0x78>)
 800e274:	699b      	ldr	r3, [r3, #24]
 800e276:	4a0d      	ldr	r2, [pc, #52]	@ (800e2ac <RTC_ExitInitMode+0x78>)
 800e278:	f023 0320 	bic.w	r3, r3, #32
 800e27c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff ff6a 	bl	800e158 <HAL_RTC_WaitForSynchro>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d005      	beq.n	800e296 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2203      	movs	r2, #3
 800e28e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e292:	2303      	movs	r3, #3
 800e294:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e296:	4b05      	ldr	r3, [pc, #20]	@ (800e2ac <RTC_ExitInitMode+0x78>)
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	4a04      	ldr	r2, [pc, #16]	@ (800e2ac <RTC_ExitInitMode+0x78>)
 800e29c:	f043 0320 	orr.w	r3, r3, #32
 800e2a0:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	46007800 	.word	0x46007800

0800e2b0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	4910      	ldr	r1, [pc, #64]	@ (800e304 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	689a      	ldr	r2, [r3, #8]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	431a      	orrs	r2, r3
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	490c      	ldr	r1, [pc, #48]	@ (800e308 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e308 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e2de:	6a1b      	ldr	r3, [r3, #32]
 800e2e0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	6919      	ldr	r1, [r3, #16]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	041b      	lsls	r3, r3, #16
 800e2ee:	430b      	orrs	r3, r1
 800e2f0:	4905      	ldr	r1, [pc, #20]	@ (800e308 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr
 800e304:	46007800 	.word	0x46007800
 800e308:	46007c00 	.word	0x46007c00

0800e30c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	d904      	bls.n	800e32a <HAL_SAI_InitProtocol+0x1e>
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	3b03      	subs	r3, #3
 800e324:	2b01      	cmp	r3, #1
 800e326:	d812      	bhi.n	800e34e <HAL_SAI_InitProtocol+0x42>
 800e328:	e008      	b.n	800e33c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	68b9      	ldr	r1, [r7, #8]
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f000 fb07 	bl	800e944 <SAI_InitI2S>
 800e336:	4603      	mov	r3, r0
 800e338:	75fb      	strb	r3, [r7, #23]
      break;
 800e33a:	e00b      	b.n	800e354 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	68b9      	ldr	r1, [r7, #8]
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 fbb0 	bl	800eaa8 <SAI_InitPCM>
 800e348:	4603      	mov	r3, r0
 800e34a:	75fb      	strb	r3, [r7, #23]
      break;
 800e34c:	e002      	b.n	800e354 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	75fb      	strb	r3, [r7, #23]
      break;
 800e352:	bf00      	nop
  }

  if (status == HAL_OK)
 800e354:	7dfb      	ldrb	r3, [r7, #23]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d104      	bne.n	800e364 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f000 f808 	bl	800e370 <HAL_SAI_Init>
 800e360:	4603      	mov	r3, r0
 800e362:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e364:	7dfb      	ldrb	r3, [r7, #23]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
	...

0800e370 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08a      	sub	sp, #40	@ 0x28
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e37e:	2301      	movs	r3, #1
 800e380:	e1ce      	b.n	800e720 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d10e      	bne.n	800e3aa <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a83      	ldr	r2, [pc, #524]	@ (800e5a0 <HAL_SAI_Init+0x230>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d107      	bne.n	800e3a6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d103      	bne.n	800e3a6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e1ba      	b.n	800e720 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7f4 f890 	bl	80024e4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 fc75 	bl	800ecb4 <SAI_Disable>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e1a5      	b.n	800e720 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2202      	movs	r2, #2
 800e3d8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	2b02      	cmp	r3, #2
 800e3e2:	d00c      	beq.n	800e3fe <HAL_SAI_Init+0x8e>
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d80d      	bhi.n	800e404 <HAL_SAI_Init+0x94>
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d002      	beq.n	800e3f2 <HAL_SAI_Init+0x82>
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d003      	beq.n	800e3f8 <HAL_SAI_Init+0x88>
 800e3f0:	e008      	b.n	800e404 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e3f6:	e008      	b.n	800e40a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e3f8:	2310      	movs	r3, #16
 800e3fa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e3fc:	e005      	b.n	800e40a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e3fe:	2320      	movs	r3, #32
 800e400:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e402:	e002      	b.n	800e40a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e408:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	2b03      	cmp	r3, #3
 800e410:	d81d      	bhi.n	800e44e <HAL_SAI_Init+0xde>
 800e412:	a201      	add	r2, pc, #4	@ (adr r2, 800e418 <HAL_SAI_Init+0xa8>)
 800e414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e418:	0800e429 	.word	0x0800e429
 800e41c:	0800e42f 	.word	0x0800e42f
 800e420:	0800e437 	.word	0x0800e437
 800e424:	0800e43f 	.word	0x0800e43f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	61fb      	str	r3, [r7, #28]
      break;
 800e42c:	e012      	b.n	800e454 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e42e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e432:	61fb      	str	r3, [r7, #28]
      break;
 800e434:	e00e      	b.n	800e454 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e436:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e43a:	61fb      	str	r3, [r7, #28]
      break;
 800e43c:	e00a      	b.n	800e454 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e43e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e442:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e446:	f043 0301 	orr.w	r3, r3, #1
 800e44a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e44c:	e002      	b.n	800e454 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	61fb      	str	r3, [r7, #28]
      break;
 800e452:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a51      	ldr	r2, [pc, #324]	@ (800e5a0 <HAL_SAI_Init+0x230>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d004      	beq.n	800e468 <HAL_SAI_Init+0xf8>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a50      	ldr	r2, [pc, #320]	@ (800e5a4 <HAL_SAI_Init+0x234>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d103      	bne.n	800e470 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e468:	4a4f      	ldr	r2, [pc, #316]	@ (800e5a8 <HAL_SAI_Init+0x238>)
 800e46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e46c:	6013      	str	r3, [r2, #0]
 800e46e:	e002      	b.n	800e476 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e470:	4a4e      	ldr	r2, [pc, #312]	@ (800e5ac <HAL_SAI_Init+0x23c>)
 800e472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e474:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d077      	beq.n	800e56e <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a47      	ldr	r2, [pc, #284]	@ (800e5a0 <HAL_SAI_Init+0x230>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d004      	beq.n	800e492 <HAL_SAI_Init+0x122>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a45      	ldr	r2, [pc, #276]	@ (800e5a4 <HAL_SAI_Init+0x234>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d107      	bne.n	800e4a2 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e492:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e496:	f04f 0100 	mov.w	r1, #0
 800e49a:	f7fe f925 	bl	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800e49e:	61b8      	str	r0, [r7, #24]
 800e4a0:	e006      	b.n	800e4b0 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e4a2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e4a6:	f04f 0100 	mov.w	r1, #0
 800e4aa:	f7fe f91d 	bl	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800e4ae:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	699b      	ldr	r3, [r3, #24]
 800e4b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e4b8:	d120      	bne.n	800e4fc <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4be:	2b04      	cmp	r3, #4
 800e4c0:	d102      	bne.n	800e4c8 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e4c2:	2340      	movs	r3, #64	@ 0x40
 800e4c4:	613b      	str	r3, [r7, #16]
 800e4c6:	e00a      	b.n	800e4de <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4cc:	2b08      	cmp	r3, #8
 800e4ce:	d103      	bne.n	800e4d8 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e4d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e4d4:	613b      	str	r3, [r7, #16]
 800e4d6:	e002      	b.n	800e4de <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4dc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e4de:	69ba      	ldr	r2, [r7, #24]
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	fb02 f303 	mul.w	r3, r2, r3
 800e4f4:	fbb1 f3f3 	udiv	r3, r1, r3
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	e017      	b.n	800e52c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e504:	d101      	bne.n	800e50a <HAL_SAI_Init+0x19a>
 800e506:	2302      	movs	r3, #2
 800e508:	e000      	b.n	800e50c <HAL_SAI_Init+0x19c>
 800e50a:	2301      	movs	r3, #1
 800e50c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e50e:	69ba      	ldr	r2, [r7, #24]
 800e510:	4613      	mov	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	005b      	lsls	r3, r3, #1
 800e518:	4619      	mov	r1, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a1b      	ldr	r3, [r3, #32]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	fb02 f303 	mul.w	r3, r2, r3
 800e524:	021b      	lsls	r3, r3, #8
 800e526:	fbb1 f3f3 	udiv	r3, r1, r3
 800e52a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	4a20      	ldr	r2, [pc, #128]	@ (800e5b0 <HAL_SAI_Init+0x240>)
 800e530:	fba2 2303 	umull	r2, r3, r2, r3
 800e534:	08da      	lsrs	r2, r3, #3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e53a:	6979      	ldr	r1, [r7, #20]
 800e53c:	4b1c      	ldr	r3, [pc, #112]	@ (800e5b0 <HAL_SAI_Init+0x240>)
 800e53e:	fba3 2301 	umull	r2, r3, r3, r1
 800e542:	08da      	lsrs	r2, r3, #3
 800e544:	4613      	mov	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	1aca      	subs	r2, r1, r3
 800e54e:	2a08      	cmp	r2, #8
 800e550:	d904      	bls.n	800e55c <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e560:	2b04      	cmp	r3, #4
 800e562:	d104      	bne.n	800e56e <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e568:	085a      	lsrs	r2, r3, #1
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <HAL_SAI_Init+0x20e>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d109      	bne.n	800e592 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e582:	2b01      	cmp	r3, #1
 800e584:	d101      	bne.n	800e58a <HAL_SAI_Init+0x21a>
 800e586:	2300      	movs	r3, #0
 800e588:	e001      	b.n	800e58e <HAL_SAI_Init+0x21e>
 800e58a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e58e:	623b      	str	r3, [r7, #32]
 800e590:	e012      	b.n	800e5b8 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e596:	2b01      	cmp	r3, #1
 800e598:	d10c      	bne.n	800e5b4 <HAL_SAI_Init+0x244>
 800e59a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e59e:	e00a      	b.n	800e5b6 <HAL_SAI_Init+0x246>
 800e5a0:	40015404 	.word	0x40015404
 800e5a4:	40015424 	.word	0x40015424
 800e5a8:	40015400 	.word	0x40015400
 800e5ac:	40015800 	.word	0x40015800
 800e5b0:	cccccccd 	.word	0xcccccccd
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6819      	ldr	r1, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	4b59      	ldr	r3, [pc, #356]	@ (800e728 <HAL_SAI_Init+0x3b8>)
 800e5c4:	400b      	ands	r3, r1
 800e5c6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6819      	ldr	r1, [r3, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e5dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e5f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	695b      	ldr	r3, [r3, #20]
 800e5f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e5fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e602:	051b      	lsls	r3, r3, #20
 800e604:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e60a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	430a      	orrs	r2, r1
 800e618:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	6812      	ldr	r2, [r2, #0]
 800e624:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e628:	f023 030f 	bic.w	r3, r3, #15
 800e62c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6859      	ldr	r1, [r3, #4]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	69da      	ldr	r2, [r3, #28]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e63c:	431a      	orrs	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e642:	431a      	orrs	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	430a      	orrs	r2, r1
 800e64a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6899      	ldr	r1, [r3, #8]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	4b35      	ldr	r3, [pc, #212]	@ (800e72c <HAL_SAI_Init+0x3bc>)
 800e658:	400b      	ands	r3, r1
 800e65a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	6899      	ldr	r1, [r3, #8]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e666:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e66c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e672:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e678:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e67e:	3b01      	subs	r3, #1
 800e680:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e682:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	430a      	orrs	r2, r1
 800e68a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	68d9      	ldr	r1, [r3, #12]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e69a:	400b      	ands	r3, r1
 800e69c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68d9      	ldr	r1, [r3, #12]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6ac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6b2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e6b4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	021b      	lsls	r3, r3, #8
 800e6be:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	430a      	orrs	r2, r1
 800e6c6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a18      	ldr	r2, [pc, #96]	@ (800e730 <HAL_SAI_Init+0x3c0>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d119      	bne.n	800e706 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e6d2:	4b18      	ldr	r3, [pc, #96]	@ (800e734 <HAL_SAI_Init+0x3c4>)
 800e6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6d6:	4a17      	ldr	r2, [pc, #92]	@ (800e734 <HAL_SAI_Init+0x3c4>)
 800e6d8:	f023 0301 	bic.w	r3, r3, #1
 800e6dc:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d10e      	bne.n	800e706 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e6f4:	490f      	ldr	r1, [pc, #60]	@ (800e734 <HAL_SAI_Init+0x3c4>)
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e734 <HAL_SAI_Init+0x3c4>)
 800e6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6fe:	4a0d      	ldr	r2, [pc, #52]	@ (800e734 <HAL_SAI_Init+0x3c4>)
 800e700:	f043 0301 	orr.w	r3, r3, #1
 800e704:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3728      	adds	r7, #40	@ 0x28
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	f005c010 	.word	0xf005c010
 800e72c:	fff88000 	.word	0xfff88000
 800e730:	40015404 	.word	0x40015404
 800e734:	40015400 	.word	0x40015400

0800e738 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	603b      	str	r3, [r7, #0]
 800e744:	4613      	mov	r3, r2
 800e746:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800e748:	f7f4 fa06 	bl	8002b58 <HAL_GetTick>
 800e74c:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d002      	beq.n	800e75a <HAL_SAI_Transmit+0x22>
 800e754:	88fb      	ldrh	r3, [r7, #6]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d101      	bne.n	800e75e <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e0ee      	b.n	800e93c <HAL_SAI_Transmit+0x204>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b01      	cmp	r3, #1
 800e768:	f040 80e7 	bne.w	800e93a <HAL_SAI_Transmit+0x202>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e772:	2b01      	cmp	r3, #1
 800e774:	d101      	bne.n	800e77a <HAL_SAI_Transmit+0x42>
 800e776:	2302      	movs	r3, #2
 800e778:	e0e0      	b.n	800e93c <HAL_SAI_Transmit+0x204>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->XferSize = Size;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	88fa      	ldrh	r2, [r7, #6]
 800e786:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	88fa      	ldrh	r2, [r7, #6]
 800e78e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->pBuffPtr = pData;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2212      	movs	r2, #18
 800e79c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f040 80b1 	bne.w	800e91a <HAL_SAI_Transmit+0x1e2>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f000 f9f7 	bl	800ebac <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e7cc:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0U)
 800e7ce:	e0a4      	b.n	800e91a <HAL_SAI_Transmit+0x1e2>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	695b      	ldr	r3, [r3, #20]
 800e7d6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e7da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e7de:	d06b      	beq.n	800e8b8 <HAL_SAI_Transmit+0x180>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7e4:	2b40      	cmp	r3, #64	@ 0x40
 800e7e6:	d10f      	bne.n	800e808 <HAL_SAI_Transmit+0xd0>
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10b      	bne.n	800e808 <HAL_SAI_Transmit+0xd0>
        {
          hsai->Instance->DR = *hsai->pBuffPtr;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7f4:	781a      	ldrb	r2, [r3, #0]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr++;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	679a      	str	r2, [r3, #120]	@ 0x78
 800e806:	e04e      	b.n	800e8a6 <HAL_SAI_Transmit+0x16e>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e80c:	2b80      	cmp	r3, #128	@ 0x80
 800e80e:	d819      	bhi.n	800e844 <HAL_SAI_Transmit+0x10c>
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	021b      	lsls	r3, r3, #8
 800e82a:	693a      	ldr	r2, [r7, #16]
 800e82c:	4313      	orrs	r3, r2
 800e82e:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e834:	1c5a      	adds	r2, r3, #1
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	679a      	str	r2, [r3, #120]	@ 0x78
          hsai->Instance->DR = temp;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	693a      	ldr	r2, [r7, #16]
 800e840:	61da      	str	r2, [r3, #28]
 800e842:	e030      	b.n	800e8a6 <HAL_SAI_Transmit+0x16e>
        }
        else
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e850:	1c5a      	adds	r2, r3, #1
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	021b      	lsls	r3, r3, #8
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	4313      	orrs	r3, r2
 800e862:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e868:	1c5a      	adds	r2, r3, #1
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	041b      	lsls	r3, r3, #16
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	4313      	orrs	r3, r2
 800e87a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e880:	1c5a      	adds	r2, r3, #1
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	061b      	lsls	r3, r3, #24
 800e88e:	693a      	ldr	r2, [r7, #16]
 800e890:	4313      	orrs	r3, r2
 800e892:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e898:	1c5a      	adds	r2, r3, #1
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	679a      	str	r2, [r3, #120]	@ 0x78
          hsai->Instance->DR = temp;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	61da      	str	r2, [r3, #28]
        }
        hsai->XferCount--;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	b29a      	uxth	r2, r3
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
 800e8b6:	e030      	b.n	800e91a <HAL_SAI_Transmit+0x1e2>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800e8b8:	f7f4 f94e 	bl	8002b58 <HAL_GetTick>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d302      	bcc.n	800e8ce <HAL_SAI_Transmit+0x196>
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d125      	bne.n	800e91a <HAL_SAI_Transmit+0x1e2>
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d4:	d021      	beq.n	800e91a <HAL_SAI_Transmit+0x1e2>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e8dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ee:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 f9df 	bl	800ecb4 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	685a      	ldr	r2, [r3, #4]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f042 0208 	orr.w	r2, r2, #8
 800e904:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2201      	movs	r2, #1
 800e90a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

          return HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	e010      	b.n	800e93c <HAL_SAI_Transmit+0x204>
    while (hsai->XferCount > 0U)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e920:	2b00      	cmp	r3, #0
 800e922:	f47f af55 	bne.w	800e7d0 <HAL_SAI_Transmit+0x98>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e936:	2300      	movs	r3, #0
 800e938:	e000      	b.n	800e93c <HAL_SAI_Transmit+0x204>
  }
  else
  {
    return HAL_BUSY;
 800e93a:	2302      	movs	r3, #2
  }
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e944:	b480      	push	{r7}
 800e946:	b087      	sub	sp, #28
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
 800e950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d003      	beq.n	800e972 <SAI_InitI2S+0x2e>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	2b02      	cmp	r3, #2
 800e970:	d103      	bne.n	800e97a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	651a      	str	r2, [r3, #80]	@ 0x50
 800e978:	e002      	b.n	800e980 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2201      	movs	r2, #1
 800e97e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e986:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e98e:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	683a      	ldr	r2, [r7, #0]
 800e99a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e077      	b.n	800ea9a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d107      	bne.n	800e9c0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e9bc:	665a      	str	r2, [r3, #100]	@ 0x64
 800e9be:	e006      	b.n	800e9ce <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e9c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b03      	cmp	r3, #3
 800e9d2:	d84f      	bhi.n	800ea74 <SAI_InitI2S+0x130>
 800e9d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e9dc <SAI_InitI2S+0x98>)
 800e9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9da:	bf00      	nop
 800e9dc:	0800e9ed 	.word	0x0800e9ed
 800e9e0:	0800ea0f 	.word	0x0800ea0f
 800e9e4:	0800ea31 	.word	0x0800ea31
 800e9e8:	0800ea53 	.word	0x0800ea53
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2280      	movs	r2, #128	@ 0x80
 800e9f0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	085b      	lsrs	r3, r3, #1
 800e9f6:	015a      	lsls	r2, r3, #5
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	085b      	lsrs	r3, r3, #1
 800ea00:	011a      	lsls	r2, r3, #4
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2240      	movs	r2, #64	@ 0x40
 800ea0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea0c:	e035      	b.n	800ea7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2280      	movs	r2, #128	@ 0x80
 800ea12:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	085b      	lsrs	r3, r3, #1
 800ea18:	019a      	lsls	r2, r3, #6
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	085b      	lsrs	r3, r3, #1
 800ea22:	015a      	lsls	r2, r3, #5
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2280      	movs	r2, #128	@ 0x80
 800ea2c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea2e:	e024      	b.n	800ea7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	22c0      	movs	r2, #192	@ 0xc0
 800ea34:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	085b      	lsrs	r3, r3, #1
 800ea3a:	019a      	lsls	r2, r3, #6
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	085b      	lsrs	r3, r3, #1
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2280      	movs	r2, #128	@ 0x80
 800ea4e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea50:	e013      	b.n	800ea7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	22e0      	movs	r2, #224	@ 0xe0
 800ea56:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	085b      	lsrs	r3, r3, #1
 800ea5c:	019a      	lsls	r2, r3, #6
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	085b      	lsrs	r3, r3, #1
 800ea66:	015a      	lsls	r2, r3, #5
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2280      	movs	r2, #128	@ 0x80
 800ea70:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea72:	e002      	b.n	800ea7a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ea74:	2301      	movs	r3, #1
 800ea76:	75fb      	strb	r3, [r7, #23]
      break;
 800ea78:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d10b      	bne.n	800ea98 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d102      	bne.n	800ea8c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2210      	movs	r2, #16
 800ea8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d102      	bne.n	800ea98 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2208      	movs	r2, #8
 800ea96:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ea98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop

0800eaa8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b087      	sub	sp, #28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eab6:	2300      	movs	r3, #0
 800eab8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2200      	movs	r2, #0
 800eabe:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d003      	beq.n	800ead6 <SAI_InitPCM+0x2e>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d103      	bne.n	800eade <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2201      	movs	r2, #1
 800eada:	651a      	str	r2, [r3, #80]	@ 0x50
 800eadc:	e002      	b.n	800eae4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800eaf0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800eaf8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2200      	movs	r2, #0
 800eafe:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	683a      	ldr	r2, [r7, #0]
 800eb04:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb0c:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d103      	bne.n	800eb1c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	659a      	str	r2, [r3, #88]	@ 0x58
 800eb1a:	e002      	b.n	800eb22 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	220d      	movs	r2, #13
 800eb20:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b03      	cmp	r3, #3
 800eb26:	d837      	bhi.n	800eb98 <SAI_InitPCM+0xf0>
 800eb28:	a201      	add	r2, pc, #4	@ (adr r2, 800eb30 <SAI_InitPCM+0x88>)
 800eb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb2e:	bf00      	nop
 800eb30:	0800eb41 	.word	0x0800eb41
 800eb34:	0800eb57 	.word	0x0800eb57
 800eb38:	0800eb6d 	.word	0x0800eb6d
 800eb3c:	0800eb83 	.word	0x0800eb83
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2280      	movs	r2, #128	@ 0x80
 800eb44:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	011a      	lsls	r2, r3, #4
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2240      	movs	r2, #64	@ 0x40
 800eb52:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb54:	e023      	b.n	800eb9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2280      	movs	r2, #128	@ 0x80
 800eb5a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	015a      	lsls	r2, r3, #5
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2280      	movs	r2, #128	@ 0x80
 800eb68:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb6a:	e018      	b.n	800eb9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	22c0      	movs	r2, #192	@ 0xc0
 800eb70:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	015a      	lsls	r2, r3, #5
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2280      	movs	r2, #128	@ 0x80
 800eb7e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb80:	e00d      	b.n	800eb9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	22e0      	movs	r2, #224	@ 0xe0
 800eb86:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	015a      	lsls	r2, r3, #5
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2280      	movs	r2, #128	@ 0x80
 800eb94:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb96:	e002      	b.n	800eb9e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	75fb      	strb	r3, [r7, #23]
      break;
 800eb9c:	bf00      	nop
  }

  return status;
 800eb9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	371c      	adds	r7, #28
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b085      	sub	sp, #20
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800ebb4:	e06a      	b.n	800ec8c <SAI_FillFifo+0xe0>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ebba:	2b40      	cmp	r3, #64	@ 0x40
 800ebbc:	d10f      	bne.n	800ebde <SAI_FillFifo+0x32>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10b      	bne.n	800ebde <SAI_FillFifo+0x32>
    {
      hsai->Instance->DR = *hsai->pBuffPtr;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebca:	781a      	ldrb	r2, [r3, #0]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr++;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebd6:	1c5a      	adds	r2, r3, #1
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	679a      	str	r2, [r3, #120]	@ 0x78
 800ebdc:	e04e      	b.n	800ec7c <SAI_FillFifo+0xd0>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ebe2:	2b80      	cmp	r3, #128	@ 0x80
 800ebe4:	d819      	bhi.n	800ec1a <SAI_FillFifo+0x6e>
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	021b      	lsls	r3, r3, #8
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec0a:	1c5a      	adds	r2, r3, #1
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsai->Instance->DR = temp;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	61da      	str	r2, [r3, #28]
 800ec18:	e030      	b.n	800ec7c <SAI_FillFifo+0xd0>
    }
    else
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec26:	1c5a      	adds	r2, r3, #1
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	021b      	lsls	r3, r3, #8
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	4313      	orrs	r3, r2
 800ec38:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	041b      	lsls	r3, r3, #16
 800ec4c:	68fa      	ldr	r2, [r7, #12]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	061b      	lsls	r3, r3, #24
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec6e:	1c5a      	adds	r2, r3, #1
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	679a      	str	r2, [r3, #120]	@ 0x78
      hsai->Instance->DR = temp;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	61da      	str	r2, [r3, #28]
    }
    hsai->XferCount--;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800ec82:	3b01      	subs	r3, #1
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ec96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ec9a:	d004      	beq.n	800eca6 <SAI_FillFifo+0xfa>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d187      	bne.n	800ebb6 <SAI_FillFifo+0xa>
  }
}
 800eca6:	bf00      	nop
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ecbc:	4b18      	ldr	r3, [pc, #96]	@ (800ed20 <SAI_Disable+0x6c>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a18      	ldr	r2, [pc, #96]	@ (800ed24 <SAI_Disable+0x70>)
 800ecc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ecc6:	0b1b      	lsrs	r3, r3, #12
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800eccc:	2300      	movs	r3, #0
 800ecce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ecde:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d10a      	bne.n	800ecfc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	72fb      	strb	r3, [r7, #11]
      break;
 800ecfa:	e009      	b.n	800ed10 <SAI_Disable+0x5c>
    }
    count--;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1e7      	bne.n	800ece0 <SAI_Disable+0x2c>

  return status;
 800ed10:	7afb      	ldrb	r3, [r7, #11]
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3714      	adds	r7, #20
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop
 800ed20:	20000000 	.word	0x20000000
 800ed24:	95cbec1b 	.word	0x95cbec1b

0800ed28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d101      	bne.n	800ed3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed36:	2301      	movs	r3, #1
 800ed38:	e049      	b.n	800edce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7f3 fa64 	bl	800221c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2202      	movs	r2, #2
 800ed58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	3304      	adds	r3, #4
 800ed64:	4619      	mov	r1, r3
 800ed66:	4610      	mov	r0, r2
 800ed68:	f000 f94a 	bl	800f000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2201      	movs	r2, #1
 800ed78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d101      	bne.n	800edf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800edf2:	2302      	movs	r3, #2
 800edf4:	e0ff      	b.n	800eff6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2201      	movs	r2, #1
 800edfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2b14      	cmp	r3, #20
 800ee02:	f200 80f0 	bhi.w	800efe6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ee06:	a201      	add	r2, pc, #4	@ (adr r2, 800ee0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ee08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0c:	0800ee61 	.word	0x0800ee61
 800ee10:	0800efe7 	.word	0x0800efe7
 800ee14:	0800efe7 	.word	0x0800efe7
 800ee18:	0800efe7 	.word	0x0800efe7
 800ee1c:	0800eea1 	.word	0x0800eea1
 800ee20:	0800efe7 	.word	0x0800efe7
 800ee24:	0800efe7 	.word	0x0800efe7
 800ee28:	0800efe7 	.word	0x0800efe7
 800ee2c:	0800eee3 	.word	0x0800eee3
 800ee30:	0800efe7 	.word	0x0800efe7
 800ee34:	0800efe7 	.word	0x0800efe7
 800ee38:	0800efe7 	.word	0x0800efe7
 800ee3c:	0800ef23 	.word	0x0800ef23
 800ee40:	0800efe7 	.word	0x0800efe7
 800ee44:	0800efe7 	.word	0x0800efe7
 800ee48:	0800efe7 	.word	0x0800efe7
 800ee4c:	0800ef65 	.word	0x0800ef65
 800ee50:	0800efe7 	.word	0x0800efe7
 800ee54:	0800efe7 	.word	0x0800efe7
 800ee58:	0800efe7 	.word	0x0800efe7
 800ee5c:	0800efa5 	.word	0x0800efa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	68b9      	ldr	r1, [r7, #8]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 f9d0 	bl	800f20c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	699a      	ldr	r2, [r3, #24]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f042 0208 	orr.w	r2, r2, #8
 800ee7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	699a      	ldr	r2, [r3, #24]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f022 0204 	bic.w	r2, r2, #4
 800ee8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6999      	ldr	r1, [r3, #24]
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	691a      	ldr	r2, [r3, #16]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	430a      	orrs	r2, r1
 800ee9c:	619a      	str	r2, [r3, #24]
      break;
 800ee9e:	e0a5      	b.n	800efec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	68b9      	ldr	r1, [r7, #8]
 800eea6:	4618      	mov	r0, r3
 800eea8:	f000 fa72 	bl	800f390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	699a      	ldr	r2, [r3, #24]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eeba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	699a      	ldr	r2, [r3, #24]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eeca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6999      	ldr	r1, [r3, #24]
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	021a      	lsls	r2, r3, #8
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	430a      	orrs	r2, r1
 800eede:	619a      	str	r2, [r3, #24]
      break;
 800eee0:	e084      	b.n	800efec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68b9      	ldr	r1, [r7, #8]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f000 fb01 	bl	800f4f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	69da      	ldr	r2, [r3, #28]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f042 0208 	orr.w	r2, r2, #8
 800eefc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	69da      	ldr	r2, [r3, #28]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f022 0204 	bic.w	r2, r2, #4
 800ef0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	69d9      	ldr	r1, [r3, #28]
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	691a      	ldr	r2, [r3, #16]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	430a      	orrs	r2, r1
 800ef1e:	61da      	str	r2, [r3, #28]
      break;
 800ef20:	e064      	b.n	800efec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	68b9      	ldr	r1, [r7, #8]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f000 fb8f 	bl	800f64c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	69da      	ldr	r2, [r3, #28]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	69da      	ldr	r2, [r3, #28]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ef4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	69d9      	ldr	r1, [r3, #28]
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	021a      	lsls	r2, r3, #8
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	430a      	orrs	r2, r1
 800ef60:	61da      	str	r2, [r3, #28]
      break;
 800ef62:	e043      	b.n	800efec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68b9      	ldr	r1, [r7, #8]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 fc1e 	bl	800f7ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f042 0208 	orr.w	r2, r2, #8
 800ef7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 0204 	bic.w	r2, r2, #4
 800ef8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	691a      	ldr	r2, [r3, #16]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800efa2:	e023      	b.n	800efec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	68b9      	ldr	r1, [r7, #8]
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 fc80 	bl	800f8b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800efbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800efce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	691b      	ldr	r3, [r3, #16]
 800efda:	021a      	lsls	r2, r3, #8
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	430a      	orrs	r2, r1
 800efe2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800efe4:	e002      	b.n	800efec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800efe6:	2301      	movs	r3, #1
 800efe8:	75fb      	strb	r3, [r7, #23]
      break;
 800efea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2200      	movs	r2, #0
 800eff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop

0800f000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a6e      	ldr	r2, [pc, #440]	@ (800f1cc <TIM_Base_SetConfig+0x1cc>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d02b      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a6d      	ldr	r2, [pc, #436]	@ (800f1d0 <TIM_Base_SetConfig+0x1d0>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d027      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f026:	d023      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f02e:	d01f      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a68      	ldr	r2, [pc, #416]	@ (800f1d4 <TIM_Base_SetConfig+0x1d4>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d01b      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a67      	ldr	r2, [pc, #412]	@ (800f1d8 <TIM_Base_SetConfig+0x1d8>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d017      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a66      	ldr	r2, [pc, #408]	@ (800f1dc <TIM_Base_SetConfig+0x1dc>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d013      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a65      	ldr	r2, [pc, #404]	@ (800f1e0 <TIM_Base_SetConfig+0x1e0>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d00f      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a64      	ldr	r2, [pc, #400]	@ (800f1e4 <TIM_Base_SetConfig+0x1e4>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d00b      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4a63      	ldr	r2, [pc, #396]	@ (800f1e8 <TIM_Base_SetConfig+0x1e8>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d007      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a62      	ldr	r2, [pc, #392]	@ (800f1ec <TIM_Base_SetConfig+0x1ec>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d003      	beq.n	800f070 <TIM_Base_SetConfig+0x70>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a61      	ldr	r2, [pc, #388]	@ (800f1f0 <TIM_Base_SetConfig+0x1f0>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d108      	bne.n	800f082 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	4313      	orrs	r3, r2
 800f080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a51      	ldr	r2, [pc, #324]	@ (800f1cc <TIM_Base_SetConfig+0x1cc>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d043      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a50      	ldr	r2, [pc, #320]	@ (800f1d0 <TIM_Base_SetConfig+0x1d0>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d03f      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f098:	d03b      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f0a0:	d037      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4a4b      	ldr	r2, [pc, #300]	@ (800f1d4 <TIM_Base_SetConfig+0x1d4>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d033      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a4a      	ldr	r2, [pc, #296]	@ (800f1d8 <TIM_Base_SetConfig+0x1d8>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d02f      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4a49      	ldr	r2, [pc, #292]	@ (800f1dc <TIM_Base_SetConfig+0x1dc>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d02b      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a48      	ldr	r2, [pc, #288]	@ (800f1e0 <TIM_Base_SetConfig+0x1e0>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d027      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a47      	ldr	r2, [pc, #284]	@ (800f1e4 <TIM_Base_SetConfig+0x1e4>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d023      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a46      	ldr	r2, [pc, #280]	@ (800f1e8 <TIM_Base_SetConfig+0x1e8>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d01f      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a45      	ldr	r2, [pc, #276]	@ (800f1ec <TIM_Base_SetConfig+0x1ec>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d01b      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4a44      	ldr	r2, [pc, #272]	@ (800f1f0 <TIM_Base_SetConfig+0x1f0>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d017      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4a43      	ldr	r2, [pc, #268]	@ (800f1f4 <TIM_Base_SetConfig+0x1f4>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d013      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4a42      	ldr	r2, [pc, #264]	@ (800f1f8 <TIM_Base_SetConfig+0x1f8>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d00f      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a41      	ldr	r2, [pc, #260]	@ (800f1fc <TIM_Base_SetConfig+0x1fc>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d00b      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4a40      	ldr	r2, [pc, #256]	@ (800f200 <TIM_Base_SetConfig+0x200>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d007      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4a3f      	ldr	r2, [pc, #252]	@ (800f204 <TIM_Base_SetConfig+0x204>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d003      	beq.n	800f112 <TIM_Base_SetConfig+0x112>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4a3e      	ldr	r2, [pc, #248]	@ (800f208 <TIM_Base_SetConfig+0x208>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d108      	bne.n	800f124 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	4313      	orrs	r3, r2
 800f122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	695b      	ldr	r3, [r3, #20]
 800f12e:	4313      	orrs	r3, r2
 800f130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	68fa      	ldr	r2, [r7, #12]
 800f136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	689a      	ldr	r2, [r3, #8]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a20      	ldr	r2, [pc, #128]	@ (800f1cc <TIM_Base_SetConfig+0x1cc>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d023      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4a1f      	ldr	r2, [pc, #124]	@ (800f1d0 <TIM_Base_SetConfig+0x1d0>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d01f      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a24      	ldr	r2, [pc, #144]	@ (800f1ec <TIM_Base_SetConfig+0x1ec>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d01b      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a23      	ldr	r2, [pc, #140]	@ (800f1f0 <TIM_Base_SetConfig+0x1f0>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d017      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a22      	ldr	r2, [pc, #136]	@ (800f1f4 <TIM_Base_SetConfig+0x1f4>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d013      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4a21      	ldr	r2, [pc, #132]	@ (800f1f8 <TIM_Base_SetConfig+0x1f8>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d00f      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4a20      	ldr	r2, [pc, #128]	@ (800f1fc <TIM_Base_SetConfig+0x1fc>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d00b      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a1f      	ldr	r2, [pc, #124]	@ (800f200 <TIM_Base_SetConfig+0x200>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d007      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4a1e      	ldr	r2, [pc, #120]	@ (800f204 <TIM_Base_SetConfig+0x204>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d003      	beq.n	800f198 <TIM_Base_SetConfig+0x198>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a1d      	ldr	r2, [pc, #116]	@ (800f208 <TIM_Base_SetConfig+0x208>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d103      	bne.n	800f1a0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	691a      	ldr	r2, [r3, #16]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d105      	bne.n	800f1be <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	f023 0201 	bic.w	r2, r3, #1
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	611a      	str	r2, [r3, #16]
  }
}
 800f1be:	bf00      	nop
 800f1c0:	3714      	adds	r7, #20
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	40012c00 	.word	0x40012c00
 800f1d0:	50012c00 	.word	0x50012c00
 800f1d4:	40000400 	.word	0x40000400
 800f1d8:	50000400 	.word	0x50000400
 800f1dc:	40000800 	.word	0x40000800
 800f1e0:	50000800 	.word	0x50000800
 800f1e4:	40000c00 	.word	0x40000c00
 800f1e8:	50000c00 	.word	0x50000c00
 800f1ec:	40013400 	.word	0x40013400
 800f1f0:	50013400 	.word	0x50013400
 800f1f4:	40014000 	.word	0x40014000
 800f1f8:	50014000 	.word	0x50014000
 800f1fc:	40014400 	.word	0x40014400
 800f200:	50014400 	.word	0x50014400
 800f204:	40014800 	.word	0x40014800
 800f208:	50014800 	.word	0x50014800

0800f20c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b087      	sub	sp, #28
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a1b      	ldr	r3, [r3, #32]
 800f220:	f023 0201 	bic.w	r2, r3, #1
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f23a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f023 0303 	bic.w	r3, r3, #3
 800f246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	4313      	orrs	r3, r2
 800f250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f023 0302 	bic.w	r3, r3, #2
 800f258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	4313      	orrs	r3, r2
 800f262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a40      	ldr	r2, [pc, #256]	@ (800f368 <TIM_OC1_SetConfig+0x15c>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d023      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a3f      	ldr	r2, [pc, #252]	@ (800f36c <TIM_OC1_SetConfig+0x160>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d01f      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a3e      	ldr	r2, [pc, #248]	@ (800f370 <TIM_OC1_SetConfig+0x164>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d01b      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a3d      	ldr	r2, [pc, #244]	@ (800f374 <TIM_OC1_SetConfig+0x168>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d017      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a3c      	ldr	r2, [pc, #240]	@ (800f378 <TIM_OC1_SetConfig+0x16c>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d013      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a3b      	ldr	r2, [pc, #236]	@ (800f37c <TIM_OC1_SetConfig+0x170>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d00f      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a3a      	ldr	r2, [pc, #232]	@ (800f380 <TIM_OC1_SetConfig+0x174>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00b      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a39      	ldr	r2, [pc, #228]	@ (800f384 <TIM_OC1_SetConfig+0x178>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d007      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a38      	ldr	r2, [pc, #224]	@ (800f388 <TIM_OC1_SetConfig+0x17c>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d003      	beq.n	800f2b4 <TIM_OC1_SetConfig+0xa8>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a37      	ldr	r2, [pc, #220]	@ (800f38c <TIM_OC1_SetConfig+0x180>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d10c      	bne.n	800f2ce <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f023 0308 	bic.w	r3, r3, #8
 800f2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	697a      	ldr	r2, [r7, #20]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	f023 0304 	bic.w	r3, r3, #4
 800f2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a25      	ldr	r2, [pc, #148]	@ (800f368 <TIM_OC1_SetConfig+0x15c>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d023      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4a24      	ldr	r2, [pc, #144]	@ (800f36c <TIM_OC1_SetConfig+0x160>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d01f      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4a23      	ldr	r2, [pc, #140]	@ (800f370 <TIM_OC1_SetConfig+0x164>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d01b      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a22      	ldr	r2, [pc, #136]	@ (800f374 <TIM_OC1_SetConfig+0x168>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d017      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a21      	ldr	r2, [pc, #132]	@ (800f378 <TIM_OC1_SetConfig+0x16c>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d013      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a20      	ldr	r2, [pc, #128]	@ (800f37c <TIM_OC1_SetConfig+0x170>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d00f      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a1f      	ldr	r2, [pc, #124]	@ (800f380 <TIM_OC1_SetConfig+0x174>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d00b      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a1e      	ldr	r2, [pc, #120]	@ (800f384 <TIM_OC1_SetConfig+0x178>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d007      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a1d      	ldr	r2, [pc, #116]	@ (800f388 <TIM_OC1_SetConfig+0x17c>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d003      	beq.n	800f31e <TIM_OC1_SetConfig+0x112>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a1c      	ldr	r2, [pc, #112]	@ (800f38c <TIM_OC1_SetConfig+0x180>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d111      	bne.n	800f342 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f32c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	695b      	ldr	r3, [r3, #20]
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	4313      	orrs	r3, r2
 800f336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	699b      	ldr	r3, [r3, #24]
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	4313      	orrs	r3, r2
 800f340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	685a      	ldr	r2, [r3, #4]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	697a      	ldr	r2, [r7, #20]
 800f35a:	621a      	str	r2, [r3, #32]
}
 800f35c:	bf00      	nop
 800f35e:	371c      	adds	r7, #28
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr
 800f368:	40012c00 	.word	0x40012c00
 800f36c:	50012c00 	.word	0x50012c00
 800f370:	40013400 	.word	0x40013400
 800f374:	50013400 	.word	0x50013400
 800f378:	40014000 	.word	0x40014000
 800f37c:	50014000 	.word	0x50014000
 800f380:	40014400 	.word	0x40014400
 800f384:	50014400 	.word	0x50014400
 800f388:	40014800 	.word	0x40014800
 800f38c:	50014800 	.word	0x50014800

0800f390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f390:	b480      	push	{r7}
 800f392:	b087      	sub	sp, #28
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	f023 0210 	bic.w	r2, r3, #16
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	699b      	ldr	r3, [r3, #24]
 800f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f3be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	021b      	lsls	r3, r3, #8
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	f023 0320 	bic.w	r3, r3, #32
 800f3de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	011b      	lsls	r3, r3, #4
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a36      	ldr	r2, [pc, #216]	@ (800f4c8 <TIM_OC2_SetConfig+0x138>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d00b      	beq.n	800f40c <TIM_OC2_SetConfig+0x7c>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a35      	ldr	r2, [pc, #212]	@ (800f4cc <TIM_OC2_SetConfig+0x13c>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d007      	beq.n	800f40c <TIM_OC2_SetConfig+0x7c>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4a34      	ldr	r2, [pc, #208]	@ (800f4d0 <TIM_OC2_SetConfig+0x140>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d003      	beq.n	800f40c <TIM_OC2_SetConfig+0x7c>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4a33      	ldr	r2, [pc, #204]	@ (800f4d4 <TIM_OC2_SetConfig+0x144>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d10d      	bne.n	800f428 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	011b      	lsls	r3, r3, #4
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f426:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a27      	ldr	r2, [pc, #156]	@ (800f4c8 <TIM_OC2_SetConfig+0x138>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d023      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a26      	ldr	r2, [pc, #152]	@ (800f4cc <TIM_OC2_SetConfig+0x13c>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d01f      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a25      	ldr	r2, [pc, #148]	@ (800f4d0 <TIM_OC2_SetConfig+0x140>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d01b      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4a24      	ldr	r2, [pc, #144]	@ (800f4d4 <TIM_OC2_SetConfig+0x144>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d017      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a23      	ldr	r2, [pc, #140]	@ (800f4d8 <TIM_OC2_SetConfig+0x148>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d013      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a22      	ldr	r2, [pc, #136]	@ (800f4dc <TIM_OC2_SetConfig+0x14c>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d00f      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4a21      	ldr	r2, [pc, #132]	@ (800f4e0 <TIM_OC2_SetConfig+0x150>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d00b      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	4a20      	ldr	r2, [pc, #128]	@ (800f4e4 <TIM_OC2_SetConfig+0x154>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d007      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a1f      	ldr	r2, [pc, #124]	@ (800f4e8 <TIM_OC2_SetConfig+0x158>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d003      	beq.n	800f478 <TIM_OC2_SetConfig+0xe8>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4a1e      	ldr	r2, [pc, #120]	@ (800f4ec <TIM_OC2_SetConfig+0x15c>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d113      	bne.n	800f4a0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f47e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	695b      	ldr	r3, [r3, #20]
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	693a      	ldr	r2, [r7, #16]
 800f490:	4313      	orrs	r3, r2
 800f492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	699b      	ldr	r3, [r3, #24]
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	693a      	ldr	r2, [r7, #16]
 800f49c:	4313      	orrs	r3, r2
 800f49e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	693a      	ldr	r2, [r7, #16]
 800f4a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	685a      	ldr	r2, [r3, #4]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	697a      	ldr	r2, [r7, #20]
 800f4b8:	621a      	str	r2, [r3, #32]
}
 800f4ba:	bf00      	nop
 800f4bc:	371c      	adds	r7, #28
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	40012c00 	.word	0x40012c00
 800f4cc:	50012c00 	.word	0x50012c00
 800f4d0:	40013400 	.word	0x40013400
 800f4d4:	50013400 	.word	0x50013400
 800f4d8:	40014000 	.word	0x40014000
 800f4dc:	50014000 	.word	0x50014000
 800f4e0:	40014400 	.word	0x40014400
 800f4e4:	50014400 	.word	0x50014400
 800f4e8:	40014800 	.word	0x40014800
 800f4ec:	50014800 	.word	0x50014800

0800f4f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b087      	sub	sp, #28
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6a1b      	ldr	r3, [r3, #32]
 800f4fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a1b      	ldr	r3, [r3, #32]
 800f504:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	69db      	ldr	r3, [r3, #28]
 800f516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f51e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f023 0303 	bic.w	r3, r3, #3
 800f52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	4313      	orrs	r3, r2
 800f534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	021b      	lsls	r3, r3, #8
 800f544:	697a      	ldr	r2, [r7, #20]
 800f546:	4313      	orrs	r3, r2
 800f548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4a35      	ldr	r2, [pc, #212]	@ (800f624 <TIM_OC3_SetConfig+0x134>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d00b      	beq.n	800f56a <TIM_OC3_SetConfig+0x7a>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4a34      	ldr	r2, [pc, #208]	@ (800f628 <TIM_OC3_SetConfig+0x138>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d007      	beq.n	800f56a <TIM_OC3_SetConfig+0x7a>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4a33      	ldr	r2, [pc, #204]	@ (800f62c <TIM_OC3_SetConfig+0x13c>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d003      	beq.n	800f56a <TIM_OC3_SetConfig+0x7a>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4a32      	ldr	r2, [pc, #200]	@ (800f630 <TIM_OC3_SetConfig+0x140>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d10d      	bne.n	800f586 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	021b      	lsls	r3, r3, #8
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a26      	ldr	r2, [pc, #152]	@ (800f624 <TIM_OC3_SetConfig+0x134>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d023      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a25      	ldr	r2, [pc, #148]	@ (800f628 <TIM_OC3_SetConfig+0x138>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d01f      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4a24      	ldr	r2, [pc, #144]	@ (800f62c <TIM_OC3_SetConfig+0x13c>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d01b      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4a23      	ldr	r2, [pc, #140]	@ (800f630 <TIM_OC3_SetConfig+0x140>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d017      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a22      	ldr	r2, [pc, #136]	@ (800f634 <TIM_OC3_SetConfig+0x144>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d013      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4a21      	ldr	r2, [pc, #132]	@ (800f638 <TIM_OC3_SetConfig+0x148>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d00f      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a20      	ldr	r2, [pc, #128]	@ (800f63c <TIM_OC3_SetConfig+0x14c>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d00b      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a1f      	ldr	r2, [pc, #124]	@ (800f640 <TIM_OC3_SetConfig+0x150>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d007      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a1e      	ldr	r2, [pc, #120]	@ (800f644 <TIM_OC3_SetConfig+0x154>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d003      	beq.n	800f5d6 <TIM_OC3_SetConfig+0xe6>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f648 <TIM_OC3_SetConfig+0x158>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d113      	bne.n	800f5fe <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f5dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f5e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	011b      	lsls	r3, r3, #4
 800f5ec:	693a      	ldr	r2, [r7, #16]
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	699b      	ldr	r3, [r3, #24]
 800f5f6:	011b      	lsls	r3, r3, #4
 800f5f8:	693a      	ldr	r2, [r7, #16]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	685a      	ldr	r2, [r3, #4]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	621a      	str	r2, [r3, #32]
}
 800f618:	bf00      	nop
 800f61a:	371c      	adds	r7, #28
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr
 800f624:	40012c00 	.word	0x40012c00
 800f628:	50012c00 	.word	0x50012c00
 800f62c:	40013400 	.word	0x40013400
 800f630:	50013400 	.word	0x50013400
 800f634:	40014000 	.word	0x40014000
 800f638:	50014000 	.word	0x50014000
 800f63c:	40014400 	.word	0x40014400
 800f640:	50014400 	.word	0x50014400
 800f644:	40014800 	.word	0x40014800
 800f648:	50014800 	.word	0x50014800

0800f64c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b087      	sub	sp, #28
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6a1b      	ldr	r3, [r3, #32]
 800f660:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	69db      	ldr	r3, [r3, #28]
 800f672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f67a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	021b      	lsls	r3, r3, #8
 800f68e:	68fa      	ldr	r2, [r7, #12]
 800f690:	4313      	orrs	r3, r2
 800f692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f69a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	031b      	lsls	r3, r3, #12
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a36      	ldr	r2, [pc, #216]	@ (800f784 <TIM_OC4_SetConfig+0x138>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d00b      	beq.n	800f6c8 <TIM_OC4_SetConfig+0x7c>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a35      	ldr	r2, [pc, #212]	@ (800f788 <TIM_OC4_SetConfig+0x13c>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d007      	beq.n	800f6c8 <TIM_OC4_SetConfig+0x7c>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4a34      	ldr	r2, [pc, #208]	@ (800f78c <TIM_OC4_SetConfig+0x140>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d003      	beq.n	800f6c8 <TIM_OC4_SetConfig+0x7c>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4a33      	ldr	r2, [pc, #204]	@ (800f790 <TIM_OC4_SetConfig+0x144>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d10d      	bne.n	800f6e4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f6ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	031b      	lsls	r3, r3, #12
 800f6d6:	697a      	ldr	r2, [r7, #20]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f6e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a27      	ldr	r2, [pc, #156]	@ (800f784 <TIM_OC4_SetConfig+0x138>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d023      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a26      	ldr	r2, [pc, #152]	@ (800f788 <TIM_OC4_SetConfig+0x13c>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d01f      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a25      	ldr	r2, [pc, #148]	@ (800f78c <TIM_OC4_SetConfig+0x140>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d01b      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a24      	ldr	r2, [pc, #144]	@ (800f790 <TIM_OC4_SetConfig+0x144>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d017      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a23      	ldr	r2, [pc, #140]	@ (800f794 <TIM_OC4_SetConfig+0x148>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d013      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a22      	ldr	r2, [pc, #136]	@ (800f798 <TIM_OC4_SetConfig+0x14c>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d00f      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a21      	ldr	r2, [pc, #132]	@ (800f79c <TIM_OC4_SetConfig+0x150>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d00b      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a20      	ldr	r2, [pc, #128]	@ (800f7a0 <TIM_OC4_SetConfig+0x154>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d007      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a1f      	ldr	r2, [pc, #124]	@ (800f7a4 <TIM_OC4_SetConfig+0x158>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d003      	beq.n	800f734 <TIM_OC4_SetConfig+0xe8>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a1e      	ldr	r2, [pc, #120]	@ (800f7a8 <TIM_OC4_SetConfig+0x15c>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d113      	bne.n	800f75c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f73a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f742:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	695b      	ldr	r3, [r3, #20]
 800f748:	019b      	lsls	r3, r3, #6
 800f74a:	693a      	ldr	r2, [r7, #16]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	699b      	ldr	r3, [r3, #24]
 800f754:	019b      	lsls	r3, r3, #6
 800f756:	693a      	ldr	r2, [r7, #16]
 800f758:	4313      	orrs	r3, r2
 800f75a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	697a      	ldr	r2, [r7, #20]
 800f774:	621a      	str	r2, [r3, #32]
}
 800f776:	bf00      	nop
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	40012c00 	.word	0x40012c00
 800f788:	50012c00 	.word	0x50012c00
 800f78c:	40013400 	.word	0x40013400
 800f790:	50013400 	.word	0x50013400
 800f794:	40014000 	.word	0x40014000
 800f798:	50014000 	.word	0x50014000
 800f79c:	40014400 	.word	0x40014400
 800f7a0:	50014400 	.word	0x50014400
 800f7a4:	40014800 	.word	0x40014800
 800f7a8:	50014800 	.word	0x50014800

0800f7ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b087      	sub	sp, #28
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6a1b      	ldr	r3, [r3, #32]
 800f7ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a1b      	ldr	r3, [r3, #32]
 800f7c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f7da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f7f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	041b      	lsls	r3, r3, #16
 800f7f8:	693a      	ldr	r2, [r7, #16]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a21      	ldr	r2, [pc, #132]	@ (800f888 <TIM_OC5_SetConfig+0xdc>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d023      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a20      	ldr	r2, [pc, #128]	@ (800f88c <TIM_OC5_SetConfig+0xe0>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d01f      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a1f      	ldr	r2, [pc, #124]	@ (800f890 <TIM_OC5_SetConfig+0xe4>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d01b      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a1e      	ldr	r2, [pc, #120]	@ (800f894 <TIM_OC5_SetConfig+0xe8>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d017      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a1d      	ldr	r2, [pc, #116]	@ (800f898 <TIM_OC5_SetConfig+0xec>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d013      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a1c      	ldr	r2, [pc, #112]	@ (800f89c <TIM_OC5_SetConfig+0xf0>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d00f      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a1b      	ldr	r2, [pc, #108]	@ (800f8a0 <TIM_OC5_SetConfig+0xf4>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d00b      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a1a      	ldr	r2, [pc, #104]	@ (800f8a4 <TIM_OC5_SetConfig+0xf8>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d007      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a19      	ldr	r2, [pc, #100]	@ (800f8a8 <TIM_OC5_SetConfig+0xfc>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d003      	beq.n	800f84e <TIM_OC5_SetConfig+0xa2>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a18      	ldr	r2, [pc, #96]	@ (800f8ac <TIM_OC5_SetConfig+0x100>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d109      	bne.n	800f862 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	695b      	ldr	r3, [r3, #20]
 800f85a:	021b      	lsls	r3, r3, #8
 800f85c:	697a      	ldr	r2, [r7, #20]
 800f85e:	4313      	orrs	r3, r2
 800f860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	685a      	ldr	r2, [r3, #4]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	621a      	str	r2, [r3, #32]
}
 800f87c:	bf00      	nop
 800f87e:	371c      	adds	r7, #28
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr
 800f888:	40012c00 	.word	0x40012c00
 800f88c:	50012c00 	.word	0x50012c00
 800f890:	40013400 	.word	0x40013400
 800f894:	50013400 	.word	0x50013400
 800f898:	40014000 	.word	0x40014000
 800f89c:	50014000 	.word	0x50014000
 800f8a0:	40014400 	.word	0x40014400
 800f8a4:	50014400 	.word	0x50014400
 800f8a8:	40014800 	.word	0x40014800
 800f8ac:	50014800 	.word	0x50014800

0800f8b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b087      	sub	sp, #28
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6a1b      	ldr	r3, [r3, #32]
 800f8be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6a1b      	ldr	r3, [r3, #32]
 800f8c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f8de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	021b      	lsls	r3, r3, #8
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f8f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	051b      	lsls	r3, r3, #20
 800f8fe:	693a      	ldr	r2, [r7, #16]
 800f900:	4313      	orrs	r3, r2
 800f902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4a22      	ldr	r2, [pc, #136]	@ (800f990 <TIM_OC6_SetConfig+0xe0>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d023      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a21      	ldr	r2, [pc, #132]	@ (800f994 <TIM_OC6_SetConfig+0xe4>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d01f      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4a20      	ldr	r2, [pc, #128]	@ (800f998 <TIM_OC6_SetConfig+0xe8>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d01b      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a1f      	ldr	r2, [pc, #124]	@ (800f99c <TIM_OC6_SetConfig+0xec>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d017      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a1e      	ldr	r2, [pc, #120]	@ (800f9a0 <TIM_OC6_SetConfig+0xf0>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d013      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a1d      	ldr	r2, [pc, #116]	@ (800f9a4 <TIM_OC6_SetConfig+0xf4>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d00f      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a1c      	ldr	r2, [pc, #112]	@ (800f9a8 <TIM_OC6_SetConfig+0xf8>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d00b      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a1b      	ldr	r2, [pc, #108]	@ (800f9ac <TIM_OC6_SetConfig+0xfc>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d007      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a1a      	ldr	r2, [pc, #104]	@ (800f9b0 <TIM_OC6_SetConfig+0x100>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d003      	beq.n	800f954 <TIM_OC6_SetConfig+0xa4>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a19      	ldr	r2, [pc, #100]	@ (800f9b4 <TIM_OC6_SetConfig+0x104>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d109      	bne.n	800f968 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f95a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	695b      	ldr	r3, [r3, #20]
 800f960:	029b      	lsls	r3, r3, #10
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	4313      	orrs	r3, r2
 800f966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	697a      	ldr	r2, [r7, #20]
 800f96c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	685a      	ldr	r2, [r3, #4]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	693a      	ldr	r2, [r7, #16]
 800f980:	621a      	str	r2, [r3, #32]
}
 800f982:	bf00      	nop
 800f984:	371c      	adds	r7, #28
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	40012c00 	.word	0x40012c00
 800f994:	50012c00 	.word	0x50012c00
 800f998:	40013400 	.word	0x40013400
 800f99c:	50013400 	.word	0x50013400
 800f9a0:	40014000 	.word	0x40014000
 800f9a4:	50014000 	.word	0x50014000
 800f9a8:	40014400 	.word	0x40014400
 800f9ac:	50014400 	.word	0x50014400
 800f9b0:	40014800 	.word	0x40014800
 800f9b4:	50014800 	.word	0x50014800

0800f9b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b085      	sub	sp, #20
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d101      	bne.n	800f9d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f9cc:	2302      	movs	r3, #2
 800f9ce:	e097      	b.n	800fb00 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2202      	movs	r2, #2
 800f9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a45      	ldr	r2, [pc, #276]	@ (800fb0c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d00e      	beq.n	800fa18 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4a44      	ldr	r2, [pc, #272]	@ (800fb10 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d009      	beq.n	800fa18 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a42      	ldr	r2, [pc, #264]	@ (800fb14 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d004      	beq.n	800fa18 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4a41      	ldr	r2, [pc, #260]	@ (800fb18 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d108      	bne.n	800fa2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fa1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fa30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4a2f      	ldr	r2, [pc, #188]	@ (800fb0c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d040      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a2e      	ldr	r2, [pc, #184]	@ (800fb10 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d03b      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa64:	d036      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fa6e:	d031      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a29      	ldr	r2, [pc, #164]	@ (800fb1c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d02c      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a28      	ldr	r2, [pc, #160]	@ (800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d027      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4a26      	ldr	r2, [pc, #152]	@ (800fb24 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d022      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4a25      	ldr	r2, [pc, #148]	@ (800fb28 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d01d      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a23      	ldr	r2, [pc, #140]	@ (800fb2c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d018      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	4a22      	ldr	r2, [pc, #136]	@ (800fb30 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d013      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a18      	ldr	r2, [pc, #96]	@ (800fb14 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d00e      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a17      	ldr	r2, [pc, #92]	@ (800fb18 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d009      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4a1b      	ldr	r2, [pc, #108]	@ (800fb34 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d004      	beq.n	800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a1a      	ldr	r2, [pc, #104]	@ (800fb38 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d10c      	bne.n	800faee <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	4313      	orrs	r3, r2
 800fae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	68ba      	ldr	r2, [r7, #8]
 800faec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr
 800fb0c:	40012c00 	.word	0x40012c00
 800fb10:	50012c00 	.word	0x50012c00
 800fb14:	40013400 	.word	0x40013400
 800fb18:	50013400 	.word	0x50013400
 800fb1c:	40000400 	.word	0x40000400
 800fb20:	50000400 	.word	0x50000400
 800fb24:	40000800 	.word	0x40000800
 800fb28:	50000800 	.word	0x50000800
 800fb2c:	40000c00 	.word	0x40000c00
 800fb30:	50000c00 	.word	0x50000c00
 800fb34:	40014000 	.word	0x40014000
 800fb38:	50014000 	.word	0x50014000

0800fb3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d101      	bne.n	800fb4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e042      	b.n	800fbd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d106      	bne.n	800fb66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7f2 fbb7 	bl	80022d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2224      	movs	r2, #36	@ 0x24
 800fb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f022 0201 	bic.w	r2, r2, #1
 800fb7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fd02 	bl	8010590 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 fb51 	bl	8010234 <UART_SetConfig>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d101      	bne.n	800fb9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e01b      	b.n	800fbd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fbaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	689a      	ldr	r2, [r3, #8]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fbba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f042 0201 	orr.w	r2, r2, #1
 800fbca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fd81 	bl	80106d4 <UART_CheckIdleState>
 800fbd2:	4603      	mov	r3, r0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b0ba      	sub	sp, #232	@ 0xe8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	69db      	ldr	r3, [r3, #28]
 800fbea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fc06:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fc10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d11b      	bne.n	800fc50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc1c:	f003 0320 	and.w	r3, r3, #32
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d015      	beq.n	800fc50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc28:	f003 0320 	and.w	r3, r3, #32
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d105      	bne.n	800fc3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d009      	beq.n	800fc50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f000 82cb 	beq.w	80101dc <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	4798      	blx	r3
      }
      return;
 800fc4e:	e2c5      	b.n	80101dc <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f000 8123 	beq.w	800fea0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc5e:	4b8d      	ldr	r3, [pc, #564]	@ (800fe94 <HAL_UART_IRQHandler+0x2b8>)
 800fc60:	4013      	ands	r3, r2
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d106      	bne.n	800fc74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fc6a:	4b8b      	ldr	r3, [pc, #556]	@ (800fe98 <HAL_UART_IRQHandler+0x2bc>)
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f000 8116 	beq.w	800fea0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d011      	beq.n	800fca4 <HAL_UART_IRQHandler+0xc8>
 800fc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2201      	movs	r2, #1
 800fc92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc9a:	f043 0201 	orr.w	r2, r3, #1
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fca8:	f003 0302 	and.w	r3, r3, #2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d011      	beq.n	800fcd4 <HAL_UART_IRQHandler+0xf8>
 800fcb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00b      	beq.n	800fcd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2202      	movs	r2, #2
 800fcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcca:	f043 0204 	orr.w	r2, r3, #4
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcd8:	f003 0304 	and.w	r3, r3, #4
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d011      	beq.n	800fd04 <HAL_UART_IRQHandler+0x128>
 800fce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fce4:	f003 0301 	and.w	r3, r3, #1
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00b      	beq.n	800fd04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2204      	movs	r2, #4
 800fcf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcfa:	f043 0202 	orr.w	r2, r3, #2
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd08:	f003 0308 	and.w	r3, r3, #8
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d017      	beq.n	800fd40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd14:	f003 0320 	and.w	r3, r3, #32
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d105      	bne.n	800fd28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fd1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fd20:	4b5c      	ldr	r3, [pc, #368]	@ (800fe94 <HAL_UART_IRQHandler+0x2b8>)
 800fd22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00b      	beq.n	800fd40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2208      	movs	r2, #8
 800fd2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd36:	f043 0208 	orr.w	r2, r3, #8
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d012      	beq.n	800fd72 <HAL_UART_IRQHandler+0x196>
 800fd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00c      	beq.n	800fd72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd68:	f043 0220 	orr.w	r2, r3, #32
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f000 8231 	beq.w	80101e0 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd82:	f003 0320 	and.w	r3, r3, #32
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d013      	beq.n	800fdb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd8e:	f003 0320 	and.w	r3, r3, #32
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d105      	bne.n	800fda2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d007      	beq.n	800fdb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	689b      	ldr	r3, [r3, #8]
 800fdc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdc6:	2b40      	cmp	r3, #64	@ 0x40
 800fdc8:	d005      	beq.n	800fdd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fdca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fdce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d054      	beq.n	800fe80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f000 fd93 	bl	8010902 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fde6:	2b40      	cmp	r3, #64	@ 0x40
 800fde8:	d146      	bne.n	800fe78 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3308      	adds	r3, #8
 800fdf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fdf8:	e853 3f00 	ldrex	r3, [r3]
 800fdfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fe00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	3308      	adds	r3, #8
 800fe12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fe16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fe1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fe22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fe26:	e841 2300 	strex	r3, r2, [r1]
 800fe2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fe2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d1d9      	bne.n	800fdea <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d017      	beq.n	800fe70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe46:	4a15      	ldr	r2, [pc, #84]	@ (800fe9c <HAL_UART_IRQHandler+0x2c0>)
 800fe48:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7f5 fc69 	bl	8005728 <HAL_DMA_Abort_IT>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d019      	beq.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fe6a:	4610      	mov	r0, r2
 800fe6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe6e:	e00f      	b.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 f9c9 	bl	8010208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe76:	e00b      	b.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 f9c5 	bl	8010208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe7e:	e007      	b.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 f9c1 	bl	8010208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fe8e:	e1a7      	b.n	80101e0 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe90:	bf00      	nop
    return;
 800fe92:	e1a5      	b.n	80101e0 <HAL_UART_IRQHandler+0x604>
 800fe94:	10000001 	.word	0x10000001
 800fe98:	04000120 	.word	0x04000120
 800fe9c:	080109cf 	.word	0x080109cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	f040 8150 	bne.w	801014a <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800feaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feae:	f003 0310 	and.w	r3, r3, #16
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f000 8149 	beq.w	801014a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800feb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800febc:	f003 0310 	and.w	r3, r3, #16
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f000 8142 	beq.w	801014a <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2210      	movs	r2, #16
 800fecc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fed8:	2b40      	cmp	r3, #64	@ 0x40
 800feda:	f040 80b8 	bne.w	801004e <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fee8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800feec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 8177 	beq.w	80101e4 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fefc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff00:	429a      	cmp	r2, r3
 800ff02:	f080 816f 	bcs.w	80101e4 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff18:	2b81      	cmp	r3, #129	@ 0x81
 800ff1a:	f000 8087 	beq.w	801002c <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff2a:	e853 3f00 	ldrex	r3, [r3]
 800ff2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ff32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	461a      	mov	r2, r3
 800ff44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ff48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ff4c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff50:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ff54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff58:	e841 2300 	strex	r3, r2, [r1]
 800ff5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ff60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1da      	bne.n	800ff1e <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3308      	adds	r3, #8
 800ff6e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff72:	e853 3f00 	ldrex	r3, [r3]
 800ff76:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ff78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff7a:	f023 0301 	bic.w	r3, r3, #1
 800ff7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	3308      	adds	r3, #8
 800ff88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ff8c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ff90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff92:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ff94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff98:	e841 2300 	strex	r3, r2, [r1]
 800ff9c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ff9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1e1      	bne.n	800ff68 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	3308      	adds	r3, #8
 800ffaa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ffae:	e853 3f00 	ldrex	r3, [r3]
 800ffb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ffb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	3308      	adds	r3, #8
 800ffc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ffc8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ffca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffcc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ffce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ffd0:	e841 2300 	strex	r3, r2, [r1]
 800ffd4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ffd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1e3      	bne.n	800ffa4 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2220      	movs	r2, #32
 800ffe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fff2:	e853 3f00 	ldrex	r3, [r3]
 800fff6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fffa:	f023 0310 	bic.w	r3, r3, #16
 800fffe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	461a      	mov	r2, r3
 8010008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801000c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801000e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010012:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010014:	e841 2300 	strex	r3, r2, [r1]
 8010018:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801001a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801001c:	2b00      	cmp	r3, #0
 801001e:	d1e4      	bne.n	800ffea <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010026:	4618      	mov	r0, r3
 8010028:	f7f5 fb02 	bl	8005630 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2202      	movs	r2, #2
 8010030:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801003e:	b29b      	uxth	r3, r3
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	b29b      	uxth	r3, r3
 8010044:	4619      	mov	r1, r3
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f8e8 	bl	801021c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801004c:	e0ca      	b.n	80101e4 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801005a:	b29b      	uxth	r3, r3
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010068:	b29b      	uxth	r3, r3
 801006a:	2b00      	cmp	r3, #0
 801006c:	f000 80bc 	beq.w	80101e8 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8010070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010074:	2b00      	cmp	r3, #0
 8010076:	f000 80b7 	beq.w	80101e8 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010082:	e853 3f00 	ldrex	r3, [r3]
 8010086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801008a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801008e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	461a      	mov	r2, r3
 8010098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801009c:	647b      	str	r3, [r7, #68]	@ 0x44
 801009e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80100a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100a4:	e841 2300 	strex	r3, r2, [r1]
 80100a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80100aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d1e4      	bne.n	801007a <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	3308      	adds	r3, #8
 80100b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ba:	e853 3f00 	ldrex	r3, [r3]
 80100be:	623b      	str	r3, [r7, #32]
   return(result);
 80100c0:	6a3b      	ldr	r3, [r7, #32]
 80100c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80100c6:	f023 0301 	bic.w	r3, r3, #1
 80100ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	3308      	adds	r3, #8
 80100d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80100d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80100da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100e0:	e841 2300 	strex	r3, r2, [r1]
 80100e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80100e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1e1      	bne.n	80100b0 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2220      	movs	r2, #32
 80100f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	e853 3f00 	ldrex	r3, [r3]
 801010c:	60fb      	str	r3, [r7, #12]
   return(result);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f023 0310 	bic.w	r3, r3, #16
 8010114:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	461a      	mov	r2, r3
 801011e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010122:	61fb      	str	r3, [r7, #28]
 8010124:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010126:	69b9      	ldr	r1, [r7, #24]
 8010128:	69fa      	ldr	r2, [r7, #28]
 801012a:	e841 2300 	strex	r3, r2, [r1]
 801012e:	617b      	str	r3, [r7, #20]
   return(result);
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1e4      	bne.n	8010100 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2202      	movs	r2, #2
 801013a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801013c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010140:	4619      	mov	r1, r3
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 f86a 	bl	801021c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010148:	e04e      	b.n	80101e8 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801014a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801014e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010152:	2b00      	cmp	r3, #0
 8010154:	d014      	beq.n	8010180 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801015a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801015e:	2b00      	cmp	r3, #0
 8010160:	d105      	bne.n	801016e <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801016a:	2b00      	cmp	r3, #0
 801016c:	d008      	beq.n	8010180 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010172:	2b00      	cmp	r3, #0
 8010174:	d03a      	beq.n	80101ec <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	4798      	blx	r3
    }
    return;
 801017e:	e035      	b.n	80101ec <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010188:	2b00      	cmp	r3, #0
 801018a:	d009      	beq.n	80101a0 <HAL_UART_IRQHandler+0x5c4>
 801018c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010194:	2b00      	cmp	r3, #0
 8010196:	d003      	beq.n	80101a0 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 fc2e 	bl	80109fa <UART_EndTransmit_IT>
    return;
 801019e:	e026      	b.n	80101ee <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80101a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d009      	beq.n	80101c0 <HAL_UART_IRQHandler+0x5e4>
 80101ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d003      	beq.n	80101c0 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 fc53 	bl	8010a64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101be:	e016      	b.n	80101ee <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80101c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d010      	beq.n	80101ee <HAL_UART_IRQHandler+0x612>
 80101cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	da0c      	bge.n	80101ee <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 fc3b 	bl	8010a50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101da:	e008      	b.n	80101ee <HAL_UART_IRQHandler+0x612>
      return;
 80101dc:	bf00      	nop
 80101de:	e006      	b.n	80101ee <HAL_UART_IRQHandler+0x612>
    return;
 80101e0:	bf00      	nop
 80101e2:	e004      	b.n	80101ee <HAL_UART_IRQHandler+0x612>
      return;
 80101e4:	bf00      	nop
 80101e6:	e002      	b.n	80101ee <HAL_UART_IRQHandler+0x612>
      return;
 80101e8:	bf00      	nop
 80101ea:	e000      	b.n	80101ee <HAL_UART_IRQHandler+0x612>
    return;
 80101ec:	bf00      	nop
  }
}
 80101ee:	37e8      	adds	r7, #232	@ 0xe8
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80101fc:	bf00      	nop
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010210:	bf00      	nop
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	460b      	mov	r3, r1
 8010226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010228:	bf00      	nop
 801022a:	370c      	adds	r7, #12
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr

08010234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010238:	b094      	sub	sp, #80	@ 0x50
 801023a:	af00      	add	r7, sp, #0
 801023c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801023e:	2300      	movs	r3, #0
 8010240:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	4b83      	ldr	r3, [pc, #524]	@ (8010458 <UART_SetConfig+0x224>)
 801024a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801024c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024e:	689a      	ldr	r2, [r3, #8]
 8010250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010252:	691b      	ldr	r3, [r3, #16]
 8010254:	431a      	orrs	r2, r3
 8010256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010258:	695b      	ldr	r3, [r3, #20]
 801025a:	431a      	orrs	r2, r3
 801025c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025e:	69db      	ldr	r3, [r3, #28]
 8010260:	4313      	orrs	r3, r2
 8010262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	497c      	ldr	r1, [pc, #496]	@ (801045c <UART_SetConfig+0x228>)
 801026c:	4019      	ands	r1, r3
 801026e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010274:	430b      	orrs	r3, r1
 8010276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010284:	68d9      	ldr	r1, [r3, #12]
 8010286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	ea40 0301 	orr.w	r3, r0, r1
 801028e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	4b6f      	ldr	r3, [pc, #444]	@ (8010458 <UART_SetConfig+0x224>)
 801029c:	429a      	cmp	r2, r3
 801029e:	d009      	beq.n	80102b4 <UART_SetConfig+0x80>
 80102a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a2:	681a      	ldr	r2, [r3, #0]
 80102a4:	4b6e      	ldr	r3, [pc, #440]	@ (8010460 <UART_SetConfig+0x22c>)
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d004      	beq.n	80102b4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80102aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ac:	6a1a      	ldr	r2, [r3, #32]
 80102ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102b0:	4313      	orrs	r3, r2
 80102b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80102b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80102be:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80102c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102c8:	430b      	orrs	r3, r1
 80102ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80102cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102d2:	f023 000f 	bic.w	r0, r3, #15
 80102d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80102da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	ea40 0301 	orr.w	r3, r0, r1
 80102e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	4b5e      	ldr	r3, [pc, #376]	@ (8010464 <UART_SetConfig+0x230>)
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d102      	bne.n	80102f4 <UART_SetConfig+0xc0>
 80102ee:	2301      	movs	r3, #1
 80102f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102f2:	e032      	b.n	801035a <UART_SetConfig+0x126>
 80102f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	4b5b      	ldr	r3, [pc, #364]	@ (8010468 <UART_SetConfig+0x234>)
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d102      	bne.n	8010304 <UART_SetConfig+0xd0>
 80102fe:	2302      	movs	r3, #2
 8010300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010302:	e02a      	b.n	801035a <UART_SetConfig+0x126>
 8010304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	4b58      	ldr	r3, [pc, #352]	@ (801046c <UART_SetConfig+0x238>)
 801030a:	429a      	cmp	r2, r3
 801030c:	d102      	bne.n	8010314 <UART_SetConfig+0xe0>
 801030e:	2304      	movs	r3, #4
 8010310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010312:	e022      	b.n	801035a <UART_SetConfig+0x126>
 8010314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	4b55      	ldr	r3, [pc, #340]	@ (8010470 <UART_SetConfig+0x23c>)
 801031a:	429a      	cmp	r2, r3
 801031c:	d102      	bne.n	8010324 <UART_SetConfig+0xf0>
 801031e:	2308      	movs	r3, #8
 8010320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010322:	e01a      	b.n	801035a <UART_SetConfig+0x126>
 8010324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	4b52      	ldr	r3, [pc, #328]	@ (8010474 <UART_SetConfig+0x240>)
 801032a:	429a      	cmp	r2, r3
 801032c:	d102      	bne.n	8010334 <UART_SetConfig+0x100>
 801032e:	2310      	movs	r3, #16
 8010330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010332:	e012      	b.n	801035a <UART_SetConfig+0x126>
 8010334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	4b4f      	ldr	r3, [pc, #316]	@ (8010478 <UART_SetConfig+0x244>)
 801033a:	429a      	cmp	r2, r3
 801033c:	d103      	bne.n	8010346 <UART_SetConfig+0x112>
 801033e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8010342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010344:	e009      	b.n	801035a <UART_SetConfig+0x126>
 8010346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	4b43      	ldr	r3, [pc, #268]	@ (8010458 <UART_SetConfig+0x224>)
 801034c:	429a      	cmp	r2, r3
 801034e:	d102      	bne.n	8010356 <UART_SetConfig+0x122>
 8010350:	2320      	movs	r3, #32
 8010352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010354:	e001      	b.n	801035a <UART_SetConfig+0x126>
 8010356:	2300      	movs	r3, #0
 8010358:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801035a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801035c:	681a      	ldr	r2, [r3, #0]
 801035e:	4b3e      	ldr	r3, [pc, #248]	@ (8010458 <UART_SetConfig+0x224>)
 8010360:	429a      	cmp	r2, r3
 8010362:	d005      	beq.n	8010370 <UART_SetConfig+0x13c>
 8010364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	4b3d      	ldr	r3, [pc, #244]	@ (8010460 <UART_SetConfig+0x22c>)
 801036a:	429a      	cmp	r2, r3
 801036c:	f040 8088 	bne.w	8010480 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010372:	2200      	movs	r2, #0
 8010374:	623b      	str	r3, [r7, #32]
 8010376:	627a      	str	r2, [r7, #36]	@ 0x24
 8010378:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801037c:	f7fc f9b4 	bl	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010380:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010384:	2b00      	cmp	r3, #0
 8010386:	f000 80eb 	beq.w	8010560 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801038a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801038c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801038e:	4a3b      	ldr	r2, [pc, #236]	@ (801047c <UART_SetConfig+0x248>)
 8010390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010394:	461a      	mov	r2, r3
 8010396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010398:	fbb3 f3f2 	udiv	r3, r3, r2
 801039c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801039e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	4613      	mov	r3, r2
 80103a4:	005b      	lsls	r3, r3, #1
 80103a6:	4413      	add	r3, r2
 80103a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d305      	bcc.n	80103ba <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80103ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d903      	bls.n	80103c2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80103ba:	2301      	movs	r3, #1
 80103bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80103c0:	e048      	b.n	8010454 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103c4:	2200      	movs	r2, #0
 80103c6:	61bb      	str	r3, [r7, #24]
 80103c8:	61fa      	str	r2, [r7, #28]
 80103ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103ce:	4a2b      	ldr	r2, [pc, #172]	@ (801047c <UART_SetConfig+0x248>)
 80103d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	2200      	movs	r2, #0
 80103d8:	613b      	str	r3, [r7, #16]
 80103da:	617a      	str	r2, [r7, #20]
 80103dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80103e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80103e4:	f7ef ff66 	bl	80002b4 <__aeabi_uldivmod>
 80103e8:	4602      	mov	r2, r0
 80103ea:	460b      	mov	r3, r1
 80103ec:	4610      	mov	r0, r2
 80103ee:	4619      	mov	r1, r3
 80103f0:	f04f 0200 	mov.w	r2, #0
 80103f4:	f04f 0300 	mov.w	r3, #0
 80103f8:	020b      	lsls	r3, r1, #8
 80103fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80103fe:	0202      	lsls	r2, r0, #8
 8010400:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010402:	6849      	ldr	r1, [r1, #4]
 8010404:	0849      	lsrs	r1, r1, #1
 8010406:	2000      	movs	r0, #0
 8010408:	460c      	mov	r4, r1
 801040a:	4605      	mov	r5, r0
 801040c:	eb12 0804 	adds.w	r8, r2, r4
 8010410:	eb43 0905 	adc.w	r9, r3, r5
 8010414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	60bb      	str	r3, [r7, #8]
 801041c:	60fa      	str	r2, [r7, #12]
 801041e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010422:	4640      	mov	r0, r8
 8010424:	4649      	mov	r1, r9
 8010426:	f7ef ff45 	bl	80002b4 <__aeabi_uldivmod>
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	4613      	mov	r3, r2
 8010430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010438:	d308      	bcc.n	801044c <UART_SetConfig+0x218>
 801043a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801043c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010440:	d204      	bcs.n	801044c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8010442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010448:	60da      	str	r2, [r3, #12]
 801044a:	e003      	b.n	8010454 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 801044c:	2301      	movs	r3, #1
 801044e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010452:	e085      	b.n	8010560 <UART_SetConfig+0x32c>
 8010454:	e084      	b.n	8010560 <UART_SetConfig+0x32c>
 8010456:	bf00      	nop
 8010458:	46002400 	.word	0x46002400
 801045c:	cfff69f3 	.word	0xcfff69f3
 8010460:	56002400 	.word	0x56002400
 8010464:	40013800 	.word	0x40013800
 8010468:	40004400 	.word	0x40004400
 801046c:	40004800 	.word	0x40004800
 8010470:	40004c00 	.word	0x40004c00
 8010474:	40005000 	.word	0x40005000
 8010478:	40006400 	.word	0x40006400
 801047c:	08011698 	.word	0x08011698
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010482:	69db      	ldr	r3, [r3, #28]
 8010484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010488:	d13c      	bne.n	8010504 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801048a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801048c:	2200      	movs	r2, #0
 801048e:	603b      	str	r3, [r7, #0]
 8010490:	607a      	str	r2, [r7, #4]
 8010492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010496:	f7fc f927 	bl	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq>
 801049a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801049c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d05e      	beq.n	8010560 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104a6:	4a39      	ldr	r2, [pc, #228]	@ (801058c <UART_SetConfig+0x358>)
 80104a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104ac:	461a      	mov	r2, r3
 80104ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80104b4:	005a      	lsls	r2, r3, #1
 80104b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	085b      	lsrs	r3, r3, #1
 80104bc:	441a      	add	r2, r3
 80104be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80104c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104ca:	2b0f      	cmp	r3, #15
 80104cc:	d916      	bls.n	80104fc <UART_SetConfig+0x2c8>
 80104ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104d4:	d212      	bcs.n	80104fc <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80104d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104d8:	b29b      	uxth	r3, r3
 80104da:	f023 030f 	bic.w	r3, r3, #15
 80104de:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80104e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104e2:	085b      	lsrs	r3, r3, #1
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	f003 0307 	and.w	r3, r3, #7
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80104ee:	4313      	orrs	r3, r2
 80104f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80104f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80104f8:	60da      	str	r2, [r3, #12]
 80104fa:	e031      	b.n	8010560 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80104fc:	2301      	movs	r3, #1
 80104fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010502:	e02d      	b.n	8010560 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010506:	2200      	movs	r2, #0
 8010508:	469a      	mov	sl, r3
 801050a:	4693      	mov	fp, r2
 801050c:	4650      	mov	r0, sl
 801050e:	4659      	mov	r1, fp
 8010510:	f7fc f8ea 	bl	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010514:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010518:	2b00      	cmp	r3, #0
 801051a:	d021      	beq.n	8010560 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801051c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010520:	4a1a      	ldr	r2, [pc, #104]	@ (801058c <UART_SetConfig+0x358>)
 8010522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010526:	461a      	mov	r2, r3
 8010528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801052a:	fbb3 f2f2 	udiv	r2, r3, r2
 801052e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	085b      	lsrs	r3, r3, #1
 8010534:	441a      	add	r2, r3
 8010536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	fbb2 f3f3 	udiv	r3, r2, r3
 801053e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010542:	2b0f      	cmp	r3, #15
 8010544:	d909      	bls.n	801055a <UART_SetConfig+0x326>
 8010546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801054c:	d205      	bcs.n	801055a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801054e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010550:	b29a      	uxth	r2, r3
 8010552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	60da      	str	r2, [r3, #12]
 8010558:	e002      	b.n	8010560 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801055a:	2301      	movs	r3, #1
 801055c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010562:	2201      	movs	r2, #1
 8010564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056a:	2201      	movs	r2, #1
 801056c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010572:	2200      	movs	r2, #0
 8010574:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010578:	2200      	movs	r2, #0
 801057a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801057c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010580:	4618      	mov	r0, r3
 8010582:	3750      	adds	r7, #80	@ 0x50
 8010584:	46bd      	mov	sp, r7
 8010586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801058a:	bf00      	nop
 801058c:	08011698 	.word	0x08011698

08010590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801059c:	f003 0308 	and.w	r3, r3, #8
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00a      	beq.n	80105ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	430a      	orrs	r2, r1
 80105b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105be:	f003 0301 	and.w	r3, r3, #1
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00a      	beq.n	80105dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	430a      	orrs	r2, r1
 80105da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105e0:	f003 0302 	and.w	r3, r3, #2
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00a      	beq.n	80105fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	430a      	orrs	r2, r1
 80105fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010602:	f003 0304 	and.w	r3, r3, #4
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00a      	beq.n	8010620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	430a      	orrs	r2, r1
 801061e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010624:	f003 0310 	and.w	r3, r3, #16
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00a      	beq.n	8010642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	430a      	orrs	r2, r1
 8010640:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010646:	f003 0320 	and.w	r3, r3, #32
 801064a:	2b00      	cmp	r3, #0
 801064c:	d00a      	beq.n	8010664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	689b      	ldr	r3, [r3, #8]
 8010654:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	430a      	orrs	r2, r1
 8010662:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801066c:	2b00      	cmp	r3, #0
 801066e:	d01a      	beq.n	80106a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	430a      	orrs	r2, r1
 8010684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801068a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801068e:	d10a      	bne.n	80106a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	430a      	orrs	r2, r1
 80106a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00a      	beq.n	80106c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	430a      	orrs	r2, r1
 80106c6:	605a      	str	r2, [r3, #4]
  }
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b098      	sub	sp, #96	@ 0x60
 80106d8:	af02      	add	r7, sp, #8
 80106da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106e4:	f7f2 fa38 	bl	8002b58 <HAL_GetTick>
 80106e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f003 0308 	and.w	r3, r3, #8
 80106f4:	2b08      	cmp	r3, #8
 80106f6:	d12f      	bne.n	8010758 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010700:	2200      	movs	r2, #0
 8010702:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f000 f88e 	bl	8010828 <UART_WaitOnFlagUntilTimeout>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d022      	beq.n	8010758 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801071a:	e853 3f00 	ldrex	r3, [r3]
 801071e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010726:	653b      	str	r3, [r7, #80]	@ 0x50
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	461a      	mov	r2, r3
 801072e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010730:	647b      	str	r3, [r7, #68]	@ 0x44
 8010732:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010734:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010738:	e841 2300 	strex	r3, r2, [r1]
 801073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801073e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010740:	2b00      	cmp	r3, #0
 8010742:	d1e6      	bne.n	8010712 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2220      	movs	r2, #32
 8010748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010754:	2303      	movs	r3, #3
 8010756:	e063      	b.n	8010820 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f003 0304 	and.w	r3, r3, #4
 8010762:	2b04      	cmp	r3, #4
 8010764:	d149      	bne.n	80107fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010766:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801076e:	2200      	movs	r2, #0
 8010770:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f857 	bl	8010828 <UART_WaitOnFlagUntilTimeout>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d03c      	beq.n	80107fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010788:	e853 3f00 	ldrex	r3, [r3]
 801078c:	623b      	str	r3, [r7, #32]
   return(result);
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	461a      	mov	r2, r3
 801079c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801079e:	633b      	str	r3, [r7, #48]	@ 0x30
 80107a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107a6:	e841 2300 	strex	r3, r2, [r1]
 80107aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1e6      	bne.n	8010780 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	3308      	adds	r3, #8
 80107b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	e853 3f00 	ldrex	r3, [r3]
 80107c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f023 0301 	bic.w	r3, r3, #1
 80107c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3308      	adds	r3, #8
 80107d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107d2:	61fa      	str	r2, [r7, #28]
 80107d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d6:	69b9      	ldr	r1, [r7, #24]
 80107d8:	69fa      	ldr	r2, [r7, #28]
 80107da:	e841 2300 	strex	r3, r2, [r1]
 80107de:	617b      	str	r3, [r7, #20]
   return(result);
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1e5      	bne.n	80107b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2220      	movs	r2, #32
 80107ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107f6:	2303      	movs	r3, #3
 80107f8:	e012      	b.n	8010820 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2220      	movs	r2, #32
 80107fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2220      	movs	r2, #32
 8010806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3758      	adds	r7, #88	@ 0x58
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	603b      	str	r3, [r7, #0]
 8010834:	4613      	mov	r3, r2
 8010836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010838:	e04f      	b.n	80108da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010840:	d04b      	beq.n	80108da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010842:	f7f2 f989 	bl	8002b58 <HAL_GetTick>
 8010846:	4602      	mov	r2, r0
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	69ba      	ldr	r2, [r7, #24]
 801084e:	429a      	cmp	r2, r3
 8010850:	d302      	bcc.n	8010858 <UART_WaitOnFlagUntilTimeout+0x30>
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d101      	bne.n	801085c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010858:	2303      	movs	r3, #3
 801085a:	e04e      	b.n	80108fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f003 0304 	and.w	r3, r3, #4
 8010866:	2b00      	cmp	r3, #0
 8010868:	d037      	beq.n	80108da <UART_WaitOnFlagUntilTimeout+0xb2>
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	2b80      	cmp	r3, #128	@ 0x80
 801086e:	d034      	beq.n	80108da <UART_WaitOnFlagUntilTimeout+0xb2>
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2b40      	cmp	r3, #64	@ 0x40
 8010874:	d031      	beq.n	80108da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	69db      	ldr	r3, [r3, #28]
 801087c:	f003 0308 	and.w	r3, r3, #8
 8010880:	2b08      	cmp	r3, #8
 8010882:	d110      	bne.n	80108a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2208      	movs	r2, #8
 801088a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f000 f838 	bl	8010902 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2208      	movs	r2, #8
 8010896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2200      	movs	r2, #0
 801089e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	e029      	b.n	80108fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	69db      	ldr	r3, [r3, #28]
 80108ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108b4:	d111      	bne.n	80108da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80108be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f000 f81e 	bl	8010902 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2220      	movs	r2, #32
 80108ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80108d6:	2303      	movs	r3, #3
 80108d8:	e00f      	b.n	80108fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	69da      	ldr	r2, [r3, #28]
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	4013      	ands	r3, r2
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	bf0c      	ite	eq
 80108ea:	2301      	moveq	r3, #1
 80108ec:	2300      	movne	r3, #0
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	461a      	mov	r2, r3
 80108f2:	79fb      	ldrb	r3, [r7, #7]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d0a0      	beq.n	801083a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010902:	b480      	push	{r7}
 8010904:	b095      	sub	sp, #84	@ 0x54
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010912:	e853 3f00 	ldrex	r3, [r3]
 8010916:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801091e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	461a      	mov	r2, r3
 8010926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010928:	643b      	str	r3, [r7, #64]	@ 0x40
 801092a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801092c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801092e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010930:	e841 2300 	strex	r3, r2, [r1]
 8010934:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010938:	2b00      	cmp	r3, #0
 801093a:	d1e6      	bne.n	801090a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	3308      	adds	r3, #8
 8010942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010944:	6a3b      	ldr	r3, [r7, #32]
 8010946:	e853 3f00 	ldrex	r3, [r3]
 801094a:	61fb      	str	r3, [r7, #28]
   return(result);
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010952:	f023 0301 	bic.w	r3, r3, #1
 8010956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	3308      	adds	r3, #8
 801095e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010968:	e841 2300 	strex	r3, r2, [r1]
 801096c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1e3      	bne.n	801093c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010978:	2b01      	cmp	r3, #1
 801097a:	d118      	bne.n	80109ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	e853 3f00 	ldrex	r3, [r3]
 8010988:	60bb      	str	r3, [r7, #8]
   return(result);
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	f023 0310 	bic.w	r3, r3, #16
 8010990:	647b      	str	r3, [r7, #68]	@ 0x44
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	461a      	mov	r2, r3
 8010998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801099a:	61bb      	str	r3, [r7, #24]
 801099c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801099e:	6979      	ldr	r1, [r7, #20]
 80109a0:	69ba      	ldr	r2, [r7, #24]
 80109a2:	e841 2300 	strex	r3, r2, [r1]
 80109a6:	613b      	str	r3, [r7, #16]
   return(result);
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d1e6      	bne.n	801097c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2220      	movs	r2, #32
 80109b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80109c2:	bf00      	nop
 80109c4:	3754      	adds	r7, #84	@ 0x54
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b084      	sub	sp, #16
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f7ff fc0b 	bl	8010208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109f2:	bf00      	nop
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b088      	sub	sp, #32
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	e853 3f00 	ldrex	r3, [r3]
 8010a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a16:	61fb      	str	r3, [r7, #28]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	61bb      	str	r3, [r7, #24]
 8010a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a24:	6979      	ldr	r1, [r7, #20]
 8010a26:	69ba      	ldr	r2, [r7, #24]
 8010a28:	e841 2300 	strex	r3, r2, [r1]
 8010a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1e6      	bne.n	8010a02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2220      	movs	r2, #32
 8010a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f7ff fbd6 	bl	80101f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a48:	bf00      	nop
 8010a4a:	3720      	adds	r7, #32
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a58:	bf00      	nop
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a6c:	bf00      	nop
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b085      	sub	sp, #20
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d101      	bne.n	8010a8e <HAL_UARTEx_DisableFifoMode+0x16>
 8010a8a:	2302      	movs	r3, #2
 8010a8c:	e027      	b.n	8010ade <HAL_UARTEx_DisableFifoMode+0x66>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2201      	movs	r2, #1
 8010a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2224      	movs	r2, #36	@ 0x24
 8010a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f022 0201 	bic.w	r2, r2, #1
 8010ab4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010abc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2220      	movs	r2, #32
 8010ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010adc:	2300      	movs	r3, #0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3714      	adds	r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b084      	sub	sp, #16
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
 8010af2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d101      	bne.n	8010b02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010afe:	2302      	movs	r3, #2
 8010b00:	e02d      	b.n	8010b5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2201      	movs	r2, #1
 8010b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2224      	movs	r2, #36	@ 0x24
 8010b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f022 0201 	bic.w	r2, r2, #1
 8010b28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	689b      	ldr	r3, [r3, #8]
 8010b30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	683a      	ldr	r2, [r7, #0]
 8010b3a:	430a      	orrs	r2, r1
 8010b3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 f850 	bl	8010be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	68fa      	ldr	r2, [r7, #12]
 8010b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2220      	movs	r2, #32
 8010b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d101      	bne.n	8010b7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b7a:	2302      	movs	r3, #2
 8010b7c:	e02d      	b.n	8010bda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2201      	movs	r2, #1
 8010b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2224      	movs	r2, #36	@ 0x24
 8010b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f022 0201 	bic.w	r2, r2, #1
 8010ba4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	683a      	ldr	r2, [r7, #0]
 8010bb6:	430a      	orrs	r2, r1
 8010bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 f812 	bl	8010be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2220      	movs	r2, #32
 8010bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
	...

08010be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d108      	bne.n	8010c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2201      	movs	r2, #1
 8010c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c04:	e031      	b.n	8010c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c06:	2308      	movs	r3, #8
 8010c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c0a:	2308      	movs	r3, #8
 8010c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	0e5b      	lsrs	r3, r3, #25
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	f003 0307 	and.w	r3, r3, #7
 8010c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	0f5b      	lsrs	r3, r3, #29
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	f003 0307 	and.w	r3, r3, #7
 8010c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c2e:	7bbb      	ldrb	r3, [r7, #14]
 8010c30:	7b3a      	ldrb	r2, [r7, #12]
 8010c32:	4911      	ldr	r1, [pc, #68]	@ (8010c78 <UARTEx_SetNbDataToProcess+0x94>)
 8010c34:	5c8a      	ldrb	r2, [r1, r2]
 8010c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c3a:	7b3a      	ldrb	r2, [r7, #12]
 8010c3c:	490f      	ldr	r1, [pc, #60]	@ (8010c7c <UARTEx_SetNbDataToProcess+0x98>)
 8010c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	7b7a      	ldrb	r2, [r7, #13]
 8010c50:	4909      	ldr	r1, [pc, #36]	@ (8010c78 <UARTEx_SetNbDataToProcess+0x94>)
 8010c52:	5c8a      	ldrb	r2, [r1, r2]
 8010c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c58:	7b7a      	ldrb	r2, [r7, #13]
 8010c5a:	4908      	ldr	r1, [pc, #32]	@ (8010c7c <UARTEx_SetNbDataToProcess+0x98>)
 8010c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010c6a:	bf00      	nop
 8010c6c:	3714      	adds	r7, #20
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	080116b0 	.word	0x080116b0
 8010c7c:	080116b8 	.word	0x080116b8

08010c80 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b086      	sub	sp, #24
 8010c84:	af02      	add	r7, sp, #8
 8010c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010c8c:	f7f1 ff64 	bl	8002b58 <HAL_GetTick>
 8010c90:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d102      	bne.n	8010c9e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	73fb      	strb	r3, [r7, #15]
 8010c9c:	e137      	b.n	8010f0e <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	4a76      	ldr	r2, [pc, #472]	@ (8010e7c <HAL_XSPI_Init+0x1fc>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d008      	beq.n	8010cba <HAL_XSPI_Init+0x3a>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a74      	ldr	r2, [pc, #464]	@ (8010e80 <HAL_XSPI_Init+0x200>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d003      	beq.n	8010cba <HAL_XSPI_Init+0x3a>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4a73      	ldr	r2, [pc, #460]	@ (8010e84 <HAL_XSPI_Init+0x204>)
 8010cb8:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4a72      	ldr	r2, [pc, #456]	@ (8010e88 <HAL_XSPI_Init+0x208>)
 8010cc0:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8010e7c <HAL_XSPI_Init+0x1fc>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d008      	beq.n	8010cde <HAL_XSPI_Init+0x5e>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8010e80 <HAL_XSPI_Init+0x200>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d003      	beq.n	8010cde <HAL_XSPI_Init+0x5e>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a6a      	ldr	r2, [pc, #424]	@ (8010e84 <HAL_XSPI_Init+0x204>)
 8010cdc:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	4a66      	ldr	r2, [pc, #408]	@ (8010e7c <HAL_XSPI_Init+0x1fc>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d008      	beq.n	8010cfa <HAL_XSPI_Init+0x7a>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a64      	ldr	r2, [pc, #400]	@ (8010e80 <HAL_XSPI_Init+0x200>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d003      	beq.n	8010cfa <HAL_XSPI_Init+0x7a>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a63      	ldr	r2, [pc, #396]	@ (8010e84 <HAL_XSPI_Init+0x204>)
 8010cf8:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f040 8102 	bne.w	8010f0e <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7f0 ff92 	bl	8001c34 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010d10:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f000 f8ff 	bl	8010f18 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	689a      	ldr	r2, [r3, #8]
 8010d20:	4b5a      	ldr	r3, [pc, #360]	@ (8010e8c <HAL_XSPI_Init+0x20c>)
 8010d22:	4013      	ands	r3, r2
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	68d1      	ldr	r1, [r2, #12]
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	6912      	ldr	r2, [r2, #16]
 8010d2c:	0412      	lsls	r2, r2, #16
 8010d2e:	4311      	orrs	r1, r2
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	6952      	ldr	r2, [r2, #20]
 8010d34:	3a01      	subs	r2, #1
 8010d36:	0212      	lsls	r2, r2, #8
 8010d38:	4311      	orrs	r1, r2
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	69d2      	ldr	r2, [r2, #28]
 8010d3e:	4311      	orrs	r1, r2
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	6812      	ldr	r2, [r2, #0]
 8010d44:	430b      	orrs	r3, r1
 8010d46:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8010e7c <HAL_XSPI_Init+0x1fc>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d00e      	beq.n	8010d70 <HAL_XSPI_Init+0xf0>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4a4a      	ldr	r2, [pc, #296]	@ (8010e80 <HAL_XSPI_Init+0x200>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d009      	beq.n	8010d70 <HAL_XSPI_Init+0xf0>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4a48      	ldr	r2, [pc, #288]	@ (8010e84 <HAL_XSPI_Init+0x204>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d004      	beq.n	8010d70 <HAL_XSPI_Init+0xf0>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a49      	ldr	r2, [pc, #292]	@ (8010e90 <HAL_XSPI_Init+0x210>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d10a      	bne.n	8010d86 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	f023 0108 	bic.w	r1, r3, #8
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	430a      	orrs	r2, r1
 8010d84:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6a1a      	ldr	r2, [r3, #32]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	430a      	orrs	r2, r1
 8010d9a:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	691b      	ldr	r3, [r3, #16]
 8010da2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010daa:	041a      	lsls	r2, r3, #16
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	430a      	orrs	r2, r1
 8010db2:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4a30      	ldr	r2, [pc, #192]	@ (8010e7c <HAL_XSPI_Init+0x1fc>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d00e      	beq.n	8010ddc <HAL_XSPI_Init+0x15c>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8010e80 <HAL_XSPI_Init+0x200>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d009      	beq.n	8010ddc <HAL_XSPI_Init+0x15c>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8010e84 <HAL_XSPI_Init+0x204>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d004      	beq.n	8010ddc <HAL_XSPI_Init+0x15c>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8010e90 <HAL_XSPI_Init+0x210>)
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d10a      	bne.n	8010df2 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	430a      	orrs	r2, r1
 8010df0:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010dfa:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	021a      	lsls	r2, r3, #8
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	430a      	orrs	r2, r1
 8010e14:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	2120      	movs	r1, #32
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 f887 	bl	8010f36 <XSPI_WaitFlagStateUntilTimeout>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010e2c:	7bfb      	ldrb	r3, [r7, #15]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d16d      	bne.n	8010f0e <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	430a      	orrs	r2, r1
 8010e46:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8010e88 <HAL_XSPI_Init+0x208>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d004      	beq.n	8010e5c <HAL_XSPI_Init+0x1dc>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a0f      	ldr	r2, [pc, #60]	@ (8010e94 <HAL_XSPI_Init+0x214>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d11d      	bne.n	8010e98 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e60:	9300      	str	r3, [sp, #0]
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2200      	movs	r2, #0
 8010e66:	2120      	movs	r1, #32
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 f864 	bl	8010f36 <XSPI_WaitFlagStateUntilTimeout>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8010e72:	7bfb      	ldrb	r3, [r7, #15]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d00f      	beq.n	8010e98 <HAL_XSPI_Init+0x218>
          {
            return status;
 8010e78:	7bfb      	ldrb	r3, [r7, #15]
 8010e7a:	e049      	b.n	8010f10 <HAL_XSPI_Init+0x290>
 8010e7c:	420d1400 	.word	0x420d1400
 8010e80:	520d1400 	.word	0x520d1400
 8010e84:	420d2400 	.word	0x420d2400
 8010e88:	420d3400 	.word	0x420d3400
 8010e8c:	f8e0c0fc 	.word	0xf8e0c0fc
 8010e90:	520d2400 	.word	0x520d2400
 8010e94:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	689a      	ldr	r2, [r3, #8]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	430a      	orrs	r2, r1
 8010eac:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010eb6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ec2:	431a      	orrs	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	430a      	orrs	r2, r1
 8010eca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f042 0201 	orr.w	r2, r2, #1
 8010edc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	2b02      	cmp	r3, #2
 8010ee4:	d107      	bne.n	8010ef6 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	689a      	ldr	r2, [r3, #8]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f042 0202 	orr.w	r2, r2, #2
 8010ef4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010efe:	d103      	bne.n	8010f08 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2201      	movs	r2, #1
 8010f04:	655a      	str	r2, [r3, #84]	@ 0x54
 8010f06:	e002      	b.n	8010f0e <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2202      	movs	r2, #2
 8010f0c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8010f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3710      	adds	r7, #16
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	683a      	ldr	r2, [r7, #0]
 8010f26:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010f28:	2300      	movs	r3, #0
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	370c      	adds	r7, #12
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr

08010f36 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b084      	sub	sp, #16
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	60b9      	str	r1, [r7, #8]
 8010f40:	603b      	str	r3, [r7, #0]
 8010f42:	4613      	mov	r3, r2
 8010f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010f46:	e01a      	b.n	8010f7e <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f4e:	d016      	beq.n	8010f7e <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f50:	f7f1 fe02 	bl	8002b58 <HAL_GetTick>
 8010f54:	4602      	mov	r2, r0
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	69ba      	ldr	r2, [r7, #24]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d302      	bcc.n	8010f66 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d10b      	bne.n	8010f7e <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f6c:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f72:	f043 0201 	orr.w	r2, r3, #1
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	e00e      	b.n	8010f9c <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	6a1a      	ldr	r2, [r3, #32]
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	4013      	ands	r3, r2
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	bf14      	ite	ne
 8010f8c:	2301      	movne	r3, #1
 8010f8e:	2300      	moveq	r3, #0
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	461a      	mov	r2, r3
 8010f94:	79fb      	ldrb	r3, [r7, #7]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d1d6      	bne.n	8010f48 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010f9a:	2300      	movs	r3, #0
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010fa4:	b084      	sub	sp, #16
 8010fa6:	b580      	push	{r7, lr}
 8010fa8:	b084      	sub	sp, #16
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
 8010fae:	f107 001c 	add.w	r0, r7, #28
 8010fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010fb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010fba:	2b03      	cmp	r3, #3
 8010fbc:	d105      	bne.n	8010fca <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	68db      	ldr	r3, [r3, #12]
 8010fc2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 fa8e 	bl	80114ec <USB_CoreReset>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8010fd4:	7fbb      	ldrb	r3, [r7, #30]
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d10b      	bne.n	8010ff2 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	f043 0208 	orr.w	r2, r3, #8
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	689b      	ldr	r3, [r3, #8]
 8010fea:	f043 0220 	orr.w	r2, r3, #32
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ffe:	b004      	add	sp, #16
 8011000:	4770      	bx	lr

08011002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011002:	b480      	push	{r7}
 8011004:	b083      	sub	sp, #12
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	f023 0201 	bic.w	r2, r3, #1
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011016:	2300      	movs	r3, #0
}
 8011018:	4618      	mov	r0, r3
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	460b      	mov	r3, r1
 801102e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011030:	2300      	movs	r3, #0
 8011032:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011040:	78fb      	ldrb	r3, [r7, #3]
 8011042:	2b01      	cmp	r3, #1
 8011044:	d115      	bne.n	8011072 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011052:	200a      	movs	r0, #10
 8011054:	f7f1 fd8c 	bl	8002b70 <HAL_Delay>
      ms += 10U;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	330a      	adds	r3, #10
 801105c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fa36 	bl	80114d0 <USB_GetMode>
 8011064:	4603      	mov	r3, r0
 8011066:	2b01      	cmp	r3, #1
 8011068:	d01e      	beq.n	80110a8 <USB_SetCurrentMode+0x84>
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	2bc7      	cmp	r3, #199	@ 0xc7
 801106e:	d9f0      	bls.n	8011052 <USB_SetCurrentMode+0x2e>
 8011070:	e01a      	b.n	80110a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011072:	78fb      	ldrb	r3, [r7, #3]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d115      	bne.n	80110a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011084:	200a      	movs	r0, #10
 8011086:	f7f1 fd73 	bl	8002b70 <HAL_Delay>
      ms += 10U;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	330a      	adds	r3, #10
 801108e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 fa1d 	bl	80114d0 <USB_GetMode>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d005      	beq.n	80110a8 <USB_SetCurrentMode+0x84>
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2bc7      	cmp	r3, #199	@ 0xc7
 80110a0:	d9f0      	bls.n	8011084 <USB_SetCurrentMode+0x60>
 80110a2:	e001      	b.n	80110a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80110a4:	2301      	movs	r3, #1
 80110a6:	e005      	b.n	80110b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80110ac:	d101      	bne.n	80110b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80110ae:	2301      	movs	r3, #1
 80110b0:	e000      	b.n	80110b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80110b2:	2300      	movs	r3, #0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3710      	adds	r7, #16
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80110bc:	b084      	sub	sp, #16
 80110be:	b580      	push	{r7, lr}
 80110c0:	b086      	sub	sp, #24
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
 80110c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80110ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80110ce:	2300      	movs	r3, #0
 80110d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80110d6:	2300      	movs	r3, #0
 80110d8:	613b      	str	r3, [r7, #16]
 80110da:	e009      	b.n	80110f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	3340      	adds	r3, #64	@ 0x40
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	4413      	add	r3, r2
 80110e6:	2200      	movs	r2, #0
 80110e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	3301      	adds	r3, #1
 80110ee:	613b      	str	r3, [r7, #16]
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	2b0e      	cmp	r3, #14
 80110f4:	d9f2      	bls.n	80110dc <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011102:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011106:	2b00      	cmp	r3, #0
 8011108:	d11c      	bne.n	8011144 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	68fa      	ldr	r2, [r7, #12]
 8011114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011118:	f043 0302 	orr.w	r3, r3, #2
 801111c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011122:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801112e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801113a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	639a      	str	r2, [r3, #56]	@ 0x38
 8011142:	e011      	b.n	8011168 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011148:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011154:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011160:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801116e:	461a      	mov	r2, r3
 8011170:	2300      	movs	r3, #0
 8011172:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011174:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011178:	2b03      	cmp	r3, #3
 801117a:	d10d      	bne.n	8011198 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801117c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011180:	2b00      	cmp	r3, #0
 8011182:	d104      	bne.n	801118e <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011184:	2100      	movs	r1, #0
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f968 	bl	801145c <USB_SetDevSpeed>
 801118c:	e008      	b.n	80111a0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801118e:	2101      	movs	r1, #1
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 f963 	bl	801145c <USB_SetDevSpeed>
 8011196:	e003      	b.n	80111a0 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011198:	2103      	movs	r1, #3
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 f95e 	bl	801145c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80111a0:	2110      	movs	r1, #16
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 f8fa 	bl	801139c <USB_FlushTxFifo>
 80111a8:	4603      	mov	r3, r0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d001      	beq.n	80111b2 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80111ae:	2301      	movs	r3, #1
 80111b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 f924 	bl	8011400 <USB_FlushRxFifo>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111c8:	461a      	mov	r2, r3
 80111ca:	2300      	movs	r3, #0
 80111cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111d4:	461a      	mov	r2, r3
 80111d6:	2300      	movs	r3, #0
 80111d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111e0:	461a      	mov	r2, r3
 80111e2:	2300      	movs	r3, #0
 80111e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111e6:	2300      	movs	r3, #0
 80111e8:	613b      	str	r3, [r7, #16]
 80111ea:	e043      	b.n	8011274 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	015a      	lsls	r2, r3, #5
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	4413      	add	r3, r2
 80111f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80111fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011202:	d118      	bne.n	8011236 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d10a      	bne.n	8011220 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	015a      	lsls	r2, r3, #5
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	4413      	add	r3, r2
 8011212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011216:	461a      	mov	r2, r3
 8011218:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801121c:	6013      	str	r3, [r2, #0]
 801121e:	e013      	b.n	8011248 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	015a      	lsls	r2, r3, #5
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	4413      	add	r3, r2
 8011228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801122c:	461a      	mov	r2, r3
 801122e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011232:	6013      	str	r3, [r2, #0]
 8011234:	e008      	b.n	8011248 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	015a      	lsls	r2, r3, #5
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	4413      	add	r3, r2
 801123e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011242:	461a      	mov	r2, r3
 8011244:	2300      	movs	r3, #0
 8011246:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	015a      	lsls	r2, r3, #5
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	4413      	add	r3, r2
 8011250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011254:	461a      	mov	r2, r3
 8011256:	2300      	movs	r3, #0
 8011258:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	015a      	lsls	r2, r3, #5
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	4413      	add	r3, r2
 8011262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011266:	461a      	mov	r2, r3
 8011268:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801126c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	3301      	adds	r3, #1
 8011272:	613b      	str	r3, [r7, #16]
 8011274:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011278:	461a      	mov	r2, r3
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	4293      	cmp	r3, r2
 801127e:	d3b5      	bcc.n	80111ec <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011280:	2300      	movs	r3, #0
 8011282:	613b      	str	r3, [r7, #16]
 8011284:	e043      	b.n	801130e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	015a      	lsls	r2, r3, #5
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	4413      	add	r3, r2
 801128e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801129c:	d118      	bne.n	80112d0 <USB_DevInit+0x214>
    {
      if (i == 0U)
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d10a      	bne.n	80112ba <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	015a      	lsls	r2, r3, #5
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	4413      	add	r3, r2
 80112ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112b0:	461a      	mov	r2, r3
 80112b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80112b6:	6013      	str	r3, [r2, #0]
 80112b8:	e013      	b.n	80112e2 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	015a      	lsls	r2, r3, #5
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	4413      	add	r3, r2
 80112c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112c6:	461a      	mov	r2, r3
 80112c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80112cc:	6013      	str	r3, [r2, #0]
 80112ce:	e008      	b.n	80112e2 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	015a      	lsls	r2, r3, #5
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	4413      	add	r3, r2
 80112d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112dc:	461a      	mov	r2, r3
 80112de:	2300      	movs	r3, #0
 80112e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	015a      	lsls	r2, r3, #5
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	4413      	add	r3, r2
 80112ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112ee:	461a      	mov	r2, r3
 80112f0:	2300      	movs	r3, #0
 80112f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	015a      	lsls	r2, r3, #5
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	4413      	add	r3, r2
 80112fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011300:	461a      	mov	r2, r3
 8011302:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011306:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	3301      	adds	r3, #1
 801130c:	613b      	str	r3, [r7, #16]
 801130e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011312:	461a      	mov	r2, r3
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	4293      	cmp	r3, r2
 8011318:	d3b5      	bcc.n	8011286 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011320:	691b      	ldr	r3, [r3, #16]
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801132c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2200      	movs	r2, #0
 8011332:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801133a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801133c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011340:	2b00      	cmp	r3, #0
 8011342:	d105      	bne.n	8011350 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	699b      	ldr	r3, [r3, #24]
 8011348:	f043 0210 	orr.w	r2, r3, #16
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	699a      	ldr	r2, [r3, #24]
 8011354:	4b10      	ldr	r3, [pc, #64]	@ (8011398 <USB_DevInit+0x2dc>)
 8011356:	4313      	orrs	r3, r2
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801135c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011360:	2b00      	cmp	r3, #0
 8011362:	d005      	beq.n	8011370 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	699b      	ldr	r3, [r3, #24]
 8011368:	f043 0208 	orr.w	r2, r3, #8
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011370:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011374:	2b01      	cmp	r3, #1
 8011376:	d107      	bne.n	8011388 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	699b      	ldr	r3, [r3, #24]
 801137c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011380:	f043 0304 	orr.w	r3, r3, #4
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011388:	7dfb      	ldrb	r3, [r7, #23]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011394:	b004      	add	sp, #16
 8011396:	4770      	bx	lr
 8011398:	803c3800 	.word	0x803c3800

0801139c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801139c:	b480      	push	{r7}
 801139e:	b085      	sub	sp, #20
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80113a6:	2300      	movs	r3, #0
 80113a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	3301      	adds	r3, #1
 80113ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113b6:	d901      	bls.n	80113bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80113b8:	2303      	movs	r3, #3
 80113ba:	e01b      	b.n	80113f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	691b      	ldr	r3, [r3, #16]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	daf2      	bge.n	80113aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80113c4:	2300      	movs	r3, #0
 80113c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	019b      	lsls	r3, r3, #6
 80113cc:	f043 0220 	orr.w	r2, r3, #32
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	3301      	adds	r3, #1
 80113d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113e0:	d901      	bls.n	80113e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80113e2:	2303      	movs	r3, #3
 80113e4:	e006      	b.n	80113f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	691b      	ldr	r3, [r3, #16]
 80113ea:	f003 0320 	and.w	r3, r3, #32
 80113ee:	2b20      	cmp	r3, #32
 80113f0:	d0f0      	beq.n	80113d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80113f2:	2300      	movs	r3, #0
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3714      	adds	r7, #20
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011408:	2300      	movs	r3, #0
 801140a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	3301      	adds	r3, #1
 8011410:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011418:	d901      	bls.n	801141e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801141a:	2303      	movs	r3, #3
 801141c:	e018      	b.n	8011450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	691b      	ldr	r3, [r3, #16]
 8011422:	2b00      	cmp	r3, #0
 8011424:	daf2      	bge.n	801140c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011426:	2300      	movs	r3, #0
 8011428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2210      	movs	r2, #16
 801142e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	3301      	adds	r3, #1
 8011434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801143c:	d901      	bls.n	8011442 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801143e:	2303      	movs	r3, #3
 8011440:	e006      	b.n	8011450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	f003 0310 	and.w	r3, r3, #16
 801144a:	2b10      	cmp	r3, #16
 801144c:	d0f0      	beq.n	8011430 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801144e:	2300      	movs	r3, #0
}
 8011450:	4618      	mov	r0, r3
 8011452:	3714      	adds	r7, #20
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr

0801145c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801145c:	b480      	push	{r7}
 801145e:	b085      	sub	sp, #20
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	460b      	mov	r3, r1
 8011466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	78fb      	ldrb	r3, [r7, #3]
 8011476:	68f9      	ldr	r1, [r7, #12]
 8011478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801147c:	4313      	orrs	r3, r2
 801147e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3714      	adds	r7, #20
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr

0801148e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801148e:	b480      	push	{r7}
 8011490:	b085      	sub	sp, #20
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80114a8:	f023 0303 	bic.w	r3, r3, #3
 80114ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80114bc:	f043 0302 	orr.w	r3, r3, #2
 80114c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114c2:	2300      	movs	r3, #0
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3714      	adds	r7, #20
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	695b      	ldr	r3, [r3, #20]
 80114dc:	f003 0301 	and.w	r3, r3, #1
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr

080114ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80114f4:	2300      	movs	r3, #0
 80114f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	3301      	adds	r3, #1
 80114fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011504:	d901      	bls.n	801150a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011506:	2303      	movs	r3, #3
 8011508:	e01b      	b.n	8011542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	2b00      	cmp	r3, #0
 8011510:	daf2      	bge.n	80114f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011512:	2300      	movs	r3, #0
 8011514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	691b      	ldr	r3, [r3, #16]
 801151a:	f043 0201 	orr.w	r2, r3, #1
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	3301      	adds	r3, #1
 8011526:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801152e:	d901      	bls.n	8011534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011530:	2303      	movs	r3, #3
 8011532:	e006      	b.n	8011542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	691b      	ldr	r3, [r3, #16]
 8011538:	f003 0301 	and.w	r3, r3, #1
 801153c:	2b01      	cmp	r3, #1
 801153e:	d0f0      	beq.n	8011522 <USB_CoreReset+0x36>

  return HAL_OK;
 8011540:	2300      	movs	r3, #0
}
 8011542:	4618      	mov	r0, r3
 8011544:	3714      	adds	r7, #20
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <memset>:
 801154e:	4402      	add	r2, r0
 8011550:	4603      	mov	r3, r0
 8011552:	4293      	cmp	r3, r2
 8011554:	d100      	bne.n	8011558 <memset+0xa>
 8011556:	4770      	bx	lr
 8011558:	f803 1b01 	strb.w	r1, [r3], #1
 801155c:	e7f9      	b.n	8011552 <memset+0x4>
	...

08011560 <__libc_init_array>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	4d0d      	ldr	r5, [pc, #52]	@ (8011598 <__libc_init_array+0x38>)
 8011564:	2600      	movs	r6, #0
 8011566:	4c0d      	ldr	r4, [pc, #52]	@ (801159c <__libc_init_array+0x3c>)
 8011568:	1b64      	subs	r4, r4, r5
 801156a:	10a4      	asrs	r4, r4, #2
 801156c:	42a6      	cmp	r6, r4
 801156e:	d109      	bne.n	8011584 <__libc_init_array+0x24>
 8011570:	4d0b      	ldr	r5, [pc, #44]	@ (80115a0 <__libc_init_array+0x40>)
 8011572:	2600      	movs	r6, #0
 8011574:	4c0b      	ldr	r4, [pc, #44]	@ (80115a4 <__libc_init_array+0x44>)
 8011576:	f000 f817 	bl	80115a8 <_init>
 801157a:	1b64      	subs	r4, r4, r5
 801157c:	10a4      	asrs	r4, r4, #2
 801157e:	42a6      	cmp	r6, r4
 8011580:	d105      	bne.n	801158e <__libc_init_array+0x2e>
 8011582:	bd70      	pop	{r4, r5, r6, pc}
 8011584:	f855 3b04 	ldr.w	r3, [r5], #4
 8011588:	3601      	adds	r6, #1
 801158a:	4798      	blx	r3
 801158c:	e7ee      	b.n	801156c <__libc_init_array+0xc>
 801158e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011592:	3601      	adds	r6, #1
 8011594:	4798      	blx	r3
 8011596:	e7f2      	b.n	801157e <__libc_init_array+0x1e>
 8011598:	080116c8 	.word	0x080116c8
 801159c:	080116c8 	.word	0x080116c8
 80115a0:	080116c8 	.word	0x080116c8
 80115a4:	080116cc 	.word	0x080116cc

080115a8 <_init>:
 80115a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115aa:	bf00      	nop
 80115ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ae:	bc08      	pop	{r3}
 80115b0:	469e      	mov	lr, r3
 80115b2:	4770      	bx	lr

080115b4 <_fini>:
 80115b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b6:	bf00      	nop
 80115b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ba:	bc08      	pop	{r3}
 80115bc:	469e      	mov	lr, r3
 80115be:	4770      	bx	lr
