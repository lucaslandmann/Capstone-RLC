
Dk2Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115c0  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011834  08011834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011934  08011934  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  08011934  08011934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801193c  0801193c  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801193c  0801193c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011940  08011940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08011944  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ef4  2000000c  08011950  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f00  08011950  00013f00  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003196d  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cd3  00000000  00000000  000449af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a70  00000000  00000000  00049688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000214a  00000000  00000000  0004c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004729b  00000000  00000000  0004e242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003592d  00000000  00000000  000954dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc914  00000000  00000000  000cae0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0028771e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc78  00000000  00000000  00287764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  002933dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	0801181c 	.word	0x0801181c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	0801181c 	.word	0x0801181c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 f9a7 	bl	8002924 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f97d 	bl	80008d4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f9ed 	bl	80009b8 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 fa22 	bl	8000a26 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 ff3b 	bl	800145c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fc1d 	bl	8000e24 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fbdd 	bl	8000da8 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fc51 	bl	8000e94 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fccd 	bl	8000f90 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fd0b 	bl	8001010 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fd1d 	bl	8001038 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd9b 	bl	8001138 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fe4f 	bl	80012a4 <MX_TIM3_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000606:	f000 fefb 	bl	8001400 <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 800060a:	f000 fa1b 	bl	8000a44 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060e:	f000 feab 	bl	8001368 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000612:	f000 fddf 	bl	80011d4 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000616:	f000 fb4d 	bl	8000cb4 <MX_ADC4_Init>
  MX_I2C1_Init();
 800061a:	f000 fc79 	bl	8000f10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f002 fa46 	bl	8002ab0 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2104      	movs	r1, #4
 8000628:	489f      	ldr	r0, [pc, #636]	@ (80008a8 <main+0x2dc>)
 800062a:	f007 f82b 	bl	8007684 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800062e:	200a      	movs	r0, #10
 8000630:	f002 fa3e 	bl	8002ab0 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Vals, DIM(adc1Vals));
 8000634:	220d      	movs	r2, #13
 8000636:	499d      	ldr	r1, [pc, #628]	@ (80008ac <main+0x2e0>)
 8000638:	489d      	ldr	r0, [pc, #628]	@ (80008b0 <main+0x2e4>)
 800063a:	f003 f8bf 	bl	80037bc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4Vals, DIM(adc4Vals));
 800063e:	2202      	movs	r2, #2
 8000640:	499c      	ldr	r1, [pc, #624]	@ (80008b4 <main+0x2e8>)
 8000642:	489d      	ldr	r0, [pc, #628]	@ (80008b8 <main+0x2ec>)
 8000644:	f003 f8ba 	bl	80037bc <HAL_ADC_Start_DMA>

  //Set to "Awake" state
  uint8_t awake[] = {0x02, 0x81};
 8000648:	f248 1302 	movw	r3, #33026	@ 0x8102
 800064c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, awake, sizeof(awake), 1000);
 8000650:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000654:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2302      	movs	r3, #2
 800065c:	2190      	movs	r1, #144	@ 0x90
 800065e:	4897      	ldr	r0, [pc, #604]	@ (80008bc <main+0x2f0>)
 8000660:	f007 f900 	bl	8007864 <HAL_I2C_Master_Transmit>

  //Software Reset
  uint8_t softwareReset[] = {0x01, 0x01};
 8000664:	f240 1301 	movw	r3, #257	@ 0x101
 8000668:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, softwareReset, sizeof(softwareReset), 1000);
 800066c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2302      	movs	r3, #2
 8000678:	2190      	movs	r1, #144	@ 0x90
 800067a:	4890      	ldr	r0, [pc, #576]	@ (80008bc <main+0x2f0>)
 800067c:	f007 f8f2 	bl	8007864 <HAL_I2C_Master_Transmit>

  //Set MICBIAS and ADC to power down if needed
  uint8_t thermalProtect[] = {0x28, 0x10};
 8000680:	f241 0328 	movw	r3, #4136	@ 0x1028
 8000684:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, thermalProtect, sizeof(thermalProtect), 1000);
 8000688:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800068c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2302      	movs	r3, #2
 8000694:	2190      	movs	r1, #144	@ 0x90
 8000696:	4889      	ldr	r0, [pc, #548]	@ (80008bc <main+0x2f0>)
 8000698:	f007 f8e4 	bl	8007864 <HAL_I2C_Master_Transmit>

  //Format Select
  uint8_t formatSelect[] = {0x07, 0x60};
 800069c:	f246 0307 	movw	r3, #24583	@ 0x6007
 80006a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, formatSelect, sizeof(formatSelect), 1000);
 80006a2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80006a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	2190      	movs	r1, #144	@ 0x90
 80006b0:	4882      	ldr	r0, [pc, #520]	@ (80008bc <main+0x2f0>)
 80006b2:	f007 f8d7 	bl	8007864 <HAL_I2C_Master_Transmit>

  //Master mode select
  uint8_t masterMode[] = {0x13, 0x97};
 80006b6:	f249 7313 	movw	r3, #38675	@ 0x9713
 80006ba:	873b      	strh	r3, [r7, #56]	@ 0x38
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, masterMode, sizeof(masterMode), 1000);
 80006bc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80006c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2302      	movs	r3, #2
 80006c8:	2190      	movs	r1, #144	@ 0x90
 80006ca:	487c      	ldr	r0, [pc, #496]	@ (80008bc <main+0x2f0>)
 80006cc:	f007 f8ca 	bl	8007864 <HAL_I2C_Master_Transmit>

  uint8_t masterModeConfig[] = {0x14, 0x58};
 80006d0:	f645 0314 	movw	r3, #22548	@ 0x5814
 80006d4:	86bb      	strh	r3, [r7, #52]	@ 0x34
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, masterModeConfig, sizeof(masterModeConfig), 1000);
 80006d6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80006da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2302      	movs	r3, #2
 80006e2:	2190      	movs	r1, #144	@ 0x90
 80006e4:	4875      	ldr	r0, [pc, #468]	@ (80008bc <main+0x2f0>)
 80006e6:	f007 f8bd 	bl	8007864 <HAL_I2C_Master_Transmit>

  uint8_t channel1Config[] = {0x3c, 0xa5};
 80006ea:	f24a 533c 	movw	r3, #42300	@ 0xa53c
 80006ee:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint8_t channel2Config[] = {0x41, 0xa5};
 80006f0:	f24a 5341 	movw	r3, #42305	@ 0xa541
 80006f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t channel3Config[] = {0x46, 0xa5};
 80006f6:	f24a 5346 	movw	r3, #42310	@ 0xa546
 80006fa:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint8_t channel4Config[] = {0x4b, 0xa5};
 80006fc:	f24a 534b 	movw	r3, #42315	@ 0xa54b
 8000700:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t channel5Config[] = {0x50, 0xa5};
 8000702:	f24a 5350 	movw	r3, #42320	@ 0xa550
 8000706:	843b      	strh	r3, [r7, #32]
  uint8_t channel6Config[] = {0x55, 0xa5};
 8000708:	f24a 5355 	movw	r3, #42325	@ 0xa555
 800070c:	83bb      	strh	r3, [r7, #28]

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel1Config, sizeof(channel1Config), 1000);
 800070e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2302      	movs	r3, #2
 800071a:	2190      	movs	r1, #144	@ 0x90
 800071c:	4867      	ldr	r0, [pc, #412]	@ (80008bc <main+0x2f0>)
 800071e:	f007 f8a1 	bl	8007864 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel2Config, sizeof(channel2Config), 1000);
 8000722:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2302      	movs	r3, #2
 800072e:	2190      	movs	r1, #144	@ 0x90
 8000730:	4862      	ldr	r0, [pc, #392]	@ (80008bc <main+0x2f0>)
 8000732:	f007 f897 	bl	8007864 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel3Config, sizeof(channel3Config), 1000);
 8000736:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2302      	movs	r3, #2
 8000742:	2190      	movs	r1, #144	@ 0x90
 8000744:	485d      	ldr	r0, [pc, #372]	@ (80008bc <main+0x2f0>)
 8000746:	f007 f88d 	bl	8007864 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel4Config, sizeof(channel4Config), 1000);
 800074a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800074e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2190      	movs	r1, #144	@ 0x90
 8000758:	4858      	ldr	r0, [pc, #352]	@ (80008bc <main+0x2f0>)
 800075a:	f007 f883 	bl	8007864 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel5Config, sizeof(channel5Config), 1000);
 800075e:	f107 0220 	add.w	r2, r7, #32
 8000762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	2190      	movs	r1, #144	@ 0x90
 800076c:	4853      	ldr	r0, [pc, #332]	@ (80008bc <main+0x2f0>)
 800076e:	f007 f879 	bl	8007864 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channel6Config, sizeof(channel6Config), 1000);
 8000772:	f107 021c 	add.w	r2, r7, #28
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2302      	movs	r3, #2
 800077e:	2190      	movs	r1, #144	@ 0x90
 8000780:	484e      	ldr	r0, [pc, #312]	@ (80008bc <main+0x2f0>)
 8000782:	f007 f86f 	bl	8007864 <HAL_I2C_Master_Transmit>

  uint8_t inputChannelEnable[] = {0x73, 0xFC};
 8000786:	f64f 4373 	movw	r3, #64627	@ 0xfc73
 800078a:	833b      	strh	r3, [r7, #24]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, inputChannelEnable, sizeof(inputChannelEnable), 1000);
 800078c:	f107 0218 	add.w	r2, r7, #24
 8000790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2302      	movs	r3, #2
 8000798:	2190      	movs	r1, #144	@ 0x90
 800079a:	4848      	ldr	r0, [pc, #288]	@ (80008bc <main+0x2f0>)
 800079c:	f007 f862 	bl	8007864 <HAL_I2C_Master_Transmit>

  uint8_t outputChannelEnable[] = {0x74, 0xFF};
 80007a0:	f64f 7374 	movw	r3, #65396	@ 0xff74
 80007a4:	82bb      	strh	r3, [r7, #20]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, outputChannelEnable, sizeof(outputChannelEnable), 1000);
 80007a6:	f107 0214 	add.w	r2, r7, #20
 80007aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2302      	movs	r3, #2
 80007b2:	2190      	movs	r1, #144	@ 0x90
 80007b4:	4841      	ldr	r0, [pc, #260]	@ (80008bc <main+0x2f0>)
 80007b6:	f007 f855 	bl	8007864 <HAL_I2C_Master_Transmit>

  uint8_t enablePowerOuts[] = {0x75, 0x60};
 80007ba:	f246 0375 	movw	r3, #24693	@ 0x6075
 80007be:	823b      	strh	r3, [r7, #16]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, enablePowerOuts, sizeof(enablePowerOuts), 1000);
 80007c0:	f107 0210 	add.w	r2, r7, #16
 80007c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2302      	movs	r3, #2
 80007cc:	2190      	movs	r1, #144	@ 0x90
 80007ce:	483b      	ldr	r0, [pc, #236]	@ (80008bc <main+0x2f0>)
 80007d0:	f007 f848 	bl	8007864 <HAL_I2C_Master_Transmit>
  HAL_Delay(50);
 80007d4:	2032      	movs	r0, #50	@ 0x32
 80007d6:	f002 f96b 	bl	8002ab0 <HAL_Delay>



  HAL_SAI_Receive_DMA(&hsai_BlockA2, pcmVals, DIM(pcmVals));
 80007da:	2280      	movs	r2, #128	@ 0x80
 80007dc:	4938      	ldr	r1, [pc, #224]	@ (80008c0 <main+0x2f4>)
 80007de:	4839      	ldr	r0, [pc, #228]	@ (80008c4 <main+0x2f8>)
 80007e0:	f00e f850 	bl	800e884 <HAL_SAI_Receive_DMA>
  //HAL_SAI_Transmit_DMA(&hsai_BlockB2, pcmVals, sizeof(pcmVals));

  uint8_t asiRead[] = {0x15,0xFF};
 80007e4:	f64f 7315 	movw	r3, #65301	@ 0xff15
 80007e8:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, asiRead, sizeof(asiRead), 1000);
 80007ea:	f107 020c 	add.w	r2, r7, #12
 80007ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2302      	movs	r3, #2
 80007f6:	2190      	movs	r1, #144	@ 0x90
 80007f8:	4830      	ldr	r0, [pc, #192]	@ (80008bc <main+0x2f0>)
 80007fa:	f007 f833 	bl	8007864 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, ADCAddress, testRead, sizeof(testRead), 1000);
 80007fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	4a30      	ldr	r2, [pc, #192]	@ (80008c8 <main+0x2fc>)
 8000808:	2190      	movs	r1, #144	@ 0x90
 800080a:	482c      	ldr	r0, [pc, #176]	@ (80008bc <main+0x2f0>)
 800080c:	f007 f91e 	bl	8007a4c <HAL_I2C_Master_Receive>

  uint8_t adcStatus[] = {0x76, 0xFF};
 8000810:	f64f 7376 	movw	r3, #65398	@ 0xff76
 8000814:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, adcStatus, sizeof(adcStatus), 1000);
 8000816:	f107 0208 	add.w	r2, r7, #8
 800081a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	2190      	movs	r1, #144	@ 0x90
 8000824:	4825      	ldr	r0, [pc, #148]	@ (80008bc <main+0x2f0>)
 8000826:	f007 f81d 	bl	8007864 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, ADCAddress, testRead, sizeof(testRead), 1000);
 800082a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	4a25      	ldr	r2, [pc, #148]	@ (80008c8 <main+0x2fc>)
 8000834:	2190      	movs	r1, #144	@ 0x90
 8000836:	4821      	ldr	r0, [pc, #132]	@ (80008bc <main+0x2f0>)
 8000838:	f007 f908 	bl	8007a4c <HAL_I2C_Master_Receive>

  uint8_t channelStatus[] = {0x77, 0xFF};
 800083c:	f64f 7377 	movw	r3, #65399	@ 0xff77
 8000840:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, ADCAddress, channelStatus, sizeof(channelStatus), 1000);
 8000842:	1d3a      	adds	r2, r7, #4
 8000844:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2302      	movs	r3, #2
 800084c:	2190      	movs	r1, #144	@ 0x90
 800084e:	481b      	ldr	r0, [pc, #108]	@ (80008bc <main+0x2f0>)
 8000850:	f007 f808 	bl	8007864 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, ADCAddress, testRead, sizeof(testRead), 1000);
 8000854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	4a1a      	ldr	r2, [pc, #104]	@ (80008c8 <main+0x2fc>)
 800085e:	2190      	movs	r1, #144	@ 0x90
 8000860:	4816      	ldr	r0, [pc, #88]	@ (80008bc <main+0x2f0>)
 8000862:	f007 f8f3 	bl	8007a4c <HAL_I2C_Master_Receive>

  for(int i = 0; i < DIM(signal); i+=2)
 8000866:	2300      	movs	r3, #0
 8000868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800086a:	e010      	b.n	800088e <main+0x2c2>
  {
	  signal[i] = i;
 800086c:	4917      	ldr	r1, [pc, #92]	@ (80008cc <main+0x300>)
 800086e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  signal[i+1] = signal[i];
 8000876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000878:	3301      	adds	r3, #1
 800087a:	4914      	ldr	r1, [pc, #80]	@ (80008cc <main+0x300>)
 800087c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800087e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000882:	4912      	ldr	r1, [pc, #72]	@ (80008cc <main+0x300>)
 8000884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < DIM(signal); i+=2)
 8000888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800088a:	3302      	adds	r3, #2
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800088e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000894:	d3ea      	bcc.n	800086c <main+0x2a0>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_SAI_Transmit(&hsai_BlockB2, signal, DIM(signal), 100);
 8000896:	2364      	movs	r3, #100	@ 0x64
 8000898:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800089c:	490b      	ldr	r1, [pc, #44]	@ (80008cc <main+0x300>)
 800089e:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <main+0x304>)
 80008a0:	f00d feea 	bl	800e678 <HAL_SAI_Transmit>
 80008a4:	e7f7      	b.n	8000896 <main+0x2ca>
 80008a6:	bf00      	nop
 80008a8:	42021000 	.word	0x42021000
 80008ac:	20000cd4 	.word	0x20000cd4
 80008b0:	20000028 	.word	0x20000028
 80008b4:	20000cf0 	.word	0x20000cf0
 80008b8:	200000b4 	.word	0x200000b4
 80008bc:	20000334 	.word	0x20000334
 80008c0:	20000cf4 	.word	0x20000cf4
 80008c4:	200004b4 	.word	0x200004b4
 80008c8:	20000ef4 	.word	0x20000ef4
 80008cc:	20000ef8 	.word	0x20000ef8
 80008d0:	2000054c 	.word	0x2000054c

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09e      	sub	sp, #120	@ 0x78
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	2260      	movs	r2, #96	@ 0x60
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f010 ff6d 	bl	80117c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
 80008f6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80008fc:	f008 ff78 	bl	80097f0 <HAL_PWREx_ControlVoltageScaling>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000906:	f000 fedf 	bl	80016c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800090a:	f008 ff61 	bl	80097d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800090e:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <SystemClock_Config+0xe0>)
 8000910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000914:	4a27      	ldr	r2, [pc, #156]	@ (80009b4 <SystemClock_Config+0xe0>)
 8000916:	f023 0318 	bic.w	r3, r3, #24
 800091a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800091e:	2317      	movs	r3, #23
 8000920:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000922:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000928:	2381      	movs	r3, #129	@ 0x81
 800092a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000932:	2310      	movs	r3, #16
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800093a:	2310      	movs	r3, #16
 800093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800093e:	2300      	movs	r3, #0
 8000940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	2303      	movs	r3, #3
 8000948:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000952:	2308      	movs	r3, #8
 8000954:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000956:	2308      	movs	r3, #8
 8000958:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800095e:	2301      	movs	r3, #1
 8000960:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000962:	230c      	movs	r3, #12
 8000964:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	4618      	mov	r0, r3
 8000970:	f009 f868 	bl	8009a44 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800097a:	f000 fea5 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	231f      	movs	r3, #31
 8000980:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2303      	movs	r3, #3
 8000984:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2103      	movs	r1, #3
 800099a:	4618      	mov	r0, r3
 800099c:	f009 ff2e 	bl	800a7fc <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80009a6:	f000 fe8f 	bl	80016c8 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3778      	adds	r7, #120	@ 0x78
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	46020c00 	.word	0x46020c00

080009b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0b8      	sub	sp, #224	@ 0xe0
 80009bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	22e0      	movs	r2, #224	@ 0xe0
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f010 fefc 	bl	80117c2 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80009ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ce:	f04f 0301 	mov.w	r3, #1
 80009d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80009dc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80009e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80009e4:	2303      	movs	r3, #3
 80009e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80009ec:	230c      	movs	r3, #12
 80009ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80009f4:	2303      	movs	r3, #3
 80009f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80009fc:	230c      	movs	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000a06:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00a fac4 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000a1a:	f000 fe55 	bl	80016c8 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	37e0      	adds	r7, #224	@ 0xe0
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000a2a:	f008 ffcd 	bl	80099c8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f008 ff6a 	bl	8009908 <HAL_PWREx_ConfigSupply>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000a3a:	f000 fe45 	bl	80016c8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f010 feb6 	bl	80117c2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a56:	4b88      	ldr	r3, [pc, #544]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a58:	4a88      	ldr	r2, [pc, #544]	@ (8000c7c <MX_ADC1_Init+0x238>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a5c:	4b86      	ldr	r3, [pc, #536]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a62:	4b85      	ldr	r3, [pc, #532]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000a68:	4b83      	ldr	r3, [pc, #524]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b82      	ldr	r3, [pc, #520]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a74:	4b80      	ldr	r3, [pc, #512]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000a80:	4b7d      	ldr	r3, [pc, #500]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a86:	4b7c      	ldr	r3, [pc, #496]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a90:	220d      	movs	r2, #13
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a94:	4b78      	ldr	r3, [pc, #480]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b76      	ldr	r3, [pc, #472]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa2:	4b75      	ldr	r3, [pc, #468]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aa8:	4b73      	ldr	r3, [pc, #460]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ab0:	4b71      	ldr	r3, [pc, #452]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab6:	4b70      	ldr	r3, [pc, #448]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000abc:	4b6e      	ldr	r3, [pc, #440]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac8:	4b6b      	ldr	r3, [pc, #428]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad0:	4869      	ldr	r0, [pc, #420]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000ad2:	f002 fb8b 	bl	80031ec <HAL_ADC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000adc:	f000 fdf4 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ae0:	4b67      	ldr	r3, [pc, #412]	@ (8000c80 <MX_ADC1_Init+0x23c>)
 8000ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae4:	2306      	movs	r3, #6
 8000ae6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000af0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000af2:	2304      	movs	r3, #4
 8000af4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	485e      	ldr	r0, [pc, #376]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000b00:	f003 faa2 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000b0a:	f000 fddd 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000c84 <MX_ADC1_Init+0x240>)
 8000b10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b12:	230c      	movs	r3, #12
 8000b14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4857      	ldr	r0, [pc, #348]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000b1c:	f003 fa94 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000b26:	f000 fdcf 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b2a:	4b57      	ldr	r3, [pc, #348]	@ (8000c88 <MX_ADC1_Init+0x244>)
 8000b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b32:	463b      	mov	r3, r7
 8000b34:	4619      	mov	r1, r3
 8000b36:	4850      	ldr	r0, [pc, #320]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000b38:	f003 fa86 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000b42:	f000 fdc1 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b46:	4b51      	ldr	r3, [pc, #324]	@ (8000c8c <MX_ADC1_Init+0x248>)
 8000b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b4a:	2318      	movs	r3, #24
 8000b4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4849      	ldr	r0, [pc, #292]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000b54:	f003 fa78 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000b5e:	f000 fdb3 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b62:	4b4b      	ldr	r3, [pc, #300]	@ (8000c90 <MX_ADC1_Init+0x24c>)
 8000b64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4841      	ldr	r0, [pc, #260]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000b72:	f003 fa69 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000b7c:	f000 fda4 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b80:	4b44      	ldr	r3, [pc, #272]	@ (8000c94 <MX_ADC1_Init+0x250>)
 8000b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b84:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	483a      	ldr	r0, [pc, #232]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000b90:	f003 fa5a 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000b9a:	f000 fd95 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c98 <MX_ADC1_Init+0x254>)
 8000ba0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ba2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000ba6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4832      	ldr	r0, [pc, #200]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000bae:	f003 fa4b 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000bb8:	f000 fd86 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bbc:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <MX_ADC1_Init+0x258>)
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000bc0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000bc4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4619      	mov	r1, r3
 8000bca:	482b      	ldr	r0, [pc, #172]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000bcc:	f003 fa3c 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000bd6:	f000 fd77 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bda:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <MX_ADC1_Init+0x25c>)
 8000bdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000bde:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000be2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4823      	ldr	r0, [pc, #140]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000bea:	f003 fa2d 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8000bf4:	f000 fd68 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <MX_ADC1_Init+0x260>)
 8000bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000c08:	f003 fa1e 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8000c12:	f000 fd59 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c16:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <MX_ADC1_Init+0x264>)
 8000c18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000c1a:	f240 2306 	movw	r3, #518	@ 0x206
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4814      	ldr	r0, [pc, #80]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000c26:	f003 fa0f 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8000c30:	f000 fd4a 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <MX_ADC1_Init+0x268>)
 8000c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000c38:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000c3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000c44:	f003 fa00 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000c4e:	f000 fd3b 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_ADC1_Init+0x26c>)
 8000c54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000c56:	f240 2312 	movw	r3, #530	@ 0x212
 8000c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_ADC1_Init+0x234>)
 8000c62:	f003 f9f1 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8000c6c:	f000 fd2c 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000028 	.word	0x20000028
 8000c7c:	42028000 	.word	0x42028000
 8000c80:	04000002 	.word	0x04000002
 8000c84:	08000004 	.word	0x08000004
 8000c88:	0c000008 	.word	0x0c000008
 8000c8c:	10000010 	.word	0x10000010
 8000c90:	14000020 	.word	0x14000020
 8000c94:	1c000080 	.word	0x1c000080
 8000c98:	20000100 	.word	0x20000100
 8000c9c:	2a000400 	.word	0x2a000400
 8000ca0:	2e000800 	.word	0x2e000800
 8000ca4:	32001000 	.word	0x32001000
 8000ca8:	3e008000 	.word	0x3e008000
 8000cac:	42010000 	.word	0x42010000
 8000cb0:	ce080000 	.word	0xce080000

08000cb4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f010 fd7e 	bl	80117c2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000cc6:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000cc8:	4a34      	ldr	r2, [pc, #208]	@ (8000d9c <MX_ADC4_Init+0xe8>)
 8000cca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ccc:	4b32      	ldr	r3, [pc, #200]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000ce0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ce4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000ce8:	2204      	movs	r2, #4
 8000cea:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000d00:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d06:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000d12:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d20:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000d3c:	4816      	ldr	r0, [pc, #88]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d3e:	f002 fa55 	bl	80031ec <HAL_ADC_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000d48:	f000 fcbe 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_ADC4_Init+0xec>)
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d66:	f003 f96f 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000d70:	f000 fcaa 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_ADC4_Init+0xf0>)
 8000d76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_ADC4_Init+0xe4>)
 8000d82:	f003 f961 	bl	8004048 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000d8c:	f000 fc9c 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000b4 	.word	0x200000b4
 8000d9c:	46021000 	.word	0x46021000
 8000da0:	1c000080 	.word	0x1c000080
 8000da4:	20000100 	.word	0x20000100

08000da8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <MX_DMA2D_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000df4:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000df6:	f005 f8b1 	bl	8005f5c <HAL_DMA2D_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000e00:	f000 fc62 	bl	80016c8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e04:	2101      	movs	r1, #1
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_DMA2D_Init+0x74>)
 8000e08:	f005 f90a 	bl	8006020 <HAL_DMA2D_ConfigLayer>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f000 fc59 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000026c 	.word	0x2000026c
 8000e20:	4002b000 	.word	0x4002b000

08000e24 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <MX_GPDMA1_Init+0x6c>)
 8000e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <MX_GPDMA1_Init+0x6c>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_GPDMA1_Init+0x6c>)
 8000e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	201d      	movs	r0, #29
 8000e4e:	f004 f927 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000e52:	201d      	movs	r0, #29
 8000e54:	f004 f93e 	bl	80050d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	201e      	movs	r0, #30
 8000e5e:	f004 f91f 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000e62:	201e      	movs	r0, #30
 8000e64:	f004 f936 	bl	80050d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	201f      	movs	r0, #31
 8000e6e:	f004 f917 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000e72:	201f      	movs	r0, #31
 8000e74:	f004 f92e 	bl	80050d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	f004 f90f 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000e82:	2020      	movs	r0, #32
 8000e84:	f004 f926 	bl	80050d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	46020c00 	.word	0x46020c00

08000e94 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <MX_HSPI1_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000eac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000eb0:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000eb4:	221a      	movs	r2, #26
 8000eb6:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <MX_HSPI1_Init+0x74>)
 8000ef6:	f00f fffd 	bl	8010ef4 <HAL_XSPI_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 fbe2 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200002d4 	.word	0x200002d4
 8000f0c:	420d3400 	.word	0x420d3400

08000f10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f16:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <MX_I2C1_Init+0x78>)
 8000f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <MX_I2C1_Init+0x7c>)
 8000f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f20:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f26:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4c:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f4e:	f006 fbed 	bl	800772c <HAL_I2C_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f58:	f000 fbb6 	bl	80016c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f60:	f007 fefa 	bl	8008d58 <HAL_I2CEx_ConfigAnalogFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f6a:	f000 fbad 	bl	80016c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_I2C1_Init+0x74>)
 8000f72:	f007 ff3c 	bl	8008dee <HAL_I2CEx_ConfigDigitalFilter>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f7c:	f000 fba4 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000334 	.word	0x20000334
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	20a0c4df 	.word	0x20a0c4df

08000f90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000f96:	4a1c      	ldr	r2, [pc, #112]	@ (8001008 <MX_I2C2_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800100c <MX_I2C2_Init+0x7c>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fca:	480e      	ldr	r0, [pc, #56]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fcc:	f006 fbae 	bl	800772c <HAL_I2C_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fd6:	f000 fb77 	bl	80016c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4809      	ldr	r0, [pc, #36]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000fde:	f007 febb 	bl	8008d58 <HAL_I2CEx_ConfigAnalogFilter>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fe8:	f000 fb6e 	bl	80016c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_I2C2_Init+0x74>)
 8000ff0:	f007 fefd 	bl	8008dee <HAL_I2CEx_ConfigDigitalFilter>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ffa:	f000 fb65 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000388 	.word	0x20000388
 8001008:	40005800 	.word	0x40005800
 800100c:	20a0c4df 	.word	0x20a0c4df

08001010 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001014:	2000      	movs	r0, #0
 8001016:	f007 ff37 	bl	8008e88 <HAL_ICACHE_ConfigAssociativityMode>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001020:	f000 fb52 	bl	80016c8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001024:	f007 ff50 	bl	8008ec8 <HAL_ICACHE_Enable>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800102e:	f000 fb4b 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	@ 0x38
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2234      	movs	r2, #52	@ 0x34
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f010 fbbc 	bl	80117c2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800104a:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <MX_LTDC_Init+0xf8>)
 800104c:	4a39      	ldr	r2, [pc, #228]	@ (8001134 <MX_LTDC_Init+0xfc>)
 800104e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001050:	4b37      	ldr	r3, [pc, #220]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001056:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800105c:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <MX_LTDC_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001062:	4b33      	ldr	r3, [pc, #204]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <MX_LTDC_Init+0xf8>)
 800106a:	2203      	movs	r2, #3
 800106c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800106e:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001070:	2203      	movs	r2, #3
 8001072:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001074:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001076:	220b      	movs	r2, #11
 8001078:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800107a:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <MX_LTDC_Init+0xf8>)
 800107c:	220b      	movs	r2, #11
 800107e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001082:	f240 322b 	movw	r2, #811	@ 0x32b
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <MX_LTDC_Init+0xf8>)
 800108a:	f240 12eb 	movw	r2, #491	@ 0x1eb
 800108e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001092:	f240 3233 	movw	r2, #819	@ 0x333
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <MX_LTDC_Init+0xf8>)
 800109a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800109e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <MX_LTDC_Init+0xf8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_LTDC_Init+0xf8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <MX_LTDC_Init+0xf8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010b8:	481d      	ldr	r0, [pc, #116]	@ (8001130 <MX_LTDC_Init+0xf8>)
 80010ba:	f007 ff15 	bl	8008ee8 <HAL_LTDC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010c4:	f000 fb00 	bl	80016c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80010cc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80010d0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80010d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80010da:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80010dc:	2301      	movs	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010e0:	23ff      	movs	r3, #255	@ 0xff
 80010e2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010ec:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010ee:	2307      	movs	r3, #7
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_LTDC_Init+0xf8>)
 8001118:	f008 f878 	bl	800920c <HAL_LTDC_ConfigLayer>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001122:	f000 fad1 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3738      	adds	r7, #56	@ 0x38
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200003dc 	.word	0x200003dc
 8001134:	40016800 	.word	0x40016800

08001138 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001150:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_RTC_Init+0x94>)
 8001152:	4a1f      	ldr	r2, [pc, #124]	@ (80011d0 <MX_RTC_Init+0x98>)
 8001154:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <MX_RTC_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_RTC_Init+0x94>)
 800115e:	227f      	movs	r2, #127	@ 0x7f
 8001160:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_RTC_Init+0x94>)
 8001164:	22ff      	movs	r2, #255	@ 0xff
 8001166:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_RTC_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_RTC_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <MX_RTC_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_RTC_Init+0x94>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_RTC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <MX_RTC_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800118e:	480f      	ldr	r0, [pc, #60]	@ (80011cc <MX_RTC_Init+0x94>)
 8001190:	f00c ff00 	bl	800df94 <HAL_RTC_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800119a:	f000 fa95 	bl	80016c8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <MX_RTC_Init+0x94>)
 80011b4:	f00d f81c 	bl	800e1f0 <HAL_RTCEx_PrivilegeModeSet>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80011be:	f000 fa83 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000484 	.word	0x20000484
 80011d0:	46007800 	.word	0x46007800

080011d4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <MX_SAI2_Init+0xbc>)
 80011da:	4a2e      	ldr	r2, [pc, #184]	@ (8001294 <MX_SAI2_Init+0xc0>)
 80011dc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <MX_SAI2_Init+0xbc>)
 80011e0:	2203      	movs	r2, #3
 80011e2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_SYNCHRONOUS;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_SAI2_Init+0xbc>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <MX_SAI2_Init+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_SAI2_Init+0xbc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <MX_SAI2_Init+0xbc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_SAI2_Init+0xbc>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001202:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <MX_SAI2_Init+0xbc>)
 8001206:	2200      	movs	r2, #0
 8001208:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_SAI2_Init+0xbc>)
 800120c:	2200      	movs	r2, #0
 800120e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_SAI2_Init+0xbc>)
 8001212:	2200      	movs	r2, #0
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 6) != HAL_OK)
 8001216:	2306      	movs	r3, #6
 8001218:	2202      	movs	r2, #2
 800121a:	2100      	movs	r1, #0
 800121c:	481c      	ldr	r0, [pc, #112]	@ (8001290 <MX_SAI2_Init+0xbc>)
 800121e:	f00d f815 	bl	800e24c <HAL_SAI_InitProtocol>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SAI2_Init+0x58>
  {
    Error_Handler();
 8001228:	f000 fa4e 	bl	80016c8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_SAI2_Init+0xc4>)
 800122e:	4a1b      	ldr	r2, [pc, #108]	@ (800129c <MX_SAI2_Init+0xc8>)
 8001230:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_SAI2_Init+0xc4>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_SAI2_Init+0xc4>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_SAI2_Init+0xc4>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_SAI2_Init+0xc4>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_SAI2_Init+0xc4>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_SAI2_Init+0xc4>)
 8001252:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <MX_SAI2_Init+0xcc>)
 8001254:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_SAI2_Init+0xc4>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_SAI2_Init+0xc4>)
 800125e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001262:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_SAI2_Init+0xc4>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_SAI2_Init+0xc4>)
 800126c:	2200      	movs	r2, #0
 800126e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_SAI2_Init+0xc4>)
 8001272:	2200      	movs	r2, #0
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001276:	2302      	movs	r3, #2
 8001278:	2202      	movs	r2, #2
 800127a:	2101      	movs	r1, #1
 800127c:	4806      	ldr	r0, [pc, #24]	@ (8001298 <MX_SAI2_Init+0xc4>)
 800127e:	f00c ffe5 	bl	800e24c <HAL_SAI_InitProtocol>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_SAI2_Init+0xb8>
  {
    Error_Handler();
 8001288:	f000 fa1e 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200004b4 	.word	0x200004b4
 8001294:	40015804 	.word	0x40015804
 8001298:	2000054c 	.word	0x2000054c
 800129c:	40015824 	.word	0x40015824
 80012a0:	00017700 	.word	0x00017700

080012a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c8:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <MX_TIM3_Init+0xbc>)
 80012ca:	4a26      	ldr	r2, [pc, #152]	@ (8001364 <MX_TIM3_Init+0xc0>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80012ce:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <MX_TIM3_Init+0xbc>)
 80012d0:	22a0      	movs	r2, #160	@ 0xa0
 80012d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <MX_TIM3_Init+0xbc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80012da:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <MX_TIM3_Init+0xbc>)
 80012dc:	2264      	movs	r2, #100	@ 0x64
 80012de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <MX_TIM3_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <MX_TIM3_Init+0xbc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ec:	481c      	ldr	r0, [pc, #112]	@ (8001360 <MX_TIM3_Init+0xbc>)
 80012ee:	f00d fe55 	bl	800ef9c <HAL_TIM_PWM_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012f8:	f000 f9e6 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4815      	ldr	r0, [pc, #84]	@ (8001360 <MX_TIM3_Init+0xbc>)
 800130c:	f00e fc8e 	bl	800fc2c <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001316:	f000 f9d7 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131a:	2360      	movs	r3, #96	@ 0x60
 800131c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 800131e:	234b      	movs	r3, #75	@ 0x4b
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	220c      	movs	r2, #12
 800132e:	4619      	mov	r1, r3
 8001330:	480b      	ldr	r0, [pc, #44]	@ (8001360 <MX_TIM3_Init+0xbc>)
 8001332:	f00d fe8b 	bl	800f04c <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800133c:	f000 f9c4 	bl	80016c8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <MX_TIM3_Init+0xbc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_TIM3_Init+0xbc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800134e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <MX_TIM3_Init+0xbc>)
 8001352:	f000 ff3d 	bl	80021d0 <HAL_TIM_MspPostInit>

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	@ 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000710 	.word	0x20000710
 8001364:	40000400 	.word	0x40000400

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <MX_USART1_UART_Init+0x94>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013b2:	f00e fcfd 	bl	800fdb0 <HAL_UART_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013bc:	f000 f984 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013c4:	f00f fccb 	bl	8010d5e <HAL_UARTEx_SetTxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ce:	f000 f97b 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013d6:	f00f fd00 	bl	8010dda <HAL_UARTEx_SetRxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 f972 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <MX_USART1_UART_Init+0x90>)
 80013e6:	f00f fc81 	bl	8010cec <HAL_UARTEx_DisableFifoMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f000 f96a 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000075c 	.word	0x2000075c
 80013fc:	40013800 	.word	0x40013800

08001400 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001404:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001408:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800140c:	2209      	movs	r2, #9
 800140e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001412:	2200      	movs	r2, #0
 8001414:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001418:	2203      	movs	r2, #3
 800141a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800141e:	2200      	movs	r2, #0
 8001420:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001424:	2200      	movs	r2, #0
 8001426:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800142a:	2200      	movs	r2, #0
 800142c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001430:	2200      	movs	r2, #0
 8001432:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001436:	2200      	movs	r2, #0
 8001438:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800143c:	2200      	movs	r2, #0
 800143e:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001442:	f008 f894 	bl	800956e <HAL_PCD_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 800144c:	f000 f93c 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200007f0 	.word	0x200007f0
 8001458:	42040000 	.word	0x42040000

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001472:	4b8c      	ldr	r3, [pc, #560]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001478:	4a8a      	ldr	r2, [pc, #552]	@ (80016a4 <MX_GPIO_Init+0x248>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001482:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001490:	4b84      	ldr	r3, [pc, #528]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001496:	4a83      	ldr	r2, [pc, #524]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a0:	4b80      	ldr	r3, [pc, #512]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b7d      	ldr	r3, [pc, #500]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b4:	4a7b      	ldr	r2, [pc, #492]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014be:	4b79      	ldr	r3, [pc, #484]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014cc:	4b75      	ldr	r3, [pc, #468]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d2:	4a74      	ldr	r2, [pc, #464]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014dc:	4b71      	ldr	r3, [pc, #452]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b6e      	ldr	r3, [pc, #440]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f0:	4a6c      	ldr	r2, [pc, #432]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014fa:	4b6a      	ldr	r3, [pc, #424]	@ (80016a4 <MX_GPIO_Init+0x248>)
 80014fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <MX_GPIO_Init+0x248>)
 800150a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150e:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001518:	4b62      	ldr	r3, [pc, #392]	@ (80016a4 <MX_GPIO_Init+0x248>)
 800151a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152c:	4a5d      	ldr	r2, [pc, #372]	@ (80016a4 <MX_GPIO_Init+0x248>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001532:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001536:	4b5b      	ldr	r3, [pc, #364]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800153c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001544:	4b57      	ldr	r3, [pc, #348]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154a:	4a56      	ldr	r2, [pc, #344]	@ (80016a4 <MX_GPIO_Init+0x248>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001554:	4b53      	ldr	r3, [pc, #332]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001562:	4b50      	ldr	r3, [pc, #320]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001568:	4a4e      	ldr	r2, [pc, #312]	@ (80016a4 <MX_GPIO_Init+0x248>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001572:	4b4c      	ldr	r3, [pc, #304]	@ (80016a4 <MX_GPIO_Init+0x248>)
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2104      	movs	r1, #4
 8001584:	4848      	ldr	r0, [pc, #288]	@ (80016a8 <MX_GPIO_Init+0x24c>)
 8001586:	f006 f87d 	bl	8007684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2110      	movs	r1, #16
 800158e:	4846      	ldr	r0, [pc, #280]	@ (80016a8 <MX_GPIO_Init+0x24c>)
 8001590:	f006 f878 	bl	8007684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2114      	movs	r1, #20
 8001598:	4844      	ldr	r0, [pc, #272]	@ (80016ac <MX_GPIO_Init+0x250>)
 800159a:	f006 f873 	bl	8007684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800159e:	2314      	movs	r3, #20
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	483c      	ldr	r0, [pc, #240]	@ (80016a8 <MX_GPIO_Init+0x24c>)
 80015b6:	f005 fe8d 	bl	80072d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80015ba:	2320      	movs	r3, #32
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015be:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <MX_GPIO_Init+0x254>)
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4836      	ldr	r0, [pc, #216]	@ (80016a8 <MX_GPIO_Init+0x24c>)
 80015ce:	f005 fe81 	bl	80072d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80015d2:	2302      	movs	r3, #2
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015d6:	4b37      	ldr	r3, [pc, #220]	@ (80016b4 <MX_GPIO_Init+0x258>)
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4834      	ldr	r0, [pc, #208]	@ (80016b8 <MX_GPIO_Init+0x25c>)
 80015e6:	f005 fe75 	bl	80072d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80015ea:	2310      	movs	r3, #16
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ee:	4b33      	ldr	r3, [pc, #204]	@ (80016bc <MX_GPIO_Init+0x260>)
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	482e      	ldr	r0, [pc, #184]	@ (80016b8 <MX_GPIO_Init+0x25c>)
 80015fe:	f005 fe69 	bl	80072d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001602:	2314      	movs	r3, #20
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4824      	ldr	r0, [pc, #144]	@ (80016ac <MX_GPIO_Init+0x250>)
 800161a:	f005 fe5b 	bl	80072d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	481e      	ldr	r0, [pc, #120]	@ (80016ac <MX_GPIO_Init+0x250>)
 8001632:	f005 fe4f 	bl	80072d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001636:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	481d      	ldr	r0, [pc, #116]	@ (80016c0 <MX_GPIO_Init+0x264>)
 800164c:	f005 fe42 	bl	80072d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001650:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	4817      	ldr	r0, [pc, #92]	@ (80016c4 <MX_GPIO_Init+0x268>)
 8001666:	f005 fe35 	bl	80072d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	200c      	movs	r0, #12
 8001670:	f003 fd16 	bl	80050a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001674:	200c      	movs	r0, #12
 8001676:	f003 fd2d 	bl	80050d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	200f      	movs	r0, #15
 8001680:	f003 fd0e 	bl	80050a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001684:	200f      	movs	r0, #15
 8001686:	f003 fd25 	bl	80050d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	2010      	movs	r0, #16
 8001690:	f003 fd06 	bl	80050a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001694:	2010      	movs	r0, #16
 8001696:	f003 fd1d 	bl	80050d4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	@ 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	46020c00 	.word	0x46020c00
 80016a8:	42021000 	.word	0x42021000
 80016ac:	42020c00 	.word	0x42020c00
 80016b0:	10110000 	.word	0x10110000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	42020000 	.word	0x42020000
 80016bc:	10210000 	.word	0x10210000
 80016c0:	42021800 	.word	0x42021800
 80016c4:	42020400 	.word	0x42020400

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_MspInit+0x30>)
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e0:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x30>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x30>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80016f8:	f008 f976 	bl	80099e8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	46020c00 	.word	0x46020c00

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0e0      	sub	sp, #384	@ 0x180
 800170c:	af00      	add	r7, sp, #0
 800170e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001712:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001716:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001728:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800172c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001730:	4618      	mov	r0, r3
 8001732:	23e0      	movs	r3, #224	@ 0xe0
 8001734:	461a      	mov	r2, r3
 8001736:	2100      	movs	r1, #0
 8001738:	f010 f843 	bl	80117c2 <memset>
  if(hadc->Instance==ADC1)
 800173c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001740:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a9d      	ldr	r2, [pc, #628]	@ (80019c0 <HAL_ADC_MspInit+0x2b8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f040 814a 	bne.w	80019e4 <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001750:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001754:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001758:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001764:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001768:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800176c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001770:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	4618      	mov	r0, r3
 800177a:	f009 fc0f 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001784:	f7ff ffa0 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001788:	4b8e      	ldr	r3, [pc, #568]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 800178a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178e:	4a8d      	ldr	r2, [pc, #564]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 8001790:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001794:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001798:	4b8a      	ldr	r3, [pc, #552]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 800179a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80017a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017a6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017b4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4b83      	ldr	r3, [pc, #524]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 80017b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017bc:	4a81      	ldr	r2, [pc, #516]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017c6:	4b7f      	ldr	r3, [pc, #508]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 80017c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017cc:	f003 0204 	and.w	r2, r3, #4
 80017d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017e2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b77      	ldr	r3, [pc, #476]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 80017e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ea:	4a76      	ldr	r2, [pc, #472]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017f4:	4b73      	ldr	r3, [pc, #460]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 80017f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001802:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800180c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001810:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b6c      	ldr	r3, [pc, #432]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001818:	4a6a      	ldr	r2, [pc, #424]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001822:	4b68      	ldr	r3, [pc, #416]	@ (80019c4 <HAL_ADC_MspInit+0x2bc>)
 8001824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001828:	f003 0202 	and.w	r2, r3, #2
 800182c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001830:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800183a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800183e:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001840:	230f      	movs	r3, #15
 8001842:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001846:	2303      	movs	r3, #3
 8001848:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001852:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001856:	4619      	mov	r1, r3
 8001858:	485b      	ldr	r0, [pc, #364]	@ (80019c8 <HAL_ADC_MspInit+0x2c0>)
 800185a:	f005 fd3b 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 800185e:	23ed      	movs	r3, #237	@ 0xed
 8001860:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001864:	2303      	movs	r3, #3
 8001866:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001874:	4619      	mov	r1, r3
 8001876:	4855      	ldr	r0, [pc, #340]	@ (80019cc <HAL_ADC_MspInit+0x2c4>)
 8001878:	f005 fd2c 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 800187c:	2303      	movs	r3, #3
 800187e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001892:	4619      	mov	r1, r3
 8001894:	484e      	ldr	r0, [pc, #312]	@ (80019d0 <HAL_ADC_MspInit+0x2c8>)
 8001896:	f005 fd1d 	bl	80072d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800189a:	2321      	movs	r3, #33	@ 0x21
 800189c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80018b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80018da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001900:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001904:	4933      	ldr	r1, [pc, #204]	@ (80019d4 <HAL_ADC_MspInit+0x2cc>)
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fdf8 	bl	80064fc <HAL_DMAEx_List_BuildNode>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 8001912:	f7ff fed9 	bl	80016c8 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001916:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <HAL_ADC_MspInit+0x2cc>)
 8001918:	2100      	movs	r1, #0
 800191a:	482f      	ldr	r0, [pc, #188]	@ (80019d8 <HAL_ADC_MspInit+0x2d0>)
 800191c:	f004 fe1a 	bl	8006554 <HAL_DMAEx_List_InsertNode>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 8001926:	f7ff fecf 	bl	80016c8 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800192a:	482b      	ldr	r0, [pc, #172]	@ (80019d8 <HAL_ADC_MspInit+0x2d0>)
 800192c:	f004 fedb 	bl	80066e6 <HAL_DMAEx_List_SetCircularMode>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 8001936:	f7ff fec7 	bl	80016c8 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800193a:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 800193c:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <HAL_ADC_MspInit+0x2d8>)
 800193e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001940:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 8001942:	2200      	movs	r2, #0
 8001944:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 8001948:	2200      	movs	r2, #0
 800194a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 800194e:	2200      	movs	r2, #0
 8001950:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001952:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 8001954:	2200      	movs	r2, #0
 8001956:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001958:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 800195a:	2281      	movs	r2, #129	@ 0x81
 800195c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800195e:	481f      	ldr	r0, [pc, #124]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 8001960:	f004 fc0c 	bl	800617c <HAL_DMAEx_List_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 800196a:	f7ff fead 	bl	80016c8 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 800196e:	491a      	ldr	r1, [pc, #104]	@ (80019d8 <HAL_ADC_MspInit+0x2d0>)
 8001970:	481a      	ldr	r0, [pc, #104]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 8001972:	f004 ff19 	bl	80067a8 <HAL_DMAEx_List_LinkQ>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 800197c:	f7ff fea4 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001980:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001984:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 800198c:	671a      	str	r2, [r3, #112]	@ 0x70
 800198e:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 8001990:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001994:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800199c:	2110      	movs	r1, #16
 800199e:	480f      	ldr	r0, [pc, #60]	@ (80019dc <HAL_ADC_MspInit+0x2d4>)
 80019a0:	f003 fffa 	bl	8005998 <HAL_DMA_ConfigChannelAttributes>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 80019aa:	f7ff fe8d 	bl	80016c8 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2025      	movs	r0, #37	@ 0x25
 80019b4:	f003 fb74 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019b8:	2025      	movs	r0, #37	@ 0x25
 80019ba:	f003 fb8b 	bl	80050d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80019be:	e0bf      	b.n	8001b40 <HAL_ADC_MspInit+0x438>
 80019c0:	42028000 	.word	0x42028000
 80019c4:	46020c00 	.word	0x46020c00
 80019c8:	42020800 	.word	0x42020800
 80019cc:	42020000 	.word	0x42020000
 80019d0:	42020400 	.word	0x42020400
 80019d4:	20000140 	.word	0x20000140
 80019d8:	20000164 	.word	0x20000164
 80019dc:	2000017c 	.word	0x2000017c
 80019e0:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 80019e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019e8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <HAL_ADC_MspInit+0x444>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	f040 80a4 	bne.w	8001b40 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80019f8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019fc:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001a00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001a0c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a10:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4618      	mov	r0, r3
 8001a22:	f009 fabb 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 8001a2c:	f7ff fe4c 	bl	80016c8 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001a30:	4b47      	ldr	r3, [pc, #284]	@ (8001b50 <HAL_ADC_MspInit+0x448>)
 8001a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a36:	4a46      	ldr	r2, [pc, #280]	@ (8001b50 <HAL_ADC_MspInit+0x448>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a40:	4b43      	ldr	r3, [pc, #268]	@ (8001b50 <HAL_ADC_MspInit+0x448>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a46:	f003 0220 	and.w	r2, r3, #32
 8001a4a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a4e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a58:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a5c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b50 <HAL_ADC_MspInit+0x448>)
 8001a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a64:	4a3a      	ldr	r2, [pc, #232]	@ (8001b50 <HAL_ADC_MspInit+0x448>)
 8001a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_ADC_MspInit+0x448>)
 8001a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a74:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001a78:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a7c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a86:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001a8a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	482b      	ldr	r0, [pc, #172]	@ (8001b54 <HAL_ADC_MspInit+0x44c>)
 8001aa6:	f005 fc15 	bl	80072d4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001aac:	4a2b      	ldr	r2, [pc, #172]	@ (8001b5c <HAL_ADC_MspInit+0x454>)
 8001aae:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abc:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001aca:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ace:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001ad8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001adc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001af6:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001b02:	4815      	ldr	r0, [pc, #84]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001b04:	f003 fba8 	bl	8005258 <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 8001b0e:	f7ff fddb 	bl	80016c8 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001b12:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b16:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001b1e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001b22:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b26:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <HAL_ADC_MspInit+0x450>)
 8001b32:	f003 ff31 	bl	8005998 <HAL_DMA_ConfigChannelAttributes>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 8001b3c:	f7ff fdc4 	bl	80016c8 <Error_Handler>
}
 8001b40:	bf00      	nop
 8001b42:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	46021000 	.word	0x46021000
 8001b50:	46020c00 	.word	0x46020c00
 8001b54:	42021800 	.word	0x42021800
 8001b58:	200001f4 	.word	0x200001f4
 8001b5c:	40020150 	.word	0x40020150

08001b60 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b9c <HAL_DMA2D_MspInit+0x3c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10e      	bne.n	8001b90 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_DMA2D_MspInit+0x40>)
 8001b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b78:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <HAL_DMA2D_MspInit+0x40>)
 8001b7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <HAL_DMA2D_MspInit+0x40>)
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	4002b000 	.word	0x4002b000
 8001ba0:	46020c00 	.word	0x46020c00

08001ba4 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c6c <HAL_XSPI_MspInit+0xc8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d14d      	bne.n	8001c62 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bcc:	4a28      	ldr	r2, [pc, #160]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001bce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bd6:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be4:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bea:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c02:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c08:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <HAL_XSPI_MspInit+0xcc>)
 8001c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001c20:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001c24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001c32:	2308      	movs	r3, #8
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <HAL_XSPI_MspInit+0xd0>)
 8001c3e:	f005 fb49 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c42:	230f      	movs	r3, #15
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001c52:	2308      	movs	r3, #8
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <HAL_XSPI_MspInit+0xd4>)
 8001c5e:	f005 fb39 	bl	80072d4 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	@ 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	420d3400 	.word	0x420d3400
 8001c70:	46020c00 	.word	0x46020c00
 8001c74:	42021c00 	.word	0x42021c00
 8001c78:	42022000 	.word	0x42022000

08001c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b0c4      	sub	sp, #272	@ 0x110
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c8a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	22e0      	movs	r2, #224	@ 0xe0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f00f fd8c 	bl	80117c2 <memset>
  if(hi2c->Instance==I2C1)
 8001caa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a63      	ldr	r2, [pc, #396]	@ (8001e44 <HAL_I2C_MspInit+0x1c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d14f      	bne.n	8001d5c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cbc:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cce:	f107 0318 	add.w	r3, r7, #24
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f009 f962 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001cde:	f7ff fcf3 	bl	80016c8 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce2:	4b59      	ldr	r3, [pc, #356]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce8:	4a57      	ldr	r2, [pc, #348]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cf2:	4b55      	ldr	r3, [pc, #340]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d00:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d20:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d24:	4619      	mov	r1, r3
 8001d26:	4849      	ldr	r0, [pc, #292]	@ (8001e4c <HAL_I2C_MspInit+0x1d0>)
 8001d28:	f005 fad4 	bl	80072d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d2c:	4b46      	ldr	r3, [pc, #280]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d32:	4a45      	ldr	r2, [pc, #276]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d38:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d3c:	4b42      	ldr	r3, [pc, #264]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d42:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d58:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d5a:	e06e      	b.n	8001e3a <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001d5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a39      	ldr	r2, [pc, #228]	@ (8001e50 <HAL_I2C_MspInit+0x1d4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d165      	bne.n	8001e3a <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d6e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	4618      	mov	r0, r3
 8001d86:	f009 f909 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001d90:	f7ff fc9a 	bl	80016c8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d94:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001da4:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001daa:	f003 0220 	and.w	r2, r3, #32
 8001dae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dc0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001de0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001de4:	4619      	mov	r1, r3
 8001de6:	481b      	ldr	r0, [pc, #108]	@ (8001e54 <HAL_I2C_MspInit+0x1d8>)
 8001de8:	f005 fa74 	bl	80072d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dec:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001df2:	4a15      	ldr	r2, [pc, #84]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001df4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001df8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <HAL_I2C_MspInit+0x1cc>)
 8001dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e02:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e18:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2039      	movs	r0, #57	@ 0x39
 8001e20:	f003 f93e 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001e24:	2039      	movs	r0, #57	@ 0x39
 8001e26:	f003 f955 	bl	80050d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	203a      	movs	r0, #58	@ 0x3a
 8001e30:	f003 f936 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001e34:	203a      	movs	r0, #58	@ 0x3a
 8001e36:	f003 f94d 	bl	80050d4 <HAL_NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40005400 	.word	0x40005400
 8001e48:	46020c00 	.word	0x46020c00
 8001e4c:	42021800 	.word	0x42021800
 8001e50:	40005800 	.word	0x40005800
 8001e54:	42021400 	.word	0x42021400

08001e58 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0c6      	sub	sp, #280	@ 0x118
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e66:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e78:	f107 0320 	add.w	r3, r7, #32
 8001e7c:	22e0      	movs	r2, #224	@ 0xe0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00f fc9e 	bl	80117c2 <memset>
  if(hltdc->Instance==LTDC)
 8001e86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a92      	ldr	r2, [pc, #584]	@ (80020dc <HAL_LTDC_MspInit+0x284>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	f040 811b 	bne.w	80020d0 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0302 	mov.w	r3, #2
 8001ea2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001eac:	2303      	movs	r3, #3
 8001eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001eb4:	2332      	movs	r3, #50	@ 0x32
 8001eb6:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001ecc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 f860 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001ee2:	f7ff fbf1 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001eec:	4a7c      	ldr	r2, [pc, #496]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001eee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ef2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001efc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f0a:	4a75      	ldr	r2, [pc, #468]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f14:	4b72      	ldr	r3, [pc, #456]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f1a:	f003 0202 	and.w	r2, r3, #2
 8001f1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f2c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f30:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f32:	4b6b      	ldr	r3, [pc, #428]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f38:	4a69      	ldr	r2, [pc, #420]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f42:	4b67      	ldr	r3, [pc, #412]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f48:	f003 0210 	and.w	r2, r3, #16
 8001f4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f5e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f60:	4b5f      	ldr	r3, [pc, #380]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f66:	4a5e      	ldr	r2, [pc, #376]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f70:	4b5b      	ldr	r3, [pc, #364]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f76:	f003 0208 	and.w	r2, r3, #8
 8001f7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f8c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b54      	ldr	r3, [pc, #336]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f94:	4a52      	ldr	r2, [pc, #328]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f9e:	4b50      	ldr	r3, [pc, #320]	@ (80020e0 <HAL_LTDC_MspInit+0x288>)
 8001fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa4:	f003 0204 	and.w	r2, r3, #4
 8001fa8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fba:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fda:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4840      	ldr	r0, [pc, #256]	@ (80020e4 <HAL_LTDC_MspInit+0x28c>)
 8001fe2:	f005 f977 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001fe6:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8001fea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002000:	2308      	movs	r3, #8
 8002002:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002006:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800200a:	4619      	mov	r1, r3
 800200c:	4836      	ldr	r0, [pc, #216]	@ (80020e8 <HAL_LTDC_MspInit+0x290>)
 800200e:	f005 f961 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002012:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002016:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800202c:	2308      	movs	r3, #8
 800202e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002032:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002036:	4619      	mov	r1, r3
 8002038:	482c      	ldr	r0, [pc, #176]	@ (80020ec <HAL_LTDC_MspInit+0x294>)
 800203a:	f005 f94b 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203e:	23c0      	movs	r3, #192	@ 0xc0
 8002040:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002056:	2307      	movs	r3, #7
 8002058:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002060:	4619      	mov	r1, r3
 8002062:	4823      	ldr	r0, [pc, #140]	@ (80020f0 <HAL_LTDC_MspInit+0x298>)
 8002064:	f005 f936 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002068:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800206c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002082:	2308      	movs	r3, #8
 8002084:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002088:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800208c:	4619      	mov	r1, r3
 800208e:	4818      	ldr	r0, [pc, #96]	@ (80020f0 <HAL_LTDC_MspInit+0x298>)
 8002090:	f005 f920 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80020ae:	2307      	movs	r3, #7
 80020b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020b8:	4619      	mov	r1, r3
 80020ba:	480a      	ldr	r0, [pc, #40]	@ (80020e4 <HAL_LTDC_MspInit+0x28c>)
 80020bc:	f005 f90a 	bl	80072d4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2087      	movs	r0, #135	@ 0x87
 80020c6:	f002 ffeb 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80020ca:	2087      	movs	r0, #135	@ 0x87
 80020cc:	f003 f802 	bl	80050d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80020d0:	bf00      	nop
 80020d2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40016800 	.word	0x40016800
 80020e0:	46020c00 	.word	0x46020c00
 80020e4:	42020400 	.word	0x42020400
 80020e8:	42021000 	.word	0x42021000
 80020ec:	42020c00 	.word	0x42020c00
 80020f0:	42020800 	.word	0x42020800

080020f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0bc      	sub	sp, #240	@ 0xf0
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	22e0      	movs	r2, #224	@ 0xe0
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f00f fb5c 	bl	80117c2 <memset>
  if(hrtc->Instance==RTC)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_RTC_MspInit+0x90>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d132      	bne.n	800217a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002114:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f008 ff35 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002138:	f7ff fac6 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_RTC_MspInit+0x94>)
 800213e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002142:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <HAL_RTC_MspInit+0x94>)
 8002144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800214c:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_RTC_MspInit+0x94>)
 800214e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002152:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <HAL_RTC_MspInit+0x94>)
 8002154:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002158:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_RTC_MspInit+0x94>)
 800215e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <HAL_RTC_MspInit+0x94>)
 800216c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002170:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <HAL_RTC_MspInit+0x94>)
 8002172:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002176:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800217a:	bf00      	nop
 800217c:	37f0      	adds	r7, #240	@ 0xf0
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	46007800 	.word	0x46007800
 8002188:	46020c00 	.word	0x46020c00

0800218c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0b      	ldr	r2, [pc, #44]	@ (80021c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_TIM_PWM_MspInit+0x40>)
 80021a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021a4:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_TIM_PWM_MspInit+0x40>)
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <HAL_TIM_PWM_MspInit+0x40>)
 80021b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40000400 	.word	0x40000400
 80021cc:	46020c00 	.word	0x46020c00

080021d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_TIM_MspPostInit+0x68>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d11e      	bne.n	8002230 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_TIM_MspPostInit+0x6c>)
 80021f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021f8:	4a10      	ldr	r2, [pc, #64]	@ (800223c <HAL_TIM_MspPostInit+0x6c>)
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <HAL_TIM_MspPostInit+0x6c>)
 8002204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002210:	2340      	movs	r3, #64	@ 0x40
 8002212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002220:	2302      	movs	r3, #2
 8002222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4619      	mov	r1, r3
 800222a:	4805      	ldr	r0, [pc, #20]	@ (8002240 <HAL_TIM_MspPostInit+0x70>)
 800222c:	f005 f852 	bl	80072d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002230:	bf00      	nop
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40000400 	.word	0x40000400
 800223c:	46020c00 	.word	0x46020c00
 8002240:	42021000 	.word	0x42021000

08002244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0c2      	sub	sp, #264	@ 0x108
 8002248:	af00      	add	r7, sp, #0
 800224a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800224e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002252:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	22e0      	movs	r2, #224	@ 0xe0
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f00f faa8 	bl	80117c2 <memset>
  if(huart->Instance==USART1)
 8002272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2f      	ldr	r2, [pc, #188]	@ (800233c <HAL_UART_MspInit+0xf8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d155      	bne.n	8002330 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002284:	f04f 0201 	mov.w	r2, #1
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002290:	2300      	movs	r3, #0
 8002292:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4618      	mov	r0, r3
 800229a:	f008 fe7f 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80022a4:	f7ff fa10 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_UART_MspInit+0xfc>)
 80022aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022ae:	4a24      	ldr	r2, [pc, #144]	@ (8002340 <HAL_UART_MspInit+0xfc>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022b8:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_UART_MspInit+0xfc>)
 80022ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_UART_MspInit+0xfc>)
 80022c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <HAL_UART_MspInit+0xfc>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_UART_MspInit+0xfc>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022dc:	f003 0201 	and.w	r2, r3, #1
 80022e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80022e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80022ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022f2:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800230e:	2307      	movs	r3, #7
 8002310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002318:	4619      	mov	r1, r3
 800231a:	480a      	ldr	r0, [pc, #40]	@ (8002344 <HAL_UART_MspInit+0x100>)
 800231c:	f004 ffda 	bl	80072d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	203d      	movs	r0, #61	@ 0x3d
 8002326:	f002 febb 	bl	80050a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800232a:	203d      	movs	r0, #61	@ 0x3d
 800232c:	f002 fed2 	bl	80050d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002330:	bf00      	nop
 8002332:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40013800 	.word	0x40013800
 8002340:	46020c00 	.word	0x46020c00
 8002344:	42020000 	.word	0x42020000

08002348 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0be      	sub	sp, #248	@ 0xf8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002350:	f107 0318 	add.w	r3, r7, #24
 8002354:	22e0      	movs	r2, #224	@ 0xe0
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f00f fa32 	bl	80117c2 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3a      	ldr	r2, [pc, #232]	@ (800244c <HAL_PCD_MspInit+0x104>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d16d      	bne.n	8002444 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002368:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 800236a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800236e:	4a38      	ldr	r2, [pc, #224]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002378:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 800237a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0308 	mov.w	r3, #8
 800238e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002392:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002396:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	4618      	mov	r0, r3
 80023a0:	f008 fdfc 	bl	800af9c <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80023aa:	f7ff f98d 	bl	80016c8 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80023ae:	200c      	movs	r0, #12
 80023b0:	f000 fbb6 	bl	8002b20 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80023b4:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 80023b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ba:	4a25      	ldr	r2, [pc, #148]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 80023c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80023d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 80023da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 80023e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f0:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 80023f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11b      	bne.n	8002436 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 8002400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002404:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 8002410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800241c:	f007 fac4 	bl	80099a8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002420:	f007 faf2 	bl	8009a08 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 8002426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_PCD_MspInit+0x108>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002434:	e003      	b.n	800243e <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002436:	f007 fab7 	bl	80099a8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800243a:	f007 fae5 	bl	8009a08 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800243e:	2001      	movs	r0, #1
 8002440:	f000 fb5a 	bl	8002af8 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002444:	bf00      	nop
 8002446:	37f8      	adds	r7, #248	@ 0xf8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	42040000 	.word	0x42040000
 8002450:	46020c00 	.word	0x46020c00

08002454 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0a4      	sub	sp, #144	@ 0x90
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4aa3      	ldr	r2, [pc, #652]	@ (80026f0 <HAL_SAI_MspInit+0x29c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f040 80a0 	bne.w	80025a8 <HAL_SAI_MspInit+0x154>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002468:	4ba2      	ldr	r3, [pc, #648]	@ (80026f4 <HAL_SAI_MspInit+0x2a0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10e      	bne.n	800248e <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002470:	4ba1      	ldr	r3, [pc, #644]	@ (80026f8 <HAL_SAI_MspInit+0x2a4>)
 8002472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002476:	4aa0      	ldr	r2, [pc, #640]	@ (80026f8 <HAL_SAI_MspInit+0x2a4>)
 8002478:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800247c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002480:	4b9d      	ldr	r3, [pc, #628]	@ (80026f8 <HAL_SAI_MspInit+0x2a4>)
 8002482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800248e:	4b99      	ldr	r3, [pc, #612]	@ (80026f4 <HAL_SAI_MspInit+0x2a0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a97      	ldr	r2, [pc, #604]	@ (80026f4 <HAL_SAI_MspInit+0x2a0>)
 8002496:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002498:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800249c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80024b0:	230d      	movs	r3, #13
 80024b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80024ba:	4619      	mov	r1, r3
 80024bc:	488f      	ldr	r0, [pc, #572]	@ (80026fc <HAL_SAI_MspInit+0x2a8>)
 80024be:	f004 ff09 	bl	80072d4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80024c2:	2321      	movs	r3, #33	@ 0x21
 80024c4:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 80024c6:	2326      	movs	r3, #38	@ 0x26
 80024c8:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80024d6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80024e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80024f2:	2300      	movs	r3, #0
 80024f4:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80024fa:	2300      	movs	r3, #0
 80024fc:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002502:	2300      	movs	r3, #0
 8002504:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	497d      	ldr	r1, [pc, #500]	@ (8002700 <HAL_SAI_MspInit+0x2ac>)
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fff5 	bl	80064fc <HAL_DMAEx_List_BuildNode>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_SAI_MspInit+0xc8>
    {
      Error_Handler();
 8002518:	f7ff f8d6 	bl	80016c8 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800251c:	4a78      	ldr	r2, [pc, #480]	@ (8002700 <HAL_SAI_MspInit+0x2ac>)
 800251e:	2100      	movs	r1, #0
 8002520:	4878      	ldr	r0, [pc, #480]	@ (8002704 <HAL_SAI_MspInit+0x2b0>)
 8002522:	f004 f817 	bl	8006554 <HAL_DMAEx_List_InsertNode>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 800252c:	f7ff f8cc 	bl	80016c8 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002530:	4874      	ldr	r0, [pc, #464]	@ (8002704 <HAL_SAI_MspInit+0x2b0>)
 8002532:	f004 f8d8 	bl	80066e6 <HAL_DMAEx_List_SetCircularMode>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_SAI_MspInit+0xec>
    {
      Error_Handler();
 800253c:	f7ff f8c4 	bl	80016c8 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002540:	4b71      	ldr	r3, [pc, #452]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 8002542:	4a72      	ldr	r2, [pc, #456]	@ (800270c <HAL_SAI_MspInit+0x2b8>)
 8002544:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002546:	4b70      	ldr	r3, [pc, #448]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 8002548:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800254c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800254e:	4b6e      	ldr	r3, [pc, #440]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 8002550:	2200      	movs	r2, #0
 8002552:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002554:	4b6c      	ldr	r3, [pc, #432]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800255a:	4b6b      	ldr	r3, [pc, #428]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 800255c:	2200      	movs	r2, #0
 800255e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002560:	4b69      	ldr	r3, [pc, #420]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 8002562:	2281      	movs	r2, #129	@ 0x81
 8002564:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002566:	4868      	ldr	r0, [pc, #416]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 8002568:	f003 fe08 	bl	800617c <HAL_DMAEx_List_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_SAI_MspInit+0x122>
    {
      Error_Handler();
 8002572:	f7ff f8a9 	bl	80016c8 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002576:	4963      	ldr	r1, [pc, #396]	@ (8002704 <HAL_SAI_MspInit+0x2b0>)
 8002578:	4863      	ldr	r0, [pc, #396]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 800257a:	f004 f915 	bl	80067a8 <HAL_DMAEx_List_LinkQ>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_SAI_MspInit+0x134>
    {
      Error_Handler();
 8002584:	f7ff f8a0 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a5f      	ldr	r2, [pc, #380]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 800258c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002590:	4a5d      	ldr	r2, [pc, #372]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002596:	2110      	movs	r1, #16
 8002598:	485b      	ldr	r0, [pc, #364]	@ (8002708 <HAL_SAI_MspInit+0x2b4>)
 800259a:	f003 f9fd 	bl	8005998 <HAL_DMA_ConfigChannelAttributes>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_SAI_MspInit+0x154>
    {
      Error_Handler();
 80025a4:	f7ff f890 	bl	80016c8 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a58      	ldr	r2, [pc, #352]	@ (8002710 <HAL_SAI_MspInit+0x2bc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f040 809a 	bne.w	80026e8 <HAL_SAI_MspInit+0x294>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80025b4:	4b4f      	ldr	r3, [pc, #316]	@ (80026f4 <HAL_SAI_MspInit+0x2a0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10e      	bne.n	80025da <HAL_SAI_MspInit+0x186>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025bc:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <HAL_SAI_MspInit+0x2a4>)
 80025be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025c2:	4a4d      	ldr	r2, [pc, #308]	@ (80026f8 <HAL_SAI_MspInit+0x2a4>)
 80025c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025c8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025cc:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <HAL_SAI_MspInit+0x2a4>)
 80025ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80025da:	4b46      	ldr	r3, [pc, #280]	@ (80026f4 <HAL_SAI_MspInit+0x2a0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a44      	ldr	r2, [pc, #272]	@ (80026f4 <HAL_SAI_MspInit+0x2a0>)
 80025e2:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025fc:	230d      	movs	r3, #13
 80025fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002606:	4619      	mov	r1, r3
 8002608:	4842      	ldr	r0, [pc, #264]	@ (8002714 <HAL_SAI_MspInit+0x2c0>)
 800260a:	f004 fe63 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800260e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002612:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002626:	230d      	movs	r3, #13
 8002628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002630:	4619      	mov	r1, r3
 8002632:	4839      	ldr	r0, [pc, #228]	@ (8002718 <HAL_SAI_MspInit+0x2c4>)
 8002634:	f004 fe4e 	bl	80072d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002650:	230d      	movs	r3, #13
 8002652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002656:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800265a:	4619      	mov	r1, r3
 800265c:	482e      	ldr	r0, [pc, #184]	@ (8002718 <HAL_SAI_MspInit+0x2c4>)
 800265e:	f004 fe39 	bl	80072d4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002662:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 8002664:	4a2e      	ldr	r2, [pc, #184]	@ (8002720 <HAL_SAI_MspInit+0x2cc>)
 8002666:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002668:	4b2c      	ldr	r3, [pc, #176]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 800266a:	2227      	movs	r2, #39	@ 0x27
 800266c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800266e:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002674:	4b29      	ldr	r3, [pc, #164]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 8002676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800267a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 800267c:	4b27      	ldr	r3, [pc, #156]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 800267e:	2208      	movs	r2, #8
 8002680:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8002682:	4b26      	ldr	r3, [pc, #152]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 8002684:	2200      	movs	r2, #0
 8002686:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002688:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 800268a:	2202      	movs	r2, #2
 800268c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800268e:	4b23      	ldr	r3, [pc, #140]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 8002690:	2200      	movs	r2, #0
 8002692:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002694:	4b21      	ldr	r3, [pc, #132]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 8002696:	2200      	movs	r2, #0
 8002698:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 800269c:	2201      	movs	r2, #1
 800269e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026b8:	4818      	ldr	r0, [pc, #96]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026ba:	f002 fdcd 	bl	8005258 <HAL_DMA_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_SAI_MspInit+0x274>
    {
      Error_Handler();
 80026c4:	f7ff f800 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a14      	ldr	r2, [pc, #80]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80026d0:	4a12      	ldr	r2, [pc, #72]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80026d6:	2110      	movs	r1, #16
 80026d8:	4810      	ldr	r0, [pc, #64]	@ (800271c <HAL_SAI_MspInit+0x2c8>)
 80026da:	f003 f95d 	bl	8005998 <HAL_DMA_ConfigChannelAttributes>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_SAI_MspInit+0x294>
    {
      Error_Handler();
 80026e4:	f7fe fff0 	bl	80016c8 <Error_Handler>
    }

    }
}
 80026e8:	bf00      	nop
 80026ea:	3790      	adds	r7, #144	@ 0x90
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40015804 	.word	0x40015804
 80026f4:	20004ef8 	.word	0x20004ef8
 80026f8:	46020c00 	.word	0x46020c00
 80026fc:	42020400 	.word	0x42020400
 8002700:	2000065c 	.word	0x2000065c
 8002704:	20000680 	.word	0x20000680
 8002708:	20000698 	.word	0x20000698
 800270c:	400200d0 	.word	0x400200d0
 8002710:	40015824 	.word	0x40015824
 8002714:	42020000 	.word	0x42020000
 8002718:	42020800 	.word	0x42020800
 800271c:	200005e4 	.word	0x200005e4
 8002720:	400201d0 	.word	0x400201d0

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <NMI_Handler+0x4>

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <MemManage_Handler+0x4>

0800273c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <UsageFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277a:	f000 f979 	bl	8002a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}

08002782 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002786:	2002      	movs	r0, #2
 8002788:	f004 ff94 	bl	80076b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002794:	2010      	movs	r0, #16
 8002796:	f004 ff8d 	bl	80076b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}

0800279e <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80027a2:	2020      	movs	r0, #32
 80027a4:	f004 ff86 	bl	80076b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80027b0:	4802      	ldr	r0, [pc, #8]	@ (80027bc <GPDMA1_Channel0_IRQHandler+0x10>)
 80027b2:	f002 ff82 	bl	80056ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000017c 	.word	0x2000017c

080027c0 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80027c4:	4802      	ldr	r0, [pc, #8]	@ (80027d0 <GPDMA1_Channel1_IRQHandler+0x10>)
 80027c6:	f002 ff78 	bl	80056ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000698 	.word	0x20000698

080027d4 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80027d8:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <GPDMA1_Channel2_IRQHandler+0x10>)
 80027da:	f002 ff6e 	bl	80056ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200001f4 	.word	0x200001f4

080027e8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80027ec:	4802      	ldr	r0, [pc, #8]	@ (80027f8 <GPDMA1_Channel3_IRQHandler+0x10>)
 80027ee:	f002 ff64 	bl	80056ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200005e4 	.word	0x200005e4

080027fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002800:	4802      	ldr	r0, [pc, #8]	@ (800280c <ADC1_2_IRQHandler+0x10>)
 8002802:	f001 f925 	bl	8003a50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000028 	.word	0x20000028

08002810 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <I2C2_EV_IRQHandler+0x10>)
 8002816:	f005 fa0f 	bl	8007c38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000388 	.word	0x20000388

08002824 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <I2C2_ER_IRQHandler+0x10>)
 800282a:	f005 fa1f 	bl	8007c6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000388 	.word	0x20000388

08002838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <USART1_IRQHandler+0x10>)
 800283e:	f00d fb07 	bl	800fe50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000075c 	.word	0x2000075c

0800284c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <LTDC_IRQHandler+0x10>)
 8002852:	f006 fc19 	bl	8009088 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200003dc 	.word	0x200003dc

08002860 <SystemInit>:
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
 8002864:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <SystemInit+0x68>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <SystemInit+0x68>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002874:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <SystemInit+0x6c>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <SystemInit+0x6c>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <SystemInit+0x6c>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
 8002886:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <SystemInit+0x6c>)
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <SystemInit+0x6c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0e      	ldr	r2, [pc, #56]	@ (80028cc <SystemInit+0x6c>)
 8002892:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002896:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <SystemInit+0x6c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <SystemInit+0x6c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <SystemInit+0x6c>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <SystemInit+0x6c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <SystemInit+0x68>)
 80028b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00
 80028cc:	46020c00 	.word	0x46020c00

080028d0 <Reset_Handler>:
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002908 <LoopForever+0x2>
 80028d4:	f7ff ffc4 	bl	8002860 <SystemInit>
 80028d8:	2100      	movs	r1, #0
 80028da:	e003      	b.n	80028e4 <LoopCopyDataInit>

080028dc <CopyDataInit>:
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <LoopForever+0x6>)
 80028de:	585b      	ldr	r3, [r3, r1]
 80028e0:	5043      	str	r3, [r0, r1]
 80028e2:	3104      	adds	r1, #4

080028e4 <LoopCopyDataInit>:
 80028e4:	480a      	ldr	r0, [pc, #40]	@ (8002910 <LoopForever+0xa>)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <LoopForever+0xe>)
 80028e8:	1842      	adds	r2, r0, r1
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d3f6      	bcc.n	80028dc <CopyDataInit>
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopForever+0x12>)
 80028f0:	e002      	b.n	80028f8 <LoopFillZerobss>

080028f2 <FillZerobss>:
 80028f2:	2300      	movs	r3, #0
 80028f4:	f842 3b04 	str.w	r3, [r2], #4

080028f8 <LoopFillZerobss>:
 80028f8:	4b08      	ldr	r3, [pc, #32]	@ (800291c <LoopForever+0x16>)
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3f9      	bcc.n	80028f2 <FillZerobss>
 80028fe:	f00e ff69 	bl	80117d4 <__libc_init_array>
 8002902:	f7fd fe63 	bl	80005cc <main>

08002906 <LoopForever>:
 8002906:	e7fe      	b.n	8002906 <LoopForever>
 8002908:	202f0000 	.word	0x202f0000
 800290c:	08011944 	.word	0x08011944
 8002910:	20000000 	.word	0x20000000
 8002914:	2000000c 	.word	0x2000000c
 8002918:	2000000c 	.word	0x2000000c
 800291c:	20004f00 	.word	0x20004f00

08002920 <ADC4_IRQHandler>:
 8002920:	e7fe      	b.n	8002920 <ADC4_IRQHandler>
	...

08002924 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002928:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <HAL_Init+0x50>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a11      	ldr	r2, [pc, #68]	@ (8002974 <HAL_Init+0x50>)
 800292e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002934:	2003      	movs	r0, #3
 8002936:	f002 fba8 	bl	800508a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800293a:	f008 f951 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <HAL_Init+0x54>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	490c      	ldr	r1, [pc, #48]	@ (800297c <HAL_Init+0x58>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_Init+0x5c>)
 8002952:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002954:	2004      	movs	r0, #4
 8002956:	f002 fbed 	bl	8005134 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800295a:	200f      	movs	r0, #15
 800295c:	f000 f812 	bl	8002984 <HAL_InitTick>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e002      	b.n	8002970 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800296a:	f7fe feb3 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40022000 	.word	0x40022000
 8002978:	46020c00 	.word	0x46020c00
 800297c:	08011834 	.word	0x08011834
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002990:	4b33      	ldr	r3, [pc, #204]	@ (8002a60 <HAL_InitTick+0xdc>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e05c      	b.n	8002a56 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800299c:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <HAL_InitTick+0xe0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d10c      	bne.n	80029c2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80029a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002a68 <HAL_InitTick+0xe4>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002a60 <HAL_InitTick+0xdc>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e037      	b.n	8002a32 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80029c2:	f002 fc0f 	bl	80051e4 <HAL_SYSTICK_GetCLKSourceConfig>
 80029c6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d023      	beq.n	8002a16 <HAL_InitTick+0x92>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d82d      	bhi.n	8002a30 <HAL_InitTick+0xac>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_InitTick+0x5e>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d00d      	beq.n	80029fc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80029e0:	e026      	b.n	8002a30 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80029e2:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <HAL_InitTick+0xe4>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <HAL_InitTick+0xdc>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80029f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	60fb      	str	r3, [r7, #12]
        break;
 80029fa:	e01a      	b.n	8002a32 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80029fc:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <HAL_InitTick+0xdc>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	60fb      	str	r3, [r7, #12]
        break;
 8002a14:	e00d      	b.n	8002a32 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_InitTick+0xdc>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	60fb      	str	r3, [r7, #12]
        break;
 8002a2e:	e000      	b.n	8002a32 <HAL_InitTick+0xae>
        break;
 8002a30:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f002 fb5c 	bl	80050f0 <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e009      	b.n	8002a56 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a42:	2200      	movs	r2, #0
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4a:	f002 fb29 	bl	80050a0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002a4e:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <HAL_InitTick+0xe8>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000008 	.word	0x20000008
 8002a64:	e000e010 	.word	0xe000e010
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_IncTick+0x20>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_IncTick+0x24>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <HAL_IncTick+0x24>)
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000008 	.word	0x20000008
 8002a94:	20004efc 	.word	0x20004efc

08002a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <HAL_GetTick+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20004efc 	.word	0x20004efc

08002ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff ffee 	bl	8002a98 <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d005      	beq.n	8002ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_Delay+0x44>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad6:	bf00      	nop
 8002ad8:	f7ff ffde 	bl	8002a98 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d8f7      	bhi.n	8002ad8 <HAL_Delay+0x28>
  {
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000008 	.word	0x20000008

08002af8 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b04:	f023 0201 	bic.w	r2, r3, #1
 8002b08:	4904      	ldr	r1, [pc, #16]	@ (8002b1c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	46000400 	.word	0x46000400

08002b20 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2c:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	46000400 	.word	0x46000400

08002b48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	609a      	str	r2, [r3, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <LL_ADC_SetResolution+0x3c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d104      	bne.n	8002bd0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f023 020c 	bic.w	r2, r3, #12
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	46021000 	.word	0x46021000

08002bf0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3360      	adds	r3, #96	@ 0x60
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3360      	adds	r3, #96	@ 0x60
 8002c40:	461a      	mov	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b087      	sub	sp, #28
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3360      	adds	r3, #96	@ 0x60
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3360      	adds	r3, #96	@ 0x60
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	601a      	str	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b087      	sub	sp, #28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3360      	adds	r3, #96	@ 0x60
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	d002      	beq.n	8002d32 <LL_ADC_SetGainCompensation+0x32>
 8002d2c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d30:	e000      	b.n	8002d34 <LL_ADC_SetGainCompensation+0x34>
 8002d32:	2200      	movs	r2, #0
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2107      	movs	r1, #7
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	401a      	ands	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a2b      	ldr	r2, [pc, #172]	@ (8002e68 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d020      	beq.n	8002e02 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3330      	adds	r3, #48	@ 0x30
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	4413      	add	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	211f      	movs	r1, #31
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	f003 011f 	and.w	r1, r3, #31
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002e00:	e02b      	b.n	8002e5a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	210f      	movs	r1, #15
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	e010      	b.n	8002e4c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	613b      	str	r3, [r7, #16]
  return result;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002e40:	2320      	movs	r3, #32
 8002e42:	e003      	b.n	8002e4c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	f001 011f 	and.w	r1, r1, #31
 8002e52:	408b      	lsls	r3, r1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e5a:	bf00      	nop
 8002e5c:	3724      	adds	r7, #36	@ 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	46021000 	.word	0x46021000

08002e6c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2201      	movs	r2, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	e015      	b.n	8002ebc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	60fb      	str	r3, [r7, #12]
  return result;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e003      	b.n	8002eb2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b08b      	sub	sp, #44	@ 0x2c
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a2d      	ldr	r2, [pc, #180]	@ (8003008 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d042      	beq.n	8002fde <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <LL_ADC_SetChannelSamplingTime+0x28>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	e011      	b.n	8002f90 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	617b      	str	r3, [r7, #20]
  return result;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e003      	b.n	8002f8e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	0e5b      	lsrs	r3, r3, #25
 8002f94:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002f98:	460b      	mov	r3, r1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	1ad2      	subs	r2, r2, r3
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3314      	adds	r3, #20
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0e5b      	lsrs	r3, r3, #25
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	4413      	add	r3, r2
 8002fbc:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2107      	movs	r1, #7
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	401a      	ands	r2, r3
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002fdc:	e00e      	b.n	8002ffc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	401a      	ands	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	0219      	lsls	r1, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	400b      	ands	r3, r1
 8002ff2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	615a      	str	r2, [r3, #20]
}
 8002ffc:	bf00      	nop
 8002ffe:	372c      	adds	r7, #44	@ 0x2c
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	46021000 	.word	0x46021000

0800300c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003024:	43db      	mvns	r3, r3
 8003026:	401a      	ands	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0318 	and.w	r3, r3, #24
 800302e:	4908      	ldr	r1, [pc, #32]	@ (8003050 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003030:	40d9      	lsrs	r1, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	400b      	ands	r3, r1
 8003036:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	000fffff 	.word	0x000fffff

08003054 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 031f 	and.w	r3, r3, #31
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800309c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6093      	str	r3, [r2, #8]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030c4:	d101      	bne.n	80030ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80030e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003114:	d101      	bne.n	800311a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <LL_ADC_IsEnabled+0x18>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_ADC_IsEnabled+0x1a>
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003186:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	609a      	str	r2, [r3, #8]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d101      	bne.n	80031b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d101      	bne.n	80031dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b08b      	sub	sp, #44	@ 0x2c
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e2ce      	b.n	80037aa <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a95      	ldr	r2, [pc, #596]	@ (8003470 <HAL_ADC_Init+0x284>)
 800321a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fe fa6f 	bl	8001708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff37 	bl	80030b0 <LL_ADC_IsDeepPowerDownEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff1d 	bl	800308c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff52 	bl	8003100 <LL_ADC_IsInternalRegulatorEnabled>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d115      	bne.n	800328e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff36 	bl	80030d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800326c:	4b81      	ldr	r3, [pc, #516]	@ (8003474 <HAL_ADC_Init+0x288>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	4a81      	ldr	r2, [pc, #516]	@ (8003478 <HAL_ADC_Init+0x28c>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	3301      	adds	r3, #1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003280:	e002      	b.n	8003288 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3b01      	subs	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f9      	bne.n	8003282 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff34 	bl	8003100 <LL_ADC_IsInternalRegulatorEnabled>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10e      	bne.n	80032bc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff6c 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 80032c6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 825f 	bne.w	8003794 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 825b 	bne.w	8003794 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032e6:	f043 0202 	orr.w	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff2c 	bl	8003150 <LL_ADC_IsEnabled>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d14f      	bne.n	800339e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5b      	ldr	r2, [pc, #364]	@ (8003470 <HAL_ADC_Init+0x284>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d037      	beq.n	8003378 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a5b      	ldr	r2, [pc, #364]	@ (800347c <HAL_ADC_Init+0x290>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_ADC_Init+0x130>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5a      	ldr	r2, [pc, #360]	@ (8003480 <HAL_ADC_Init+0x294>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10e      	bne.n	800333a <HAL_ADC_Init+0x14e>
 800331c:	4857      	ldr	r0, [pc, #348]	@ (800347c <HAL_ADC_Init+0x290>)
 800331e:	f7ff ff17 	bl	8003150 <LL_ADC_IsEnabled>
 8003322:	4604      	mov	r4, r0
 8003324:	4856      	ldr	r0, [pc, #344]	@ (8003480 <HAL_ADC_Init+0x294>)
 8003326:	f7ff ff13 	bl	8003150 <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	4323      	orrs	r3, r4
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e008      	b.n	800334c <HAL_ADC_Init+0x160>
 800333a:	484d      	ldr	r0, [pc, #308]	@ (8003470 <HAL_ADC_Init+0x284>)
 800333c:	f7ff ff08 	bl	8003150 <LL_ADC_IsEnabled>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d026      	beq.n	800339e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a49      	ldr	r2, [pc, #292]	@ (800347c <HAL_ADC_Init+0x290>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_ADC_Init+0x178>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a48      	ldr	r2, [pc, #288]	@ (8003480 <HAL_ADC_Init+0x294>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_ADC_Init+0x17c>
 8003364:	4a47      	ldr	r2, [pc, #284]	@ (8003484 <HAL_ADC_Init+0x298>)
 8003366:	e000      	b.n	800336a <HAL_ADC_Init+0x17e>
 8003368:	4a47      	ldr	r2, [pc, #284]	@ (8003488 <HAL_ADC_Init+0x29c>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7ff fbe9 	bl	8002b48 <LL_ADC_SetCommonClock>
 8003376:	e012      	b.n	800339e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f7ff fc14 	bl	8002bb0 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003388:	4b3f      	ldr	r3, [pc, #252]	@ (8003488 <HAL_ADC_Init+0x29c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003398:	493b      	ldr	r1, [pc, #236]	@ (8003488 <HAL_ADC_Init+0x29c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a33      	ldr	r2, [pc, #204]	@ (8003470 <HAL_ADC_Init+0x284>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d010      	beq.n	80033ca <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033ae:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033b4:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80033ba:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80033c2:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80033c4:	4313      	orrs	r3, r2
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	e035      	b.n	8003436 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7f1b      	ldrb	r3, [r3, #28]
 80033ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033d6:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033d8:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80033de:	2a00      	cmp	r2, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_ADC_Init+0x1fc>
 80033e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033e6:	e000      	b.n	80033ea <HAL_ADC_Init+0x1fe>
 80033e8:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033ea:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80033f0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	da04      	bge.n	8003404 <HAL_ADC_Init+0x218>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003402:	e001      	b.n	8003408 <HAL_ADC_Init+0x21c>
 8003404:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003408:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	491b      	ldr	r1, [pc, #108]	@ (800347c <HAL_ADC_Init+0x290>)
 8003410:	428b      	cmp	r3, r1
 8003412:	d004      	beq.n	800341e <HAL_ADC_Init+0x232>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4919      	ldr	r1, [pc, #100]	@ (8003480 <HAL_ADC_Init+0x294>)
 800341a:	428b      	cmp	r3, r1
 800341c:	d103      	bne.n	8003426 <HAL_ADC_Init+0x23a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003424:	e003      	b.n	800342e <HAL_ADC_Init+0x242>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800342e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	4313      	orrs	r3, r2
 8003434:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d131      	bne.n	80034a4 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <HAL_ADC_Init+0x284>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	3b01      	subs	r3, #1
 8003450:	045b      	lsls	r3, r3, #17
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	4313      	orrs	r3, r2
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	e024      	b.n	80034a4 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d113      	bne.n	800348c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	e01a      	b.n	80034a4 <HAL_ADC_Init+0x2b8>
 800346e:	bf00      	nop
 8003470:	46021000 	.word	0x46021000
 8003474:	20000000 	.word	0x20000000
 8003478:	053e2d63 	.word	0x053e2d63
 800347c:	42028000 	.word	0x42028000
 8003480:	42028100 	.word	0x42028100
 8003484:	42028300 	.word	0x42028300
 8003488:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a75      	ldr	r2, [pc, #468]	@ (8003680 <HAL_ADC_Init+0x494>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d018      	beq.n	80034e0 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	4313      	orrs	r3, r2
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003684 <HAL_ADC_Init+0x498>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	430b      	orrs	r3, r1
 80034dc:	60d3      	str	r3, [r2, #12]
 80034de:	e031      	b.n	8003544 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ec:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	4313      	orrs	r3, r2
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	4b61      	ldr	r3, [pc, #388]	@ (8003688 <HAL_ADC_Init+0x49c>)
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	6a39      	ldr	r1, [r7, #32]
 800350c:	430b      	orrs	r3, r1
 800350e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a4d      	ldr	r2, [pc, #308]	@ (8003680 <HAL_ADC_Init+0x494>)
 800354a:	4293      	cmp	r3, r2
 800354c:	f000 80a4 	beq.w	8003698 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fe22 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 800355a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe2f 	bl	80031c4 <LL_ADC_INJ_IsConversionOngoing>
 8003566:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d166      	bne.n	800363c <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d163      	bne.n	800363c <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7f1b      	ldrb	r3, [r3, #28]
 8003578:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4943      	ldr	r1, [pc, #268]	@ (800368c <HAL_ADC_Init+0x4a0>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d004      	beq.n	800358e <HAL_ADC_Init+0x3a2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4941      	ldr	r1, [pc, #260]	@ (8003690 <HAL_ADC_Init+0x4a4>)
 800358a:	428b      	cmp	r3, r1
 800358c:	d102      	bne.n	8003594 <HAL_ADC_Init+0x3a8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003592:	e002      	b.n	800359a <HAL_ADC_Init+0x3ae>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800359a:	4313      	orrs	r3, r2
 800359c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035a8:	f023 0303 	bic.w	r3, r3, #3
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	6a39      	ldr	r1, [r7, #32]
 80035b2:	430b      	orrs	r3, r1
 80035b4:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f7ff fb99 	bl	8002d00 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d11e      	bne.n	8003616 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035dc:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003694 <HAL_ADC_Init+0x4a8>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80035ec:	0411      	lsls	r1, r2, #16
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003604:	0892      	lsrs	r2, r2, #2
 8003606:	430a      	orrs	r2, r1
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	611a      	str	r2, [r3, #16]
 8003614:	e007      	b.n	8003626 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10c      	bne.n	800365e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f023 010f 	bic.w	r1, r3, #15
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	1e5a      	subs	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
 800365c:	e007      	b.n	800366e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 020f 	bic.w	r2, r2, #15
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800367e:	e092      	b.n	80037a6 <HAL_ADC_Init+0x5ba>
 8003680:	46021000 	.word	0x46021000
 8003684:	fff0c013 	.word	0xfff0c013
 8003688:	ffde800d 	.word	0xffde800d
 800368c:	42028000 	.word	0x42028000
 8003690:	42028100 	.word	0x42028100
 8003694:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d111      	bne.n	80036c6 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80036aa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80036b0:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80036b6:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	4b39      	ldr	r3, [pc, #228]	@ (80037b4 <HAL_ADC_Init+0x5c8>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	69f9      	ldr	r1, [r7, #28]
 80036d6:	430b      	orrs	r3, r1
 80036d8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e2:	461a      	mov	r2, r3
 80036e4:	2100      	movs	r1, #0
 80036e6:	f7ff fb2e 	bl	8002d46 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	461a      	mov	r2, r3
 80036f4:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80036f8:	f7ff fb25 	bl	8002d46 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f062 020f 	orn	r2, r2, #15
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28
 8003714:	e018      	b.n	8003748 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800371e:	d113      	bne.n	8003748 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	f003 031c 	and.w	r3, r3, #28
 8003732:	f06f 020f 	mvn.w	r2, #15
 8003736:	fa02 f103 	lsl.w	r1, r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	4b1a      	ldr	r3, [pc, #104]	@ (80037b8 <HAL_ADC_Init+0x5cc>)
 8003750:	4013      	ands	r3, r2
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	429a      	cmp	r2, r3
 8003756:	d10b      	bne.n	8003770 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800376e:	e01a      	b.n	80037a6 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003774:	f023 0312 	bic.w	r3, r3, #18
 8003778:	f043 0210 	orr.w	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003792:	e008      	b.n	80037a6 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003798:	f043 0210 	orr.w	r2, r3, #16
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80037a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	372c      	adds	r7, #44	@ 0x2c
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	f7fffc02 	.word	0xf7fffc02
 80037b8:	833ffff3 	.word	0x833ffff3

080037bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b0a2      	sub	sp, #136	@ 0x88
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a98      	ldr	r2, [pc, #608]	@ (8003a30 <HAL_ADC_Start_DMA+0x274>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_ADC_Start_DMA+0x20>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a97      	ldr	r2, [pc, #604]	@ (8003a34 <HAL_ADC_Start_DMA+0x278>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_Start_DMA+0x24>
 80037dc:	4b96      	ldr	r3, [pc, #600]	@ (8003a38 <HAL_ADC_Start_DMA+0x27c>)
 80037de:	e000      	b.n	80037e2 <HAL_ADC_Start_DMA+0x26>
 80037e0:	4b96      	ldr	r3, [pc, #600]	@ (8003a3c <HAL_ADC_Start_DMA+0x280>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fc36 	bl	8003054 <LL_ADC_GetMultimode>
 80037e8:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fcd5 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 8111 	bne.w	8003a1e <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_ADC_Start_DMA+0x4e>
 8003806:	2302      	movs	r3, #2
 8003808:	e10e      	b.n	8003a28 <HAL_ADC_Start_DMA+0x26c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003818:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800381a:	2b05      	cmp	r3, #5
 800381c:	d003      	beq.n	8003826 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800381e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003820:	2b09      	cmp	r3, #9
 8003822:	f040 80f4 	bne.w	8003a0e <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f001 fa2c 	bl	8004c84 <ADC_Enable>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003832:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 80e4 	bne.w	8003a04 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003840:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7a      	ldr	r2, [pc, #488]	@ (8003a40 <HAL_ADC_Start_DMA+0x284>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d026      	beq.n	80038a8 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a75      	ldr	r2, [pc, #468]	@ (8003a34 <HAL_ADC_Start_DMA+0x278>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d002      	beq.n	800386a <HAL_ADC_Start_DMA+0xae>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	e000      	b.n	800386c <HAL_ADC_Start_DMA+0xb0>
 800386a:	4b71      	ldr	r3, [pc, #452]	@ (8003a30 <HAL_ADC_Start_DMA+0x274>)
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	4293      	cmp	r3, r2
 8003872:	d002      	beq.n	800387a <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003874:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800387e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800388a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d006      	beq.n	80038a0 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003896:	f023 0206 	bic.w	r2, r3, #6
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800389e:	e006      	b.n	80038ae <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80038a6:	e002      	b.n	80038ae <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	4a64      	ldr	r2, [pc, #400]	@ (8003a44 <HAL_ADC_Start_DMA+0x288>)
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	4a63      	ldr	r2, [pc, #396]	@ (8003a48 <HAL_ADC_Start_DMA+0x28c>)
 80038bc:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	4a62      	ldr	r2, [pc, #392]	@ (8003a4c <HAL_ADC_Start_DMA+0x290>)
 80038c4:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	221c      	movs	r2, #28
 80038cc:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0210 	orr.w	r2, r2, #16
 80038e4:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a55      	ldr	r2, [pc, #340]	@ (8003a40 <HAL_ADC_Start_DMA+0x284>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d107      	bne.n	8003900 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d04f      	beq.n	80039ae <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003914:	2b00      	cmp	r3, #0
 8003916:	d046      	beq.n	80039a6 <HAL_ADC_Start_DMA+0x1ea>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d040      	beq.n	80039a6 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f107 0310 	add.w	r3, r7, #16
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f002 fdf8 	bl	8006528 <HAL_DMAEx_List_GetNodeConfig>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e072      	b.n	8003a28 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	2b02      	cmp	r3, #2
 8003946:	d104      	bne.n	8003952 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003950:	e00a      	b.n	8003968 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	2b01      	cmp	r3, #1
 8003956:	d104      	bne.n	8003962 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003960:	e002      	b.n	8003968 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003974:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4618      	mov	r0, r3
 800399a:	f002 fd1b 	bl	80063d4 <HAL_DMAEx_List_Start_IT>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80039a4:	e028      	b.n	80039f8 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80039ac:	e024      	b.n	80039f8 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d104      	bne.n	80039c2 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039c0:	e00c      	b.n	80039dc <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d104      	bne.n	80039d6 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039d4:	e002      	b.n	80039dc <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3340      	adds	r3, #64	@ 0x40
 80039e6:	4619      	mov	r1, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039ee:	f001 fd5f 	bl	80054b0 <HAL_DMA_Start_IT>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fbba 	bl	8003176 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a02:	e00f      	b.n	8003a24 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003a0c:	e00a      	b.n	8003a24 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003a1c:	e002      	b.n	8003a24 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003a24:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3788      	adds	r7, #136	@ 0x88
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	42028000 	.word	0x42028000
 8003a34:	42028100 	.word	0x42028100
 8003a38:	42028300 	.word	0x42028300
 8003a3c:	46021300 	.word	0x46021300
 8003a40:	46021000 	.word	0x46021000
 8003a44:	08004db9 	.word	0x08004db9
 8003a48:	08004e91 	.word	0x08004e91
 8003a4c:	08004ead 	.word	0x08004ead

08003a50 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a77      	ldr	r2, [pc, #476]	@ (8003c50 <HAL_ADC_IRQHandler+0x200>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_ADC_IRQHandler+0x30>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a76      	ldr	r2, [pc, #472]	@ (8003c54 <HAL_ADC_IRQHandler+0x204>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_IRQHandler+0x34>
 8003a80:	4b75      	ldr	r3, [pc, #468]	@ (8003c58 <HAL_ADC_IRQHandler+0x208>)
 8003a82:	e000      	b.n	8003a86 <HAL_ADC_IRQHandler+0x36>
 8003a84:	4b75      	ldr	r3, [pc, #468]	@ (8003c5c <HAL_ADC_IRQHandler+0x20c>)
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fae4 	bl	8003054 <LL_ADC_GetMultimode>
 8003a8c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d017      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x78>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ab2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f001 fa2e 	bl	8004f1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <HAL_ADC_IRQHandler+0x8c>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80d1 	beq.w	8003c8a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80cb 	beq.w	8003c8a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a53      	ldr	r2, [pc, #332]	@ (8003c60 <HAL_ADC_IRQHandler+0x210>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d06c      	beq.n	8003bf0 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f932 	bl	8002d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80aa 	beq.w	8003c7c <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a49      	ldr	r2, [pc, #292]	@ (8003c54 <HAL_ADC_IRQHandler+0x204>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d002      	beq.n	8003b38 <HAL_ADC_IRQHandler+0xe8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	e000      	b.n	8003b3a <HAL_ADC_IRQHandler+0xea>
 8003b38:	4b45      	ldr	r3, [pc, #276]	@ (8003c50 <HAL_ADC_IRQHandler+0x200>)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d008      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d002      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b09      	cmp	r3, #9
 8003b52:	d104      	bne.n	8003b5e <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	e00c      	b.n	8003b78 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3c      	ldr	r2, [pc, #240]	@ (8003c54 <HAL_ADC_IRQHandler+0x204>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d002      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x11e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	e000      	b.n	8003b70 <HAL_ADC_IRQHandler+0x120>
 8003b6e:	4b38      	ldr	r3, [pc, #224]	@ (8003c50 <HAL_ADC_IRQHandler+0x200>)
 8003b70:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d17c      	bne.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d175      	bne.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fb02 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11a      	bne.n	8003bd6 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 020c 	bic.w	r2, r2, #12
 8003bae:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d159      	bne.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bcc:	f043 0201 	orr.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	679a      	str	r2, [r3, #120]	@ 0x78
 8003bd4:	e052      	b.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bda:	f043 0210 	orr.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003bee:	e045      	b.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f8c5 	bl	8002d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d03d      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d138      	bne.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d131      	bne.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fabe 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11d      	bne.n	8003c64 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 020c 	bic.w	r2, r2, #12
 8003c36:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	679a      	str	r2, [r3, #120]	@ 0x78
 8003c4c:	e016      	b.n	8003c7c <HAL_ADC_IRQHandler+0x22c>
 8003c4e:	bf00      	nop
 8003c50:	42028000 	.word	0x42028000
 8003c54:	42028100 	.word	0x42028100
 8003c58:	42028300 	.word	0x42028300
 8003c5c:	46021300 	.word	0x46021300
 8003c60:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f99d 	bl	8003fbc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	220c      	movs	r2, #12
 8003c88:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a8c      	ldr	r2, [pc, #560]	@ (8003ec0 <HAL_ADC_IRQHandler+0x470>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	f000 8095 	beq.w	8003dc0 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_ADC_IRQHandler+0x25a>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8085 	beq.w	8003dc0 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d07f      	beq.n	8003dc0 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff f91e 	bl	8002f1e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ce2:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff f84b 	bl	8002d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cee:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a73      	ldr	r2, [pc, #460]	@ (8003ec4 <HAL_ADC_IRQHandler+0x474>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d002      	beq.n	8003d00 <HAL_ADC_IRQHandler+0x2b0>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	e000      	b.n	8003d02 <HAL_ADC_IRQHandler+0x2b2>
 8003d00:	4b71      	ldr	r3, [pc, #452]	@ (8003ec8 <HAL_ADC_IRQHandler+0x478>)
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d008      	beq.n	8003d1c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d002      	beq.n	8003d1c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d104      	bne.n	8003d26 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	e00c      	b.n	8003d40 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a66      	ldr	r2, [pc, #408]	@ (8003ec4 <HAL_ADC_IRQHandler+0x474>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d002      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x2e6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	e000      	b.n	8003d38 <HAL_ADC_IRQHandler+0x2e8>
 8003d36:	4b64      	ldr	r3, [pc, #400]	@ (8003ec8 <HAL_ADC_IRQHandler+0x478>)
 8003d38:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d035      	beq.n	8003db2 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_ADC_IRQHandler+0x310>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d02d      	beq.n	8003db2 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d128      	bne.n	8003db2 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d121      	bne.n	8003db2 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fa26 	bl	80031c4 <LL_ADC_INJ_IsConversionOngoing>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d119      	bne.n	8003db2 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d8c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 f894 	bl	8004ee0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2260      	movs	r2, #96	@ 0x60
 8003dbe:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <HAL_ADC_IRQHandler+0x39e>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00c      	beq.n	8003dee <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8ff 	bl	8003fe4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2280      	movs	r2, #128	@ 0x80
 8003dec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d012      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x3ce>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f001 f870 	bl	8004ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d012      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x3fe>
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f001 f862 	bl	8004f08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05d      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x4c4>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d058      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6e:	e03b      	b.n	8003ee8 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <HAL_ADC_IRQHandler+0x470>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02c      	beq.n	8003ed4 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a10      	ldr	r2, [pc, #64]	@ (8003ec8 <HAL_ADC_IRQHandler+0x478>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <HAL_ADC_IRQHandler+0x444>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <HAL_ADC_IRQHandler+0x474>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_IRQHandler+0x448>
 8003e94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_ADC_IRQHandler+0x47c>)
 8003e96:	e000      	b.n	8003e9a <HAL_ADC_IRQHandler+0x44a>
 8003e98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <HAL_ADC_IRQHandler+0x480>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f8e8 	bl	8003070 <LL_ADC_GetMultiDMATransfer>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d020      	beq.n	8003ee8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eaa:	e01d      	b.n	8003ee8 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ebe:	e013      	b.n	8003ee8 <HAL_ADC_IRQHandler+0x498>
 8003ec0:	46021000 	.word	0x46021000
 8003ec4:	42028100 	.word	0x42028100
 8003ec8:	42028000 	.word	0x42028000
 8003ecc:	42028300 	.word	0x42028300
 8003ed0:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff f812 	bl	8002f02 <LL_ADC_REG_GetDMATransfer>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10e      	bne.n	8003f0c <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003efe:	f043 0202 	orr.w	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f876 	bl	8003ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2210      	movs	r2, #16
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01b      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x506>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d016      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f877 	bl	8004034 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <HAL_ADC_IRQHandler+0x568>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d126      	bne.n	8003fae <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_ADC_IRQHandler+0x534>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f849 	bl	800400c <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f82:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00f      	beq.n	8003fae <HAL_ADC_IRQHandler+0x55e>
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f841 	bl	8004020 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fac:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3728      	adds	r7, #40	@ 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	46021000 	.word	0x46021000

08003fbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b0b7      	sub	sp, #220	@ 0xdc
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4aa8      	ldr	r2, [pc, #672]	@ (8004304 <HAL_ADC_ConfigChannel+0x2bc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d103      	bne.n	800406e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004074:	2b01      	cmp	r3, #1
 8004076:	d102      	bne.n	800407e <HAL_ADC_ConfigChannel+0x36>
 8004078:	2302      	movs	r3, #2
 800407a:	f000 bdfe 	b.w	8004c7a <HAL_ADC_ConfigChannel+0xc32>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff f887 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 85c1 	bne.w	8004c1a <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a99      	ldr	r2, [pc, #612]	@ (8004304 <HAL_ADC_ConfigChannel+0x2bc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	f000 8409 	beq.w	80048b6 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d108      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x7a>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2201      	movs	r2, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	e01d      	b.n	80040fe <HAL_ADC_ConfigChannel+0xb6>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80040d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80040de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e004      	b.n	80040f4 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80040ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	2201      	movs	r2, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	69d1      	ldr	r1, [r2, #28]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	f7fe fe47 	bl	8002dac <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff f83b 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8004128:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff f847 	bl	80031c4 <LL_ADC_INJ_IsConversionOngoing>
 8004136:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800413a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 81df 	bne.w	8004502 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 81da 	bne.w	8004502 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	461a      	mov	r2, r3
 800415c:	f7fe fef2 	bl	8002f44 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695a      	ldr	r2, [r3, #20]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b04      	cmp	r3, #4
 8004180:	d046      	beq.n	8004210 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6919      	ldr	r1, [r3, #16]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004192:	f7fe fd2d 	bl	8002bf0 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7fe fd5b 	bl	8002c5e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	7e9b      	ldrb	r3, [r3, #26]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d11e      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x17e>
 80041c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041c4:	e000      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x180>
 80041c6:	2300      	movs	r3, #0
 80041c8:	461a      	mov	r2, r3
 80041ca:	f7fe fd7e 	bl	8002cca <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x19c>
 80041de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x19e>
 80041e4:	2300      	movs	r3, #0
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fe fd54 	bl	8002c94 <LL_ADC_SetOffsetSignedSaturation>
 80041ec:	e189      	b.n	8004502 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2200      	movs	r2, #0
 80041f8:	4619      	mov	r1, r3
 80041fa:	f7fe fd66 	bl	8002cca <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2200      	movs	r2, #0
 8004208:	4619      	mov	r1, r3
 800420a:	f7fe fd43 	bl	8002c94 <LL_ADC_SetOffsetSignedSaturation>
 800420e:	e178      	b.n	8004502 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fd0b 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 800421c:	4603      	mov	r3, r0
 800421e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_ADC_ConfigChannel+0x1f4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fd00 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 8004232:	4603      	mov	r3, r0
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	f003 021f 	and.w	r2, r3, #31
 800423a:	e01e      	b.n	800427a <HAL_ADC_ConfigChannel+0x232>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fcf5 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 8004248:	4603      	mov	r3, r0
 800424a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800425a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800425e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004262:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800426a:	2320      	movs	r3, #32
 800426c:	e004      	b.n	8004278 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800426e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x24a>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	0e9b      	lsrs	r3, r3, #26
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	e018      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x27c>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80042a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80042ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80042b6:	2320      	movs	r3, #32
 80042b8:	e004      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80042ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d107      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	2100      	movs	r1, #0
 80042d4:	f7fe fc8c 	bl	8002bf0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fca7 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x2c0>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe fc9c 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 80042fa:	4603      	mov	r3, r0
 80042fc:	0e9b      	lsrs	r3, r3, #26
 80042fe:	f003 021f 	and.w	r2, r3, #31
 8004302:	e020      	b.n	8004346 <HAL_ADC_ConfigChannel+0x2fe>
 8004304:	46021000 	.word	0x46021000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fc8f 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 8004314:	4603      	mov	r3, r0
 8004316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004326:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800432a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800432e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004336:	2320      	movs	r3, #32
 8004338:	e004      	b.n	8004344 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800433a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d105      	bne.n	800435e <HAL_ADC_ConfigChannel+0x316>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	0e9b      	lsrs	r3, r3, #26
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	e018      	b.n	8004390 <HAL_ADC_ConfigChannel+0x348>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800436a:	fa93 f3a3 	rbit	r3, r3
 800436e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800437a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004382:	2320      	movs	r3, #32
 8004384:	e004      	b.n	8004390 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004390:	429a      	cmp	r2, r3
 8004392:	d107      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	2300      	movs	r3, #0
 800439e:	2101      	movs	r1, #1
 80043a0:	f7fe fc26 	bl	8002bf0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fc41 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x388>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2102      	movs	r1, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe fc36 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	f003 021f 	and.w	r2, r3, #31
 80043ce:	e01a      	b.n	8004406 <HAL_ADC_ConfigChannel+0x3be>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2102      	movs	r1, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fc2b 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80043e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80043ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e004      	b.n	8004404 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80043fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d105      	bne.n	800441e <HAL_ADC_ConfigChannel+0x3d6>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	e011      	b.n	8004442 <HAL_ADC_ConfigChannel+0x3fa>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800442c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004436:	2320      	movs	r3, #32
 8004438:	e003      	b.n	8004442 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800443a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004442:	429a      	cmp	r2, r3
 8004444:	d107      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	2102      	movs	r1, #2
 8004452:	f7fe fbcd 	bl	8002bf0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2103      	movs	r1, #3
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fbe8 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 8004462:	4603      	mov	r3, r0
 8004464:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x43a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2103      	movs	r1, #3
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fbdd 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 8004478:	4603      	mov	r3, r0
 800447a:	0e9b      	lsrs	r3, r3, #26
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	e017      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x46a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2103      	movs	r1, #3
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fbd2 	bl	8002c32 <LL_ADC_GetOffsetChannel>
 800448e:	4603      	mov	r3, r0
 8004490:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004494:	fa93 f3a3 	rbit	r3, r3
 8004498:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800449a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800449c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800449e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80044a4:	2320      	movs	r3, #32
 80044a6:	e003      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80044a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x482>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	0e9b      	lsrs	r3, r3, #26
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	e011      	b.n	80044ee <HAL_ADC_ConfigChannel+0x4a6>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80044d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80044dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80044e2:	2320      	movs	r3, #32
 80044e4:	e003      	b.n	80044ee <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80044e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044e8:	fab3 f383 	clz	r3, r3
 80044ec:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d107      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	2103      	movs	r1, #3
 80044fe:	f7fe fb77 	bl	8002bf0 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fe22 	bl	8003150 <LL_ADC_IsEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 83ad 	bne.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	461a      	mov	r2, r3
 8004522:	f7fe fd73 	bl	800300c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800452e:	f040 80d6 	bne.w	80046de <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x50e>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0e9b      	lsrs	r3, r3, #26
 8004544:	3301      	adds	r3, #1
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2b09      	cmp	r3, #9
 800454c:	bf94      	ite	ls
 800454e:	2301      	movls	r3, #1
 8004550:	2300      	movhi	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e019      	b.n	800458a <HAL_ADC_ConfigChannel+0x542>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004566:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800456e:	2320      	movs	r3, #32
 8004570:	e003      	b.n	800457a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004574:	fab3 f383 	clz	r3, r3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	3301      	adds	r3, #1
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2b09      	cmp	r3, #9
 8004582:	bf94      	ite	ls
 8004584:	2301      	movls	r3, #1
 8004586:	2300      	movhi	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d04d      	beq.n	800462a <HAL_ADC_ConfigChannel+0x5e2>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d107      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x562>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0e9b      	lsrs	r3, r3, #26
 80045a0:	3301      	adds	r3, #1
 80045a2:	069b      	lsls	r3, r3, #26
 80045a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045a8:	e015      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x58e>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80045bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80045c2:	2320      	movs	r3, #32
 80045c4:	e003      	b.n	80045ce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80045c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	3301      	adds	r3, #1
 80045d0:	069b      	lsls	r3, r3, #26
 80045d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x5ae>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	0e9b      	lsrs	r3, r3, #26
 80045e8:	3301      	adds	r3, #1
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2101      	movs	r1, #1
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	e017      	b.n	8004626 <HAL_ADC_ConfigChannel+0x5de>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800460e:	2320      	movs	r3, #32
 8004610:	e003      	b.n	800461a <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	fab3 f383 	clz	r3, r3
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3301      	adds	r3, #1
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	4313      	orrs	r3, r2
 8004628:	e04e      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x680>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d107      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x5fe>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0e9b      	lsrs	r3, r3, #26
 800463c:	3301      	adds	r3, #1
 800463e:	069b      	lsls	r3, r3, #26
 8004640:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004644:	e015      	b.n	8004672 <HAL_ADC_ConfigChannel+0x62a>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800465e:	2320      	movs	r3, #32
 8004660:	e003      	b.n	800466a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	fab3 f383 	clz	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3301      	adds	r3, #1
 800466c:	069b      	lsls	r3, r3, #26
 800466e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x64a>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0e9b      	lsrs	r3, r3, #26
 8004684:	3301      	adds	r3, #1
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	e017      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x67a>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	61bb      	str	r3, [r7, #24]
  return result;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80046aa:	2320      	movs	r3, #32
 80046ac:	e003      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	fab3 f383 	clz	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	3301      	adds	r3, #1
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80046da:	f7fe fc33 	bl	8002f44 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f280 82c3 	bge.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a92      	ldr	r2, [pc, #584]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_ADC_ConfigChannel+0x6b4>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a91      	ldr	r2, [pc, #580]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d101      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x6b8>
 80046fc:	4b90      	ldr	r3, [pc, #576]	@ (8004940 <HAL_ADC_ConfigChannel+0x8f8>)
 80046fe:	e000      	b.n	8004702 <HAL_ADC_ConfigChannel+0x6ba>
 8004700:	4b90      	ldr	r3, [pc, #576]	@ (8004944 <HAL_ADC_ConfigChannel+0x8fc>)
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fa46 	bl	8002b94 <LL_ADC_GetCommonPathInternalCh>
 8004708:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a89      	ldr	r2, [pc, #548]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_ADC_ConfigChannel+0x6d8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a88      	ldr	r2, [pc, #544]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10e      	bne.n	800473e <HAL_ADC_ConfigChannel+0x6f6>
 8004720:	4885      	ldr	r0, [pc, #532]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 8004722:	f7fe fd15 	bl	8003150 <LL_ADC_IsEnabled>
 8004726:	4604      	mov	r4, r0
 8004728:	4884      	ldr	r0, [pc, #528]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 800472a:	f7fe fd11 	bl	8003150 <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	4323      	orrs	r3, r4
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e008      	b.n	8004750 <HAL_ADC_ConfigChannel+0x708>
 800473e:	4882      	ldr	r0, [pc, #520]	@ (8004948 <HAL_ADC_ConfigChannel+0x900>)
 8004740:	f7fe fd06 	bl	8003150 <LL_ADC_IsEnabled>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80a6 	beq.w	80048a2 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a7c      	ldr	r2, [pc, #496]	@ (800494c <HAL_ADC_ConfigChannel+0x904>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d13c      	bne.n	80047da <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d136      	bne.n	80047da <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a71      	ldr	r2, [pc, #452]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00a      	beq.n	800478c <HAL_ADC_ConfigChannel+0x744>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a70      	ldr	r2, [pc, #448]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d005      	beq.n	800478c <HAL_ADC_ConfigChannel+0x744>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a70      	ldr	r2, [pc, #448]	@ (8004948 <HAL_ADC_ConfigChannel+0x900>)
 8004786:	4293      	cmp	r3, r2
 8004788:	f040 826e 	bne.w	8004c68 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a69      	ldr	r2, [pc, #420]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_ADC_ConfigChannel+0x758>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a68      	ldr	r2, [pc, #416]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x75c>
 80047a0:	4a67      	ldr	r2, [pc, #412]	@ (8004940 <HAL_ADC_ConfigChannel+0x8f8>)
 80047a2:	e000      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x75e>
 80047a4:	4a67      	ldr	r2, [pc, #412]	@ (8004944 <HAL_ADC_ConfigChannel+0x8fc>)
 80047a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7fe f9dc 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047b6:	4b66      	ldr	r3, [pc, #408]	@ (8004950 <HAL_ADC_ConfigChannel+0x908>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	4a65      	ldr	r2, [pc, #404]	@ (8004954 <HAL_ADC_ConfigChannel+0x90c>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	3301      	adds	r3, #1
 80047c6:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80047c8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80047ca:	e002      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f9      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047d8:	e246      	b.n	8004c68 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a5e      	ldr	r2, [pc, #376]	@ (8004958 <HAL_ADC_ConfigChannel+0x910>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d12b      	bne.n	800483c <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d125      	bne.n	800483c <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a50      	ldr	r2, [pc, #320]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00a      	beq.n	8004810 <HAL_ADC_ConfigChannel+0x7c8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4f      	ldr	r2, [pc, #316]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d005      	beq.n	8004810 <HAL_ADC_ConfigChannel+0x7c8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a4f      	ldr	r2, [pc, #316]	@ (8004948 <HAL_ADC_ConfigChannel+0x900>)
 800480a:	4293      	cmp	r3, r2
 800480c:	f040 822e 	bne.w	8004c6c <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a48      	ldr	r2, [pc, #288]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x7dc>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a47      	ldr	r2, [pc, #284]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x7e0>
 8004824:	4a46      	ldr	r2, [pc, #280]	@ (8004940 <HAL_ADC_ConfigChannel+0x8f8>)
 8004826:	e000      	b.n	800482a <HAL_ADC_ConfigChannel+0x7e2>
 8004828:	4a46      	ldr	r2, [pc, #280]	@ (8004944 <HAL_ADC_ConfigChannel+0x8fc>)
 800482a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800482e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7fe f99a 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800483a:	e217      	b.n	8004c6c <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a46      	ldr	r2, [pc, #280]	@ (800495c <HAL_ADC_ConfigChannel+0x914>)
 8004842:	4293      	cmp	r3, r2
 8004844:	f040 8213 	bne.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800484c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 820c 	bne.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a37      	ldr	r2, [pc, #220]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00a      	beq.n	8004876 <HAL_ADC_ConfigChannel+0x82e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a35      	ldr	r2, [pc, #212]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d005      	beq.n	8004876 <HAL_ADC_ConfigChannel+0x82e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a36      	ldr	r2, [pc, #216]	@ (8004948 <HAL_ADC_ConfigChannel+0x900>)
 8004870:	4293      	cmp	r3, r2
 8004872:	f040 81fc 	bne.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2f      	ldr	r2, [pc, #188]	@ (8004938 <HAL_ADC_ConfigChannel+0x8f0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_ADC_ConfigChannel+0x842>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2d      	ldr	r2, [pc, #180]	@ (800493c <HAL_ADC_ConfigChannel+0x8f4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_ADC_ConfigChannel+0x846>
 800488a:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <HAL_ADC_ConfigChannel+0x8f8>)
 800488c:	e000      	b.n	8004890 <HAL_ADC_ConfigChannel+0x848>
 800488e:	4a2d      	ldr	r2, [pc, #180]	@ (8004944 <HAL_ADC_ConfigChannel+0x8fc>)
 8004890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004894:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f7fe f967 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
 80048a0:	e1e5      	b.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048b4:	e1db      	b.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	f000 811b 	beq.w	8004afe <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048d0:	d004      	beq.n	80048dc <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80048d6:	4a22      	ldr	r2, [pc, #136]	@ (8004960 <HAL_ADC_ConfigChannel+0x918>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d107      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe fac1 	bl	8002e6c <LL_ADC_REG_SetSequencerChAdd>
 80048ea:	e059      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	210f      	movs	r1, #15
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004908:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_ADC_ConfigChannel+0x8d4>
 8004910:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004914:	0e9b      	lsrs	r3, r3, #26
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	e027      	b.n	800496c <HAL_ADC_ConfigChannel+0x924>
 800491c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004920:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	60fb      	str	r3, [r7, #12]
  return result;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d117      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004934:	2320      	movs	r3, #32
 8004936:	e019      	b.n	800496c <HAL_ADC_ConfigChannel+0x924>
 8004938:	42028000 	.word	0x42028000
 800493c:	42028100 	.word	0x42028100
 8004940:	42028300 	.word	0x42028300
 8004944:	46021300 	.word	0x46021300
 8004948:	46021000 	.word	0x46021000
 800494c:	ce080000 	.word	0xce080000
 8004950:	20000000 	.word	0x20000000
 8004954:	053e2d63 	.word	0x053e2d63
 8004958:	ca040000 	.word	0xca040000
 800495c:	80000001 	.word	0x80000001
 8004960:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	6849      	ldr	r1, [r1, #4]
 8004970:	f001 011f 	and.w	r1, r1, #31
 8004974:	408b      	lsls	r3, r1
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	089b      	lsrs	r3, r3, #2
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	429a      	cmp	r2, r3
 800498c:	d808      	bhi.n	80049a0 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800499a:	4619      	mov	r1, r3
 800499c:	f7fe fa06 	bl	8002dac <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	461a      	mov	r2, r3
 80049aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80049ae:	f7fe fac9 	bl	8002f44 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f280 8159 	bge.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a9b      	ldr	r2, [pc, #620]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0x988>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a9a      	ldr	r2, [pc, #616]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x98c>
 80049d0:	4b99      	ldr	r3, [pc, #612]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 80049d2:	e000      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x98e>
 80049d4:	4b99      	ldr	r3, [pc, #612]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe f8dc 	bl	8002b94 <LL_ADC_GetCommonPathInternalCh>
 80049dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a96      	ldr	r2, [pc, #600]	@ (8004c40 <HAL_ADC_ConfigChannel+0xbf8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d12b      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d125      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a8d      	ldr	r2, [pc, #564]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_ADC_ConfigChannel+0x9c2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a8b      	ldr	r2, [pc, #556]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x9c6>
 8004a0a:	4a8b      	ldr	r2, [pc, #556]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 8004a0c:	e000      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x9c8>
 8004a0e:	4a8b      	ldr	r2, [pc, #556]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 8004a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe f8a7 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004a20:	4b88      	ldr	r3, [pc, #544]	@ (8004c44 <HAL_ADC_ConfigChannel+0xbfc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	4a88      	ldr	r2, [pc, #544]	@ (8004c48 <HAL_ADC_ConfigChannel+0xc00>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004a32:	e002      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f9      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004a40:	e045      	b.n	8004ace <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a81      	ldr	r2, [pc, #516]	@ (8004c4c <HAL_ADC_ConfigChannel+0xc04>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d11b      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d115      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a74      	ldr	r2, [pc, #464]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0xa24>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a73      	ldr	r2, [pc, #460]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0xa28>
 8004a6c:	4a72      	ldr	r2, [pc, #456]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 8004a6e:	e000      	b.n	8004a72 <HAL_ADC_ConfigChannel+0xa2a>
 8004a70:	4a72      	ldr	r2, [pc, #456]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 8004a72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7fe f876 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
 8004a82:	e024      	b.n	8004ace <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a71      	ldr	r2, [pc, #452]	@ (8004c50 <HAL_ADC_ConfigChannel+0xc08>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d11f      	bne.n	8004ace <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d115      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a64      	ldr	r2, [pc, #400]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_ADC_ConfigChannel+0xa66>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a62      	ldr	r2, [pc, #392]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0xa6a>
 8004aae:	4a62      	ldr	r2, [pc, #392]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 8004ab0:	e000      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0xa6c>
 8004ab2:	4a62      	ldr	r2, [pc, #392]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 8004ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ab8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe f855 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
 8004ac4:	e003      	b.n	8004ace <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a62      	ldr	r2, [pc, #392]	@ (8004c54 <HAL_ADC_ConfigChannel+0xc0c>)
 8004acc:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a61      	ldr	r2, [pc, #388]	@ (8004c58 <HAL_ADC_ConfigChannel+0xc10>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	f040 80ca 	bne.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f040 80c3 	bne.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0201 	orr.w	r2, r2, #1
 8004af8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004afc:	e0b7      	b.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b06:	d004      	beq.n	8004b12 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004b0c:	4a53      	ldr	r2, [pc, #332]	@ (8004c5c <HAL_ADC_ConfigChannel+0xc14>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d106      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f9d9 	bl	8002ed2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f280 80a2 	bge.w	8004c6e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a40      	ldr	r2, [pc, #256]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_ADC_ConfigChannel+0xaf6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a3e      	ldr	r2, [pc, #248]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0xafa>
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b40:	e000      	b.n	8004b44 <HAL_ADC_ConfigChannel+0xafc>
 8004b42:	4b3e      	ldr	r3, [pc, #248]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe f825 	bl	8002b94 <LL_ADC_GetCommonPathInternalCh>
 8004b4a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a43      	ldr	r2, [pc, #268]	@ (8004c60 <HAL_ADC_ConfigChannel+0xc18>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d115      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a34      	ldr	r2, [pc, #208]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_ADC_ConfigChannel+0xb24>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a33      	ldr	r2, [pc, #204]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0xb28>
 8004b6c:	4a32      	ldr	r2, [pc, #200]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b6e:	e000      	b.n	8004b72 <HAL_ADC_ConfigChannel+0xb2a>
 8004b70:	4a32      	ldr	r2, [pc, #200]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 8004b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7fd fff6 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
 8004b82:	e034      	b.n	8004bee <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a36      	ldr	r2, [pc, #216]	@ (8004c64 <HAL_ADC_ConfigChannel+0xc1c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d115      	bne.n	8004bba <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a27      	ldr	r2, [pc, #156]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADC_ConfigChannel+0xb5a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0xb5e>
 8004ba2:	4a25      	ldr	r2, [pc, #148]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 8004ba4:	e000      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0xb60>
 8004ba6:	4a25      	ldr	r2, [pc, #148]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 8004ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7fd ffdb 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
 8004bb8:	e019      	b.n	8004bee <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	@ (8004c50 <HAL_ADC_ConfigChannel+0xc08>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d114      	bne.n	8004bee <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <HAL_ADC_ConfigChannel+0xbe8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_ADC_ConfigChannel+0xb90>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <HAL_ADC_ConfigChannel+0xbec>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0xb94>
 8004bd8:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <HAL_ADC_ConfigChannel+0xbf0>)
 8004bda:	e000      	b.n	8004bde <HAL_ADC_ConfigChannel+0xb96>
 8004bdc:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <HAL_ADC_ConfigChannel+0xbf4>)
 8004bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004be2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f7fd ffc0 	bl	8002b6e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <HAL_ADC_ConfigChannel+0xc10>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d13a      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d134      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004c18:	e029      	b.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004c2c:	e01f      	b.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
 8004c2e:	bf00      	nop
 8004c30:	42028000 	.word	0x42028000
 8004c34:	42028100 	.word	0x42028100
 8004c38:	42028300 	.word	0x42028300
 8004c3c:	46021300 	.word	0x46021300
 8004c40:	b6002000 	.word	0xb6002000
 8004c44:	20000000 	.word	0x20000000
 8004c48:	053e2d63 	.word	0x053e2d63
 8004c4c:	ba004000 	.word	0xba004000
 8004c50:	80000001 	.word	0x80000001
 8004c54:	b2001000 	.word	0xb2001000
 8004c58:	d7200000 	.word	0xd7200000
 8004c5c:	80000010 	.word	0x80000010
 8004c60:	ce080000 	.word	0xce080000
 8004c64:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c68:	bf00      	nop
 8004c6a:	e000      	b.n	8004c6e <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c6c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004c76:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	37dc      	adds	r7, #220	@ 0xdc
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd90      	pop	{r4, r7, pc}
 8004c82:	bf00      	nop

08004c84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fa5d 	bl	8003150 <LL_ADC_IsEnabled>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d17b      	bne.n	8004d94 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8004da0 <ADC_Enable+0x11c>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cae:	f043 0210 	orr.w	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cba:	f043 0201 	orr.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e067      	b.n	8004d96 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fa28 	bl	8003128 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <ADC_Enable+0x66>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8004da4 <ADC_Enable+0x120>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d054      	beq.n	8004d94 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004cea:	f7fd fed5 	bl	8002a98 <HAL_GetTick>
 8004cee:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <ADC_Enable+0x124>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <ADC_Enable+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004dac <ADC_Enable+0x128>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d101      	bne.n	8004d08 <ADC_Enable+0x84>
 8004d04:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <ADC_Enable+0x12c>)
 8004d06:	e000      	b.n	8004d0a <ADC_Enable+0x86>
 8004d08:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <ADC_Enable+0x130>)
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe f9a2 	bl	8003054 <LL_ADC_GetMultimode>
 8004d10:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a25      	ldr	r2, [pc, #148]	@ (8004dac <ADC_Enable+0x128>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d002      	beq.n	8004d22 <ADC_Enable+0x9e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	e000      	b.n	8004d24 <ADC_Enable+0xa0>
 8004d22:	4b21      	ldr	r3, [pc, #132]	@ (8004da8 <ADC_Enable+0x124>)
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d02c      	beq.n	8004d86 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d130      	bne.n	8004d94 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d32:	e028      	b.n	8004d86 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fa09 	bl	8003150 <LL_ADC_IsEnabled>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe f9ed 	bl	8003128 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d4e:	f7fd fea3 	bl	8002a98 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d914      	bls.n	8004d86 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d00d      	beq.n	8004d86 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d6e:	f043 0210 	orr.w	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e007      	b.n	8004d96 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d1cf      	bne.n	8004d34 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	8000003f 	.word	0x8000003f
 8004da4:	46021000 	.word	0x46021000
 8004da8:	42028000 	.word	0x42028000
 8004dac:	42028100 	.word	0x42028100
 8004db0:	42028300 	.word	0x42028300
 8004db4:	46021300 	.word	0x46021300

08004db8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d14b      	bne.n	8004e6a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d021      	beq.n	8004e30 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fd ffc7 	bl	8002d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d032      	beq.n	8004e62 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d12b      	bne.n	8004e62 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11f      	bne.n	8004e62 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e26:	f043 0201 	orr.w	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	679a      	str	r2, [r3, #120]	@ 0x78
 8004e2e:	e018      	b.n	8004e62 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d111      	bne.n	8004e62 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff f8aa 	bl	8003fbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e68:	e00e      	b.n	8004e88 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff f8be 	bl	8003ff8 <HAL_ADC_ErrorCallback>
}
 8004e7c:	e004      	b.n	8004e88 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff f896 	bl	8003fd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ebe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eca:	f043 0204 	orr.w	r2, r3, #4
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff f890 	bl	8003ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f40:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f62:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <__NVIC_SetPriorityGrouping+0x44>)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	60d3      	str	r3, [r2, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <__NVIC_GetPriorityGrouping+0x18>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	f003 0307 	and.w	r3, r3, #7
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db0b      	blt.n	8004fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	4907      	ldr	r1, [pc, #28]	@ (8004fcc <__NVIC_EnableIRQ+0x38>)
 8004fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000e100 	.word	0xe000e100

08004fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	6039      	str	r1, [r7, #0]
 8004fda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db0a      	blt.n	8004ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	490c      	ldr	r1, [pc, #48]	@ (800501c <__NVIC_SetPriority+0x4c>)
 8004fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff8:	e00a      	b.n	8005010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4908      	ldr	r1, [pc, #32]	@ (8005020 <__NVIC_SetPriority+0x50>)
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	3b04      	subs	r3, #4
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	440b      	add	r3, r1
 800500e:	761a      	strb	r2, [r3, #24]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000e100 	.word	0xe000e100
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	@ 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f1c3 0307 	rsb	r3, r3, #7
 800503e:	2b04      	cmp	r3, #4
 8005040:	bf28      	it	cs
 8005042:	2304      	movcs	r3, #4
 8005044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3304      	adds	r3, #4
 800504a:	2b06      	cmp	r3, #6
 800504c:	d902      	bls.n	8005054 <NVIC_EncodePriority+0x30>
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3b03      	subs	r3, #3
 8005052:	e000      	b.n	8005056 <NVIC_EncodePriority+0x32>
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43da      	mvns	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	401a      	ands	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800506c:	f04f 31ff 	mov.w	r1, #4294967295
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	43d9      	mvns	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800507c:	4313      	orrs	r3, r2
         );
}
 800507e:	4618      	mov	r0, r3
 8005080:	3724      	adds	r7, #36	@ 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ff4c 	bl	8004f30 <__NVIC_SetPriorityGrouping>
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050ae:	f7ff ff63 	bl	8004f78 <__NVIC_GetPriorityGrouping>
 80050b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	6978      	ldr	r0, [r7, #20]
 80050ba:	f7ff ffb3 	bl	8005024 <NVIC_EncodePriority>
 80050be:	4602      	mov	r2, r0
 80050c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff ff82 	bl	8004fd0 <__NVIC_SetPriority>
}
 80050cc:	bf00      	nop
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ff56 	bl	8004f94 <__NVIC_EnableIRQ>
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005100:	d301      	bcc.n	8005106 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005102:	2301      	movs	r3, #1
 8005104:	e00d      	b.n	8005122 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <HAL_SYSTICK_Config+0x40>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3b01      	subs	r3, #1
 800510c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800510e:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <HAL_SYSTICK_Config+0x40>)
 8005110:	2200      	movs	r2, #0
 8005112:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005114:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <HAL_SYSTICK_Config+0x40>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a05      	ldr	r2, [pc, #20]	@ (8005130 <HAL_SYSTICK_Config+0x40>)
 800511a:	f043 0303 	orr.w	r3, r3, #3
 800511e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e010 	.word	0xe000e010

08005134 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d844      	bhi.n	80051cc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005142:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800516b 	.word	0x0800516b
 800514c:	08005189 	.word	0x08005189
 8005150:	080051ab 	.word	0x080051ab
 8005154:	080051cd 	.word	0x080051cd
 8005158:	0800515d 	.word	0x0800515d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800515c:	4b1f      	ldr	r3, [pc, #124]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1e      	ldr	r2, [pc, #120]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005162:	f043 0304 	orr.w	r3, r3, #4
 8005166:	6013      	str	r3, [r2, #0]
      break;
 8005168:	e031      	b.n	80051ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800516a:	4b1c      	ldr	r3, [pc, #112]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1b      	ldr	r2, [pc, #108]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005170:	f023 0304 	bic.w	r3, r3, #4
 8005174:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005176:	4b1a      	ldr	r3, [pc, #104]	@ (80051e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800517c:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800517e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005182:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005186:	e022      	b.n	80051ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005188:	4b14      	ldr	r3, [pc, #80]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a13      	ldr	r2, [pc, #76]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800518e:	f023 0304 	bic.w	r3, r3, #4
 8005192:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005194:	4b12      	ldr	r3, [pc, #72]	@ (80051e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800519a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800519e:	4a10      	ldr	r2, [pc, #64]	@ (80051e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80051a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80051a8:	e011      	b.n	80051ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80051aa:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a0b      	ldr	r2, [pc, #44]	@ (80051dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80051b6:	4b0a      	ldr	r3, [pc, #40]	@ (80051e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80051b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051bc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80051c0:	4a07      	ldr	r2, [pc, #28]	@ (80051e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80051c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80051ca:	e000      	b.n	80051ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80051cc:	bf00      	nop
  }
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	e000e010 	.word	0xe000e010
 80051e0:	46020c00 	.word	0x46020c00

080051e4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80051ea:	4b19      	ldr	r3, [pc, #100]	@ (8005250 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80051f6:	2304      	movs	r3, #4
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	e021      	b.n	8005240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80051fc:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80051fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005202:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005206:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800520e:	d011      	beq.n	8005234 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005216:	d810      	bhi.n	800523a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005224:	d003      	beq.n	800522e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005226:	e008      	b.n	800523a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005228:	2300      	movs	r3, #0
 800522a:	607b      	str	r3, [r7, #4]
        break;
 800522c:	e008      	b.n	8005240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800522e:	2301      	movs	r3, #1
 8005230:	607b      	str	r3, [r7, #4]
        break;
 8005232:	e005      	b.n	8005240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005234:	2302      	movs	r3, #2
 8005236:	607b      	str	r3, [r7, #4]
        break;
 8005238:	e002      	b.n	8005240 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
        break;
 800523e:	bf00      	nop
    }
  }
  return systick_source;
 8005240:	687b      	ldr	r3, [r7, #4]
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000e010 	.word	0xe000e010
 8005254:	46020c00 	.word	0x46020c00

08005258 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005260:	f7fd fc1a 	bl	8002a98 <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0db      	b.n	8005428 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6e      	ldr	r2, [pc, #440]	@ (8005430 <HAL_DMA_Init+0x1d8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	f000 809f 	beq.w	80053ba <HAL_DMA_Init+0x162>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a6c      	ldr	r2, [pc, #432]	@ (8005434 <HAL_DMA_Init+0x1dc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	f000 8099 	beq.w	80053ba <HAL_DMA_Init+0x162>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a6a      	ldr	r2, [pc, #424]	@ (8005438 <HAL_DMA_Init+0x1e0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	f000 8093 	beq.w	80053ba <HAL_DMA_Init+0x162>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a68      	ldr	r2, [pc, #416]	@ (800543c <HAL_DMA_Init+0x1e4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f000 808d 	beq.w	80053ba <HAL_DMA_Init+0x162>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a66      	ldr	r2, [pc, #408]	@ (8005440 <HAL_DMA_Init+0x1e8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	f000 8087 	beq.w	80053ba <HAL_DMA_Init+0x162>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a64      	ldr	r2, [pc, #400]	@ (8005444 <HAL_DMA_Init+0x1ec>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f000 8081 	beq.w	80053ba <HAL_DMA_Init+0x162>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a62      	ldr	r2, [pc, #392]	@ (8005448 <HAL_DMA_Init+0x1f0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d07b      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a61      	ldr	r2, [pc, #388]	@ (800544c <HAL_DMA_Init+0x1f4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d076      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005450 <HAL_DMA_Init+0x1f8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d071      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5e      	ldr	r2, [pc, #376]	@ (8005454 <HAL_DMA_Init+0x1fc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d06c      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5c      	ldr	r2, [pc, #368]	@ (8005458 <HAL_DMA_Init+0x200>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d067      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a5b      	ldr	r2, [pc, #364]	@ (800545c <HAL_DMA_Init+0x204>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d062      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a59      	ldr	r2, [pc, #356]	@ (8005460 <HAL_DMA_Init+0x208>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d05d      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a58      	ldr	r2, [pc, #352]	@ (8005464 <HAL_DMA_Init+0x20c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d058      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a56      	ldr	r2, [pc, #344]	@ (8005468 <HAL_DMA_Init+0x210>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d053      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a55      	ldr	r2, [pc, #340]	@ (800546c <HAL_DMA_Init+0x214>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d04e      	beq.n	80053ba <HAL_DMA_Init+0x162>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a53      	ldr	r2, [pc, #332]	@ (8005470 <HAL_DMA_Init+0x218>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d049      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a52      	ldr	r2, [pc, #328]	@ (8005474 <HAL_DMA_Init+0x21c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d044      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a50      	ldr	r2, [pc, #320]	@ (8005478 <HAL_DMA_Init+0x220>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d03f      	beq.n	80053ba <HAL_DMA_Init+0x162>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a4f      	ldr	r2, [pc, #316]	@ (800547c <HAL_DMA_Init+0x224>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d03a      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a4d      	ldr	r2, [pc, #308]	@ (8005480 <HAL_DMA_Init+0x228>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d035      	beq.n	80053ba <HAL_DMA_Init+0x162>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a4c      	ldr	r2, [pc, #304]	@ (8005484 <HAL_DMA_Init+0x22c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d030      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a4a      	ldr	r2, [pc, #296]	@ (8005488 <HAL_DMA_Init+0x230>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d02b      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a49      	ldr	r2, [pc, #292]	@ (800548c <HAL_DMA_Init+0x234>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d026      	beq.n	80053ba <HAL_DMA_Init+0x162>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a47      	ldr	r2, [pc, #284]	@ (8005490 <HAL_DMA_Init+0x238>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d021      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a46      	ldr	r2, [pc, #280]	@ (8005494 <HAL_DMA_Init+0x23c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01c      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a44      	ldr	r2, [pc, #272]	@ (8005498 <HAL_DMA_Init+0x240>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d017      	beq.n	80053ba <HAL_DMA_Init+0x162>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a43      	ldr	r2, [pc, #268]	@ (800549c <HAL_DMA_Init+0x244>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d012      	beq.n	80053ba <HAL_DMA_Init+0x162>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a41      	ldr	r2, [pc, #260]	@ (80054a0 <HAL_DMA_Init+0x248>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00d      	beq.n	80053ba <HAL_DMA_Init+0x162>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a40      	ldr	r2, [pc, #256]	@ (80054a4 <HAL_DMA_Init+0x24c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d008      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3e      	ldr	r2, [pc, #248]	@ (80054a8 <HAL_DMA_Init+0x250>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <HAL_DMA_Init+0x162>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3d      	ldr	r2, [pc, #244]	@ (80054ac <HAL_DMA_Init+0x254>)
 80053b8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0206 	orr.w	r2, r2, #6
 80053d8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80053da:	e00f      	b.n	80053fc <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80053dc:	f7fd fb5c 	bl	8002a98 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d908      	bls.n	80053fc <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2210      	movs	r2, #16
 80053ee:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2203      	movs	r2, #3
 80053f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e015      	b.n	8005428 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e8      	bne.n	80053dc <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fb26 	bl	8005a5c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40020050 	.word	0x40020050
 8005434:	50020050 	.word	0x50020050
 8005438:	400200d0 	.word	0x400200d0
 800543c:	500200d0 	.word	0x500200d0
 8005440:	40020150 	.word	0x40020150
 8005444:	50020150 	.word	0x50020150
 8005448:	400201d0 	.word	0x400201d0
 800544c:	500201d0 	.word	0x500201d0
 8005450:	40020250 	.word	0x40020250
 8005454:	50020250 	.word	0x50020250
 8005458:	400202d0 	.word	0x400202d0
 800545c:	500202d0 	.word	0x500202d0
 8005460:	40020350 	.word	0x40020350
 8005464:	50020350 	.word	0x50020350
 8005468:	400203d0 	.word	0x400203d0
 800546c:	500203d0 	.word	0x500203d0
 8005470:	40020450 	.word	0x40020450
 8005474:	50020450 	.word	0x50020450
 8005478:	400204d0 	.word	0x400204d0
 800547c:	500204d0 	.word	0x500204d0
 8005480:	40020550 	.word	0x40020550
 8005484:	50020550 	.word	0x50020550
 8005488:	400205d0 	.word	0x400205d0
 800548c:	500205d0 	.word	0x500205d0
 8005490:	40020650 	.word	0x40020650
 8005494:	50020650 	.word	0x50020650
 8005498:	400206d0 	.word	0x400206d0
 800549c:	500206d0 	.word	0x500206d0
 80054a0:	40020750 	.word	0x40020750
 80054a4:	50020750 	.word	0x50020750
 80054a8:	400207d0 	.word	0x400207d0
 80054ac:	500207d0 	.word	0x500207d0

080054b0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e04f      	b.n	8005568 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_DMA_Start_IT+0x26>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e048      	b.n	8005568 <HAL_DMA_Start_IT+0xb8>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d136      	bne.n	8005558 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fa86 	bl	8005a10 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005512:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800552a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005542:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e007      	b.n	8005568 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2240      	movs	r2, #64	@ 0x40
 800555c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005578:	f7fd fa8e 	bl	8002a98 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e06b      	b.n	8005660 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d008      	beq.n	80055a6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e05c      	b.n	8005660 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0204 	orr.w	r2, r2, #4
 80055b4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2205      	movs	r2, #5
 80055ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80055be:	e020      	b.n	8005602 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80055c0:	f7fd fa6a 	bl	8002a98 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d919      	bls.n	8005602 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	f043 0210 	orr.w	r2, r3, #16
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2203      	movs	r2, #3
 80055de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f2:	2201      	movs	r2, #1
 80055f4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e02e      	b.n	8005660 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0d7      	beq.n	80055c0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0202 	orr.w	r2, r2, #2
 800561e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2204      	movs	r2, #4
 8005624:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005630:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564a:	2201      	movs	r2, #1
 800564c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e019      	b.n	80056ae <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d004      	beq.n	8005690 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e00e      	b.n	80056ae <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2204      	movs	r2, #4
 8005694:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80056a6:	f043 0304 	orr.w	r3, r3, #4
 80056aa:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80056ca:	f023 030f 	bic.w	r3, r3, #15
 80056ce:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d8:	3b50      	subs	r3, #80	@ 0x50
 80056da:	09db      	lsrs	r3, r3, #7
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2201      	movs	r2, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4013      	ands	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 813b 	beq.w	8005970 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800571e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005736:	2b00      	cmp	r3, #0
 8005738:	d011      	beq.n	800575e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005750:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005756:	f043 0202 	orr.w	r2, r3, #2
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005782:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005788:	f043 0204 	orr.w	r2, r3, #4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80057b4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ba:	f043 0208 	orr.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d013      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057e6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d04c      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d045      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800581c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b04      	cmp	r3, #4
 8005828:	d12e      	bne.n	8005888 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005838:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0202 	orr.w	r2, r2, #2
 8005848:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d007      	beq.n	800586e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005862:	2201      	movs	r2, #1
 8005864:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d07a      	beq.n	8005974 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
        }

        return;
 8005886:	e075      	b.n	8005974 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2205      	movs	r2, #5
 800588c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d039      	beq.n	8005922 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d032      	beq.n	8005922 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d012      	beq.n	80058ee <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d116      	bne.n	8005900 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d111      	bne.n	8005900 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e8:	2201      	movs	r2, #1
 80058ea:	731a      	strb	r2, [r3, #12]
 80058ec:	e008      	b.n	8005900 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005908:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005926:	2b00      	cmp	r3, #0
 8005928:	d025      	beq.n	8005976 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695a      	ldr	r2, [r3, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0202 	orr.w	r2, r2, #2
 8005938:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005952:	2201      	movs	r2, #1
 8005954:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
 800596e:	e002      	b.n	8005976 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005970:	bf00      	nop
 8005972:	e000      	b.n	8005976 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005974:	bf00      	nop
    }
  }
}
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800598a:	b2db      	uxtb	r3, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e02b      	b.n	8005a04 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80059b4:	f023 030f 	bic.w	r3, r3, #15
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c2:	3b50      	subs	r3, #80	@ 0x50
 80059c4:	09db      	lsrs	r3, r3, #7
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2201      	movs	r2, #1
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	f003 0311 	and.w	r3, r3, #17
 80059e2:	2b11      	cmp	r3, #17
 80059e4:	d106      	bne.n	80059f4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	e006      	b.n	8005a02 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	43db      	mvns	r3, r3
 80059fc:	401a      	ands	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	b291      	uxth	r1, r2
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005a3c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a53      	ldr	r2, [pc, #332]	@ (8005be8 <DMA_Init+0x18c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	f000 80a0 	beq.w	8005be2 <DMA_Init+0x186>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a51      	ldr	r2, [pc, #324]	@ (8005bec <DMA_Init+0x190>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	f000 809a 	beq.w	8005be2 <DMA_Init+0x186>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a4f      	ldr	r2, [pc, #316]	@ (8005bf0 <DMA_Init+0x194>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	f000 8094 	beq.w	8005be2 <DMA_Init+0x186>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a4d      	ldr	r2, [pc, #308]	@ (8005bf4 <DMA_Init+0x198>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f000 808e 	beq.w	8005be2 <DMA_Init+0x186>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a4b      	ldr	r2, [pc, #300]	@ (8005bf8 <DMA_Init+0x19c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	f000 8088 	beq.w	8005be2 <DMA_Init+0x186>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a49      	ldr	r2, [pc, #292]	@ (8005bfc <DMA_Init+0x1a0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	f000 8082 	beq.w	8005be2 <DMA_Init+0x186>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a47      	ldr	r2, [pc, #284]	@ (8005c00 <DMA_Init+0x1a4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d07c      	beq.n	8005be2 <DMA_Init+0x186>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a45      	ldr	r2, [pc, #276]	@ (8005c04 <DMA_Init+0x1a8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d077      	beq.n	8005be2 <DMA_Init+0x186>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a44      	ldr	r2, [pc, #272]	@ (8005c08 <DMA_Init+0x1ac>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d072      	beq.n	8005be2 <DMA_Init+0x186>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a42      	ldr	r2, [pc, #264]	@ (8005c0c <DMA_Init+0x1b0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d06d      	beq.n	8005be2 <DMA_Init+0x186>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a41      	ldr	r2, [pc, #260]	@ (8005c10 <DMA_Init+0x1b4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d068      	beq.n	8005be2 <DMA_Init+0x186>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a3f      	ldr	r2, [pc, #252]	@ (8005c14 <DMA_Init+0x1b8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d063      	beq.n	8005be2 <DMA_Init+0x186>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005c18 <DMA_Init+0x1bc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d05e      	beq.n	8005be2 <DMA_Init+0x186>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	@ (8005c1c <DMA_Init+0x1c0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d059      	beq.n	8005be2 <DMA_Init+0x186>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <DMA_Init+0x1c4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d054      	beq.n	8005be2 <DMA_Init+0x186>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a39      	ldr	r2, [pc, #228]	@ (8005c24 <DMA_Init+0x1c8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d04f      	beq.n	8005be2 <DMA_Init+0x186>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a38      	ldr	r2, [pc, #224]	@ (8005c28 <DMA_Init+0x1cc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04a      	beq.n	8005be2 <DMA_Init+0x186>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a36      	ldr	r2, [pc, #216]	@ (8005c2c <DMA_Init+0x1d0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d045      	beq.n	8005be2 <DMA_Init+0x186>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a35      	ldr	r2, [pc, #212]	@ (8005c30 <DMA_Init+0x1d4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <DMA_Init+0x186>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a33      	ldr	r2, [pc, #204]	@ (8005c34 <DMA_Init+0x1d8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d03b      	beq.n	8005be2 <DMA_Init+0x186>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a32      	ldr	r2, [pc, #200]	@ (8005c38 <DMA_Init+0x1dc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d036      	beq.n	8005be2 <DMA_Init+0x186>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a30      	ldr	r2, [pc, #192]	@ (8005c3c <DMA_Init+0x1e0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d031      	beq.n	8005be2 <DMA_Init+0x186>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2f      	ldr	r2, [pc, #188]	@ (8005c40 <DMA_Init+0x1e4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02c      	beq.n	8005be2 <DMA_Init+0x186>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c44 <DMA_Init+0x1e8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d027      	beq.n	8005be2 <DMA_Init+0x186>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <DMA_Init+0x1ec>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <DMA_Init+0x186>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c4c <DMA_Init+0x1f0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <DMA_Init+0x186>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <DMA_Init+0x1f4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <DMA_Init+0x186>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a27      	ldr	r2, [pc, #156]	@ (8005c54 <DMA_Init+0x1f8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <DMA_Init+0x186>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a26      	ldr	r2, [pc, #152]	@ (8005c58 <DMA_Init+0x1fc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <DMA_Init+0x186>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a24      	ldr	r2, [pc, #144]	@ (8005c5c <DMA_Init+0x200>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <DMA_Init+0x186>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a23      	ldr	r2, [pc, #140]	@ (8005c60 <DMA_Init+0x204>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <DMA_Init+0x186>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <DMA_Init+0x208>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d142      	bne.n	8005c68 <DMA_Init+0x20c>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e041      	b.n	8005c6a <DMA_Init+0x20e>
 8005be6:	bf00      	nop
 8005be8:	40020050 	.word	0x40020050
 8005bec:	50020050 	.word	0x50020050
 8005bf0:	400200d0 	.word	0x400200d0
 8005bf4:	500200d0 	.word	0x500200d0
 8005bf8:	40020150 	.word	0x40020150
 8005bfc:	50020150 	.word	0x50020150
 8005c00:	400201d0 	.word	0x400201d0
 8005c04:	500201d0 	.word	0x500201d0
 8005c08:	40020250 	.word	0x40020250
 8005c0c:	50020250 	.word	0x50020250
 8005c10:	400202d0 	.word	0x400202d0
 8005c14:	500202d0 	.word	0x500202d0
 8005c18:	40020350 	.word	0x40020350
 8005c1c:	50020350 	.word	0x50020350
 8005c20:	400203d0 	.word	0x400203d0
 8005c24:	500203d0 	.word	0x500203d0
 8005c28:	40020450 	.word	0x40020450
 8005c2c:	50020450 	.word	0x50020450
 8005c30:	400204d0 	.word	0x400204d0
 8005c34:	500204d0 	.word	0x500204d0
 8005c38:	40020550 	.word	0x40020550
 8005c3c:	50020550 	.word	0x50020550
 8005c40:	400205d0 	.word	0x400205d0
 8005c44:	500205d0 	.word	0x500205d0
 8005c48:	40020650 	.word	0x40020650
 8005c4c:	50020650 	.word	0x50020650
 8005c50:	400206d0 	.word	0x400206d0
 8005c54:	500206d0 	.word	0x500206d0
 8005c58:	40020750 	.word	0x40020750
 8005c5c:	50020750 	.word	0x50020750
 8005c60:	400207d0 	.word	0x400207d0
 8005c64:	500207d0 	.word	0x500207d0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d012      	beq.n	8005c94 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	3b01      	subs	r3, #1
 8005c78:	051b      	lsls	r3, r3, #20
 8005c7a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005c7e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	3b01      	subs	r3, #1
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005c8c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc6:	f040 80b0 	bne.w	8005e2a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a82      	ldr	r2, [pc, #520]	@ (8005ed8 <DMA_Init+0x47c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	f000 80a0 	beq.w	8005e16 <DMA_Init+0x3ba>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a80      	ldr	r2, [pc, #512]	@ (8005edc <DMA_Init+0x480>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	f000 809a 	beq.w	8005e16 <DMA_Init+0x3ba>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ee0 <DMA_Init+0x484>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	f000 8094 	beq.w	8005e16 <DMA_Init+0x3ba>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ee4 <DMA_Init+0x488>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	f000 808e 	beq.w	8005e16 <DMA_Init+0x3ba>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a7a      	ldr	r2, [pc, #488]	@ (8005ee8 <DMA_Init+0x48c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	f000 8088 	beq.w	8005e16 <DMA_Init+0x3ba>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a78      	ldr	r2, [pc, #480]	@ (8005eec <DMA_Init+0x490>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	f000 8082 	beq.w	8005e16 <DMA_Init+0x3ba>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a76      	ldr	r2, [pc, #472]	@ (8005ef0 <DMA_Init+0x494>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d07c      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a74      	ldr	r2, [pc, #464]	@ (8005ef4 <DMA_Init+0x498>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d077      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a73      	ldr	r2, [pc, #460]	@ (8005ef8 <DMA_Init+0x49c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d072      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a71      	ldr	r2, [pc, #452]	@ (8005efc <DMA_Init+0x4a0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d06d      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a70      	ldr	r2, [pc, #448]	@ (8005f00 <DMA_Init+0x4a4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d068      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a6e      	ldr	r2, [pc, #440]	@ (8005f04 <DMA_Init+0x4a8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d063      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a6d      	ldr	r2, [pc, #436]	@ (8005f08 <DMA_Init+0x4ac>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d05e      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8005f0c <DMA_Init+0x4b0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d059      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a6a      	ldr	r2, [pc, #424]	@ (8005f10 <DMA_Init+0x4b4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d054      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a68      	ldr	r2, [pc, #416]	@ (8005f14 <DMA_Init+0x4b8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d04f      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a67      	ldr	r2, [pc, #412]	@ (8005f18 <DMA_Init+0x4bc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d04a      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a65      	ldr	r2, [pc, #404]	@ (8005f1c <DMA_Init+0x4c0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d045      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a64      	ldr	r2, [pc, #400]	@ (8005f20 <DMA_Init+0x4c4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d040      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a62      	ldr	r2, [pc, #392]	@ (8005f24 <DMA_Init+0x4c8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d03b      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a61      	ldr	r2, [pc, #388]	@ (8005f28 <DMA_Init+0x4cc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d036      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a5f      	ldr	r2, [pc, #380]	@ (8005f2c <DMA_Init+0x4d0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d031      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a5e      	ldr	r2, [pc, #376]	@ (8005f30 <DMA_Init+0x4d4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d02c      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8005f34 <DMA_Init+0x4d8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d027      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a5b      	ldr	r2, [pc, #364]	@ (8005f38 <DMA_Init+0x4dc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d022      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a59      	ldr	r2, [pc, #356]	@ (8005f3c <DMA_Init+0x4e0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01d      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a58      	ldr	r2, [pc, #352]	@ (8005f40 <DMA_Init+0x4e4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d018      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a56      	ldr	r2, [pc, #344]	@ (8005f44 <DMA_Init+0x4e8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a55      	ldr	r2, [pc, #340]	@ (8005f48 <DMA_Init+0x4ec>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a53      	ldr	r2, [pc, #332]	@ (8005f4c <DMA_Init+0x4f0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a52      	ldr	r2, [pc, #328]	@ (8005f50 <DMA_Init+0x4f4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <DMA_Init+0x3ba>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a50      	ldr	r2, [pc, #320]	@ (8005f54 <DMA_Init+0x4f8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <DMA_Init+0x3be>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <DMA_Init+0x3c0>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e008      	b.n	8005e3c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e32:	d103      	bne.n	8005e3c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e3a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e42:	4b45      	ldr	r3, [pc, #276]	@ (8005f58 <DMA_Init+0x4fc>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2200      	movs	r2, #0
 8005e56:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a36      	ldr	r2, [pc, #216]	@ (8005f38 <DMA_Init+0x4dc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d022      	beq.n	8005ea8 <DMA_Init+0x44c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <DMA_Init+0x4e0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d01d      	beq.n	8005ea8 <DMA_Init+0x44c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a33      	ldr	r2, [pc, #204]	@ (8005f40 <DMA_Init+0x4e4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d018      	beq.n	8005ea8 <DMA_Init+0x44c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a32      	ldr	r2, [pc, #200]	@ (8005f44 <DMA_Init+0x4e8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d013      	beq.n	8005ea8 <DMA_Init+0x44c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a30      	ldr	r2, [pc, #192]	@ (8005f48 <DMA_Init+0x4ec>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00e      	beq.n	8005ea8 <DMA_Init+0x44c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f4c <DMA_Init+0x4f0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <DMA_Init+0x44c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2d      	ldr	r2, [pc, #180]	@ (8005f50 <DMA_Init+0x4f4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <DMA_Init+0x44c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f54 <DMA_Init+0x4f8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d101      	bne.n	8005eac <DMA_Init+0x450>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <DMA_Init+0x452>
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40020050 	.word	0x40020050
 8005edc:	50020050 	.word	0x50020050
 8005ee0:	400200d0 	.word	0x400200d0
 8005ee4:	500200d0 	.word	0x500200d0
 8005ee8:	40020150 	.word	0x40020150
 8005eec:	50020150 	.word	0x50020150
 8005ef0:	400201d0 	.word	0x400201d0
 8005ef4:	500201d0 	.word	0x500201d0
 8005ef8:	40020250 	.word	0x40020250
 8005efc:	50020250 	.word	0x50020250
 8005f00:	400202d0 	.word	0x400202d0
 8005f04:	500202d0 	.word	0x500202d0
 8005f08:	40020350 	.word	0x40020350
 8005f0c:	50020350 	.word	0x50020350
 8005f10:	400203d0 	.word	0x400203d0
 8005f14:	500203d0 	.word	0x500203d0
 8005f18:	40020450 	.word	0x40020450
 8005f1c:	50020450 	.word	0x50020450
 8005f20:	400204d0 	.word	0x400204d0
 8005f24:	500204d0 	.word	0x500204d0
 8005f28:	40020550 	.word	0x40020550
 8005f2c:	50020550 	.word	0x50020550
 8005f30:	400205d0 	.word	0x400205d0
 8005f34:	500205d0 	.word	0x500205d0
 8005f38:	40020650 	.word	0x40020650
 8005f3c:	50020650 	.word	0x50020650
 8005f40:	400206d0 	.word	0x400206d0
 8005f44:	500206d0 	.word	0x500206d0
 8005f48:	40020750 	.word	0x40020750
 8005f4c:	50020750 	.word	0x50020750
 8005f50:	400207d0 	.word	0x400207d0
 8005f54:	500207d0 	.word	0x500207d0
 8005f58:	3c803180 	.word	0x3c803180

08005f5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e053      	b.n	8006016 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb fdec 	bl	8001b60 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6851      	ldr	r1, [r2, #4]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	69d2      	ldr	r2, [r2, #28]
 8005fa6:	4311      	orrs	r1, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb6:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6891      	ldr	r1, [r2, #8]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6992      	ldr	r2, [r2, #24]
 8005fc6:	4311      	orrs	r1, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68d1      	ldr	r1, [r2, #12]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	051a      	lsls	r2, r3, #20
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	055b      	lsls	r3, r3, #21
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_DMA2D_ConfigLayer+0x24>
 8006040:	2302      	movs	r3, #2
 8006042:	e092      	b.n	800616a <HAL_DMA2D_ConfigLayer+0x14a>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	4613      	mov	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	3328      	adds	r3, #40	@ 0x28
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4413      	add	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006078:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006084:	4b3c      	ldr	r3, [pc, #240]	@ (8006178 <HAL_DMA2D_ConfigLayer+0x158>)
 8006086:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b0a      	cmp	r3, #10
 800608e:	d003      	beq.n	8006098 <HAL_DMA2D_ConfigLayer+0x78>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b09      	cmp	r3, #9
 8006096:	d107      	bne.n	80060a8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	e005      	b.n	80060b4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	061b      	lsls	r3, r3, #24
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d120      	bne.n	80060fc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	43db      	mvns	r3, r3
 80060c4:	ea02 0103 	and.w	r1, r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b0a      	cmp	r3, #10
 80060e2:	d003      	beq.n	80060ec <HAL_DMA2D_ConfigLayer+0xcc>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d135      	bne.n	8006158 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80060f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80060fa:	e02d      	b.n	8006158 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b0b      	cmp	r3, #11
 8006102:	d109      	bne.n	8006118 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	049b      	lsls	r3, r3, #18
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006116:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	43db      	mvns	r3, r3
 8006122:	ea02 0103 	and.w	r1, r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	430a      	orrs	r2, r1
 800612e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b0a      	cmp	r3, #10
 8006140:	d003      	beq.n	800614a <HAL_DMA2D_ConfigLayer+0x12a>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b09      	cmp	r3, #9
 8006148:	d106      	bne.n	8006158 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006156:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	ff33000f 	.word	0xff33000f

0800617c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006184:	f7fc fc88 	bl	8002a98 <HAL_GetTick>
 8006188:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0db      	b.n	800634c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a6e      	ldr	r2, [pc, #440]	@ (8006354 <HAL_DMAEx_List_Init+0x1d8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f000 809f 	beq.w	80062de <HAL_DMAEx_List_Init+0x162>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a6c      	ldr	r2, [pc, #432]	@ (8006358 <HAL_DMAEx_List_Init+0x1dc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	f000 8099 	beq.w	80062de <HAL_DMAEx_List_Init+0x162>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a6a      	ldr	r2, [pc, #424]	@ (800635c <HAL_DMAEx_List_Init+0x1e0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f000 8093 	beq.w	80062de <HAL_DMAEx_List_Init+0x162>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a68      	ldr	r2, [pc, #416]	@ (8006360 <HAL_DMAEx_List_Init+0x1e4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	f000 808d 	beq.w	80062de <HAL_DMAEx_List_Init+0x162>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a66      	ldr	r2, [pc, #408]	@ (8006364 <HAL_DMAEx_List_Init+0x1e8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f000 8087 	beq.w	80062de <HAL_DMAEx_List_Init+0x162>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a64      	ldr	r2, [pc, #400]	@ (8006368 <HAL_DMAEx_List_Init+0x1ec>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	f000 8081 	beq.w	80062de <HAL_DMAEx_List_Init+0x162>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a62      	ldr	r2, [pc, #392]	@ (800636c <HAL_DMAEx_List_Init+0x1f0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d07b      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a61      	ldr	r2, [pc, #388]	@ (8006370 <HAL_DMAEx_List_Init+0x1f4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d076      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a5f      	ldr	r2, [pc, #380]	@ (8006374 <HAL_DMAEx_List_Init+0x1f8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d071      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006378 <HAL_DMAEx_List_Init+0x1fc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d06c      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5c      	ldr	r2, [pc, #368]	@ (800637c <HAL_DMAEx_List_Init+0x200>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d067      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5b      	ldr	r2, [pc, #364]	@ (8006380 <HAL_DMAEx_List_Init+0x204>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d062      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a59      	ldr	r2, [pc, #356]	@ (8006384 <HAL_DMAEx_List_Init+0x208>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d05d      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a58      	ldr	r2, [pc, #352]	@ (8006388 <HAL_DMAEx_List_Init+0x20c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d058      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a56      	ldr	r2, [pc, #344]	@ (800638c <HAL_DMAEx_List_Init+0x210>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d053      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a55      	ldr	r2, [pc, #340]	@ (8006390 <HAL_DMAEx_List_Init+0x214>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d04e      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a53      	ldr	r2, [pc, #332]	@ (8006394 <HAL_DMAEx_List_Init+0x218>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d049      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a52      	ldr	r2, [pc, #328]	@ (8006398 <HAL_DMAEx_List_Init+0x21c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d044      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a50      	ldr	r2, [pc, #320]	@ (800639c <HAL_DMAEx_List_Init+0x220>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d03f      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a4f      	ldr	r2, [pc, #316]	@ (80063a0 <HAL_DMAEx_List_Init+0x224>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d03a      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4d      	ldr	r2, [pc, #308]	@ (80063a4 <HAL_DMAEx_List_Init+0x228>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d035      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a4c      	ldr	r2, [pc, #304]	@ (80063a8 <HAL_DMAEx_List_Init+0x22c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d030      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4a      	ldr	r2, [pc, #296]	@ (80063ac <HAL_DMAEx_List_Init+0x230>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d02b      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a49      	ldr	r2, [pc, #292]	@ (80063b0 <HAL_DMAEx_List_Init+0x234>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d026      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a47      	ldr	r2, [pc, #284]	@ (80063b4 <HAL_DMAEx_List_Init+0x238>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d021      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a46      	ldr	r2, [pc, #280]	@ (80063b8 <HAL_DMAEx_List_Init+0x23c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d01c      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a44      	ldr	r2, [pc, #272]	@ (80063bc <HAL_DMAEx_List_Init+0x240>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d017      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a43      	ldr	r2, [pc, #268]	@ (80063c0 <HAL_DMAEx_List_Init+0x244>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d012      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a41      	ldr	r2, [pc, #260]	@ (80063c4 <HAL_DMAEx_List_Init+0x248>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00d      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a40      	ldr	r2, [pc, #256]	@ (80063c8 <HAL_DMAEx_List_Init+0x24c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d008      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3e      	ldr	r2, [pc, #248]	@ (80063cc <HAL_DMAEx_List_Init+0x250>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d003      	beq.n	80062de <HAL_DMAEx_List_Init+0x162>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3d      	ldr	r2, [pc, #244]	@ (80063d0 <HAL_DMAEx_List_Init+0x254>)
 80062dc:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0206 	orr.w	r2, r2, #6
 80062fc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80062fe:	e00f      	b.n	8006320 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006300:	f7fc fbca 	bl	8002a98 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b05      	cmp	r3, #5
 800630c:	d908      	bls.n	8006320 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2210      	movs	r2, #16
 8006312:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2203      	movs	r2, #3
 8006318:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e015      	b.n	800634c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e8      	bne.n	8006300 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fae0 	bl	80068f4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40020050 	.word	0x40020050
 8006358:	50020050 	.word	0x50020050
 800635c:	400200d0 	.word	0x400200d0
 8006360:	500200d0 	.word	0x500200d0
 8006364:	40020150 	.word	0x40020150
 8006368:	50020150 	.word	0x50020150
 800636c:	400201d0 	.word	0x400201d0
 8006370:	500201d0 	.word	0x500201d0
 8006374:	40020250 	.word	0x40020250
 8006378:	50020250 	.word	0x50020250
 800637c:	400202d0 	.word	0x400202d0
 8006380:	500202d0 	.word	0x500202d0
 8006384:	40020350 	.word	0x40020350
 8006388:	50020350 	.word	0x50020350
 800638c:	400203d0 	.word	0x400203d0
 8006390:	500203d0 	.word	0x500203d0
 8006394:	40020450 	.word	0x40020450
 8006398:	50020450 	.word	0x50020450
 800639c:	400204d0 	.word	0x400204d0
 80063a0:	500204d0 	.word	0x500204d0
 80063a4:	40020550 	.word	0x40020550
 80063a8:	50020550 	.word	0x50020550
 80063ac:	400205d0 	.word	0x400205d0
 80063b0:	500205d0 	.word	0x500205d0
 80063b4:	40020650 	.word	0x40020650
 80063b8:	50020650 	.word	0x50020650
 80063bc:	400206d0 	.word	0x400206d0
 80063c0:	500206d0 	.word	0x500206d0
 80063c4:	40020750 	.word	0x40020750
 80063c8:	50020750 	.word	0x50020750
 80063cc:	400207d0 	.word	0x400207d0
 80063d0:	500207d0 	.word	0x500207d0

080063d4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_DMAEx_List_Start_IT+0x16>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e082      	b.n	80064f4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80063f4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006400:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d005      	beq.n	8006414 <HAL_DMAEx_List_Start_IT+0x40>
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d16a      	bne.n	80064e4 <HAL_DMAEx_List_Start_IT+0x110>
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d067      	beq.n	80064e4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d157      	bne.n	80064d0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_DMAEx_List_Start_IT+0x5a>
 800642a:	2302      	movs	r3, #2
 800642c:	e062      	b.n	80064f4 <HAL_DMAEx_List_Start_IT+0x120>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006442:	2202      	movs	r2, #2
 8006444:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006450:	2200      	movs	r2, #0
 8006452:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006462:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800647a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006492:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f107 010c 	add.w	r1, r7, #12
 800649e:	2200      	movs	r2, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fe47 	bl	8007134 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4619      	mov	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	0c0b      	lsrs	r3, r1, #16
 80064b4:	041b      	lsls	r3, r3, #16
 80064b6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80064c4:	4013      	ands	r3, r2
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	430b      	orrs	r3, r1
 80064ce:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e007      	b.n	80064f4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2240      	movs	r2, #64	@ 0x40
 80064e8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_DMAEx_List_BuildNode+0x16>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e004      	b.n	8006520 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fb43 	bl	8006ba4 <DMA_List_BuildNode>

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e004      	b.n	800654c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fc7f 	bl	8006e48 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08c      	sub	sp, #48	@ 0x30
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_DMAEx_List_InsertNode+0x18>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0b6      	b.n	80066de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d104      	bne.n	8006582 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2204      	movs	r2, #4
 800657c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e0ad      	b.n	80066de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fd66 	bl	800705c <DMA_List_CheckNodesBaseAddresses>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2205      	movs	r2, #5
 800659a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e09e      	b.n	80066de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fd87 	bl	80070bc <DMA_List_CheckNodesTypes>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2204      	movs	r2, #4
 80065b8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e08f      	b.n	80066de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2202      	movs	r2, #2
 80065c2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80065ca:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80065ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fdad 	bl	8007134 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11a      	bne.n	8006618 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	e06c      	b.n	80066d0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006602:	4013      	ands	r3, r2
 8006604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006608:	4319      	orrs	r1, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2202      	movs	r2, #2
 8006614:	609a      	str	r2, [r3, #8]
 8006616:	e05b      	b.n	80066d0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006628:	4013      	ands	r3, r2
 800662a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800662c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800662e:	4319      	orrs	r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e043      	b.n	80066c6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006640:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006642:	f107 0314 	add.w	r3, r7, #20
 8006646:	461a      	mov	r2, r3
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fda2 	bl	8007194 <DMA_List_FindNode>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d132      	bne.n	80066bc <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	429a      	cmp	r2, r3
 800665e:	d11a      	bne.n	8006696 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	461a      	mov	r2, r3
 800666e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006672:	4013      	ands	r3, r2
 8006674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006678:	4319      	orrs	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006686:	4013      	ands	r3, r2
 8006688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800668a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800668c:	4319      	orrs	r1, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006694:	e017      	b.n	80066c6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80066ac:	4013      	ands	r3, r2
 80066ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066b2:	4319      	orrs	r1, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80066ba:	e004      	b.n	80066c6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2206      	movs	r2, #6
 80066c0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e00b      	b.n	80066de <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3730      	adds	r7, #48	@ 0x30
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b08a      	sub	sp, #40	@ 0x28
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e052      	b.n	800679e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d104      	bne.n	800670a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e049      	b.n	800679e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d101      	bne.n	8006722 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e03d      	b.n	800679e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2204      	movs	r2, #4
 8006726:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e038      	b.n	800679e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d104      	bne.n	800673e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2204      	movs	r2, #4
 8006738:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e02f      	b.n	800679e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f107 0220 	add.w	r2, r7, #32
 8006752:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fcec 	bl	8007134 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006760:	f107 030c 	add.w	r3, r7, #12
 8006764:	461a      	mov	r2, r3
 8006766:	2100      	movs	r1, #0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fd13 	bl	8007194 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006778:	4013      	ands	r3, r2
 800677a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4610      	mov	r0, r2
 8006780:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006782:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006784:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3728      	adds	r7, #40	@ 0x28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_DMAEx_List_LinkQ+0x16>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e072      	b.n	80068a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80067c8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d002      	beq.n	80067dc <HAL_DMAEx_List_LinkQ+0x34>
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b05      	cmp	r3, #5
 80067da:	d108      	bne.n	80067ee <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2240      	movs	r2, #64	@ 0x40
 80067e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e05c      	b.n	80068a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	7b1b      	ldrb	r3, [r3, #12]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d104      	bne.n	8006802 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2201      	movs	r2, #1
 80067fc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e052      	b.n	80068a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2b      	ldr	r2, [pc, #172]	@ (80068b4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d022      	beq.n	8006852 <HAL_DMAEx_List_LinkQ+0xaa>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a29      	ldr	r2, [pc, #164]	@ (80068b8 <HAL_DMAEx_List_LinkQ+0x110>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01d      	beq.n	8006852 <HAL_DMAEx_List_LinkQ+0xaa>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a28      	ldr	r2, [pc, #160]	@ (80068bc <HAL_DMAEx_List_LinkQ+0x114>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d018      	beq.n	8006852 <HAL_DMAEx_List_LinkQ+0xaa>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a26      	ldr	r2, [pc, #152]	@ (80068c0 <HAL_DMAEx_List_LinkQ+0x118>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_DMAEx_List_LinkQ+0xaa>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a25      	ldr	r2, [pc, #148]	@ (80068c4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_DMAEx_List_LinkQ+0xaa>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a23      	ldr	r2, [pc, #140]	@ (80068c8 <HAL_DMAEx_List_LinkQ+0x120>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <HAL_DMAEx_List_LinkQ+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a22      	ldr	r2, [pc, #136]	@ (80068cc <HAL_DMAEx_List_LinkQ+0x124>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_DMAEx_List_LinkQ+0xaa>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a20      	ldr	r2, [pc, #128]	@ (80068d0 <HAL_DMAEx_List_LinkQ+0x128>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d101      	bne.n	8006856 <HAL_DMAEx_List_LinkQ+0xae>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <HAL_DMAEx_List_LinkQ+0xb0>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2203      	movs	r2, #3
 800686e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e019      	b.n	80068a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006878:	2b81      	cmp	r3, #129	@ 0x81
 800687a:	d108      	bne.n	800688e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10d      	bne.n	80068a0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2204      	movs	r2, #4
 8006888:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e00c      	b.n	80068a8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2204      	movs	r2, #4
 800689a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e003      	b.n	80068a8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40020650 	.word	0x40020650
 80068b8:	50020650 	.word	0x50020650
 80068bc:	400206d0 	.word	0x400206d0
 80068c0:	500206d0 	.word	0x500206d0
 80068c4:	40020750 	.word	0x40020750
 80068c8:	50020750 	.word	0x50020750
 80068cc:	400207d0 	.word	0x400207d0
 80068d0:	500207d0 	.word	0x500207d0

080068d4 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	0c1b      	lsrs	r3, r3, #16
 80068e4:	b2db      	uxtb	r3, r3
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a85      	ldr	r2, [pc, #532]	@ (8006b24 <DMA_List_Init+0x230>)
 800690e:	4293      	cmp	r3, r2
 8006910:	f000 80a0 	beq.w	8006a54 <DMA_List_Init+0x160>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a83      	ldr	r2, [pc, #524]	@ (8006b28 <DMA_List_Init+0x234>)
 800691a:	4293      	cmp	r3, r2
 800691c:	f000 809a 	beq.w	8006a54 <DMA_List_Init+0x160>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a81      	ldr	r2, [pc, #516]	@ (8006b2c <DMA_List_Init+0x238>)
 8006926:	4293      	cmp	r3, r2
 8006928:	f000 8094 	beq.w	8006a54 <DMA_List_Init+0x160>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7f      	ldr	r2, [pc, #508]	@ (8006b30 <DMA_List_Init+0x23c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	f000 808e 	beq.w	8006a54 <DMA_List_Init+0x160>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7d      	ldr	r2, [pc, #500]	@ (8006b34 <DMA_List_Init+0x240>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f000 8088 	beq.w	8006a54 <DMA_List_Init+0x160>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a7b      	ldr	r2, [pc, #492]	@ (8006b38 <DMA_List_Init+0x244>)
 800694a:	4293      	cmp	r3, r2
 800694c:	f000 8082 	beq.w	8006a54 <DMA_List_Init+0x160>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a79      	ldr	r2, [pc, #484]	@ (8006b3c <DMA_List_Init+0x248>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d07c      	beq.n	8006a54 <DMA_List_Init+0x160>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a78      	ldr	r2, [pc, #480]	@ (8006b40 <DMA_List_Init+0x24c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d077      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a76      	ldr	r2, [pc, #472]	@ (8006b44 <DMA_List_Init+0x250>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d072      	beq.n	8006a54 <DMA_List_Init+0x160>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a75      	ldr	r2, [pc, #468]	@ (8006b48 <DMA_List_Init+0x254>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d06d      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a73      	ldr	r2, [pc, #460]	@ (8006b4c <DMA_List_Init+0x258>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d068      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a72      	ldr	r2, [pc, #456]	@ (8006b50 <DMA_List_Init+0x25c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d063      	beq.n	8006a54 <DMA_List_Init+0x160>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a70      	ldr	r2, [pc, #448]	@ (8006b54 <DMA_List_Init+0x260>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d05e      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6f      	ldr	r2, [pc, #444]	@ (8006b58 <DMA_List_Init+0x264>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d059      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a6d      	ldr	r2, [pc, #436]	@ (8006b5c <DMA_List_Init+0x268>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d054      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006b60 <DMA_List_Init+0x26c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d04f      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a6a      	ldr	r2, [pc, #424]	@ (8006b64 <DMA_List_Init+0x270>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d04a      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a69      	ldr	r2, [pc, #420]	@ (8006b68 <DMA_List_Init+0x274>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d045      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a67      	ldr	r2, [pc, #412]	@ (8006b6c <DMA_List_Init+0x278>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d040      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a66      	ldr	r2, [pc, #408]	@ (8006b70 <DMA_List_Init+0x27c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d03b      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a64      	ldr	r2, [pc, #400]	@ (8006b74 <DMA_List_Init+0x280>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d036      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a63      	ldr	r2, [pc, #396]	@ (8006b78 <DMA_List_Init+0x284>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d031      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a61      	ldr	r2, [pc, #388]	@ (8006b7c <DMA_List_Init+0x288>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02c      	beq.n	8006a54 <DMA_List_Init+0x160>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a60      	ldr	r2, [pc, #384]	@ (8006b80 <DMA_List_Init+0x28c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d027      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a5e      	ldr	r2, [pc, #376]	@ (8006b84 <DMA_List_Init+0x290>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d022      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a5d      	ldr	r2, [pc, #372]	@ (8006b88 <DMA_List_Init+0x294>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01d      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a5b      	ldr	r2, [pc, #364]	@ (8006b8c <DMA_List_Init+0x298>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a5a      	ldr	r2, [pc, #360]	@ (8006b90 <DMA_List_Init+0x29c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a58      	ldr	r2, [pc, #352]	@ (8006b94 <DMA_List_Init+0x2a0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a57      	ldr	r2, [pc, #348]	@ (8006b98 <DMA_List_Init+0x2a4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a55      	ldr	r2, [pc, #340]	@ (8006b9c <DMA_List_Init+0x2a8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <DMA_List_Init+0x160>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a54      	ldr	r2, [pc, #336]	@ (8006ba0 <DMA_List_Init+0x2ac>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d101      	bne.n	8006a58 <DMA_List_Init+0x164>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <DMA_List_Init+0x166>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2200      	movs	r2, #0
 8006a82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006a8c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2200      	movs	r2, #0
 8006a94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a36      	ldr	r2, [pc, #216]	@ (8006b84 <DMA_List_Init+0x290>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d022      	beq.n	8006af6 <DMA_List_Init+0x202>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a34      	ldr	r2, [pc, #208]	@ (8006b88 <DMA_List_Init+0x294>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01d      	beq.n	8006af6 <DMA_List_Init+0x202>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a33      	ldr	r2, [pc, #204]	@ (8006b8c <DMA_List_Init+0x298>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <DMA_List_Init+0x202>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a31      	ldr	r2, [pc, #196]	@ (8006b90 <DMA_List_Init+0x29c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <DMA_List_Init+0x202>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a30      	ldr	r2, [pc, #192]	@ (8006b94 <DMA_List_Init+0x2a0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <DMA_List_Init+0x202>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2e      	ldr	r2, [pc, #184]	@ (8006b98 <DMA_List_Init+0x2a4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <DMA_List_Init+0x202>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8006b9c <DMA_List_Init+0x2a8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <DMA_List_Init+0x202>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a2b      	ldr	r2, [pc, #172]	@ (8006ba0 <DMA_List_Init+0x2ac>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d101      	bne.n	8006afa <DMA_List_Init+0x206>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <DMA_List_Init+0x208>
 8006afa:	2300      	movs	r3, #0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2200      	movs	r2, #0
 8006b16:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	40020050 	.word	0x40020050
 8006b28:	50020050 	.word	0x50020050
 8006b2c:	400200d0 	.word	0x400200d0
 8006b30:	500200d0 	.word	0x500200d0
 8006b34:	40020150 	.word	0x40020150
 8006b38:	50020150 	.word	0x50020150
 8006b3c:	400201d0 	.word	0x400201d0
 8006b40:	500201d0 	.word	0x500201d0
 8006b44:	40020250 	.word	0x40020250
 8006b48:	50020250 	.word	0x50020250
 8006b4c:	400202d0 	.word	0x400202d0
 8006b50:	500202d0 	.word	0x500202d0
 8006b54:	40020350 	.word	0x40020350
 8006b58:	50020350 	.word	0x50020350
 8006b5c:	400203d0 	.word	0x400203d0
 8006b60:	500203d0 	.word	0x500203d0
 8006b64:	40020450 	.word	0x40020450
 8006b68:	50020450 	.word	0x50020450
 8006b6c:	400204d0 	.word	0x400204d0
 8006b70:	500204d0 	.word	0x500204d0
 8006b74:	40020550 	.word	0x40020550
 8006b78:	50020550 	.word	0x50020550
 8006b7c:	400205d0 	.word	0x400205d0
 8006b80:	500205d0 	.word	0x500205d0
 8006b84:	40020650 	.word	0x40020650
 8006b88:	50020650 	.word	0x50020650
 8006b8c:	400206d0 	.word	0x400206d0
 8006b90:	500206d0 	.word	0x500206d0
 8006b94:	40020750 	.word	0x40020750
 8006b98:	50020750 	.word	0x50020750
 8006b9c:	400207d0 	.word	0x400207d0
 8006ba0:	500207d0 	.word	0x500207d0

08006ba4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006bb6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006bbc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006bc2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006bc8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d017      	beq.n	8006c0a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	3b01      	subs	r3, #1
 8006bee:	051b      	lsls	r3, r3, #20
 8006bf0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006bf4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006c02:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006c04:	431a      	orrs	r2, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	f240 237f 	movw	r3, #639	@ 0x27f
 8006c16:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c26:	d10c      	bne.n	8006c42 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d011      	beq.n	8006c58 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	e00a      	b.n	8006c58 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4a:	d105      	bne.n	8006c58 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c72:	041b      	lsls	r3, r3, #16
 8006c74:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006c78:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d04e      	beq.n	8006d34 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	0419      	lsls	r1, r3, #16
 8006ca2:	4b67      	ldr	r3, [pc, #412]	@ (8006e40 <DMA_List_BuildNode+0x29c>)
 8006ca4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	da06      	bge.n	8006cc2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	e005      	b.n	8006cce <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da06      	bge.n	8006ce4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	609a      	str	r2, [r3, #8]
 8006ce2:	e005      	b.n	8006cf0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da06      	bge.n	8006d06 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	609a      	str	r2, [r3, #8]
 8006d04:	e005      	b.n	8006d12 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da06      	bge.n	8006d28 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	609a      	str	r2, [r3, #8]
 8006d26:	e005      	b.n	8006d34 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d059      	beq.n	8006e04 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da09      	bge.n	8006d6c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5c:	425b      	negs	r3, r3
 8006d5e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	615a      	str	r2, [r3, #20]
 8006d6a:	e005      	b.n	8006d78 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d70:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	da0d      	bge.n	8006d9c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d84:	425b      	negs	r3, r3
 8006d86:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	695a      	ldr	r2, [r3, #20]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	0419      	lsls	r1, r3, #16
 8006d90:	4b2c      	ldr	r3, [pc, #176]	@ (8006e44 <DMA_List_BuildNode+0x2a0>)
 8006d92:	400b      	ands	r3, r1
 8006d94:	431a      	orrs	r2, r3
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	615a      	str	r2, [r3, #20]
 8006d9a:	e009      	b.n	8006db0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da4:	0419      	lsls	r1, r3, #16
 8006da6:	4b27      	ldr	r3, [pc, #156]	@ (8006e44 <DMA_List_BuildNode+0x2a0>)
 8006da8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006daa:	431a      	orrs	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da08      	bge.n	8006dca <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	619a      	str	r2, [r3, #24]
 8006dc8:	e004      	b.n	8006dd4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dce:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	da0b      	bge.n	8006df4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de0:	425b      	negs	r3, r3
 8006de2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006dec:	431a      	orrs	r2, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	619a      	str	r2, [r3, #24]
 8006df2:	e007      	b.n	8006e04 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dfc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006e24:	e005      	b.n	8006e32 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	07ff0000 	.word	0x07ff0000
 8006e44:	1fff0000 	.word	0x1fff0000

08006e48 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0208 	and.w	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0203 	and.w	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006e90:	091b      	lsrs	r3, r3, #4
 8006e92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e96:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006ea0:	0d1b      	lsrs	r3, r3, #20
 8006ea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ea6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	4b66      	ldr	r3, [pc, #408]	@ (8007058 <DMA_List_GetNodeConfig+0x210>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d008      	beq.n	8006eee <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ee2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	e013      	b.n	8006f16 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f0c:	60da      	str	r2, [r3, #12]
 8006f0e:	e002      	b.n	8006f16 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006f3e:	0c1b      	lsrs	r3, r3, #16
 8006f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f74:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006f7a:	e002      	b.n	8006f82 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d04a      	beq.n	8007034 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006faa:	89fa      	ldrh	r2, [r7, #14]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	0c1b      	lsrs	r3, r3, #16
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fbc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006fbe:	89fa      	ldrh	r2, [r7, #14]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd4:	425a      	negs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fea:	425a      	negs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006ff6:	89fa      	ldrh	r2, [r7, #14]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	0c1b      	lsrs	r3, r3, #16
 8007002:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007004:	89fa      	ldrh	r2, [r7, #14]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701a:	425a      	negs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	da11      	bge.n	800704c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800702c:	425a      	negs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007032:	e00b      	b.n	800704c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	0c002000 	.word	0x0c002000

0800705c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4313      	orrs	r3, r2
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e00a      	b.n	800709e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e004      	b.n	800709e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d001      	beq.n	80070ae <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	e00e      	b.n	80070fa <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	e006      	b.n	80070fa <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	429a      	cmp	r2, r3
 800710a:	d001      	beq.n	8007110 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800710c:	2302      	movs	r3, #2
 800710e:	e00b      	b.n	8007128 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d007      	beq.n	8007126 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	429a      	cmp	r2, r3
 8007120:	d001      	beq.n	8007126 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007122:	2303      	movs	r3, #3
 8007124:	e000      	b.n	8007128 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4a0d      	ldr	r2, [pc, #52]	@ (800718c <DMA_List_GetCLLRNodeInfo+0x58>)
 8007156:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00f      	beq.n	800717e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007164:	e00b      	b.n	800717e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4a08      	ldr	r2, [pc, #32]	@ (8007190 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007170:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2205      	movs	r2, #5
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	fe010000 	.word	0xfe010000
 8007190:	f8010000 	.word	0xf8010000

08007194 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007194:	b480      	push	{r7}
 8007196:	b089      	sub	sp, #36	@ 0x24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d142      	bne.n	800723e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80071b8:	e01d      	b.n	80071f6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d107      	bne.n	80071d0 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80071ca:	4013      	ands	r3, r2
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e00f      	b.n	80071f0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	0c1b      	lsrs	r3, r3, #16
 80071da:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4413      	add	r3, r2
 80071e0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80071e8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80071ec:	4013      	ands	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	3301      	adds	r3, #1
 80071f4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d3dc      	bcc.n	80071ba <DMA_List_FindNode+0x26>
 8007200:	e029      	b.n	8007256 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d107      	bne.n	8007218 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007212:	4013      	ands	r3, r2
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	e00f      	b.n	8007238 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	4413      	add	r3, r2
 8007228:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007230:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007234:	4013      	ands	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	3301      	adds	r3, #1
 800723c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	429a      	cmp	r2, r3
 8007246:	d206      	bcs.n	8007256 <DMA_List_FindNode+0xc2>
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800724e:	4013      	ands	r3, r2
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	429a      	cmp	r2, r3
 8007254:	d1d5      	bne.n	8007202 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d008      	beq.n	800726e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007262:	4013      	ands	r3, r2
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	429a      	cmp	r2, r3
 8007268:	d001      	beq.n	800726e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800726a:	2301      	movs	r3, #1
 800726c:	e02b      	b.n	80072c6 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	041b      	lsls	r3, r3, #16
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	461a      	mov	r2, r3
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00f      	beq.n	80072c4 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	461a      	mov	r2, r3
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80072b4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3724      	adds	r7, #36	@ 0x24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b089      	sub	sp, #36	@ 0x24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80072e6:	e1ba      	b.n	800765e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	2101      	movs	r1, #1
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	4013      	ands	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 81aa 	beq.w	8007658 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a55      	ldr	r2, [pc, #340]	@ (800745c <HAL_GPIO_Init+0x188>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d15d      	bne.n	80073c8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007312:	2201      	movs	r2, #1
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	fa02 f303 	lsl.w	r3, r2, r3
 800731a:	43db      	mvns	r3, r3
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	4013      	ands	r3, r2
 8007320:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f003 0201 	and.w	r2, r3, #1
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	4313      	orrs	r3, r2
 8007334:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800733c:	4a48      	ldr	r2, [pc, #288]	@ (8007460 <HAL_GPIO_Init+0x18c>)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007344:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007346:	4a46      	ldr	r2, [pc, #280]	@ (8007460 <HAL_GPIO_Init+0x18c>)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	4413      	add	r3, r2
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	08da      	lsrs	r2, r3, #3
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	3208      	adds	r2, #8
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	220f      	movs	r2, #15
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43db      	mvns	r3, r3
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	4013      	ands	r3, r2
 8007374:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	220b      	movs	r2, #11
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	4313      	orrs	r3, r2
 8007388:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	08da      	lsrs	r2, r3, #3
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3208      	adds	r2, #8
 8007392:	69f9      	ldr	r1, [r7, #28]
 8007394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	2203      	movs	r2, #3
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	43db      	mvns	r3, r3
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	4013      	ands	r3, r2
 80073ae:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	2202      	movs	r2, #2
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e067      	b.n	8007498 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d003      	beq.n	80073d8 <HAL_GPIO_Init+0x104>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b12      	cmp	r3, #18
 80073d6:	d145      	bne.n	8007464 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	08da      	lsrs	r2, r3, #3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3208      	adds	r2, #8
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	220f      	movs	r2, #15
 80073f0:	fa02 f303 	lsl.w	r3, r2, r3
 80073f4:	43db      	mvns	r3, r3
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	4013      	ands	r3, r2
 80073fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f003 020f 	and.w	r2, r3, #15
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	4313      	orrs	r3, r2
 8007414:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	08da      	lsrs	r2, r3, #3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3208      	adds	r2, #8
 800741e:	69f9      	ldr	r1, [r7, #28]
 8007420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	2203      	movs	r2, #3
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	4013      	ands	r3, r2
 800743a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f003 0203 	and.w	r2, r3, #3
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	4313      	orrs	r3, r2
 8007450:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e01e      	b.n	8007498 <HAL_GPIO_Init+0x1c4>
 800745a:	bf00      	nop
 800745c:	46020000 	.word	0x46020000
 8007460:	0801188c 	.word	0x0801188c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	2203      	movs	r2, #3
 8007470:	fa02 f303 	lsl.w	r3, r2, r3
 8007474:	43db      	mvns	r3, r3
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	4013      	ands	r3, r2
 800747a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f003 0203 	and.w	r2, r3, #3
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	4313      	orrs	r3, r2
 8007490:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d00b      	beq.n	80074b8 <HAL_GPIO_Init+0x1e4>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d007      	beq.n	80074b8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074ac:	2b11      	cmp	r3, #17
 80074ae:	d003      	beq.n	80074b8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2b12      	cmp	r3, #18
 80074b6:	d130      	bne.n	800751a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	2203      	movs	r2, #3
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	43db      	mvns	r3, r3
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	4313      	orrs	r3, r2
 80074e0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80074ee:	2201      	movs	r2, #1
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	f003 0201 	and.w	r2, r3, #1
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	4313      	orrs	r3, r2
 8007512:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d017      	beq.n	8007552 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	2203      	movs	r2, #3
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43db      	mvns	r3, r3
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	4013      	ands	r3, r2
 8007538:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	4313      	orrs	r3, r2
 800754a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d07c      	beq.n	8007658 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800755e:	4a47      	ldr	r2, [pc, #284]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	3318      	adds	r3, #24
 8007566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800756a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	220f      	movs	r2, #15
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	43db      	mvns	r3, r3
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	4013      	ands	r3, r2
 8007580:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	0a9a      	lsrs	r2, r3, #10
 8007586:	4b3e      	ldr	r3, [pc, #248]	@ (8007680 <HAL_GPIO_Init+0x3ac>)
 8007588:	4013      	ands	r3, r2
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	f002 0203 	and.w	r2, r2, #3
 8007590:	00d2      	lsls	r2, r2, #3
 8007592:	4093      	lsls	r3, r2
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	4313      	orrs	r3, r2
 8007598:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800759a:	4938      	ldr	r1, [pc, #224]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	3318      	adds	r3, #24
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80075a8:	4b34      	ldr	r3, [pc, #208]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	4013      	ands	r3, r2
 80075b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80075cc:	4a2b      	ldr	r2, [pc, #172]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80075d2:	4b2a      	ldr	r3, [pc, #168]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	43db      	mvns	r3, r3
 80075dc:	69fa      	ldr	r2, [r7, #28]
 80075de:	4013      	ands	r3, r2
 80075e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80075f6:	4a21      	ldr	r2, [pc, #132]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80075fc:	4b1f      	ldr	r3, [pc, #124]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 80075fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007602:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	43db      	mvns	r3, r3
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	4013      	ands	r3, r2
 800760c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007622:	4a16      	ldr	r2, [pc, #88]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800762a:	4b14      	ldr	r3, [pc, #80]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 800762c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007630:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	43db      	mvns	r3, r3
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	4013      	ands	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007650:	4a0a      	ldr	r2, [pc, #40]	@ (800767c <HAL_GPIO_Init+0x3a8>)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	3301      	adds	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	fa22 f303 	lsr.w	r3, r2, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	f47f ae3d 	bne.w	80072e8 <HAL_GPIO_Init+0x14>
  }
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	3724      	adds	r7, #36	@ 0x24
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	46022000 	.word	0x46022000
 8007680:	002f7f7f 	.word	0x002f7f7f

08007684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	807b      	strh	r3, [r7, #2]
 8007690:	4613      	mov	r3, r2
 8007692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007694:	787b      	ldrb	r3, [r7, #1]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800769a:	887a      	ldrh	r2, [r7, #2]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80076a0:	e002      	b.n	80076a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80076a2:	887a      	ldrh	r2, [r7, #2]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80076be:	4b0f      	ldr	r3, [pc, #60]	@ (80076fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d006      	beq.n	80076d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80076ca:	4a0c      	ldr	r2, [pc, #48]	@ (80076fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80076d0:	88fb      	ldrh	r3, [r7, #6]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f814 	bl	8007700 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80076d8:	4b08      	ldr	r3, [pc, #32]	@ (80076fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	4013      	ands	r3, r2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80076e4:	4a05      	ldr	r2, [pc, #20]	@ (80076fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076e6:	88fb      	ldrh	r3, [r7, #6]
 80076e8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 f812 	bl	8007716 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	46022000 	.word	0x46022000

08007700 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	4603      	mov	r3, r0
 800771e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e08d      	b.n	800785a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fa fa92 	bl	8001c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2224      	movs	r2, #36	@ 0x24
 800775c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800777c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800778c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d107      	bne.n	80077a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077a2:	609a      	str	r2, [r3, #8]
 80077a4:	e006      	b.n	80077b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80077b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d108      	bne.n	80077ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077ca:	605a      	str	r2, [r3, #4]
 80077cc:	e007      	b.n	80077de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6812      	ldr	r2, [r2, #0]
 80077e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80077ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	69d9      	ldr	r1, [r3, #28]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	461a      	mov	r2, r3
 8007870:	460b      	mov	r3, r1
 8007872:	817b      	strh	r3, [r7, #10]
 8007874:	4613      	mov	r3, r2
 8007876:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b20      	cmp	r3, #32
 8007882:	f040 80da 	bne.w	8007a3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_I2C_Master_Transmit+0x30>
 8007890:	2302      	movs	r3, #2
 8007892:	e0d3      	b.n	8007a3c <HAL_I2C_Master_Transmit+0x1d8>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800789c:	f7fb f8fc 	bl	8002a98 <HAL_GetTick>
 80078a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	2319      	movs	r3, #25
 80078a8:	2201      	movs	r2, #1
 80078aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 ff73 	bl	800879a <I2C_WaitOnFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e0be      	b.n	8007a3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2221      	movs	r2, #33	@ 0x21
 80078c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2210      	movs	r2, #16
 80078ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	893a      	ldrh	r2, [r7, #8]
 80078de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2bff      	cmp	r3, #255	@ 0xff
 80078ee:	d90e      	bls.n	800790e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	22ff      	movs	r2, #255	@ 0xff
 80078f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	8979      	ldrh	r1, [r7, #10]
 80078fe:	4b51      	ldr	r3, [pc, #324]	@ (8007a44 <HAL_I2C_Master_Transmit+0x1e0>)
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f001 f996 	bl	8008c38 <I2C_TransferConfig>
 800790c:	e06c      	b.n	80079e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800791c:	b2da      	uxtb	r2, r3
 800791e:	8979      	ldrh	r1, [r7, #10]
 8007920:	4b48      	ldr	r3, [pc, #288]	@ (8007a44 <HAL_I2C_Master_Transmit+0x1e0>)
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f001 f985 	bl	8008c38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800792e:	e05b      	b.n	80079e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	6a39      	ldr	r1, [r7, #32]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 ff89 	bl	800884c <I2C_WaitOnTXISFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e07b      	b.n	8007a3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800795e:	b29b      	uxth	r3, r3
 8007960:	3b01      	subs	r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800796c:	3b01      	subs	r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d034      	beq.n	80079e8 <HAL_I2C_Master_Transmit+0x184>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	d130      	bne.n	80079e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	2200      	movs	r2, #0
 800798e:	2180      	movs	r1, #128	@ 0x80
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 ff02 	bl	800879a <I2C_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e04d      	b.n	8007a3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2bff      	cmp	r3, #255	@ 0xff
 80079a8:	d90e      	bls.n	80079c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	22ff      	movs	r2, #255	@ 0xff
 80079ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	8979      	ldrh	r1, [r7, #10]
 80079b8:	2300      	movs	r3, #0
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f001 f939 	bl	8008c38 <I2C_TransferConfig>
 80079c6:	e00f      	b.n	80079e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	8979      	ldrh	r1, [r7, #10]
 80079da:	2300      	movs	r3, #0
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f001 f928 	bl	8008c38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d19e      	bne.n	8007930 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	6a39      	ldr	r1, [r7, #32]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 ff6f 	bl	80088da <I2C_WaitOnSTOPFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e01a      	b.n	8007a3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4b0b      	ldr	r3, [pc, #44]	@ (8007a48 <HAL_I2C_Master_Transmit+0x1e4>)
 8007a1a:	400b      	ands	r3, r1
 8007a1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e000      	b.n	8007a3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007a3a:	2302      	movs	r3, #2
  }
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	80002000 	.word	0x80002000
 8007a48:	fe00e800 	.word	0xfe00e800

08007a4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	607a      	str	r2, [r7, #4]
 8007a56:	461a      	mov	r2, r3
 8007a58:	460b      	mov	r3, r1
 8007a5a:	817b      	strh	r3, [r7, #10]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	f040 80db 	bne.w	8007c24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_I2C_Master_Receive+0x30>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e0d4      	b.n	8007c26 <HAL_I2C_Master_Receive+0x1da>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a84:	f7fb f808 	bl	8002a98 <HAL_GetTick>
 8007a88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2319      	movs	r3, #25
 8007a90:	2201      	movs	r2, #1
 8007a92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fe7f 	bl	800879a <I2C_WaitOnFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e0bf      	b.n	8007c26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2222      	movs	r2, #34	@ 0x22
 8007aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	893a      	ldrh	r2, [r7, #8]
 8007ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2bff      	cmp	r3, #255	@ 0xff
 8007ad6:	d90e      	bls.n	8007af6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	22ff      	movs	r2, #255	@ 0xff
 8007adc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	8979      	ldrh	r1, [r7, #10]
 8007ae6:	4b52      	ldr	r3, [pc, #328]	@ (8007c30 <HAL_I2C_Master_Receive+0x1e4>)
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f001 f8a2 	bl	8008c38 <I2C_TransferConfig>
 8007af4:	e06d      	b.n	8007bd2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	8979      	ldrh	r1, [r7, #10]
 8007b08:	4b49      	ldr	r3, [pc, #292]	@ (8007c30 <HAL_I2C_Master_Receive+0x1e4>)
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f001 f891 	bl	8008c38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b16:	e05c      	b.n	8007bd2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	6a39      	ldr	r1, [r7, #32]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 ff1f 	bl	8008960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e07c      	b.n	8007c26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d034      	beq.n	8007bd2 <HAL_I2C_Master_Receive+0x186>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d130      	bne.n	8007bd2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	2200      	movs	r2, #0
 8007b78:	2180      	movs	r1, #128	@ 0x80
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fe0d 	bl	800879a <I2C_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e04d      	b.n	8007c26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2bff      	cmp	r3, #255	@ 0xff
 8007b92:	d90e      	bls.n	8007bb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	22ff      	movs	r2, #255	@ 0xff
 8007b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	8979      	ldrh	r1, [r7, #10]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f001 f844 	bl	8008c38 <I2C_TransferConfig>
 8007bb0:	e00f      	b.n	8007bd2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	8979      	ldrh	r1, [r7, #10]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f001 f833 	bl	8008c38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d19d      	bne.n	8007b18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	6a39      	ldr	r1, [r7, #32]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fe7a 	bl	80088da <I2C_WaitOnSTOPFlagUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e01a      	b.n	8007c26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6859      	ldr	r1, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <HAL_I2C_Master_Receive+0x1e8>)
 8007c04:	400b      	ands	r3, r1
 8007c06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c24:	2302      	movs	r3, #2
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	80002400 	.word	0x80002400
 8007c34:	fe00e800 	.word	0xfe00e800

08007c38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
  }
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00f      	beq.n	8007cae <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c9c:	f043 0201 	orr.w	r2, r3, #1
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00f      	beq.n	8007cd8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc6:	f043 0208 	orr.w	r2, r3, #8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cd6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00f      	beq.n	8007d02 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf0:	f043 0202 	orr.w	r2, r3, #2
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d00:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 030b 	and.w	r3, r3, #11
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fbe7 	bl	80084e8 <I2C_ITError>
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
 8007d56:	4613      	mov	r3, r2
 8007d58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <I2C_Slave_ISR_IT+0x24>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e0e2      	b.n	8007f8c <I2C_Slave_ISR_IT+0x1ea>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d009      	beq.n	8007dec <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007de2:	6939      	ldr	r1, [r7, #16]
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f9b5 	bl	8008154 <I2C_ITSlaveCplt>
 8007dea:	e0ca      	b.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d04b      	beq.n	8007e8e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d046      	beq.n	8007e8e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d128      	bne.n	8007e5c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b28      	cmp	r3, #40	@ 0x28
 8007e14:	d108      	bne.n	8007e28 <I2C_Slave_ISR_IT+0x86>
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e1c:	d104      	bne.n	8007e28 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e1e:	6939      	ldr	r1, [r7, #16]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fb0d 	bl	8008440 <I2C_ITListenCplt>
 8007e26:	e031      	b.n	8007e8c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b29      	cmp	r3, #41	@ 0x29
 8007e32:	d10e      	bne.n	8007e52 <I2C_Slave_ISR_IT+0xb0>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e3a:	d00a      	beq.n	8007e52 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2210      	movs	r2, #16
 8007e42:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fc66 	bl	8008716 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 f926 	bl	800809c <I2C_ITSlaveSeqCplt>
 8007e50:	e01c      	b.n	8007e8c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2210      	movs	r2, #16
 8007e58:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e5a:	e08f      	b.n	8007f7c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2210      	movs	r2, #16
 8007e62:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e68:	f043 0204 	orr.w	r2, r3, #4
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <I2C_Slave_ISR_IT+0xdc>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e7c:	d17e      	bne.n	8007f7c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e82:	4619      	mov	r1, r3
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fb2f 	bl	80084e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007e8a:	e077      	b.n	8007f7c <I2C_Slave_ISR_IT+0x1da>
 8007e8c:	e076      	b.n	8007f7c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d02f      	beq.n	8007ef8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d02a      	beq.n	8007ef8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d018      	beq.n	8007ede <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d14b      	bne.n	8007f80 <I2C_Slave_ISR_IT+0x1de>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007eee:	d047      	beq.n	8007f80 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 f8d3 	bl	800809c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ef6:	e043      	b.n	8007f80 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007f0c:	6939      	ldr	r1, [r7, #16]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f840 	bl	8007f94 <I2C_ITAddrCplt>
 8007f14:	e035      	b.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d030      	beq.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d02b      	beq.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d018      	beq.n	8007f66 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	781a      	ldrb	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f64:	e00d      	b.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f6c:	d002      	beq.n	8007f74 <I2C_Slave_ISR_IT+0x1d2>
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d106      	bne.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f891 	bl	800809c <I2C_ITSlaveSeqCplt>
 8007f7a:	e002      	b.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007f7c:	bf00      	nop
 8007f7e:	e000      	b.n	8007f82 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007f80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007faa:	2b28      	cmp	r3, #40	@ 0x28
 8007fac:	d16a      	bne.n	8008084 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	0c1b      	lsrs	r3, r3, #16
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007fcc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007fe8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d138      	bne.n	8008064 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007ff2:	897b      	ldrh	r3, [r7, #10]
 8007ff4:	09db      	lsrs	r3, r3, #7
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	89bb      	ldrh	r3, [r7, #12]
 8007ffa:	4053      	eors	r3, r2
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f003 0306 	and.w	r3, r3, #6
 8008002:	2b00      	cmp	r3, #0
 8008004:	d11c      	bne.n	8008040 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008006:	897b      	ldrh	r3, [r7, #10]
 8008008:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008018:	2b02      	cmp	r3, #2
 800801a:	d13b      	bne.n	8008094 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2208      	movs	r2, #8
 8008028:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008032:	89ba      	ldrh	r2, [r7, #12]
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff fe86 	bl	8007d4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800803e:	e029      	b.n	8008094 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008040:	893b      	ldrh	r3, [r7, #8]
 8008042:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fe27 	bl	8008c9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008056:	89ba      	ldrh	r2, [r7, #12]
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff fe74 	bl	8007d4a <HAL_I2C_AddrCallback>
}
 8008062:	e017      	b.n	8008094 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008064:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fe17 	bl	8008c9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008076:	89ba      	ldrh	r2, [r7, #12]
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fe64 	bl	8007d4a <HAL_I2C_AddrCallback>
}
 8008082:	e007      	b.n	8008094 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2208      	movs	r2, #8
 800808a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d008      	beq.n	80080d0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e00c      	b.n	80080ea <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080e8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b29      	cmp	r3, #41	@ 0x29
 80080f4:	d112      	bne.n	800811c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2228      	movs	r2, #40	@ 0x28
 80080fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2221      	movs	r2, #33	@ 0x21
 8008102:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008104:	2101      	movs	r1, #1
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fdc8 	bl	8008c9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff fe04 	bl	8007d22 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800811a:	e017      	b.n	800814c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b2a      	cmp	r3, #42	@ 0x2a
 8008126:	d111      	bne.n	800814c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2228      	movs	r2, #40	@ 0x28
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2222      	movs	r2, #34	@ 0x22
 8008134:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008136:	2102      	movs	r1, #2
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fdaf 	bl	8008c9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff fdf5 	bl	8007d36 <HAL_I2C_SlaveRxCpltCallback>
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008176:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2220      	movs	r2, #32
 800817e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	2b21      	cmp	r3, #33	@ 0x21
 8008184:	d002      	beq.n	800818c <I2C_ITSlaveCplt+0x38>
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	2b29      	cmp	r3, #41	@ 0x29
 800818a:	d108      	bne.n	800819e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800818c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fd83 	bl	8008c9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2221      	movs	r2, #33	@ 0x21
 800819a:	631a      	str	r2, [r3, #48]	@ 0x30
 800819c:	e019      	b.n	80081d2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800819e:	7afb      	ldrb	r3, [r7, #11]
 80081a0:	2b22      	cmp	r3, #34	@ 0x22
 80081a2:	d002      	beq.n	80081aa <I2C_ITSlaveCplt+0x56>
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081a8:	d108      	bne.n	80081bc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80081aa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fd74 	bl	8008c9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2222      	movs	r2, #34	@ 0x22
 80081b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80081ba:	e00a      	b.n	80081d2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	2b28      	cmp	r3, #40	@ 0x28
 80081c0:	d107      	bne.n	80081d2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80081c2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fd68 	bl	8008c9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081e0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6859      	ldr	r1, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	4b92      	ldr	r3, [pc, #584]	@ (8008438 <I2C_ITSlaveCplt+0x2e4>)
 80081ee:	400b      	ands	r3, r1
 80081f0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fa8f 	bl	8008716 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d01c      	beq.n	800823c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008210:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008216:	2b00      	cmp	r3, #0
 8008218:	d031      	beq.n	800827e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008222:	b29c      	uxth	r4, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe fb53 	bl	80068d4 <HAL_DMAEx_GetFifoLevel>
 800822e:	4603      	mov	r3, r0
 8008230:	b29b      	uxth	r3, r3
 8008232:	4423      	add	r3, r4
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800823a:	e020      	b.n	800827e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01b      	beq.n	800827e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008254:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00f      	beq.n	800827e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008266:	b29c      	uxth	r4, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe fb31 	bl	80068d4 <HAL_DMAEx_GetFifoLevel>
 8008272:	4603      	mov	r3, r0
 8008274:	b29b      	uxth	r3, r3
 8008276:	4423      	add	r3, r4
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b00      	cmp	r3, #0
 8008286:	d020      	beq.n	80082ca <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f023 0304 	bic.w	r3, r3, #4
 800828e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00c      	beq.n	80082ca <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d8:	f043 0204 	orr.w	r2, r3, #4
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f003 0310 	and.w	r3, r3, #16
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d049      	beq.n	800837e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d044      	beq.n	800837e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d128      	bne.n	8008350 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b28      	cmp	r3, #40	@ 0x28
 8008308:	d108      	bne.n	800831c <I2C_ITSlaveCplt+0x1c8>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008310:	d104      	bne.n	800831c <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008312:	6979      	ldr	r1, [r7, #20]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f893 	bl	8008440 <I2C_ITListenCplt>
 800831a:	e030      	b.n	800837e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b29      	cmp	r3, #41	@ 0x29
 8008326:	d10e      	bne.n	8008346 <I2C_ITSlaveCplt+0x1f2>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800832e:	d00a      	beq.n	8008346 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2210      	movs	r2, #16
 8008336:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f9ec 	bl	8008716 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff feac 	bl	800809c <I2C_ITSlaveSeqCplt>
 8008344:	e01b      	b.n	800837e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2210      	movs	r2, #16
 800834c:	61da      	str	r2, [r3, #28]
 800834e:	e016      	b.n	800837e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2210      	movs	r2, #16
 8008356:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835c:	f043 0204 	orr.w	r2, r3, #4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <I2C_ITSlaveCplt+0x21e>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008370:	d105      	bne.n	800837e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f8b5 	bl	80084e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008390:	2b00      	cmp	r3, #0
 8008392:	d010      	beq.n	80083b6 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f8a4 	bl	80084e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b28      	cmp	r3, #40	@ 0x28
 80083aa:	d141      	bne.n	8008430 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80083ac:	6979      	ldr	r1, [r7, #20]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f846 	bl	8008440 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083b4:	e03c      	b.n	8008430 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083be:	d014      	beq.n	80083ea <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fe6b 	bl	800809c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a1c      	ldr	r2, [pc, #112]	@ (800843c <I2C_ITSlaveCplt+0x2e8>)
 80083ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff fcbf 	bl	8007d66 <HAL_I2C_ListenCpltCallback>
}
 80083e8:	e022      	b.n	8008430 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b22      	cmp	r3, #34	@ 0x22
 80083f4:	d10e      	bne.n	8008414 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff fc92 	bl	8007d36 <HAL_I2C_SlaveRxCpltCallback>
}
 8008412:	e00d      	b.n	8008430 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fc79 	bl	8007d22 <HAL_I2C_SlaveTxCpltCallback>
}
 8008430:	bf00      	nop
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	bd90      	pop	{r4, r7, pc}
 8008438:	fe00e800 	.word	0xfe00e800
 800843c:	ffff0000 	.word	0xffff0000

08008440 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a25      	ldr	r2, [pc, #148]	@ (80084e4 <I2C_ITListenCplt+0xa4>)
 800844e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d022      	beq.n	80084bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	b2d2      	uxtb	r2, r2
 8008482:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008492:	2b00      	cmp	r3, #0
 8008494:	d012      	beq.n	80084bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800849a:	3b01      	subs	r3, #1
 800849c:	b29a      	uxth	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b4:	f043 0204 	orr.w	r2, r3, #4
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80084bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fbeb 	bl	8008c9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2210      	movs	r2, #16
 80084cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff fc45 	bl	8007d66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	ffff0000 	.word	0xffff0000

080084e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084f8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a6d      	ldr	r2, [pc, #436]	@ (80086bc <I2C_ITError+0x1d4>)
 8008506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b28      	cmp	r3, #40	@ 0x28
 800851e:	d005      	beq.n	800852c <I2C_ITError+0x44>
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b29      	cmp	r3, #41	@ 0x29
 8008524:	d002      	beq.n	800852c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	2b2a      	cmp	r3, #42	@ 0x2a
 800852a:	d10b      	bne.n	8008544 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800852c:	2103      	movs	r1, #3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fbb4 	bl	8008c9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2228      	movs	r2, #40	@ 0x28
 8008538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a60      	ldr	r2, [pc, #384]	@ (80086c0 <I2C_ITError+0x1d8>)
 8008540:	635a      	str	r2, [r3, #52]	@ 0x34
 8008542:	e030      	b.n	80085a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008544:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fba7 	bl	8008c9c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f8e1 	bl	8008716 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b60      	cmp	r3, #96	@ 0x60
 800855e:	d01f      	beq.n	80085a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b20      	cmp	r3, #32
 8008574:	d114      	bne.n	80085a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b10      	cmp	r3, #16
 8008582:	d109      	bne.n	8008598 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2210      	movs	r2, #16
 800858a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008590:	f043 0204 	orr.w	r2, r3, #4
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2220      	movs	r2, #32
 800859e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d039      	beq.n	8008628 <I2C_ITError+0x140>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b11      	cmp	r3, #17
 80085b8:	d002      	beq.n	80085c0 <I2C_ITError+0xd8>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b21      	cmp	r3, #33	@ 0x21
 80085be:	d133      	bne.n	8008628 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ce:	d107      	bne.n	80085e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fd f9c9 	bl	800597c <HAL_DMA_GetState>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d017      	beq.n	8008620 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f4:	4a33      	ldr	r2, [pc, #204]	@ (80086c4 <I2C_ITError+0x1dc>)
 80085f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	4618      	mov	r0, r3
 8008606:	f7fd f82f 	bl	8005668 <HAL_DMA_Abort_IT>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d04d      	beq.n	80086ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800861a:	4610      	mov	r0, r2
 800861c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800861e:	e045      	b.n	80086ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f851 	bl	80086c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008626:	e041      	b.n	80086ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d039      	beq.n	80086a4 <I2C_ITError+0x1bc>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b12      	cmp	r3, #18
 8008634:	d002      	beq.n	800863c <I2C_ITError+0x154>
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b22      	cmp	r3, #34	@ 0x22
 800863a:	d133      	bne.n	80086a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800864a:	d107      	bne.n	800865c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800865a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008660:	4618      	mov	r0, r3
 8008662:	f7fd f98b 	bl	800597c <HAL_DMA_GetState>
 8008666:	4603      	mov	r3, r0
 8008668:	2b01      	cmp	r3, #1
 800866a:	d017      	beq.n	800869c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	4a14      	ldr	r2, [pc, #80]	@ (80086c4 <I2C_ITError+0x1dc>)
 8008672:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008680:	4618      	mov	r0, r3
 8008682:	f7fc fff1 	bl	8005668 <HAL_DMA_Abort_IT>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d011      	beq.n	80086b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008696:	4610      	mov	r0, r2
 8008698:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800869a:	e009      	b.n	80086b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f813 	bl	80086c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086a2:	e005      	b.n	80086b0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f80f 	bl	80086c8 <I2C_TreatErrorCallback>
  }
}
 80086aa:	e002      	b.n	80086b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086b0:	bf00      	nop
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	ffff0000 	.word	0xffff0000
 80086c0:	08007da3 	.word	0x08007da3
 80086c4:	0800875f 	.word	0x0800875f

080086c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b60      	cmp	r3, #96	@ 0x60
 80086da:	d10e      	bne.n	80086fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fb4b 	bl	8007d8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086f8:	e009      	b.n	800870e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fb36 	bl	8007d7a <HAL_I2C_ErrorCallback>
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b02      	cmp	r3, #2
 800872a:	d103      	bne.n	8008734 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2200      	movs	r2, #0
 8008732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b01      	cmp	r3, #1
 8008740:	d007      	beq.n	8008752 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699a      	ldr	r2, [r3, #24]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f042 0201 	orr.w	r2, r2, #1
 8008750:	619a      	str	r2, [r3, #24]
  }
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008778:	2200      	movs	r2, #0
 800877a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008788:	2200      	movs	r2, #0
 800878a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff ff9b 	bl	80086c8 <I2C_TreatErrorCallback>
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	603b      	str	r3, [r7, #0]
 80087a6:	4613      	mov	r3, r2
 80087a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087aa:	e03b      	b.n	8008824 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f961 	bl	8008a78 <I2C_IsErrorOccurred>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e041      	b.n	8008844 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c6:	d02d      	beq.n	8008824 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c8:	f7fa f966 	bl	8002a98 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d302      	bcc.n	80087de <I2C_WaitOnFlagUntilTimeout+0x44>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d122      	bne.n	8008824 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4013      	ands	r3, r2
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	bf0c      	ite	eq
 80087ee:	2301      	moveq	r3, #1
 80087f0:	2300      	movne	r3, #0
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d113      	bne.n	8008824 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008800:	f043 0220 	orr.w	r2, r3, #32
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e00f      	b.n	8008844 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	4013      	ands	r3, r2
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	429a      	cmp	r2, r3
 8008832:	bf0c      	ite	eq
 8008834:	2301      	moveq	r3, #1
 8008836:	2300      	movne	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	429a      	cmp	r2, r3
 8008840:	d0b4      	beq.n	80087ac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008858:	e033      	b.n	80088c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	68b9      	ldr	r1, [r7, #8]
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f90a 	bl	8008a78 <I2C_IsErrorOccurred>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e031      	b.n	80088d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d025      	beq.n	80088c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008876:	f7fa f90f 	bl	8002a98 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	d302      	bcc.n	800888c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11a      	bne.n	80088c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b02      	cmp	r3, #2
 8008898:	d013      	beq.n	80088c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889e:	f043 0220 	orr.w	r2, r3, #32
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e007      	b.n	80088d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d1c4      	bne.n	800885a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088e6:	e02f      	b.n	8008948 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f8c3 	bl	8008a78 <I2C_IsErrorOccurred>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e02d      	b.n	8008958 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088fc:	f7fa f8cc 	bl	8002a98 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	429a      	cmp	r2, r3
 800890a:	d302      	bcc.n	8008912 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d11a      	bne.n	8008948 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b20      	cmp	r3, #32
 800891e:	d013      	beq.n	8008948 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008924:	f043 0220 	orr.w	r2, r3, #32
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2220      	movs	r2, #32
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e007      	b.n	8008958 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b20      	cmp	r3, #32
 8008954:	d1c8      	bne.n	80088e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008970:	e071      	b.n	8008a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f87e 	bl	8008a78 <I2C_IsErrorOccurred>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b20      	cmp	r3, #32
 8008992:	d13b      	bne.n	8008a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d138      	bne.n	8008a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d105      	bne.n	80089b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d121      	bne.n	8008a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2210      	movs	r2, #16
 80089c8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2204      	movs	r2, #4
 80089ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2220      	movs	r2, #32
 80089d6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6859      	ldr	r1, [r3, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b24      	ldr	r3, [pc, #144]	@ (8008a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80089e4:	400b      	ands	r3, r1
 80089e6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
 8008a04:	e002      	b.n	8008a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008a0c:	f7fa f844 	bl	8002a98 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d302      	bcc.n	8008a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d119      	bne.n	8008a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d116      	bne.n	8008a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d00f      	beq.n	8008a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3a:	f043 0220 	orr.w	r2, r3, #32
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d002      	beq.n	8008a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d083      	beq.n	8008972 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	fe00e800 	.word	0xfe00e800

08008a78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08a      	sub	sp, #40	@ 0x28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	f003 0310 	and.w	r3, r3, #16
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d068      	beq.n	8008b76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2210      	movs	r2, #16
 8008aaa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008aac:	e049      	b.n	8008b42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d045      	beq.n	8008b42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ab6:	f7f9 ffef 	bl	8002a98 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d302      	bcc.n	8008acc <I2C_IsErrorOccurred+0x54>
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d13a      	bne.n	8008b42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ad6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ade:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aee:	d121      	bne.n	8008b34 <I2C_IsErrorOccurred+0xbc>
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af6:	d01d      	beq.n	8008b34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008af8:	7cfb      	ldrb	r3, [r7, #19]
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d01a      	beq.n	8008b34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008b0e:	f7f9 ffc3 	bl	8002a98 <HAL_GetTick>
 8008b12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b14:	e00e      	b.n	8008b34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008b16:	f7f9 ffbf 	bl	8002a98 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b19      	cmp	r3, #25
 8008b22:	d907      	bls.n	8008b34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	f043 0320 	orr.w	r3, r3, #32
 8008b2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008b32:	e006      	b.n	8008b42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	d1e9      	bne.n	8008b16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	d003      	beq.n	8008b58 <I2C_IsErrorOccurred+0xe0>
 8008b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0aa      	beq.n	8008aae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2220      	movs	r2, #32
 8008b66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	f043 0304 	orr.w	r3, r3, #4
 8008b6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00b      	beq.n	8008bc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f043 0308 	orr.w	r3, r3, #8
 8008bb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	f043 0302 	orr.w	r3, r3, #2
 8008bd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01c      	beq.n	8008c26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fd92 	bl	8008716 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6859      	ldr	r1, [r3, #4]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c34 <I2C_IsErrorOccurred+0x1bc>)
 8008bfe:	400b      	ands	r3, r1
 8008c00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008c26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3728      	adds	r7, #40	@ 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	fe00e800 	.word	0xfe00e800

08008c38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	817b      	strh	r3, [r7, #10]
 8008c46:	4613      	mov	r3, r2
 8008c48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c4a:	897b      	ldrh	r3, [r7, #10]
 8008c4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c50:	7a7b      	ldrb	r3, [r7, #9]
 8008c52:	041b      	lsls	r3, r3, #16
 8008c54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	0d5b      	lsrs	r3, r3, #21
 8008c72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008c76:	4b08      	ldr	r3, [pc, #32]	@ (8008c98 <I2C_TransferConfig+0x60>)
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	43db      	mvns	r3, r3
 8008c7c:	ea02 0103 	and.w	r1, r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008c8a:	bf00      	nop
 8008c8c:	371c      	adds	r7, #28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	03ff63ff 	.word	0x03ff63ff

08008c9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008cac:	887b      	ldrh	r3, [r7, #2]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00f      	beq.n	8008cd6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008cbc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008cca:	2b28      	cmp	r3, #40	@ 0x28
 8008ccc:	d003      	beq.n	8008cd6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008cd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008cd6:	887b      	ldrh	r3, [r7, #2]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00f      	beq.n	8008d00 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008ce6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008cf4:	2b28      	cmp	r3, #40	@ 0x28
 8008cf6:	d003      	beq.n	8008d00 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008cfe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	da03      	bge.n	8008d10 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008d0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008d10:	887b      	ldrh	r3, [r7, #2]
 8008d12:	2b10      	cmp	r3, #16
 8008d14:	d103      	bne.n	8008d1e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008d1c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008d1e:	887b      	ldrh	r3, [r7, #2]
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d103      	bne.n	8008d2c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f043 0320 	orr.w	r3, r3, #32
 8008d2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008d2c:	887b      	ldrh	r3, [r7, #2]
 8008d2e:	2b40      	cmp	r3, #64	@ 0x40
 8008d30:	d103      	bne.n	8008d3a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d38:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6819      	ldr	r1, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	43da      	mvns	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	400a      	ands	r2, r1
 8008d4a:	601a      	str	r2, [r3, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d138      	bne.n	8008de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e032      	b.n	8008de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2224      	movs	r2, #36	@ 0x24
 8008d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f022 0201 	bic.w	r2, r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6819      	ldr	r1, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0201 	orr.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e000      	b.n	8008de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008de0:	2302      	movs	r3, #2
  }
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b20      	cmp	r3, #32
 8008e02:	d139      	bne.n	8008e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e033      	b.n	8008e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2224      	movs	r2, #36	@ 0x24
 8008e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f022 0201 	bic.w	r2, r2, #1
 8008e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	021b      	lsls	r3, r3, #8
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e000      	b.n	8008e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008e78:	2302      	movs	r3, #2
  }
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008e94:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
 8008ea4:	e007      	b.n	8008eb6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008ea6:	4b07      	ldr	r3, [pc, #28]	@ (8008ec4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f023 0204 	bic.w	r2, r3, #4
 8008eae:	4905      	ldr	r1, [pc, #20]	@ (8008ec4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	40030400 	.word	0x40030400

08008ec8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008ecc:	4b05      	ldr	r3, [pc, #20]	@ (8008ee4 <HAL_ICACHE_Enable+0x1c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a04      	ldr	r2, [pc, #16]	@ (8008ee4 <HAL_ICACHE_Enable+0x1c>)
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	40030400 	.word	0x40030400

08008ee8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e0bf      	b.n	800907a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7f8 ffa2 	bl	8001e58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008f2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6999      	ldr	r1, [r3, #24]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008f40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6899      	ldr	r1, [r3, #8]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8009084 <HAL_LTDC_Init+0x19c>)
 8008f5c:	400b      	ands	r3, r1
 8008f5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	041b      	lsls	r3, r3, #16
 8008f66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6899      	ldr	r1, [r3, #8]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68d9      	ldr	r1, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	4b3e      	ldr	r3, [pc, #248]	@ (8009084 <HAL_LTDC_Init+0x19c>)
 8008f8a:	400b      	ands	r3, r1
 8008f8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	041b      	lsls	r3, r3, #16
 8008f94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68d9      	ldr	r1, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1a      	ldr	r2, [r3, #32]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6919      	ldr	r1, [r3, #16]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	4b33      	ldr	r3, [pc, #204]	@ (8009084 <HAL_LTDC_Init+0x19c>)
 8008fb8:	400b      	ands	r3, r1
 8008fba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc0:	041b      	lsls	r3, r3, #16
 8008fc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6919      	ldr	r1, [r3, #16]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6959      	ldr	r1, [r3, #20]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	4b27      	ldr	r3, [pc, #156]	@ (8009084 <HAL_LTDC_Init+0x19c>)
 8008fe6:	400b      	ands	r3, r1
 8008fe8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6959      	ldr	r1, [r3, #20]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009018:	041b      	lsls	r3, r3, #16
 800901a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800902a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0206 	orr.w	r2, r2, #6
 8009056:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	f000f800 	.word	0xf000f800

08009088 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009096:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d023      	beq.n	80090f2 <HAL_LTDC_IRQHandler+0x6a>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d01e      	beq.n	80090f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0204 	bic.w	r2, r2, #4
 80090c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2204      	movs	r2, #4
 80090ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090d2:	f043 0201 	orr.w	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2204      	movs	r2, #4
 80090e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f86f 	bl	80091d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d023      	beq.n	8009144 <HAL_LTDC_IRQHandler+0xbc>
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01e      	beq.n	8009144 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0202 	bic.w	r2, r2, #2
 8009114:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2202      	movs	r2, #2
 800911c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009124:	f043 0202 	orr.w	r2, r3, #2
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2204      	movs	r2, #4
 8009132:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f846 	bl	80091d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d01b      	beq.n	8009186 <HAL_LTDC_IRQHandler+0xfe>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d016      	beq.n	8009186 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0201 	bic.w	r2, r2, #1
 8009166:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2201      	movs	r2, #1
 800916e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f82f 	bl	80091e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01b      	beq.n	80091c8 <HAL_LTDC_IRQHandler+0x140>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d016      	beq.n	80091c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0208 	bic.w	r2, r2, #8
 80091a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2208      	movs	r2, #8
 80091b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f818 	bl	80091f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800920c:	b5b0      	push	{r4, r5, r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_LTDC_ConfigLayer+0x1a>
 8009222:	2302      	movs	r3, #2
 8009224:	e02c      	b.n	8009280 <HAL_LTDC_ConfigLayer+0x74>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2134      	movs	r1, #52	@ 0x34
 800923c:	fb01 f303 	mul.w	r3, r1, r3
 8009240:	4413      	add	r3, r2
 8009242:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4614      	mov	r4, r2
 800924a:	461d      	mov	r5, r3
 800924c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800924e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 f811 	bl	8009288 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2201      	movs	r2, #1
 800926c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bdb0      	pop	{r4, r5, r7, pc}

08009288 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009288:	b480      	push	{r7}
 800928a:	b089      	sub	sp, #36	@ 0x24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	0c1b      	lsrs	r3, r3, #16
 80092a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092a4:	4413      	add	r3, r2
 80092a6:	041b      	lsls	r3, r3, #16
 80092a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	01db      	lsls	r3, r3, #7
 80092b4:	4413      	add	r3, r2
 80092b6:	3384      	adds	r3, #132	@ 0x84
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	6812      	ldr	r2, [r2, #0]
 80092be:	4611      	mov	r1, r2
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	01d2      	lsls	r2, r2, #7
 80092c4:	440a      	add	r2, r1
 80092c6:	3284      	adds	r2, #132	@ 0x84
 80092c8:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80092cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	0c1b      	lsrs	r3, r3, #16
 80092da:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092de:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092e0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4619      	mov	r1, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	01db      	lsls	r3, r3, #7
 80092ec:	440b      	add	r3, r1
 80092ee:	3384      	adds	r3, #132	@ 0x84
 80092f0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80092f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009306:	4413      	add	r3, r2
 8009308:	041b      	lsls	r3, r3, #16
 800930a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	01db      	lsls	r3, r3, #7
 8009316:	4413      	add	r3, r2
 8009318:	3384      	adds	r3, #132	@ 0x84
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	6812      	ldr	r2, [r2, #0]
 8009320:	4611      	mov	r1, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	01d2      	lsls	r2, r2, #7
 8009326:	440a      	add	r2, r1
 8009328:	3284      	adds	r2, #132	@ 0x84
 800932a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800932e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800933e:	4413      	add	r3, r2
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	01db      	lsls	r3, r3, #7
 800934c:	440b      	add	r3, r1
 800934e:	3384      	adds	r3, #132	@ 0x84
 8009350:	4619      	mov	r1, r3
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4313      	orrs	r3, r2
 8009356:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	01db      	lsls	r3, r3, #7
 8009362:	4413      	add	r3, r2
 8009364:	3384      	adds	r3, #132	@ 0x84
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	6812      	ldr	r2, [r2, #0]
 800936c:	4611      	mov	r1, r2
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	01d2      	lsls	r2, r2, #7
 8009372:	440a      	add	r2, r1
 8009374:	3284      	adds	r2, #132	@ 0x84
 8009376:	f023 0307 	bic.w	r3, r3, #7
 800937a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	01db      	lsls	r3, r3, #7
 8009386:	4413      	add	r3, r2
 8009388:	3384      	adds	r3, #132	@ 0x84
 800938a:	461a      	mov	r2, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80093a2:	041b      	lsls	r3, r3, #16
 80093a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	061b      	lsls	r3, r3, #24
 80093ac:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093b4:	461a      	mov	r2, r3
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	431a      	orrs	r2, r3
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	431a      	orrs	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4619      	mov	r1, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	01db      	lsls	r3, r3, #7
 80093c8:	440b      	add	r3, r1
 80093ca:	3384      	adds	r3, #132	@ 0x84
 80093cc:	4619      	mov	r1, r3
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	461a      	mov	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	01db      	lsls	r3, r3, #7
 80093de:	4413      	add	r3, r2
 80093e0:	3384      	adds	r3, #132	@ 0x84
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	6812      	ldr	r2, [r2, #0]
 80093e8:	4611      	mov	r1, r2
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	01d2      	lsls	r2, r2, #7
 80093ee:	440a      	add	r2, r1
 80093f0:	3284      	adds	r2, #132	@ 0x84
 80093f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80093f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	01db      	lsls	r3, r3, #7
 8009402:	4413      	add	r3, r2
 8009404:	3384      	adds	r3, #132	@ 0x84
 8009406:	461a      	mov	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	01db      	lsls	r3, r3, #7
 8009418:	4413      	add	r3, r2
 800941a:	3384      	adds	r3, #132	@ 0x84
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	6812      	ldr	r2, [r2, #0]
 8009422:	4611      	mov	r1, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	01d2      	lsls	r2, r2, #7
 8009428:	440a      	add	r2, r1
 800942a:	3284      	adds	r2, #132	@ 0x84
 800942c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009430:	f023 0307 	bic.w	r3, r3, #7
 8009434:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	69da      	ldr	r2, [r3, #28]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	68f9      	ldr	r1, [r7, #12]
 8009440:	6809      	ldr	r1, [r1, #0]
 8009442:	4608      	mov	r0, r1
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	01c9      	lsls	r1, r1, #7
 8009448:	4401      	add	r1, r0
 800944a:	3184      	adds	r1, #132	@ 0x84
 800944c:	4313      	orrs	r3, r2
 800944e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	461a      	mov	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	01db      	lsls	r3, r3, #7
 800945a:	4413      	add	r3, r2
 800945c:	3384      	adds	r3, #132	@ 0x84
 800945e:	461a      	mov	r2, r3
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009464:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800946e:	2304      	movs	r3, #4
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	e01b      	b.n	80094ac <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d102      	bne.n	8009482 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800947c:	2303      	movs	r3, #3
 800947e:	61fb      	str	r3, [r7, #28]
 8009480:	e014      	b.n	80094ac <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	2b04      	cmp	r3, #4
 8009488:	d00b      	beq.n	80094a2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800948e:	2b02      	cmp	r3, #2
 8009490:	d007      	beq.n	80094a2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009496:	2b03      	cmp	r3, #3
 8009498:	d003      	beq.n	80094a2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800949e:	2b07      	cmp	r3, #7
 80094a0:	d102      	bne.n	80094a8 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80094a2:	2302      	movs	r3, #2
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	e001      	b.n	80094ac <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80094a8:	2301      	movs	r3, #1
 80094aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	01db      	lsls	r3, r3, #7
 80094b6:	4413      	add	r3, r2
 80094b8:	3384      	adds	r3, #132	@ 0x84
 80094ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	6812      	ldr	r2, [r2, #0]
 80094c0:	4611      	mov	r1, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	01d2      	lsls	r2, r2, #7
 80094c6:	440a      	add	r2, r1
 80094c8:	3284      	adds	r2, #132	@ 0x84
 80094ca:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80094ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	fb02 f303 	mul.w	r3, r2, r3
 80094da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6859      	ldr	r1, [r3, #4]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	1acb      	subs	r3, r1, r3
 80094e6:	69f9      	ldr	r1, [r7, #28]
 80094e8:	fb01 f303 	mul.w	r3, r1, r3
 80094ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80094ee:	68f9      	ldr	r1, [r7, #12]
 80094f0:	6809      	ldr	r1, [r1, #0]
 80094f2:	4608      	mov	r0, r1
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	01c9      	lsls	r1, r1, #7
 80094f8:	4401      	add	r1, r0
 80094fa:	3184      	adds	r1, #132	@ 0x84
 80094fc:	4313      	orrs	r3, r2
 80094fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	01db      	lsls	r3, r3, #7
 800950a:	4413      	add	r3, r2
 800950c:	3384      	adds	r3, #132	@ 0x84
 800950e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	4611      	mov	r1, r2
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	01d2      	lsls	r2, r2, #7
 800951a:	440a      	add	r2, r1
 800951c:	3284      	adds	r2, #132	@ 0x84
 800951e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	01db      	lsls	r3, r3, #7
 8009532:	4413      	add	r3, r2
 8009534:	3384      	adds	r3, #132	@ 0x84
 8009536:	461a      	mov	r2, r3
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	01db      	lsls	r3, r3, #7
 8009548:	4413      	add	r3, r2
 800954a:	3384      	adds	r3, #132	@ 0x84
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	6812      	ldr	r2, [r2, #0]
 8009552:	4611      	mov	r1, r2
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	01d2      	lsls	r2, r2, #7
 8009558:	440a      	add	r2, r1
 800955a:	3284      	adds	r2, #132	@ 0x84
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	6013      	str	r3, [r2, #0]
}
 8009562:	bf00      	nop
 8009564:	3724      	adds	r7, #36	@ 0x24
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	af02      	add	r7, sp, #8
 8009574:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0fe      	b.n	800977e <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d106      	bne.n	800959a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7f8 fed7 	bl	8002348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2203      	movs	r2, #3
 800959e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f007 fe65 	bl	8011276 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6818      	ldr	r0, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	7c1a      	ldrb	r2, [r3, #16]
 80095b4:	f88d 2000 	strb.w	r2, [sp]
 80095b8:	3304      	adds	r3, #4
 80095ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095bc:	f007 fe2c 	bl	8011218 <USB_CoreInit>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e0d5      	b.n	800977e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2100      	movs	r1, #0
 80095d8:	4618      	mov	r0, r3
 80095da:	f007 fe5d 	bl	8011298 <USB_SetCurrentMode>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d005      	beq.n	80095f0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0c6      	b.n	800977e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]
 80095f4:	e04a      	b.n	800968c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80095f6:	7bfa      	ldrb	r2, [r7, #15]
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	3315      	adds	r3, #21
 8009606:	2201      	movs	r2, #1
 8009608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800960a:	7bfa      	ldrb	r2, [r7, #15]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	00db      	lsls	r3, r3, #3
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	3314      	adds	r3, #20
 800961a:	7bfa      	ldrb	r2, [r7, #15]
 800961c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800961e:	7bfa      	ldrb	r2, [r7, #15]
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	b298      	uxth	r0, r3
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4613      	mov	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	4413      	add	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	440b      	add	r3, r1
 8009630:	332e      	adds	r3, #46	@ 0x2e
 8009632:	4602      	mov	r2, r0
 8009634:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009636:	7bfa      	ldrb	r2, [r7, #15]
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4613      	mov	r3, r2
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	3318      	adds	r3, #24
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800964a:	7bfa      	ldrb	r2, [r7, #15]
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	331c      	adds	r3, #28
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800965e:	7bfa      	ldrb	r2, [r7, #15]
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	4613      	mov	r3, r2
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	3320      	adds	r3, #32
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009672:	7bfa      	ldrb	r2, [r7, #15]
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	4613      	mov	r3, r2
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	440b      	add	r3, r1
 8009680:	3324      	adds	r3, #36	@ 0x24
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	3301      	adds	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	791b      	ldrb	r3, [r3, #4]
 8009690:	7bfa      	ldrb	r2, [r7, #15]
 8009692:	429a      	cmp	r2, r3
 8009694:	d3af      	bcc.n	80095f6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
 800969a:	e044      	b.n	8009726 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800969c:	7bfa      	ldrb	r2, [r7, #15]
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4613      	mov	r3, r2
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80096ae:	2200      	movs	r2, #0
 80096b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80096b2:	7bfa      	ldrb	r2, [r7, #15]
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	4613      	mov	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80096c4:	7bfa      	ldrb	r2, [r7, #15]
 80096c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096c8:	7bfa      	ldrb	r2, [r7, #15]
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4613      	mov	r3, r2
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4413      	add	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80096de:	7bfa      	ldrb	r2, [r7, #15]
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80096f0:	2200      	movs	r2, #0
 80096f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80096f4:	7bfa      	ldrb	r2, [r7, #15]
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4613      	mov	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009706:	2200      	movs	r2, #0
 8009708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800970a:	7bfa      	ldrb	r2, [r7, #15]
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	4613      	mov	r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	440b      	add	r3, r1
 8009718:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	3301      	adds	r3, #1
 8009724:	73fb      	strb	r3, [r7, #15]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	791b      	ldrb	r3, [r3, #4]
 800972a:	7bfa      	ldrb	r2, [r7, #15]
 800972c:	429a      	cmp	r2, r3
 800972e:	d3b5      	bcc.n	800969c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6818      	ldr	r0, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	7c1a      	ldrb	r2, [r3, #16]
 8009738:	f88d 2000 	strb.w	r2, [sp]
 800973c:	3304      	adds	r3, #4
 800973e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009740:	f007 fdf6 	bl	8011330 <USB_DevInit>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2202      	movs	r2, #2
 800974e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e013      	b.n	800977e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	7b1b      	ldrb	r3, [r3, #12]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d102      	bne.n	8009772 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f80a 	bl	8009786 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f007 ffc3 	bl	8011702 <USB_DevDisconnect>

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097b8:	f043 0303 	orr.w	r3, r3, #3
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80097d4:	4b05      	ldr	r3, [pc, #20]	@ (80097ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80097d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d8:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80097da:	f043 0301 	orr.w	r3, r3, #1
 80097de:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80097e0:	bf00      	nop
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	46020800 	.word	0x46020800

080097f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80097f8:	4b39      	ldr	r3, [pc, #228]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80097fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009800:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	429a      	cmp	r2, r3
 8009808:	d10b      	bne.n	8009822 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009810:	d905      	bls.n	800981e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009812:	4b33      	ldr	r3, [pc, #204]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	4a32      	ldr	r2, [pc, #200]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800981c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	e057      	b.n	80098d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009828:	d90a      	bls.n	8009840 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800982a:	4b2d      	ldr	r3, [pc, #180]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4313      	orrs	r3, r2
 8009836:	4a2a      	ldr	r2, [pc, #168]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800983c:	60d3      	str	r3, [r2, #12]
 800983e:	e007      	b.n	8009850 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009840:	4b27      	ldr	r3, [pc, #156]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009848:	4925      	ldr	r1, [pc, #148]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4313      	orrs	r3, r2
 800984e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009850:	4b24      	ldr	r3, [pc, #144]	@ (80098e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a24      	ldr	r2, [pc, #144]	@ (80098e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009856:	fba2 2303 	umull	r2, r3, r2, r3
 800985a:	099b      	lsrs	r3, r3, #6
 800985c:	2232      	movs	r2, #50	@ 0x32
 800985e:	fb02 f303 	mul.w	r3, r2, r3
 8009862:	4a21      	ldr	r2, [pc, #132]	@ (80098e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009864:	fba2 2303 	umull	r2, r3, r2, r3
 8009868:	099b      	lsrs	r3, r3, #6
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800986e:	e002      	b.n	8009876 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3b01      	subs	r3, #1
 8009874:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009876:	4b1a      	ldr	r3, [pc, #104]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1f3      	bne.n	8009870 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d01b      	beq.n	80098c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800988e:	4b15      	ldr	r3, [pc, #84]	@ (80098e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a15      	ldr	r2, [pc, #84]	@ (80098e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009894:	fba2 2303 	umull	r2, r3, r2, r3
 8009898:	099b      	lsrs	r3, r3, #6
 800989a:	2232      	movs	r2, #50	@ 0x32
 800989c:	fb02 f303 	mul.w	r3, r2, r3
 80098a0:	4a11      	ldr	r2, [pc, #68]	@ (80098e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80098a2:	fba2 2303 	umull	r2, r3, r2, r3
 80098a6:	099b      	lsrs	r3, r3, #6
 80098a8:	3301      	adds	r3, #1
 80098aa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80098ac:	e002      	b.n	80098b4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80098b4:	4b0a      	ldr	r3, [pc, #40]	@ (80098e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80098b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1f3      	bne.n	80098ae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e000      	b.n	80098d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	46020800 	.word	0x46020800
 80098e4:	20000000 	.word	0x20000000
 80098e8:	10624dd3 	.word	0x10624dd3

080098ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80098f0:	4b04      	ldr	r3, [pc, #16]	@ (8009904 <HAL_PWREx_GetVoltageRange+0x18>)
 80098f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	46020800 	.word	0x46020800

08009908 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009910:	4b22      	ldr	r3, [pc, #136]	@ (800999c <HAL_PWREx_ConfigSupply+0x94>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a22      	ldr	r2, [pc, #136]	@ (80099a0 <HAL_PWREx_ConfigSupply+0x98>)
 8009916:	fba2 2303 	umull	r2, r3, r2, r3
 800991a:	099b      	lsrs	r3, r3, #6
 800991c:	2232      	movs	r2, #50	@ 0x32
 800991e:	fb02 f303 	mul.w	r3, r2, r3
 8009922:	4a1f      	ldr	r2, [pc, #124]	@ (80099a0 <HAL_PWREx_ConfigSupply+0x98>)
 8009924:	fba2 2303 	umull	r2, r3, r2, r3
 8009928:	099b      	lsrs	r3, r3, #6
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d113      	bne.n	800995c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009934:	4b1b      	ldr	r3, [pc, #108]	@ (80099a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	4a1a      	ldr	r2, [pc, #104]	@ (80099a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800993a:	f023 0302 	bic.w	r3, r3, #2
 800993e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009940:	e002      	b.n	8009948 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3b01      	subs	r3, #1
 8009946:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009948:	4b16      	ldr	r3, [pc, #88]	@ (80099a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800994a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	2b02      	cmp	r3, #2
 8009952:	d116      	bne.n	8009982 <HAL_PWREx_ConfigSupply+0x7a>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f3      	bne.n	8009942 <HAL_PWREx_ConfigSupply+0x3a>
 800995a:	e012      	b.n	8009982 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800995c:	4b11      	ldr	r3, [pc, #68]	@ (80099a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	4a10      	ldr	r2, [pc, #64]	@ (80099a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009962:	f043 0302 	orr.w	r3, r3, #2
 8009966:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009968:	e002      	b.n	8009970 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b01      	subs	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009970:	4b0c      	ldr	r3, [pc, #48]	@ (80099a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <HAL_PWREx_ConfigSupply+0x7a>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f3      	bne.n	800996a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e000      	b.n	800998e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	20000000 	.word	0x20000000
 80099a0:	10624dd3 	.word	0x10624dd3
 80099a4:	46020800 	.word	0x46020800

080099a8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80099ac:	4b05      	ldr	r3, [pc, #20]	@ (80099c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	4a04      	ldr	r2, [pc, #16]	@ (80099c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80099b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099b6:	6113      	str	r3, [r2, #16]
}
 80099b8:	bf00      	nop
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	46020800 	.word	0x46020800

080099c8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80099cc:	4b05      	ldr	r3, [pc, #20]	@ (80099e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	4a04      	ldr	r2, [pc, #16]	@ (80099e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80099d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80099d6:	6113      	str	r3, [r2, #16]
}
 80099d8:	bf00      	nop
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	46020800 	.word	0x46020800

080099e8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80099ec:	4b05      	ldr	r3, [pc, #20]	@ (8009a04 <HAL_PWREx_EnableVddA+0x1c>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	4a04      	ldr	r2, [pc, #16]	@ (8009a04 <HAL_PWREx_EnableVddA+0x1c>)
 80099f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099f6:	6113      	str	r3, [r2, #16]
}
 80099f8:	bf00      	nop
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	46020800 	.word	0x46020800

08009a08 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009a0e:	f7ff ff6d 	bl	80098ec <HAL_PWREx_GetVoltageRange>
 8009a12:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a1a:	d003      	beq.n	8009a24 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a22:	d107      	bne.n	8009a34 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	4a05      	ldr	r2, [pc, #20]	@ (8009a40 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009a2a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009a2e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e000      	b.n	8009a36 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	46020800 	.word	0x46020800

08009a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08e      	sub	sp, #56	@ 0x38
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f000 bec8 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a5e:	4b99      	ldr	r3, [pc, #612]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f003 030c 	and.w	r3, r3, #12
 8009a66:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a68:	4b96      	ldr	r3, [pc, #600]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	f003 0303 	and.w	r3, r3, #3
 8009a70:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 816c 	beq.w	8009d58 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d007      	beq.n	8009a96 <HAL_RCC_OscConfig+0x52>
 8009a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a88:	2b0c      	cmp	r3, #12
 8009a8a:	f040 80de 	bne.w	8009c4a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	f040 80da 	bne.w	8009c4a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d102      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f000 bea5 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aa8:	4b86      	ldr	r3, [pc, #536]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d004      	beq.n	8009abe <HAL_RCC_OscConfig+0x7a>
 8009ab4:	4b83      	ldr	r3, [pc, #524]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009abc:	e005      	b.n	8009aca <HAL_RCC_OscConfig+0x86>
 8009abe:	4b81      	ldr	r3, [pc, #516]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ac4:	041b      	lsls	r3, r3, #16
 8009ac6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d255      	bcs.n	8009b7a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 f9d9 	bl	800ae90 <RCC_SetFlashLatencyFromMSIRange>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f000 be82 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009aea:	4b76      	ldr	r3, [pc, #472]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	4a75      	ldr	r2, [pc, #468]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009af0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009af4:	6093      	str	r3, [r2, #8]
 8009af6:	4b73      	ldr	r3, [pc, #460]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b02:	4970      	ldr	r1, [pc, #448]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009b10:	d309      	bcc.n	8009b26 <HAL_RCC_OscConfig+0xe2>
 8009b12:	4b6c      	ldr	r3, [pc, #432]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f023 021f 	bic.w	r2, r3, #31
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	4969      	ldr	r1, [pc, #420]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60cb      	str	r3, [r1, #12]
 8009b24:	e07e      	b.n	8009c24 <HAL_RCC_OscConfig+0x1e0>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	da0a      	bge.n	8009b44 <HAL_RCC_OscConfig+0x100>
 8009b2e:	4b65      	ldr	r3, [pc, #404]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	015b      	lsls	r3, r3, #5
 8009b3c:	4961      	ldr	r1, [pc, #388]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60cb      	str	r3, [r1, #12]
 8009b42:	e06f      	b.n	8009c24 <HAL_RCC_OscConfig+0x1e0>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4c:	d30a      	bcc.n	8009b64 <HAL_RCC_OscConfig+0x120>
 8009b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	029b      	lsls	r3, r3, #10
 8009b5c:	4959      	ldr	r1, [pc, #356]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60cb      	str	r3, [r1, #12]
 8009b62:	e05f      	b.n	8009c24 <HAL_RCC_OscConfig+0x1e0>
 8009b64:	4b57      	ldr	r3, [pc, #348]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	03db      	lsls	r3, r3, #15
 8009b72:	4954      	ldr	r1, [pc, #336]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60cb      	str	r3, [r1, #12]
 8009b78:	e054      	b.n	8009c24 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009b7a:	4b52      	ldr	r3, [pc, #328]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	4a51      	ldr	r2, [pc, #324]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b84:	6093      	str	r3, [r2, #8]
 8009b86:	4b4f      	ldr	r3, [pc, #316]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	494c      	ldr	r1, [pc, #304]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009ba0:	d309      	bcc.n	8009bb6 <HAL_RCC_OscConfig+0x172>
 8009ba2:	4b48      	ldr	r3, [pc, #288]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f023 021f 	bic.w	r2, r3, #31
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	4945      	ldr	r1, [pc, #276]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60cb      	str	r3, [r1, #12]
 8009bb4:	e028      	b.n	8009c08 <HAL_RCC_OscConfig+0x1c4>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da0a      	bge.n	8009bd4 <HAL_RCC_OscConfig+0x190>
 8009bbe:	4b41      	ldr	r3, [pc, #260]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	015b      	lsls	r3, r3, #5
 8009bcc:	493d      	ldr	r1, [pc, #244]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60cb      	str	r3, [r1, #12]
 8009bd2:	e019      	b.n	8009c08 <HAL_RCC_OscConfig+0x1c4>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bdc:	d30a      	bcc.n	8009bf4 <HAL_RCC_OscConfig+0x1b0>
 8009bde:	4b39      	ldr	r3, [pc, #228]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	029b      	lsls	r3, r3, #10
 8009bec:	4935      	ldr	r1, [pc, #212]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60cb      	str	r3, [r1, #12]
 8009bf2:	e009      	b.n	8009c08 <HAL_RCC_OscConfig+0x1c4>
 8009bf4:	4b33      	ldr	r3, [pc, #204]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	03db      	lsls	r3, r3, #15
 8009c02:	4930      	ldr	r1, [pc, #192]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c12:	4618      	mov	r0, r3
 8009c14:	f001 f93c 	bl	800ae90 <RCC_SetFlashLatencyFromMSIRange>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f000 bde5 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009c24:	f001 f8de 	bl	800ade4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009c28:	4b27      	ldr	r3, [pc, #156]	@ (8009cc8 <HAL_RCC_OscConfig+0x284>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7f8 fea9 	bl	8002984 <HAL_InitTick>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 808a 	beq.w	8009d56 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c46:	f000 bdd2 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d066      	beq.n	8009d20 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009c52:	4b1c      	ldr	r3, [pc, #112]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009c58:	f043 0301 	orr.w	r3, r3, #1
 8009c5c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c5e:	f7f8 ff1b 	bl	8002a98 <HAL_GetTick>
 8009c62:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009c64:	e009      	b.n	8009c7a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c66:	f7f8 ff17 	bl	8002a98 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d902      	bls.n	8009c7a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	f000 bdba 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009c7a:	4b12      	ldr	r3, [pc, #72]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0ef      	beq.n	8009c66 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009c86:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009c8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c90:	6093      	str	r3, [r2, #8]
 8009c92:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9e:	4909      	ldr	r1, [pc, #36]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009cac:	d30e      	bcc.n	8009ccc <HAL_RCC_OscConfig+0x288>
 8009cae:	4b05      	ldr	r3, [pc, #20]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f023 021f 	bic.w	r2, r3, #31
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	4902      	ldr	r1, [pc, #8]	@ (8009cc4 <HAL_RCC_OscConfig+0x280>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60cb      	str	r3, [r1, #12]
 8009cc0:	e04a      	b.n	8009d58 <HAL_RCC_OscConfig+0x314>
 8009cc2:	bf00      	nop
 8009cc4:	46020c00 	.word	0x46020c00
 8009cc8:	20000004 	.word	0x20000004
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	da0a      	bge.n	8009cea <HAL_RCC_OscConfig+0x2a6>
 8009cd4:	4b98      	ldr	r3, [pc, #608]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	015b      	lsls	r3, r3, #5
 8009ce2:	4995      	ldr	r1, [pc, #596]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	60cb      	str	r3, [r1, #12]
 8009ce8:	e036      	b.n	8009d58 <HAL_RCC_OscConfig+0x314>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf2:	d30a      	bcc.n	8009d0a <HAL_RCC_OscConfig+0x2c6>
 8009cf4:	4b90      	ldr	r3, [pc, #576]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	029b      	lsls	r3, r3, #10
 8009d02:	498d      	ldr	r1, [pc, #564]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60cb      	str	r3, [r1, #12]
 8009d08:	e026      	b.n	8009d58 <HAL_RCC_OscConfig+0x314>
 8009d0a:	4b8b      	ldr	r3, [pc, #556]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	03db      	lsls	r3, r3, #15
 8009d18:	4987      	ldr	r1, [pc, #540]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60cb      	str	r3, [r1, #12]
 8009d1e:	e01b      	b.n	8009d58 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009d20:	4b85      	ldr	r3, [pc, #532]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a84      	ldr	r2, [pc, #528]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d26:	f023 0301 	bic.w	r3, r3, #1
 8009d2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d2c:	f7f8 feb4 	bl	8002a98 <HAL_GetTick>
 8009d30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009d32:	e009      	b.n	8009d48 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d34:	f7f8 feb0 	bl	8002a98 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d902      	bls.n	8009d48 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	f000 bd53 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009d48:	4b7b      	ldr	r3, [pc, #492]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1ef      	bne.n	8009d34 <HAL_RCC_OscConfig+0x2f0>
 8009d54:	e000      	b.n	8009d58 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009d56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 808b 	beq.w	8009e7c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d005      	beq.n	8009d78 <HAL_RCC_OscConfig+0x334>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	2b0c      	cmp	r3, #12
 8009d70:	d109      	bne.n	8009d86 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d106      	bne.n	8009d86 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d17d      	bne.n	8009e7c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f000 bd34 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d8e:	d106      	bne.n	8009d9e <HAL_RCC_OscConfig+0x35a>
 8009d90:	4b69      	ldr	r3, [pc, #420]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a68      	ldr	r2, [pc, #416]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	e041      	b.n	8009e22 <HAL_RCC_OscConfig+0x3de>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009da6:	d112      	bne.n	8009dce <HAL_RCC_OscConfig+0x38a>
 8009da8:	4b63      	ldr	r3, [pc, #396]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a62      	ldr	r2, [pc, #392]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	4b60      	ldr	r3, [pc, #384]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a5f      	ldr	r2, [pc, #380]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009dba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a5c      	ldr	r2, [pc, #368]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	e029      	b.n	8009e22 <HAL_RCC_OscConfig+0x3de>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009dd6:	d112      	bne.n	8009dfe <HAL_RCC_OscConfig+0x3ba>
 8009dd8:	4b57      	ldr	r3, [pc, #348]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a56      	ldr	r2, [pc, #344]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009dde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	4b54      	ldr	r3, [pc, #336]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a53      	ldr	r2, [pc, #332]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	4b51      	ldr	r3, [pc, #324]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a50      	ldr	r2, [pc, #320]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	e011      	b.n	8009e22 <HAL_RCC_OscConfig+0x3de>
 8009dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a4d      	ldr	r2, [pc, #308]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	4b48      	ldr	r3, [pc, #288]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a47      	ldr	r2, [pc, #284]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009e20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d014      	beq.n	8009e54 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009e2a:	f7f8 fe35 	bl	8002a98 <HAL_GetTick>
 8009e2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e30:	e009      	b.n	8009e46 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e32:	f7f8 fe31 	bl	8002a98 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	2b64      	cmp	r3, #100	@ 0x64
 8009e3e:	d902      	bls.n	8009e46 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	f000 bcd4 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e46:	4b3c      	ldr	r3, [pc, #240]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0ef      	beq.n	8009e32 <HAL_RCC_OscConfig+0x3ee>
 8009e52:	e013      	b.n	8009e7c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009e54:	f7f8 fe20 	bl	8002a98 <HAL_GetTick>
 8009e58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e5a:	e009      	b.n	8009e70 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e5c:	f7f8 fe1c 	bl	8002a98 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	2b64      	cmp	r3, #100	@ 0x64
 8009e68:	d902      	bls.n	8009e70 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	f000 bcbf 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e70:	4b31      	ldr	r3, [pc, #196]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1ef      	bne.n	8009e5c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0302 	and.w	r3, r3, #2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d05f      	beq.n	8009f48 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d005      	beq.n	8009e9a <HAL_RCC_OscConfig+0x456>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	2b0c      	cmp	r3, #12
 8009e92:	d114      	bne.n	8009ebe <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d111      	bne.n	8009ebe <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f000 bca3 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009ea8:	4b23      	ldr	r3, [pc, #140]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	041b      	lsls	r3, r3, #16
 8009eb6:	4920      	ldr	r1, [pc, #128]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009ebc:	e044      	b.n	8009f48 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d024      	beq.n	8009f10 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1b      	ldr	r2, [pc, #108]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ed0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ed2:	f7f8 fde1 	bl	8002a98 <HAL_GetTick>
 8009ed6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ed8:	e009      	b.n	8009eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009eda:	f7f8 fddd 	bl	8002a98 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d902      	bls.n	8009eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	f000 bc80 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009eee:	4b12      	ldr	r3, [pc, #72]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0ef      	beq.n	8009eda <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009efa:	4b0f      	ldr	r3, [pc, #60]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	041b      	lsls	r3, r3, #16
 8009f08:	490b      	ldr	r1, [pc, #44]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	610b      	str	r3, [r1, #16]
 8009f0e:	e01b      	b.n	8009f48 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009f10:	4b09      	ldr	r3, [pc, #36]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a08      	ldr	r2, [pc, #32]	@ (8009f38 <HAL_RCC_OscConfig+0x4f4>)
 8009f16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f1c:	f7f8 fdbc 	bl	8002a98 <HAL_GetTick>
 8009f20:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f22:	e00b      	b.n	8009f3c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f24:	f7f8 fdb8 	bl	8002a98 <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d904      	bls.n	8009f3c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	f000 bc5b 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
 8009f38:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f3c:	4baf      	ldr	r3, [pc, #700]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1ed      	bne.n	8009f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 80c8 	beq.w	800a0e6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f5c:	4ba7      	ldr	r3, [pc, #668]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 8009f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d111      	bne.n	8009f8e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f6a:	4ba4      	ldr	r3, [pc, #656]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 8009f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f70:	4aa2      	ldr	r2, [pc, #648]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 8009f72:	f043 0304 	orr.w	r3, r3, #4
 8009f76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009f7a:	4ba0      	ldr	r3, [pc, #640]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 8009f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009f8e:	4b9c      	ldr	r3, [pc, #624]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d119      	bne.n	8009fce <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009f9a:	4b99      	ldr	r3, [pc, #612]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9e:	4a98      	ldr	r2, [pc, #608]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 8009fa0:	f043 0301 	orr.w	r3, r3, #1
 8009fa4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fa6:	f7f8 fd77 	bl	8002a98 <HAL_GetTick>
 8009faa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fac:	e009      	b.n	8009fc2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fae:	f7f8 fd73 	bl	8002a98 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d902      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	f000 bc16 	b.w	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fc2:	4b8f      	ldr	r3, [pc, #572]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0ef      	beq.n	8009fae <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d05f      	beq.n	800a096 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009fd6:	4b89      	ldr	r3, [pc, #548]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 8009fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fdc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d037      	beq.n	800a05c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d006      	beq.n	800a004 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e3f4      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01b      	beq.n	800a046 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a00e:	4b7b      	ldr	r3, [pc, #492]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a014:	4a79      	ldr	r2, [pc, #484]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a016:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a01a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800a01e:	f7f8 fd3b 	bl	8002a98 <HAL_GetTick>
 800a022:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a024:	e008      	b.n	800a038 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a026:	f7f8 fd37 	bl	8002a98 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b05      	cmp	r3, #5
 800a032:	d901      	bls.n	800a038 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e3da      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a038:	4b70      	ldr	r3, [pc, #448]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a03a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a03e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1ef      	bne.n	800a026 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a046:	4b6d      	ldr	r3, [pc, #436]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a04c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	4969      	ldr	r1, [pc, #420]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a056:	4313      	orrs	r3, r2
 800a058:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a05c:	4b67      	ldr	r3, [pc, #412]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a05e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a062:	4a66      	ldr	r2, [pc, #408]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a068:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a06c:	f7f8 fd14 	bl	8002a98 <HAL_GetTick>
 800a070:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a072:	e008      	b.n	800a086 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a074:	f7f8 fd10 	bl	8002a98 <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d901      	bls.n	800a086 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e3b3      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a086:	4b5d      	ldr	r3, [pc, #372]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a08c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0ef      	beq.n	800a074 <HAL_RCC_OscConfig+0x630>
 800a094:	e01b      	b.n	800a0ce <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a096:	4b59      	ldr	r3, [pc, #356]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a09c:	4a57      	ldr	r2, [pc, #348]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a09e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a0a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a0a6:	f7f8 fcf7 	bl	8002a98 <HAL_GetTick>
 800a0aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a0ac:	e008      	b.n	800a0c0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0ae:	f7f8 fcf3 	bl	8002a98 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	2b05      	cmp	r3, #5
 800a0ba:	d901      	bls.n	800a0c0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e396      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a0c0:	4b4e      	ldr	r3, [pc, #312]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a0c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1ef      	bne.n	800a0ae <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d107      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0d6:	4b49      	ldr	r3, [pc, #292]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a0d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0dc:	4a47      	ldr	r2, [pc, #284]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a0de:	f023 0304 	bic.w	r3, r3, #4
 800a0e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 8111 	beq.w	800a316 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0fa:	4b40      	ldr	r3, [pc, #256]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a0fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b00      	cmp	r3, #0
 800a106:	d111      	bne.n	800a12c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a108:	4b3c      	ldr	r3, [pc, #240]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a10a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a10e:	4a3b      	ldr	r2, [pc, #236]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a110:	f043 0304 	orr.w	r3, r3, #4
 800a114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a118:	4b38      	ldr	r3, [pc, #224]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a11a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a11e:	f003 0304 	and.w	r3, r3, #4
 800a122:	613b      	str	r3, [r7, #16]
 800a124:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a12c:	4b34      	ldr	r3, [pc, #208]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 800a12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	2b00      	cmp	r3, #0
 800a136:	d118      	bne.n	800a16a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a138:	4b31      	ldr	r3, [pc, #196]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 800a13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13c:	4a30      	ldr	r2, [pc, #192]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 800a13e:	f043 0301 	orr.w	r3, r3, #1
 800a142:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a144:	f7f8 fca8 	bl	8002a98 <HAL_GetTick>
 800a148:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a14a:	e008      	b.n	800a15e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a14c:	f7f8 fca4 	bl	8002a98 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b02      	cmp	r3, #2
 800a158:	d901      	bls.n	800a15e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e347      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a15e:	4b28      	ldr	r3, [pc, #160]	@ (800a200 <HAL_RCC_OscConfig+0x7bc>)
 800a160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0f0      	beq.n	800a14c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01f      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d010      	beq.n	800a1a4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a182:	4b1e      	ldr	r3, [pc, #120]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a188:	4a1c      	ldr	r2, [pc, #112]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a18a:	f043 0304 	orr.w	r3, r3, #4
 800a18e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a192:	4b1a      	ldr	r3, [pc, #104]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a198:	4a18      	ldr	r2, [pc, #96]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a19a:	f043 0301 	orr.w	r3, r3, #1
 800a19e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a1a2:	e018      	b.n	800a1d6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a1a4:	4b15      	ldr	r3, [pc, #84]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a1a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1aa:	4a14      	ldr	r2, [pc, #80]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a1ac:	f043 0301 	orr.w	r3, r3, #1
 800a1b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a1b4:	e00f      	b.n	800a1d6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a1b6:	4b11      	ldr	r3, [pc, #68]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a1b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1bc:	4a0f      	ldr	r2, [pc, #60]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a1be:	f023 0301 	bic.w	r3, r3, #1
 800a1c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a1c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1cc:	4a0b      	ldr	r2, [pc, #44]	@ (800a1fc <HAL_RCC_OscConfig+0x7b8>)
 800a1ce:	f023 0304 	bic.w	r3, r3, #4
 800a1d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d057      	beq.n	800a28e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a1de:	f7f8 fc5b 	bl	8002a98 <HAL_GetTick>
 800a1e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1e4:	e00e      	b.n	800a204 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1e6:	f7f8 fc57 	bl	8002a98 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d905      	bls.n	800a204 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e2f8      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
 800a1fc:	46020c00 	.word	0x46020c00
 800a200:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a204:	4b9c      	ldr	r3, [pc, #624]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0e9      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d01b      	beq.n	800a256 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a21e:	4b96      	ldr	r3, [pc, #600]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a224:	4a94      	ldr	r2, [pc, #592]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a22a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a22e:	e00a      	b.n	800a246 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a230:	f7f8 fc32 	bl	8002a98 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a23e:	4293      	cmp	r3, r2
 800a240:	d901      	bls.n	800a246 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e2d3      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a246:	4b8c      	ldr	r3, [pc, #560]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a24c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0ed      	beq.n	800a230 <HAL_RCC_OscConfig+0x7ec>
 800a254:	e053      	b.n	800a2fe <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a256:	4b88      	ldr	r3, [pc, #544]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a25c:	4a86      	ldr	r2, [pc, #536]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a25e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a262:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a266:	e00a      	b.n	800a27e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a268:	f7f8 fc16 	bl	8002a98 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a276:	4293      	cmp	r3, r2
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e2b7      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a27e:	4b7e      	ldr	r3, [pc, #504]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1ed      	bne.n	800a268 <HAL_RCC_OscConfig+0x824>
 800a28c:	e037      	b.n	800a2fe <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a28e:	f7f8 fc03 	bl	8002a98 <HAL_GetTick>
 800a292:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a294:	e00a      	b.n	800a2ac <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a296:	f7f8 fbff 	bl	8002a98 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d901      	bls.n	800a2ac <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e2a0      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2ac:	4b72      	ldr	r3, [pc, #456]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a2ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1ed      	bne.n	800a296 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a2ba:	4b6f      	ldr	r3, [pc, #444]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a2bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d01a      	beq.n	800a2fe <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a2c8:	4b6b      	ldr	r3, [pc, #428]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a2ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2ce:	4a6a      	ldr	r2, [pc, #424]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a2d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a2d8:	e00a      	b.n	800a2f0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2da:	f7f8 fbdd 	bl	8002a98 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d901      	bls.n	800a2f0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e27e      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a2f0:	4b61      	ldr	r3, [pc, #388]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a2f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1ed      	bne.n	800a2da <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2fe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a302:	2b01      	cmp	r3, #1
 800a304:	d107      	bne.n	800a316 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a306:	4b5c      	ldr	r3, [pc, #368]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a30c:	4a5a      	ldr	r2, [pc, #360]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a30e:	f023 0304 	bic.w	r3, r3, #4
 800a312:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d036      	beq.n	800a390 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d019      	beq.n	800a35e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a32a:	4b53      	ldr	r3, [pc, #332]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a52      	ldr	r2, [pc, #328]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a330:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a334:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a336:	f7f8 fbaf 	bl	8002a98 <HAL_GetTick>
 800a33a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a33c:	e008      	b.n	800a350 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a33e:	f7f8 fbab 	bl	8002a98 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d901      	bls.n	800a350 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e24e      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a350:	4b49      	ldr	r3, [pc, #292]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0f0      	beq.n	800a33e <HAL_RCC_OscConfig+0x8fa>
 800a35c:	e018      	b.n	800a390 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a35e:	4b46      	ldr	r3, [pc, #280]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a45      	ldr	r2, [pc, #276]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a364:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a368:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a36a:	f7f8 fb95 	bl	8002a98 <HAL_GetTick>
 800a36e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a370:	e008      	b.n	800a384 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a372:	f7f8 fb91 	bl	8002a98 <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d901      	bls.n	800a384 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e234      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a384:	4b3c      	ldr	r3, [pc, #240]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1f0      	bne.n	800a372 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d036      	beq.n	800a40a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d019      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a3a4:	4b34      	ldr	r3, [pc, #208]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a33      	ldr	r2, [pc, #204]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a3aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3b0:	f7f8 fb72 	bl	8002a98 <HAL_GetTick>
 800a3b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a3b6:	e008      	b.n	800a3ca <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a3b8:	f7f8 fb6e 	bl	8002a98 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e211      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a3ca:	4b2b      	ldr	r3, [pc, #172]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0f0      	beq.n	800a3b8 <HAL_RCC_OscConfig+0x974>
 800a3d6:	e018      	b.n	800a40a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a3d8:	4b27      	ldr	r3, [pc, #156]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a26      	ldr	r2, [pc, #152]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a3de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3e4:	f7f8 fb58 	bl	8002a98 <HAL_GetTick>
 800a3e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a3ea:	e008      	b.n	800a3fe <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a3ec:	f7f8 fb54 	bl	8002a98 <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d901      	bls.n	800a3fe <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e1f7      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1f0      	bne.n	800a3ec <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a412:	2b00      	cmp	r3, #0
 800a414:	d07f      	beq.n	800a516 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d062      	beq.n	800a4e4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a41e:	4b16      	ldr	r3, [pc, #88]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	4a15      	ldr	r2, [pc, #84]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a424:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a428:	6093      	str	r3, [r2, #8]
 800a42a:	4b13      	ldr	r3, [pc, #76]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	4910      	ldr	r1, [pc, #64]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a444:	d309      	bcc.n	800a45a <HAL_RCC_OscConfig+0xa16>
 800a446:	4b0c      	ldr	r3, [pc, #48]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f023 021f 	bic.w	r2, r3, #31
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	4909      	ldr	r1, [pc, #36]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a454:	4313      	orrs	r3, r2
 800a456:	60cb      	str	r3, [r1, #12]
 800a458:	e02a      	b.n	800a4b0 <HAL_RCC_OscConfig+0xa6c>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45e:	2b00      	cmp	r3, #0
 800a460:	da0c      	bge.n	800a47c <HAL_RCC_OscConfig+0xa38>
 800a462:	4b05      	ldr	r3, [pc, #20]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	015b      	lsls	r3, r3, #5
 800a470:	4901      	ldr	r1, [pc, #4]	@ (800a478 <HAL_RCC_OscConfig+0xa34>)
 800a472:	4313      	orrs	r3, r2
 800a474:	60cb      	str	r3, [r1, #12]
 800a476:	e01b      	b.n	800a4b0 <HAL_RCC_OscConfig+0xa6c>
 800a478:	46020c00 	.word	0x46020c00
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a484:	d30a      	bcc.n	800a49c <HAL_RCC_OscConfig+0xa58>
 800a486:	4ba1      	ldr	r3, [pc, #644]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	029b      	lsls	r3, r3, #10
 800a494:	499d      	ldr	r1, [pc, #628]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a496:	4313      	orrs	r3, r2
 800a498:	60cb      	str	r3, [r1, #12]
 800a49a:	e009      	b.n	800a4b0 <HAL_RCC_OscConfig+0xa6c>
 800a49c:	4b9b      	ldr	r3, [pc, #620]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	03db      	lsls	r3, r3, #15
 800a4aa:	4998      	ldr	r1, [pc, #608]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a4b0:	4b96      	ldr	r3, [pc, #600]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a95      	ldr	r2, [pc, #596]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a4b6:	f043 0310 	orr.w	r3, r3, #16
 800a4ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a4bc:	f7f8 faec 	bl	8002a98 <HAL_GetTick>
 800a4c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a4c4:	f7f8 fae8 	bl	8002a98 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e18b      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a4d6:	4b8d      	ldr	r3, [pc, #564]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0320 	and.w	r3, r3, #32
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f0      	beq.n	800a4c4 <HAL_RCC_OscConfig+0xa80>
 800a4e2:	e018      	b.n	800a516 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a4e4:	4b89      	ldr	r3, [pc, #548]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a88      	ldr	r2, [pc, #544]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a4ea:	f023 0310 	bic.w	r3, r3, #16
 800a4ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a4f0:	f7f8 fad2 	bl	8002a98 <HAL_GetTick>
 800a4f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a4f6:	e008      	b.n	800a50a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a4f8:	f7f8 face 	bl	8002a98 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e171      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a50a:	4b80      	ldr	r3, [pc, #512]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1f0      	bne.n	800a4f8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 8166 	beq.w	800a7ec <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a520:	2300      	movs	r3, #0
 800a522:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a526:	4b79      	ldr	r3, [pc, #484]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	f003 030c 	and.w	r3, r3, #12
 800a52e:	2b0c      	cmp	r3, #12
 800a530:	f000 80f2 	beq.w	800a718 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a538:	2b02      	cmp	r3, #2
 800a53a:	f040 80c5 	bne.w	800a6c8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a53e:	4b73      	ldr	r3, [pc, #460]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a72      	ldr	r2, [pc, #456]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a544:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a548:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a54a:	f7f8 faa5 	bl	8002a98 <HAL_GetTick>
 800a54e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a550:	e008      	b.n	800a564 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a552:	f7f8 faa1 	bl	8002a98 <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d901      	bls.n	800a564 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e144      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a564:	4b69      	ldr	r3, [pc, #420]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1f0      	bne.n	800a552 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a570:	4b66      	ldr	r3, [pc, #408]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a576:	f003 0304 	and.w	r3, r3, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d111      	bne.n	800a5a2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a57e:	4b63      	ldr	r3, [pc, #396]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a584:	4a61      	ldr	r2, [pc, #388]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a586:	f043 0304 	orr.w	r3, r3, #4
 800a58a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a58e:	4b5f      	ldr	r3, [pc, #380]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a59c:	2301      	movs	r3, #1
 800a59e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a5a2:	4b5b      	ldr	r3, [pc, #364]	@ (800a710 <HAL_RCC_OscConfig+0xccc>)
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5ae:	d102      	bne.n	800a5b6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a5b6:	4b56      	ldr	r3, [pc, #344]	@ (800a710 <HAL_RCC_OscConfig+0xccc>)
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	4a55      	ldr	r2, [pc, #340]	@ (800a710 <HAL_RCC_OscConfig+0xccc>)
 800a5bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5c0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a5c2:	4b52      	ldr	r3, [pc, #328]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5ca:	f023 0303 	bic.w	r3, r3, #3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a5d6:	3a01      	subs	r2, #1
 800a5d8:	0212      	lsls	r2, r2, #8
 800a5da:	4311      	orrs	r1, r2
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	494a      	ldr	r1, [pc, #296]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a5e8:	4b48      	ldr	r3, [pc, #288]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a5ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5ec:	4b49      	ldr	r3, [pc, #292]	@ (800a714 <HAL_RCC_OscConfig+0xcd0>)
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a5f4:	3a01      	subs	r2, #1
 800a5f6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a5fe:	3a01      	subs	r2, #1
 800a600:	0252      	lsls	r2, r2, #9
 800a602:	b292      	uxth	r2, r2
 800a604:	4311      	orrs	r1, r2
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a60a:	3a01      	subs	r2, #1
 800a60c:	0412      	lsls	r2, r2, #16
 800a60e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a612:	4311      	orrs	r1, r2
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a618:	3a01      	subs	r2, #1
 800a61a:	0612      	lsls	r2, r2, #24
 800a61c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a620:	430a      	orrs	r2, r1
 800a622:	493a      	ldr	r1, [pc, #232]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a624:	4313      	orrs	r3, r2
 800a626:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a628:	4b38      	ldr	r3, [pc, #224]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62c:	4a37      	ldr	r2, [pc, #220]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a62e:	f023 0310 	bic.w	r3, r3, #16
 800a632:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a638:	4a34      	ldr	r2, [pc, #208]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a63e:	4b33      	ldr	r3, [pc, #204]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a642:	4a32      	ldr	r2, [pc, #200]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a644:	f043 0310 	orr.w	r3, r3, #16
 800a648:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a64a:	4b30      	ldr	r3, [pc, #192]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64e:	f023 020c 	bic.w	r2, r3, #12
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a656:	492d      	ldr	r1, [pc, #180]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a658:	4313      	orrs	r3, r2
 800a65a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a65c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a660:	2b01      	cmp	r3, #1
 800a662:	d105      	bne.n	800a670 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a664:	4b2a      	ldr	r3, [pc, #168]	@ (800a710 <HAL_RCC_OscConfig+0xccc>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4a29      	ldr	r2, [pc, #164]	@ (800a710 <HAL_RCC_OscConfig+0xccc>)
 800a66a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a66e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a670:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a674:	2b01      	cmp	r3, #1
 800a676:	d107      	bne.n	800a688 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a678:	4b24      	ldr	r3, [pc, #144]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a67a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a67e:	4a23      	ldr	r2, [pc, #140]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a680:	f023 0304 	bic.w	r3, r3, #4
 800a684:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a688:	4b20      	ldr	r3, [pc, #128]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a1f      	ldr	r2, [pc, #124]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a68e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a692:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a694:	f7f8 fa00 	bl	8002a98 <HAL_GetTick>
 800a698:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a69a:	e008      	b.n	800a6ae <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a69c:	f7f8 f9fc 	bl	8002a98 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d901      	bls.n	800a6ae <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e09f      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a6ae:	4b17      	ldr	r3, [pc, #92]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0f0      	beq.n	800a69c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a6ba:	4b14      	ldr	r3, [pc, #80]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6be:	4a13      	ldr	r2, [pc, #76]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a6c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6c4:	6293      	str	r3, [r2, #40]	@ 0x28
 800a6c6:	e091      	b.n	800a7ec <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a6c8:	4b10      	ldr	r3, [pc, #64]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a6ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a6d4:	f7f8 f9e0 	bl	8002a98 <HAL_GetTick>
 800a6d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a6da:	e008      	b.n	800a6ee <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6dc:	f7f8 f9dc 	bl	8002a98 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d901      	bls.n	800a6ee <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e07f      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a6ee:	4b07      	ldr	r3, [pc, #28]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1f0      	bne.n	800a6dc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a6fa:	4b04      	ldr	r3, [pc, #16]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6fe:	4a03      	ldr	r2, [pc, #12]	@ (800a70c <HAL_RCC_OscConfig+0xcc8>)
 800a700:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a704:	f023 0303 	bic.w	r3, r3, #3
 800a708:	6293      	str	r3, [r2, #40]	@ 0x28
 800a70a:	e06f      	b.n	800a7ec <HAL_RCC_OscConfig+0xda8>
 800a70c:	46020c00 	.word	0x46020c00
 800a710:	46020800 	.word	0x46020800
 800a714:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a718:	4b37      	ldr	r3, [pc, #220]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a71e:	4b36      	ldr	r3, [pc, #216]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a722:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d039      	beq.n	800a7a0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	f003 0203 	and.w	r2, r3, #3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a736:	429a      	cmp	r2, r3
 800a738:	d132      	bne.n	800a7a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	0a1b      	lsrs	r3, r3, #8
 800a73e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a746:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a748:	429a      	cmp	r2, r3
 800a74a:	d129      	bne.n	800a7a0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a756:	429a      	cmp	r2, r3
 800a758:	d122      	bne.n	800a7a0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a764:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a766:	429a      	cmp	r2, r3
 800a768:	d11a      	bne.n	800a7a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	0a5b      	lsrs	r3, r3, #9
 800a76e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a776:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a778:	429a      	cmp	r2, r3
 800a77a:	d111      	bne.n	800a7a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a788:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d108      	bne.n	800a7a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	0e1b      	lsrs	r3, r3, #24
 800a792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a79a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d001      	beq.n	800a7a4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e024      	b.n	800a7ee <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a7a4:	4b14      	ldr	r3, [pc, #80]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a8:	08db      	lsrs	r3, r3, #3
 800a7aa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d01a      	beq.n	800a7ec <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a7b6:	4b10      	ldr	r3, [pc, #64]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ba:	4a0f      	ldr	r2, [pc, #60]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a7bc:	f023 0310 	bic.w	r3, r3, #16
 800a7c0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c2:	f7f8 f969 	bl	8002a98 <HAL_GetTick>
 800a7c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a7c8:	bf00      	nop
 800a7ca:	f7f8 f965 	bl	8002a98 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d0f9      	beq.n	800a7ca <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7da:	4a07      	ldr	r2, [pc, #28]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a7dc:	00db      	lsls	r3, r3, #3
 800a7de:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a7e0:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e4:	4a04      	ldr	r2, [pc, #16]	@ (800a7f8 <HAL_RCC_OscConfig+0xdb4>)
 800a7e6:	f043 0310 	orr.w	r3, r3, #16
 800a7ea:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3738      	adds	r7, #56	@ 0x38
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	46020c00 	.word	0x46020c00

0800a7fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e1d9      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a810:	4b9b      	ldr	r3, [pc, #620]	@ (800aa80 <HAL_RCC_ClockConfig+0x284>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d910      	bls.n	800a840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a81e:	4b98      	ldr	r3, [pc, #608]	@ (800aa80 <HAL_RCC_ClockConfig+0x284>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f023 020f 	bic.w	r2, r3, #15
 800a826:	4996      	ldr	r1, [pc, #600]	@ (800aa80 <HAL_RCC_ClockConfig+0x284>)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a82e:	4b94      	ldr	r3, [pc, #592]	@ (800aa80 <HAL_RCC_ClockConfig+0x284>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d001      	beq.n	800a840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e1c1      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0310 	and.w	r3, r3, #16
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d010      	beq.n	800a86e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	695a      	ldr	r2, [r3, #20]
 800a850:	4b8c      	ldr	r3, [pc, #560]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a854:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a858:	429a      	cmp	r2, r3
 800a85a:	d908      	bls.n	800a86e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a85c:	4b89      	ldr	r3, [pc, #548]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a860:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	4986      	ldr	r1, [pc, #536]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0308 	and.w	r3, r3, #8
 800a876:	2b00      	cmp	r3, #0
 800a878:	d012      	beq.n	800a8a0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691a      	ldr	r2, [r3, #16]
 800a87e:	4b81      	ldr	r3, [pc, #516]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	091b      	lsrs	r3, r3, #4
 800a884:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a888:	429a      	cmp	r2, r3
 800a88a:	d909      	bls.n	800a8a0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a88c:	4b7d      	ldr	r3, [pc, #500]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	497a      	ldr	r1, [pc, #488]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0304 	and.w	r3, r3, #4
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d010      	beq.n	800a8ce <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	4b74      	ldr	r3, [pc, #464]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d908      	bls.n	800a8ce <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a8bc:	4b71      	ldr	r3, [pc, #452]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	496e      	ldr	r1, [pc, #440]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d010      	beq.n	800a8fc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689a      	ldr	r2, [r3, #8]
 800a8de:	4b69      	ldr	r3, [pc, #420]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	f003 030f 	and.w	r3, r3, #15
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d908      	bls.n	800a8fc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a8ea:	4b66      	ldr	r3, [pc, #408]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	f023 020f 	bic.w	r2, r3, #15
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	4963      	ldr	r1, [pc, #396]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 80d2 	beq.w	800aaae <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a90a:	2300      	movs	r3, #0
 800a90c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b03      	cmp	r3, #3
 800a914:	d143      	bne.n	800a99e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a916:	4b5b      	ldr	r3, [pc, #364]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d110      	bne.n	800a946 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a924:	4b57      	ldr	r3, [pc, #348]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a92a:	4a56      	ldr	r2, [pc, #344]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a92c:	f043 0304 	orr.w	r3, r3, #4
 800a930:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a934:	4b53      	ldr	r3, [pc, #332]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	60bb      	str	r3, [r7, #8]
 800a940:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a942:	2301      	movs	r3, #1
 800a944:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a946:	f7f8 f8a7 	bl	8002a98 <HAL_GetTick>
 800a94a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a94c:	4b4e      	ldr	r3, [pc, #312]	@ (800aa88 <HAL_RCC_ClockConfig+0x28c>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00f      	beq.n	800a978 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a958:	e008      	b.n	800a96c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a95a:	f7f8 f89d 	bl	8002a98 <HAL_GetTick>
 800a95e:	4602      	mov	r2, r0
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	2b02      	cmp	r3, #2
 800a966:	d901      	bls.n	800a96c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e12b      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a96c:	4b46      	ldr	r3, [pc, #280]	@ (800aa88 <HAL_RCC_ClockConfig+0x28c>)
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0f0      	beq.n	800a95a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a978:	7dfb      	ldrb	r3, [r7, #23]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d107      	bne.n	800a98e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a97e:	4b41      	ldr	r3, [pc, #260]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a984:	4a3f      	ldr	r2, [pc, #252]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a986:	f023 0304 	bic.w	r3, r3, #4
 800a98a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a98e:	4b3d      	ldr	r3, [pc, #244]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d121      	bne.n	800a9de <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e112      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d107      	bne.n	800a9b6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9a6:	4b37      	ldr	r3, [pc, #220]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d115      	bne.n	800a9de <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e106      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d107      	bne.n	800a9ce <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a9be:	4b31      	ldr	r3, [pc, #196]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e0fa      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9ce:	4b2d      	ldr	r3, [pc, #180]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e0f2      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a9de:	4b29      	ldr	r3, [pc, #164]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	f023 0203 	bic.w	r2, r3, #3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	4926      	ldr	r1, [pc, #152]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a9f0:	f7f8 f852 	bl	8002a98 <HAL_GetTick>
 800a9f4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d112      	bne.n	800aa24 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a9fe:	e00a      	b.n	800aa16 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa00:	f7f8 f84a 	bl	8002a98 <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d901      	bls.n	800aa16 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e0d6      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa16:	4b1b      	ldr	r3, [pc, #108]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	f003 030c 	and.w	r3, r3, #12
 800aa1e:	2b0c      	cmp	r3, #12
 800aa20:	d1ee      	bne.n	800aa00 <HAL_RCC_ClockConfig+0x204>
 800aa22:	e044      	b.n	800aaae <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d112      	bne.n	800aa52 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa2c:	e00a      	b.n	800aa44 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa2e:	f7f8 f833 	bl	8002a98 <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d901      	bls.n	800aa44 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e0bf      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa44:	4b0f      	ldr	r3, [pc, #60]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	f003 030c 	and.w	r3, r3, #12
 800aa4c:	2b08      	cmp	r3, #8
 800aa4e:	d1ee      	bne.n	800aa2e <HAL_RCC_ClockConfig+0x232>
 800aa50:	e02d      	b.n	800aaae <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d123      	bne.n	800aaa2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800aa5a:	e00a      	b.n	800aa72 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa5c:	f7f8 f81c 	bl	8002a98 <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e0a8      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800aa72:	4b04      	ldr	r3, [pc, #16]	@ (800aa84 <HAL_RCC_ClockConfig+0x288>)
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	f003 030c 	and.w	r3, r3, #12
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1ee      	bne.n	800aa5c <HAL_RCC_ClockConfig+0x260>
 800aa7e:	e016      	b.n	800aaae <HAL_RCC_ClockConfig+0x2b2>
 800aa80:	40022000 	.word	0x40022000
 800aa84:	46020c00 	.word	0x46020c00
 800aa88:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa8c:	f7f8 f804 	bl	8002a98 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e090      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800aaa2:	4b4a      	ldr	r3, [pc, #296]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	f003 030c 	and.w	r3, r3, #12
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d1ee      	bne.n	800aa8c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d010      	beq.n	800aadc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	4b43      	ldr	r3, [pc, #268]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	f003 030f 	and.w	r3, r3, #15
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d208      	bcs.n	800aadc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800aaca:	4b40      	ldr	r3, [pc, #256]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	f023 020f 	bic.w	r2, r3, #15
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	493d      	ldr	r1, [pc, #244]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aadc:	4b3c      	ldr	r3, [pc, #240]	@ (800abd0 <HAL_RCC_ClockConfig+0x3d4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d210      	bcs.n	800ab0c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaea:	4b39      	ldr	r3, [pc, #228]	@ (800abd0 <HAL_RCC_ClockConfig+0x3d4>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f023 020f 	bic.w	r2, r3, #15
 800aaf2:	4937      	ldr	r1, [pc, #220]	@ (800abd0 <HAL_RCC_ClockConfig+0x3d4>)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aafa:	4b35      	ldr	r3, [pc, #212]	@ (800abd0 <HAL_RCC_ClockConfig+0x3d4>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d001      	beq.n	800ab0c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e05b      	b.n	800abc4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 0304 	and.w	r3, r3, #4
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d010      	beq.n	800ab3a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68da      	ldr	r2, [r3, #12]
 800ab1c:	4b2b      	ldr	r3, [pc, #172]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d208      	bcs.n	800ab3a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800ab28:	4b28      	ldr	r3, [pc, #160]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	4925      	ldr	r1, [pc, #148]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab36:	4313      	orrs	r3, r2
 800ab38:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 0308 	and.w	r3, r3, #8
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d012      	beq.n	800ab6c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	691a      	ldr	r2, [r3, #16]
 800ab4a:	4b20      	ldr	r3, [pc, #128]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	091b      	lsrs	r3, r3, #4
 800ab50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d209      	bcs.n	800ab6c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800ab58:	4b1c      	ldr	r3, [pc, #112]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	011b      	lsls	r3, r3, #4
 800ab66:	4919      	ldr	r1, [pc, #100]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d010      	beq.n	800ab9a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	695a      	ldr	r2, [r3, #20]
 800ab7c:	4b13      	ldr	r3, [pc, #76]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d208      	bcs.n	800ab9a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800ab88:	4b10      	ldr	r3, [pc, #64]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	490d      	ldr	r1, [pc, #52]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ab9a:	f000 f821 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	4b0a      	ldr	r3, [pc, #40]	@ (800abcc <HAL_RCC_ClockConfig+0x3d0>)
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	f003 030f 	and.w	r3, r3, #15
 800aba8:	490a      	ldr	r1, [pc, #40]	@ (800abd4 <HAL_RCC_ClockConfig+0x3d8>)
 800abaa:	5ccb      	ldrb	r3, [r1, r3]
 800abac:	fa22 f303 	lsr.w	r3, r2, r3
 800abb0:	4a09      	ldr	r2, [pc, #36]	@ (800abd8 <HAL_RCC_ClockConfig+0x3dc>)
 800abb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800abb4:	4b09      	ldr	r3, [pc, #36]	@ (800abdc <HAL_RCC_ClockConfig+0x3e0>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f7 fee3 	bl	8002984 <HAL_InitTick>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73fb      	strb	r3, [r7, #15]

  return status;
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	46020c00 	.word	0x46020c00
 800abd0:	40022000 	.word	0x40022000
 800abd4:	08011834 	.word	0x08011834
 800abd8:	20000000 	.word	0x20000000
 800abdc:	20000004 	.word	0x20000004

0800abe0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b08b      	sub	sp, #44	@ 0x2c
 800abe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800abe6:	2300      	movs	r3, #0
 800abe8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abee:	4b78      	ldr	r3, [pc, #480]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	f003 030c 	and.w	r3, r3, #12
 800abf6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abf8:	4b75      	ldr	r3, [pc, #468]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfc:	f003 0303 	and.w	r3, r3, #3
 800ac00:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d005      	beq.n	800ac14 <HAL_RCC_GetSysClockFreq+0x34>
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	2b0c      	cmp	r3, #12
 800ac0c:	d121      	bne.n	800ac52 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d11e      	bne.n	800ac52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ac14:	4b6e      	ldr	r3, [pc, #440]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d107      	bne.n	800ac30 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ac20:	4b6b      	ldr	r3, [pc, #428]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac26:	0b1b      	lsrs	r3, r3, #12
 800ac28:	f003 030f 	and.w	r3, r3, #15
 800ac2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac2e:	e005      	b.n	800ac3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ac30:	4b67      	ldr	r3, [pc, #412]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	0f1b      	lsrs	r3, r3, #28
 800ac36:	f003 030f 	and.w	r3, r3, #15
 800ac3a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ac3c:	4a65      	ldr	r2, [pc, #404]	@ (800add4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac44:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d110      	bne.n	800ac6e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ac50:	e00d      	b.n	800ac6e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac52:	4b5f      	ldr	r3, [pc, #380]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	f003 030c 	and.w	r3, r3, #12
 800ac5a:	2b04      	cmp	r3, #4
 800ac5c:	d102      	bne.n	800ac64 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ac5e:	4b5e      	ldr	r3, [pc, #376]	@ (800add8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ac60:	623b      	str	r3, [r7, #32]
 800ac62:	e004      	b.n	800ac6e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	2b08      	cmp	r3, #8
 800ac68:	d101      	bne.n	800ac6e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ac6a:	4b5b      	ldr	r3, [pc, #364]	@ (800add8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ac6c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b0c      	cmp	r3, #12
 800ac72:	f040 80a5 	bne.w	800adc0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ac76:	4b56      	ldr	r3, [pc, #344]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7a:	f003 0303 	and.w	r3, r3, #3
 800ac7e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ac80:	4b53      	ldr	r3, [pc, #332]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac84:	0a1b      	lsrs	r3, r3, #8
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ac8e:	4b50      	ldr	r3, [pc, #320]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac92:	091b      	lsrs	r3, r3, #4
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ac9a:	4b4d      	ldr	r3, [pc, #308]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac9e:	08db      	lsrs	r3, r3, #3
 800aca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	fb02 f303 	mul.w	r3, r2, r3
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d003      	beq.n	800acc4 <HAL_RCC_GetSysClockFreq+0xe4>
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d022      	beq.n	800ad08 <HAL_RCC_GetSysClockFreq+0x128>
 800acc2:	e043      	b.n	800ad4c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800addc <HAL_RCC_GetSysClockFreq+0x1fc>
 800acd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd6:	4b3e      	ldr	r3, [pc, #248]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800acd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ace6:	ed97 6a01 	vldr	s12, [r7, #4]
 800acea:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800ade0 <HAL_RCC_GetSysClockFreq+0x200>
 800acee:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800acf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800acf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800acfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad06:	e046      	b.n	800ad96 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad12:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800addc <HAL_RCC_GetSysClockFreq+0x1fc>
 800ad16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad1a:	4b2d      	ldr	r3, [pc, #180]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ad2a:	ed97 6a01 	vldr	s12, [r7, #4]
 800ad2e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ade0 <HAL_RCC_GetSysClockFreq+0x200>
 800ad32:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ad3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad4a:	e024      	b.n	800ad96 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad64:	4b1a      	ldr	r3, [pc, #104]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ad74:	ed97 6a01 	vldr	s12, [r7, #4]
 800ad78:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800ade0 <HAL_RCC_GetSysClockFreq+0x200>
 800ad7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ad84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad88:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad94:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800ad96:	4b0e      	ldr	r3, [pc, #56]	@ (800add0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad9a:	0e1b      	lsrs	r3, r3, #24
 800ad9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada0:	3301      	adds	r3, #1
 800ada2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adae:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adba:	ee17 3a90 	vmov	r3, s15
 800adbe:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800adc0:	6a3b      	ldr	r3, [r7, #32]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	372c      	adds	r7, #44	@ 0x2c
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	46020c00 	.word	0x46020c00
 800add4:	0801184c 	.word	0x0801184c
 800add8:	00f42400 	.word	0x00f42400
 800addc:	4b742400 	.word	0x4b742400
 800ade0:	46000000 	.word	0x46000000

0800ade4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ade8:	f7ff fefa 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800adec:	4602      	mov	r2, r0
 800adee:	4b07      	ldr	r3, [pc, #28]	@ (800ae0c <HAL_RCC_GetHCLKFreq+0x28>)
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	f003 030f 	and.w	r3, r3, #15
 800adf6:	4906      	ldr	r1, [pc, #24]	@ (800ae10 <HAL_RCC_GetHCLKFreq+0x2c>)
 800adf8:	5ccb      	ldrb	r3, [r1, r3]
 800adfa:	fa22 f303 	lsr.w	r3, r2, r3
 800adfe:	4a05      	ldr	r2, [pc, #20]	@ (800ae14 <HAL_RCC_GetHCLKFreq+0x30>)
 800ae00:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ae02:	4b04      	ldr	r3, [pc, #16]	@ (800ae14 <HAL_RCC_GetHCLKFreq+0x30>)
 800ae04:	681b      	ldr	r3, [r3, #0]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	46020c00 	.word	0x46020c00
 800ae10:	08011834 	.word	0x08011834
 800ae14:	20000000 	.word	0x20000000

0800ae18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ae1c:	f7ff ffe2 	bl	800ade4 <HAL_RCC_GetHCLKFreq>
 800ae20:	4602      	mov	r2, r0
 800ae22:	4b05      	ldr	r3, [pc, #20]	@ (800ae38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	091b      	lsrs	r3, r3, #4
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	4903      	ldr	r1, [pc, #12]	@ (800ae3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae2e:	5ccb      	ldrb	r3, [r1, r3]
 800ae30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	46020c00 	.word	0x46020c00
 800ae3c:	08011844 	.word	0x08011844

0800ae40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ae44:	f7ff ffce 	bl	800ade4 <HAL_RCC_GetHCLKFreq>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	4b05      	ldr	r3, [pc, #20]	@ (800ae60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	0a1b      	lsrs	r3, r3, #8
 800ae50:	f003 0307 	and.w	r3, r3, #7
 800ae54:	4903      	ldr	r1, [pc, #12]	@ (800ae64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae56:	5ccb      	ldrb	r3, [r1, r3]
 800ae58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	46020c00 	.word	0x46020c00
 800ae64:	08011844 	.word	0x08011844

0800ae68 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ae6c:	f7ff ffba 	bl	800ade4 <HAL_RCC_GetHCLKFreq>
 800ae70:	4602      	mov	r2, r0
 800ae72:	4b05      	ldr	r3, [pc, #20]	@ (800ae88 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ae74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae76:	091b      	lsrs	r3, r3, #4
 800ae78:	f003 0307 	and.w	r3, r3, #7
 800ae7c:	4903      	ldr	r1, [pc, #12]	@ (800ae8c <HAL_RCC_GetPCLK3Freq+0x24>)
 800ae7e:	5ccb      	ldrb	r3, [r1, r3]
 800ae80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	46020c00 	.word	0x46020c00
 800ae8c:	08011844 	.word	0x08011844

0800ae90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ae98:	4b3e      	ldr	r3, [pc, #248]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ae9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae9e:	f003 0304 	and.w	r3, r3, #4
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800aea6:	f7fe fd21 	bl	80098ec <HAL_PWREx_GetVoltageRange>
 800aeaa:	6178      	str	r0, [r7, #20]
 800aeac:	e019      	b.n	800aee2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800aeae:	4b39      	ldr	r3, [pc, #228]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aeb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeb4:	4a37      	ldr	r2, [pc, #220]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aeb6:	f043 0304 	orr.w	r3, r3, #4
 800aeba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aebe:	4b35      	ldr	r3, [pc, #212]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800aecc:	f7fe fd0e 	bl	80098ec <HAL_PWREx_GetVoltageRange>
 800aed0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800aed2:	4b30      	ldr	r3, [pc, #192]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aed8:	4a2e      	ldr	r2, [pc, #184]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aeda:	f023 0304 	bic.w	r3, r3, #4
 800aede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aee8:	d003      	beq.n	800aef2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aef0:	d109      	bne.n	800af06 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aef8:	d202      	bcs.n	800af00 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800aefa:	2301      	movs	r3, #1
 800aefc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800aefe:	e033      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800af00:	2300      	movs	r3, #0
 800af02:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800af04:	e030      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af0c:	d208      	bcs.n	800af20 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af14:	d102      	bne.n	800af1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800af16:	2303      	movs	r3, #3
 800af18:	613b      	str	r3, [r7, #16]
 800af1a:	e025      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e035      	b.n	800af8c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af26:	d90f      	bls.n	800af48 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af34:	d902      	bls.n	800af3c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800af36:	2300      	movs	r3, #0
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	e015      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800af3c:	2301      	movs	r3, #1
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	e012      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800af42:	2300      	movs	r3, #0
 800af44:	613b      	str	r3, [r7, #16]
 800af46:	e00f      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af4e:	d109      	bne.n	800af64 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af56:	d102      	bne.n	800af5e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800af58:	2301      	movs	r3, #1
 800af5a:	613b      	str	r3, [r7, #16]
 800af5c:	e004      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800af5e:	2302      	movs	r3, #2
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	e001      	b.n	800af68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800af64:	2301      	movs	r3, #1
 800af66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800af68:	4b0b      	ldr	r3, [pc, #44]	@ (800af98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f023 020f 	bic.w	r2, r3, #15
 800af70:	4909      	ldr	r1, [pc, #36]	@ (800af98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	4313      	orrs	r3, r2
 800af76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800af78:	4b07      	ldr	r3, [pc, #28]	@ (800af98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	429a      	cmp	r2, r3
 800af84:	d001      	beq.n	800af8a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e000      	b.n	800af8c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3718      	adds	r7, #24
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	46020c00 	.word	0x46020c00
 800af98:	40022000 	.word	0x40022000

0800af9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800af9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afa0:	b0c8      	sub	sp, #288	@ 0x120
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afa8:	2300      	movs	r3, #0
 800afaa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afae:	2300      	movs	r3, #0
 800afb0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800afb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f002 0401 	and.w	r4, r2, #1
 800afc0:	2500      	movs	r5, #0
 800afc2:	ea54 0305 	orrs.w	r3, r4, r5
 800afc6:	d00b      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800afc8:	4bd5      	ldr	r3, [pc, #852]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afce:	f023 0103 	bic.w	r1, r3, #3
 800afd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afd8:	4ad1      	ldr	r2, [pc, #836]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afda:	430b      	orrs	r3, r1
 800afdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800afe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f002 0802 	and.w	r8, r2, #2
 800afec:	f04f 0900 	mov.w	r9, #0
 800aff0:	ea58 0309 	orrs.w	r3, r8, r9
 800aff4:	d00b      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800aff6:	4bca      	ldr	r3, [pc, #808]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800affc:	f023 010c 	bic.w	r1, r3, #12
 800b000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b006:	4ac6      	ldr	r2, [pc, #792]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b008:	430b      	orrs	r3, r1
 800b00a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b00e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f002 0a04 	and.w	sl, r2, #4
 800b01a:	f04f 0b00 	mov.w	fp, #0
 800b01e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b022:	d00b      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b024:	4bbe      	ldr	r3, [pc, #760]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b02a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b034:	4aba      	ldr	r2, [pc, #744]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b036:	430b      	orrs	r3, r1
 800b038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f002 0308 	and.w	r3, r2, #8
 800b048:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b052:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b056:	460b      	mov	r3, r1
 800b058:	4313      	orrs	r3, r2
 800b05a:	d00b      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b05c:	4bb0      	ldr	r3, [pc, #704]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b05e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b062:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b06a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b06c:	4aac      	ldr	r2, [pc, #688]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b06e:	430b      	orrs	r3, r1
 800b070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	f002 0310 	and.w	r3, r2, #16
 800b080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b084:	2300      	movs	r3, #0
 800b086:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b08a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b08e:	460b      	mov	r3, r1
 800b090:	4313      	orrs	r3, r2
 800b092:	d00b      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b094:	4ba2      	ldr	r3, [pc, #648]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b09a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b09e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0a4:	4a9e      	ldr	r2, [pc, #632]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b0b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b0c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	d00b      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b0cc:	4b94      	ldr	r3, [pc, #592]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0dc:	4a90      	ldr	r2, [pc, #576]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f002 0320 	and.w	r3, r2, #32
 800b0f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b0fa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b0fe:	460b      	mov	r3, r1
 800b100:	4313      	orrs	r3, r2
 800b102:	d00b      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b104:	4b86      	ldr	r3, [pc, #536]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b10a:	f023 0107 	bic.w	r1, r3, #7
 800b10e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b112:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b114:	4a82      	ldr	r2, [pc, #520]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b116:	430b      	orrs	r3, r1
 800b118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b12c:	2300      	movs	r3, #0
 800b12e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b132:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b136:	460b      	mov	r3, r1
 800b138:	4313      	orrs	r3, r2
 800b13a:	d00b      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b13c:	4b78      	ldr	r3, [pc, #480]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b13e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b142:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b14c:	4a74      	ldr	r2, [pc, #464]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b14e:	430b      	orrs	r3, r1
 800b150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b160:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b164:	2300      	movs	r3, #0
 800b166:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b16a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b16e:	460b      	mov	r3, r1
 800b170:	4313      	orrs	r3, r2
 800b172:	d00b      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b174:	4b6a      	ldr	r3, [pc, #424]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b17a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b184:	4a66      	ldr	r2, [pc, #408]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b186:	430b      	orrs	r3, r1
 800b188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b19c:	2300      	movs	r3, #0
 800b19e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b1a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	d00b      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b1ac:	4b5c      	ldr	r3, [pc, #368]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1bc:	4a58      	ldr	r2, [pc, #352]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1be:	430b      	orrs	r3, r1
 800b1c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b1d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b1da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	d00b      	beq.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b1e4:	4b4e      	ldr	r3, [pc, #312]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1ea:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1f4:	4a4a      	ldr	r2, [pc, #296]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b208:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b20c:	2300      	movs	r3, #0
 800b20e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b212:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b216:	460b      	mov	r3, r1
 800b218:	4313      	orrs	r3, r2
 800b21a:	d00b      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b21c:	4b40      	ldr	r3, [pc, #256]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b21e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b222:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b22a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b22c:	4a3c      	ldr	r2, [pc, #240]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b22e:	430b      	orrs	r3, r1
 800b230:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b240:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b244:	2300      	movs	r3, #0
 800b246:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b24a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b24e:	460b      	mov	r3, r1
 800b250:	4313      	orrs	r3, r2
 800b252:	d00c      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b254:	4b32      	ldr	r3, [pc, #200]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b256:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b25a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b25e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b266:	4a2e      	ldr	r2, [pc, #184]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b268:	430b      	orrs	r3, r1
 800b26a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b27a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b27e:	2300      	movs	r3, #0
 800b280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b284:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b288:	460b      	mov	r3, r1
 800b28a:	4313      	orrs	r3, r2
 800b28c:	d00c      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b28e:	4b24      	ldr	r3, [pc, #144]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b294:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2a0:	4a1f      	ldr	r2, [pc, #124]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b2a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b2b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b2be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	d00c      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b2c8:	4b15      	ldr	r3, [pc, #84]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2ce:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2da:	4a11      	ldr	r2, [pc, #68]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b2e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b2ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b2f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4313      	orrs	r3, r2
 800b300:	d010      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b302:	4b07      	ldr	r3, [pc, #28]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b308:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b314:	4a02      	ldr	r2, [pc, #8]	@ (800b320 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b316:	430b      	orrs	r3, r1
 800b318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b31c:	e002      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b31e:	bf00      	nop
 800b320:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b334:	2300      	movs	r3, #0
 800b336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b33a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b33e:	460b      	mov	r3, r1
 800b340:	4313      	orrs	r3, r2
 800b342:	d04c      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b348:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b34c:	2b80      	cmp	r3, #128	@ 0x80
 800b34e:	d02d      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b350:	2b80      	cmp	r3, #128	@ 0x80
 800b352:	d827      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b354:	2b60      	cmp	r3, #96	@ 0x60
 800b356:	d02b      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b358:	2b60      	cmp	r3, #96	@ 0x60
 800b35a:	d823      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b35c:	2b40      	cmp	r3, #64	@ 0x40
 800b35e:	d006      	beq.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b360:	2b40      	cmp	r3, #64	@ 0x40
 800b362:	d81f      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b368:	2b20      	cmp	r3, #32
 800b36a:	d011      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b36c:	e01a      	b.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b36e:	4bc0      	ldr	r3, [pc, #768]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b372:	4abf      	ldr	r2, [pc, #764]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b378:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b37a:	e01a      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b380:	3308      	adds	r3, #8
 800b382:	4618      	mov	r0, r3
 800b384:	f002 fcd6 	bl	800dd34 <RCCEx_PLL2_Config>
 800b388:	4603      	mov	r3, r0
 800b38a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b38e:	e010      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b394:	332c      	adds	r3, #44	@ 0x2c
 800b396:	4618      	mov	r0, r3
 800b398:	f002 fd64 	bl	800de64 <RCCEx_PLL3_Config>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b3a2:	e006      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b3aa:	e002      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b3ac:	bf00      	nop
 800b3ae:	e000      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b3b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10d      	bne.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b3ba:	4bad      	ldr	r3, [pc, #692]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3c0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b3cc:	4aa8      	ldr	r2, [pc, #672]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b3d4:	e003      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3da:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b3ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3f4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	d053      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b402:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b40a:	d033      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b40c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b410:	d82c      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b416:	d02f      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b41c:	d826      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b41e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b422:	d008      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b428:	d820      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b42e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b432:	d011      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b434:	e01a      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b436:	4b8e      	ldr	r3, [pc, #568]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43a:	4a8d      	ldr	r2, [pc, #564]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b43c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b440:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b442:	e01a      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b448:	3308      	adds	r3, #8
 800b44a:	4618      	mov	r0, r3
 800b44c:	f002 fc72 	bl	800dd34 <RCCEx_PLL2_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b456:	e010      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45c:	332c      	adds	r3, #44	@ 0x2c
 800b45e:	4618      	mov	r0, r3
 800b460:	f002 fd00 	bl	800de64 <RCCEx_PLL3_Config>
 800b464:	4603      	mov	r3, r0
 800b466:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b46a:	e006      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b472:	e002      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b474:	bf00      	nop
 800b476:	e000      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10d      	bne.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b482:	4b7b      	ldr	r3, [pc, #492]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b488:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b494:	4a76      	ldr	r2, [pc, #472]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b496:	430b      	orrs	r3, r1
 800b498:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b49c:	e003      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4a2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b4a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b4b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b4bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	d046      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b4c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b4ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b4d2:	d028      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b4d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b4d8:	d821      	bhi.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b4da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4de:	d022      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b4e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4e4:	d81b      	bhi.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b4e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4ea:	d01c      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b4ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4f0:	d815      	bhi.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b4f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4f6:	d008      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b4f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4fc:	d80f      	bhi.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d011      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b506:	d00e      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b508:	e009      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b50e:	3308      	adds	r3, #8
 800b510:	4618      	mov	r0, r3
 800b512:	f002 fc0f 	bl	800dd34 <RCCEx_PLL2_Config>
 800b516:	4603      	mov	r3, r0
 800b518:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b51c:	e004      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b524:	e000      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b526:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b528:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10d      	bne.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b530:	4b4f      	ldr	r3, [pc, #316]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b536:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b53a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b53e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b542:	4a4b      	ldr	r2, [pc, #300]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b544:	430b      	orrs	r3, r1
 800b546:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b54a:	e003      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b550:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b564:	2300      	movs	r3, #0
 800b566:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b56a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b56e:	460b      	mov	r3, r1
 800b570:	4313      	orrs	r3, r2
 800b572:	d03f      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d81e      	bhi.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b580:	a201      	add	r2, pc, #4	@ (adr r2, 800b588 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b586:	bf00      	nop
 800b588:	0800b5c7 	.word	0x0800b5c7
 800b58c:	0800b59d 	.word	0x0800b59d
 800b590:	0800b5ab 	.word	0x0800b5ab
 800b594:	0800b5c7 	.word	0x0800b5c7
 800b598:	0800b5c7 	.word	0x0800b5c7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b59c:	4b34      	ldr	r3, [pc, #208]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a0:	4a33      	ldr	r2, [pc, #204]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5a6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b5a8:	e00e      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ae:	332c      	adds	r3, #44	@ 0x2c
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f002 fc57 	bl	800de64 <RCCEx_PLL3_Config>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5bc:	e004      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5c4:	e000      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b5c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b5c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10d      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b5d0:	4b27      	ldr	r3, [pc, #156]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5d6:	f023 0107 	bic.w	r1, r3, #7
 800b5da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5e2:	4a23      	ldr	r2, [pc, #140]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b5ea:	e003      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5f0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b600:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b602:	2300      	movs	r3, #0
 800b604:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b606:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b60a:	460b      	mov	r3, r1
 800b60c:	4313      	orrs	r3, r2
 800b60e:	d04c      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b618:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b61c:	d02a      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b61e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b622:	d821      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b624:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b628:	d026      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b62a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b62e:	d81b      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b634:	d00e      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b63a:	d815      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01d      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b644:	d110      	bne.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b646:	4b0a      	ldr	r3, [pc, #40]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64a:	4a09      	ldr	r2, [pc, #36]	@ (800b670 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b64c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b650:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b652:	e014      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b658:	332c      	adds	r3, #44	@ 0x2c
 800b65a:	4618      	mov	r0, r3
 800b65c:	f002 fc02 	bl	800de64 <RCCEx_PLL3_Config>
 800b660:	4603      	mov	r3, r0
 800b662:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b666:	e00a      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b66e:	e006      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b670:	46020c00 	.word	0x46020c00
        break;
 800b674:	bf00      	nop
 800b676:	e002      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b678:	bf00      	nop
 800b67a:	e000      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b67c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b67e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10d      	bne.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b686:	4baf      	ldr	r3, [pc, #700]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b68c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b698:	4aaa      	ldr	r2, [pc, #680]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b69a:	430b      	orrs	r3, r1
 800b69c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b6a0:	e003      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6a6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b6b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800b6bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	f000 80b5 	beq.w	800b832 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6ce:	4b9d      	ldr	r3, [pc, #628]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6d4:	f003 0304 	and.w	r3, r3, #4
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d113      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6dc:	4b99      	ldr	r3, [pc, #612]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6e2:	4a98      	ldr	r2, [pc, #608]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6e4:	f043 0304 	orr.w	r3, r3, #4
 800b6e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b6ec:	4b95      	ldr	r3, [pc, #596]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6f2:	f003 0304 	and.w	r3, r3, #4
 800b6f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b6fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b704:	4b90      	ldr	r3, [pc, #576]	@ (800b948 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	4a8f      	ldr	r2, [pc, #572]	@ (800b948 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b70a:	f043 0301 	orr.w	r3, r3, #1
 800b70e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b710:	f7f7 f9c2 	bl	8002a98 <HAL_GetTick>
 800b714:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b718:	e00b      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b71a:	f7f7 f9bd 	bl	8002a98 <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	2b02      	cmp	r3, #2
 800b728:	d903      	bls.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b730:	e005      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b732:	4b85      	ldr	r3, [pc, #532]	@ (800b948 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d0ed      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b73e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b742:	2b00      	cmp	r3, #0
 800b744:	d165      	bne.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b746:	4b7f      	ldr	r3, [pc, #508]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b74c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b750:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d023      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b760:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b768:	4293      	cmp	r3, r2
 800b76a:	d01b      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b76c:	4b75      	ldr	r3, [pc, #468]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b76e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b776:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b77a:	4b72      	ldr	r3, [pc, #456]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b77c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b780:	4a70      	ldr	r2, [pc, #448]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b78a:	4b6e      	ldr	r3, [pc, #440]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b78c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b790:	4a6c      	ldr	r2, [pc, #432]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b796:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b79a:	4a6a      	ldr	r2, [pc, #424]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b79c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b7a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b7a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d019      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7b0:	f7f7 f972 	bl	8002a98 <HAL_GetTick>
 800b7b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7b8:	e00d      	b.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7ba:	f7f7 f96d 	bl	8002a98 <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7c4:	1ad2      	subs	r2, r2, r3
 800b7c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d903      	bls.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b7d4:	e006      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7d6:	4b5b      	ldr	r3, [pc, #364]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0ea      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b7e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10d      	bne.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b7ec:	4b55      	ldr	r3, [pc, #340]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b7f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b7fe:	4a51      	ldr	r2, [pc, #324]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b800:	430b      	orrs	r3, r1
 800b802:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b806:	e008      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b808:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b80c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b810:	e003      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b812:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b816:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b81a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d107      	bne.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b822:	4b48      	ldr	r3, [pc, #288]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b828:	4a46      	ldr	r2, [pc, #280]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b82a:	f023 0304 	bic.w	r3, r3, #4
 800b82e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b83e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b840:	2300      	movs	r3, #0
 800b842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b844:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b848:	460b      	mov	r3, r1
 800b84a:	4313      	orrs	r3, r2
 800b84c:	d042      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b852:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b856:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b85a:	d022      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b85c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b860:	d81b      	bhi.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b866:	d011      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b86c:	d815      	bhi.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d019      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b872:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b876:	d110      	bne.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b87c:	3308      	adds	r3, #8
 800b87e:	4618      	mov	r0, r3
 800b880:	f002 fa58 	bl	800dd34 <RCCEx_PLL2_Config>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b88a:	e00d      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b88c:	4b2d      	ldr	r3, [pc, #180]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b890:	4a2c      	ldr	r2, [pc, #176]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b896:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b898:	e006      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b8a0:	e002      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b8a2:	bf00      	nop
 800b8a4:	e000      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b8a6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b8a8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10d      	bne.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b8b0:	4b24      	ldr	r3, [pc, #144]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b8b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b8c2:	4a20      	ldr	r2, [pc, #128]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b8ca:	e003      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8cc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8d0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b8e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	d031      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8fc:	d00b      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b8fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b902:	d804      	bhi.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b904:	2b00      	cmp	r3, #0
 800b906:	d008      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b90c:	d007      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b914:	e004      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b916:	bf00      	nop
 800b918:	e002      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b91a:	bf00      	nop
 800b91c:	e000      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b91e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b920:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b924:	2b00      	cmp	r3, #0
 800b926:	d111      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b928:	4b06      	ldr	r3, [pc, #24]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b92a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b92e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b93a:	4a02      	ldr	r2, [pc, #8]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b93c:	430b      	orrs	r3, r1
 800b93e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b942:	e007      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b944:	46020c00 	.word	0x46020c00
 800b948:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b94c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b950:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b960:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b962:	2300      	movs	r3, #0
 800b964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b966:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b96a:	460b      	mov	r3, r1
 800b96c:	4313      	orrs	r3, r2
 800b96e:	d00c      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b970:	4bb2      	ldr	r3, [pc, #712]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b976:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b97e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b982:	4aae      	ldr	r2, [pc, #696]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b984:	430b      	orrs	r3, r1
 800b986:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b98a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b996:	653b      	str	r3, [r7, #80]	@ 0x50
 800b998:	2300      	movs	r3, #0
 800b99a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b99c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	d019      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b9ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9b2:	d105      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b9b4:	4ba1      	ldr	r3, [pc, #644]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b8:	4aa0      	ldr	r2, [pc, #640]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9be:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b9c0:	4b9e      	ldr	r3, [pc, #632]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9c6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b9ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b9d2:	4a9a      	ldr	r2, [pc, #616]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b9da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b9e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	d00c      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b9f6:	4b91      	ldr	r3, [pc, #580]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9fc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ba00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ba08:	4a8c      	ldr	r2, [pc, #560]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba0a:	430b      	orrs	r3, r1
 800ba0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800ba10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ba1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba1e:	2300      	movs	r3, #0
 800ba20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba22:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ba26:	460b      	mov	r3, r1
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	d00c      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800ba2c:	4b83      	ldr	r3, [pc, #524]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ba36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ba3e:	4a7f      	ldr	r2, [pc, #508]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba40:	430b      	orrs	r3, r1
 800ba42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800ba46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ba52:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	d00c      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800ba62:	4b76      	ldr	r3, [pc, #472]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba68:	f023 0118 	bic.w	r1, r3, #24
 800ba6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba70:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ba74:	4a71      	ldr	r2, [pc, #452]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba76:	430b      	orrs	r3, r1
 800ba78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ba7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800ba88:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ba92:	460b      	mov	r3, r1
 800ba94:	4313      	orrs	r3, r2
 800ba96:	d032      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800ba98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800baa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800baa4:	d105      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baa6:	4b65      	ldr	r3, [pc, #404]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baaa:	4a64      	ldr	r2, [pc, #400]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bab0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800bab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800baba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800babe:	d108      	bne.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac4:	3308      	adds	r3, #8
 800bac6:	4618      	mov	r0, r3
 800bac8:	f002 f934 	bl	800dd34 <RCCEx_PLL2_Config>
 800bacc:	4603      	mov	r3, r0
 800bace:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800bad2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10d      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800bada:	4b58      	ldr	r3, [pc, #352]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800badc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bae0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bae8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800baec:	4a53      	ldr	r2, [pc, #332]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baee:	430b      	orrs	r3, r1
 800baf0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800baf4:	e003      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bafa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800bafe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	2100      	movs	r1, #0
 800bb08:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bb14:	460b      	mov	r3, r1
 800bb16:	4313      	orrs	r3, r2
 800bb18:	d04a      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800bb1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bb22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bb26:	d01e      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800bb28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bb2c:	d825      	bhi.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bb2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bb32:	d00e      	beq.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800bb34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bb38:	d81f      	bhi.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d021      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800bb3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb42:	d11a      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb44:	4b3d      	ldr	r3, [pc, #244]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb48:	4a3c      	ldr	r2, [pc, #240]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb4e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bb50:	e018      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb56:	3308      	adds	r3, #8
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f002 f8eb 	bl	800dd34 <RCCEx_PLL2_Config>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bb64:	e00e      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6a:	332c      	adds	r3, #44	@ 0x2c
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f002 f979 	bl	800de64 <RCCEx_PLL3_Config>
 800bb72:	4603      	mov	r3, r0
 800bb74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bb78:	e004      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb80:	e000      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800bb82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb84:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10d      	bne.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800bb8c:	4b2b      	ldr	r3, [pc, #172]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bb9e:	4927      	ldr	r1, [pc, #156]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bba0:	4313      	orrs	r3, r2
 800bba2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bba6:	e003      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bba8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbac:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800bbb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800bbbc:	623b      	str	r3, [r7, #32]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	d03d      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbd8:	d00e      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800bbda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbde:	d815      	bhi.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d017      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bbe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbe8:	d110      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbea:	4b14      	ldr	r3, [pc, #80]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbee:	4a13      	ldr	r2, [pc, #76]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbf4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bbf6:	e00e      	b.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f002 f898 	bl	800dd34 <RCCEx_PLL2_Config>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bc0a:	e004      	b.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc12:	e000      	b.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bc14:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bc16:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d110      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bc1e:	4b07      	ldr	r3, [pc, #28]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bc28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc30:	4902      	ldr	r1, [pc, #8]	@ (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc32:	4313      	orrs	r3, r2
 800bc34:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bc38:	e006      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bc3a:	bf00      	nop
 800bc3c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc40:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc44:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bc48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bc54:	61bb      	str	r3, [r7, #24]
 800bc56:	2300      	movs	r3, #0
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4313      	orrs	r3, r2
 800bc62:	d00c      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bc64:	4b68      	ldr	r3, [pc, #416]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc6a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bc6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bc76:	4964      	ldr	r1, [pc, #400]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	2100      	movs	r1, #0
 800bc88:	6139      	str	r1, [r7, #16]
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bc94:	460b      	mov	r3, r1
 800bc96:	4313      	orrs	r3, r2
 800bc98:	d036      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00c      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bca6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bcaa:	d113      	bne.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bcac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f002 f83e 	bl	800dd34 <RCCEx_PLL2_Config>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bcbe:	e00d      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bcc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc4:	332c      	adds	r3, #44	@ 0x2c
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f002 f8cc 	bl	800de64 <RCCEx_PLL3_Config>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bcd2:	e003      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bcda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcdc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10d      	bne.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bce4:	4b48      	ldr	r3, [pc, #288]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bce6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bcea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bcee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bcf6:	4944      	ldr	r1, [pc, #272]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bcfe:	e003      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd04:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bd08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	2100      	movs	r1, #0
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	f003 0304 	and.w	r3, r3, #4
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4313      	orrs	r3, r2
 800bd22:	d024      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bd24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d108      	bne.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bd30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd34:	332c      	adds	r3, #44	@ 0x2c
 800bd36:	4618      	mov	r0, r3
 800bd38:	f002 f894 	bl	800de64 <RCCEx_PLL3_Config>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bd42:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10d      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bd4a:	4b2f      	ldr	r3, [pc, #188]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bd4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd50:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bd54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bd5c:	492a      	ldr	r1, [pc, #168]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bd64:	e003      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd6a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bd6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	2100      	movs	r1, #0
 800bd78:	6039      	str	r1, [r7, #0]
 800bd7a:	f003 0308 	and.w	r3, r3, #8
 800bd7e:	607b      	str	r3, [r7, #4]
 800bd80:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bd84:	460b      	mov	r3, r1
 800bd86:	4313      	orrs	r3, r2
 800bd88:	d036      	beq.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bd8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bd92:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bd96:	d00d      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bd98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bd9c:	d811      	bhi.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bd9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bda2:	d012      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bda4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bda8:	d80b      	bhi.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00d      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bdae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdb2:	d106      	bne.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bdb4:	4b14      	ldr	r3, [pc, #80]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bdb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb8:	4a13      	ldr	r2, [pc, #76]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bdba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdbe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bdc0:	e004      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bdc8:	e000      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bdca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdcc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10d      	bne.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bdd4:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bdd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdda:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bdde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bde6:	4908      	ldr	r1, [pc, #32]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bdee:	e003      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdf4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bdf8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800be02:	46bd      	mov	sp, r7
 800be04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be08:	46020c00 	.word	0x46020c00

0800be0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b089      	sub	sp, #36	@ 0x24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800be14:	4ba6      	ldr	r3, [pc, #664]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800be1e:	4ba4      	ldr	r3, [pc, #656]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800be28:	4ba1      	ldr	r3, [pc, #644]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2c:	0a1b      	lsrs	r3, r3, #8
 800be2e:	f003 030f 	and.w	r3, r3, #15
 800be32:	3301      	adds	r3, #1
 800be34:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800be36:	4b9e      	ldr	r3, [pc, #632]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be3a:	091b      	lsrs	r3, r3, #4
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800be42:	4b9b      	ldr	r3, [pc, #620]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be46:	08db      	lsrs	r3, r3, #3
 800be48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	fb02 f303 	mul.w	r3, r2, r3
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b03      	cmp	r3, #3
 800be62:	d062      	beq.n	800bf2a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b03      	cmp	r3, #3
 800be68:	f200 8081 	bhi.w	800bf6e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d024      	beq.n	800bebc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b02      	cmp	r3, #2
 800be76:	d17a      	bne.n	800bf6e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	ee07 3a90 	vmov	s15, r3
 800be7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be82:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800be86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8a:	4b89      	ldr	r3, [pc, #548]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800be9e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800beaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800beb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800beba:	e08f      	b.n	800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bebc:	4b7c      	ldr	r3, [pc, #496]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d005      	beq.n	800bed4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bec8:	4b79      	ldr	r3, [pc, #484]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	0f1b      	lsrs	r3, r3, #28
 800bece:	f003 030f 	and.w	r3, r3, #15
 800bed2:	e006      	b.n	800bee2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bed4:	4b76      	ldr	r3, [pc, #472]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800beda:	041b      	lsls	r3, r3, #16
 800bedc:	0f1b      	lsrs	r3, r3, #28
 800bede:	f003 030f 	and.w	r3, r3, #15
 800bee2:	4a76      	ldr	r2, [pc, #472]	@ (800c0bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee8:	ee07 3a90 	vmov	s15, r3
 800beec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	ee07 3a90 	vmov	s15, r3
 800bef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	ee07 3a90 	vmov	s15, r3
 800bf04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf08:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf0c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bf10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bf20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf28:	e058      	b.n	800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	ee07 3a90 	vmov	s15, r3
 800bf30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf34:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bf38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf3c:	4b5c      	ldr	r3, [pc, #368]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf44:	ee07 3a90 	vmov	s15, r3
 800bf48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf50:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bf54:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf60:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf6c:	e036      	b.n	800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bf6e:	4b50      	ldr	r3, [pc, #320]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d005      	beq.n	800bf86 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800bf7a:	4b4d      	ldr	r3, [pc, #308]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	0f1b      	lsrs	r3, r3, #28
 800bf80:	f003 030f 	and.w	r3, r3, #15
 800bf84:	e006      	b.n	800bf94 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800bf86:	4b4a      	ldr	r3, [pc, #296]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bf8c:	041b      	lsls	r3, r3, #16
 800bf8e:	0f1b      	lsrs	r3, r3, #28
 800bf90:	f003 030f 	and.w	r3, r3, #15
 800bf94:	4a49      	ldr	r2, [pc, #292]	@ (800c0bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bf96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	ee07 3a90 	vmov	s15, r3
 800bfa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfba:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfbe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bfc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfda:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800bfdc:	4b34      	ldr	r3, [pc, #208]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d017      	beq.n	800c018 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bfe8:	4b31      	ldr	r3, [pc, #196]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfec:	0a5b      	lsrs	r3, r3, #9
 800bfee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800bffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bffe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c002:	edd7 6a07 	vldr	s13, [r7, #28]
 800c006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00e:	ee17 2a90 	vmov	r2, s15
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	e002      	b.n	800c01e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c01e:	4b24      	ldr	r3, [pc, #144]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c026:	2b00      	cmp	r3, #0
 800c028:	d017      	beq.n	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c02a:	4b21      	ldr	r3, [pc, #132]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c02e:	0c1b      	lsrs	r3, r3, #16
 800c030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c034:	ee07 3a90 	vmov	s15, r3
 800c038:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c03c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c040:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c044:	edd7 6a07 	vldr	s13, [r7, #28]
 800c048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c050:	ee17 2a90 	vmov	r2, s15
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	605a      	str	r2, [r3, #4]
 800c058:	e002      	b.n	800c060 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c060:	4b13      	ldr	r3, [pc, #76]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d017      	beq.n	800c09c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c06c:	4b10      	ldr	r3, [pc, #64]	@ (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c06e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c070:	0e1b      	lsrs	r3, r3, #24
 800c072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800c07e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c082:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c086:	edd7 6a07 	vldr	s13, [r7, #28]
 800c08a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c08e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c092:	ee17 2a90 	vmov	r2, s15
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c09a:	e002      	b.n	800c0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	609a      	str	r2, [r3, #8]
}
 800c0a2:	bf00      	nop
 800c0a4:	3724      	adds	r7, #36	@ 0x24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	46020c00 	.word	0x46020c00
 800c0b4:	4b742400 	.word	0x4b742400
 800c0b8:	46000000 	.word	0x46000000
 800c0bc:	0801184c 	.word	0x0801184c

0800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b089      	sub	sp, #36	@ 0x24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c0c8:	4ba6      	ldr	r3, [pc, #664]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c0d2:	4ba4      	ldr	r3, [pc, #656]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d6:	f003 0303 	and.w	r3, r3, #3
 800c0da:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c0dc:	4ba1      	ldr	r3, [pc, #644]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e0:	0a1b      	lsrs	r3, r3, #8
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c0ea:	4b9e      	ldr	r3, [pc, #632]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ee:	091b      	lsrs	r3, r3, #4
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c0f6:	4b9b      	ldr	r3, [pc, #620]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0fa:	08db      	lsrs	r3, r3, #3
 800c0fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	fb02 f303 	mul.w	r3, r2, r3
 800c106:	ee07 3a90 	vmov	s15, r3
 800c10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	2b03      	cmp	r3, #3
 800c116:	d062      	beq.n	800c1de <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	f200 8081 	bhi.w	800c222 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d024      	beq.n	800c170 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d17a      	bne.n	800c222 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	ee07 3a90 	vmov	s15, r3
 800c132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c136:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c13e:	4b89      	ldr	r3, [pc, #548]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c14e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c152:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c156:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c15e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c162:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c16e:	e08f      	b.n	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c170:	4b7c      	ldr	r3, [pc, #496]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c17c:	4b79      	ldr	r3, [pc, #484]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	0f1b      	lsrs	r3, r3, #28
 800c182:	f003 030f 	and.w	r3, r3, #15
 800c186:	e006      	b.n	800c196 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c188:	4b76      	ldr	r3, [pc, #472]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c18a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c18e:	041b      	lsls	r3, r3, #16
 800c190:	0f1b      	lsrs	r3, r3, #28
 800c192:	f003 030f 	and.w	r3, r3, #15
 800c196:	4a76      	ldr	r2, [pc, #472]	@ (800c370 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c19c:	ee07 3a90 	vmov	s15, r3
 800c1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	ee07 3a90 	vmov	s15, r3
 800c1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1bc:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1c0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c1c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1dc:	e058      	b.n	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	ee07 3a90 	vmov	s15, r3
 800c1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c1ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1f0:	4b5c      	ldr	r3, [pc, #368]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c200:	ed97 6a02 	vldr	s12, [r7, #8]
 800c204:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c208:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c20c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c210:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c214:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c21c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c220:	e036      	b.n	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c222:	4b50      	ldr	r3, [pc, #320]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d005      	beq.n	800c23a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c22e:	4b4d      	ldr	r3, [pc, #308]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	0f1b      	lsrs	r3, r3, #28
 800c234:	f003 030f 	and.w	r3, r3, #15
 800c238:	e006      	b.n	800c248 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c23a:	4b4a      	ldr	r3, [pc, #296]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c23c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c240:	041b      	lsls	r3, r3, #16
 800c242:	0f1b      	lsrs	r3, r3, #28
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	4a49      	ldr	r2, [pc, #292]	@ (800c370 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	ee07 3a90 	vmov	s15, r3
 800c25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c272:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c36c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c282:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c28e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c290:	4b34      	ldr	r3, [pc, #208]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d017      	beq.n	800c2cc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c29c:	4b31      	ldr	r3, [pc, #196]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c29e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a0:	0a5b      	lsrs	r3, r3, #9
 800c2a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2a6:	ee07 3a90 	vmov	s15, r3
 800c2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c2ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2c2:	ee17 2a90 	vmov	r2, s15
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	601a      	str	r2, [r3, #0]
 800c2ca:	e002      	b.n	800c2d2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c2d2:	4b24      	ldr	r3, [pc, #144]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d017      	beq.n	800c30e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c2de:	4b21      	ldr	r3, [pc, #132]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c2e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2e2:	0c1b      	lsrs	r3, r3, #16
 800c2e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2e8:	ee07 3a90 	vmov	s15, r3
 800c2ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c2f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2f4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c2f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c304:	ee17 2a90 	vmov	r2, s15
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	605a      	str	r2, [r3, #4]
 800c30c:	e002      	b.n	800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c314:	4b13      	ldr	r3, [pc, #76]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d017      	beq.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c320:	4b10      	ldr	r3, [pc, #64]	@ (800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c324:	0e1b      	lsrs	r3, r3, #24
 800c326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c32a:	ee07 3a90 	vmov	s15, r3
 800c32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c336:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c33a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c33e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c346:	ee17 2a90 	vmov	r2, s15
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c34e:	e002      	b.n	800c356 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	609a      	str	r2, [r3, #8]
}
 800c356:	bf00      	nop
 800c358:	3724      	adds	r7, #36	@ 0x24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	46020c00 	.word	0x46020c00
 800c368:	4b742400 	.word	0x4b742400
 800c36c:	46000000 	.word	0x46000000
 800c370:	0801184c 	.word	0x0801184c

0800c374 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c374:	b480      	push	{r7}
 800c376:	b089      	sub	sp, #36	@ 0x24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c37c:	4ba6      	ldr	r3, [pc, #664]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c384:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c386:	4ba4      	ldr	r3, [pc, #656]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c38a:	f003 0303 	and.w	r3, r3, #3
 800c38e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c390:	4ba1      	ldr	r3, [pc, #644]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c394:	0a1b      	lsrs	r3, r3, #8
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	3301      	adds	r3, #1
 800c39c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c39e:	4b9e      	ldr	r3, [pc, #632]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3a2:	091b      	lsrs	r3, r3, #4
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c3aa:	4b9b      	ldr	r3, [pc, #620]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3ae:	08db      	lsrs	r3, r3, #3
 800c3b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ba:	ee07 3a90 	vmov	s15, r3
 800c3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2b03      	cmp	r3, #3
 800c3ca:	d062      	beq.n	800c492 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	f200 8081 	bhi.w	800c4d6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d024      	beq.n	800c424 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d17a      	bne.n	800c4d6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	ee07 3a90 	vmov	s15, r3
 800c3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c61c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3f2:	4b89      	ldr	r3, [pc, #548]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3fa:	ee07 3a90 	vmov	s15, r3
 800c3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c402:	ed97 6a02 	vldr	s12, [r7, #8]
 800c406:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c416:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c41e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c422:	e08f      	b.n	800c544 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c424:	4b7c      	ldr	r3, [pc, #496]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d005      	beq.n	800c43c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c430:	4b79      	ldr	r3, [pc, #484]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	0f1b      	lsrs	r3, r3, #28
 800c436:	f003 030f 	and.w	r3, r3, #15
 800c43a:	e006      	b.n	800c44a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c43c:	4b76      	ldr	r3, [pc, #472]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c43e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c442:	041b      	lsls	r3, r3, #16
 800c444:	0f1b      	lsrs	r3, r3, #28
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	4a76      	ldr	r2, [pc, #472]	@ (800c624 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c450:	ee07 3a90 	vmov	s15, r3
 800c454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	ee07 3a90 	vmov	s15, r3
 800c45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c470:	ed97 6a02 	vldr	s12, [r7, #8]
 800c474:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c47c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c480:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c484:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c48c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c490:	e058      	b.n	800c544 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c61c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c4a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4a4:	4b5c      	ldr	r3, [pc, #368]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ac:	ee07 3a90 	vmov	s15, r3
 800c4b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4b4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4b8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c4bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4d4:	e036      	b.n	800c544 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c4d6:	4b50      	ldr	r3, [pc, #320]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c4e2:	4b4d      	ldr	r3, [pc, #308]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	0f1b      	lsrs	r3, r3, #28
 800c4e8:	f003 030f 	and.w	r3, r3, #15
 800c4ec:	e006      	b.n	800c4fc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c4ee:	4b4a      	ldr	r3, [pc, #296]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c4f4:	041b      	lsls	r3, r3, #16
 800c4f6:	0f1b      	lsrs	r3, r3, #28
 800c4f8:	f003 030f 	and.w	r3, r3, #15
 800c4fc:	4a49      	ldr	r2, [pc, #292]	@ (800c624 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c502:	ee07 3a90 	vmov	s15, r3
 800c506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	ee07 3a90 	vmov	s15, r3
 800c510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	ee07 3a90 	vmov	s15, r3
 800c51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c522:	ed97 6a02 	vldr	s12, [r7, #8]
 800c526:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c536:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c53e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c542:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c544:	4b34      	ldr	r3, [pc, #208]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d017      	beq.n	800c580 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c550:	4b31      	ldr	r3, [pc, #196]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c554:	0a5b      	lsrs	r3, r3, #9
 800c556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c55a:	ee07 3a90 	vmov	s15, r3
 800c55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c566:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c56a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c56e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c576:	ee17 2a90 	vmov	r2, s15
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	e002      	b.n	800c586 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c586:	4b24      	ldr	r3, [pc, #144]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c58a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d017      	beq.n	800c5c2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c592:	4b21      	ldr	r3, [pc, #132]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c596:	0c1b      	lsrs	r3, r3, #16
 800c598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c59c:	ee07 3a90 	vmov	s15, r3
 800c5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c5a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5a8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c5ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5b8:	ee17 2a90 	vmov	r2, s15
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	605a      	str	r2, [r3, #4]
 800c5c0:	e002      	b.n	800c5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c5c8:	4b13      	ldr	r3, [pc, #76]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d017      	beq.n	800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c5d4:	4b10      	ldr	r3, [pc, #64]	@ (800c618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5d8:	0e1b      	lsrs	r3, r3, #24
 800c5da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c5e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c5ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5fa:	ee17 2a90 	vmov	r2, s15
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c602:	e002      	b.n	800c60a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	609a      	str	r2, [r3, #8]
}
 800c60a:	bf00      	nop
 800c60c:	3724      	adds	r7, #36	@ 0x24
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	46020c00 	.word	0x46020c00
 800c61c:	4b742400 	.word	0x4b742400
 800c620:	46000000 	.word	0x46000000
 800c624:	0801184c 	.word	0x0801184c

0800c628 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b08e      	sub	sp, #56	@ 0x38
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c636:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c63a:	430b      	orrs	r3, r1
 800c63c:	d145      	bne.n	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c63e:	4ba7      	ldr	r3, [pc, #668]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c644:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c648:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c64a:	4ba4      	ldr	r3, [pc, #656]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c64c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c650:	f003 0302 	and.w	r3, r3, #2
 800c654:	2b02      	cmp	r3, #2
 800c656:	d108      	bne.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c65e:	d104      	bne.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c664:	637b      	str	r3, [r7, #52]	@ 0x34
 800c666:	f001 bb5a 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c66a:	4b9c      	ldr	r3, [pc, #624]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c66c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c678:	d114      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c680:	d110      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c682:	4b96      	ldr	r3, [pc, #600]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c68c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c690:	d103      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c692:	23fa      	movs	r3, #250	@ 0xfa
 800c694:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c696:	f001 bb42 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c69a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c69e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6a0:	f001 bb3d 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c6a4:	4b8d      	ldr	r3, [pc, #564]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6b0:	d107      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6b8:	d103      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c6ba:	4b89      	ldr	r3, [pc, #548]	@ (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c6bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6be:	f001 bb2e 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c6:	f001 bb2a 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c6d2:	430b      	orrs	r3, r1
 800c6d4:	d151      	bne.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c6d6:	4b81      	ldr	r3, [pc, #516]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6dc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c6e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	2b80      	cmp	r3, #128	@ 0x80
 800c6e6:	d035      	beq.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ea:	2b80      	cmp	r3, #128	@ 0x80
 800c6ec:	d841      	bhi.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f0:	2b60      	cmp	r3, #96	@ 0x60
 800c6f2:	d02a      	beq.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f6:	2b60      	cmp	r3, #96	@ 0x60
 800c6f8:	d83b      	bhi.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fc:	2b40      	cmp	r3, #64	@ 0x40
 800c6fe:	d009      	beq.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c702:	2b40      	cmp	r3, #64	@ 0x40
 800c704:	d835      	bhi.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00c      	beq.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70e:	2b20      	cmp	r3, #32
 800c710:	d012      	beq.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c712:	e02e      	b.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fb77 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c720:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c722:	f001 bafc 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c726:	f107 0318 	add.w	r3, r7, #24
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fcc8 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c734:	f001 baf3 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c738:	f107 030c 	add.w	r3, r7, #12
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff fe19 	bl	800c374 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c746:	f001 baea 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c74a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c74e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c750:	f001 bae5 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c754:	4b61      	ldr	r3, [pc, #388]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c75c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c760:	d103      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c762:	4b60      	ldr	r3, [pc, #384]	@ (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c764:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c766:	f001 bada 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c76a:	2300      	movs	r3, #0
 800c76c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c76e:	f001 bad6 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c776:	f001 bad2 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c77a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c77e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c782:	430b      	orrs	r3, r1
 800c784:	d158      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c786:	4b55      	ldr	r3, [pc, #340]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c78c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c790:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c798:	d03b      	beq.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7a0:	d846      	bhi.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7a8:	d02e      	beq.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7b0:	d83e      	bhi.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7b8:	d00b      	beq.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7c0:	d836      	bhi.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00d      	beq.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7ce:	d012      	beq.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c7d0:	e02e      	b.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff fb18 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7e0:	f001 ba9d 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7e4:	f107 0318 	add.w	r3, r7, #24
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7ff fc69 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7f2:	f001 ba94 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7f6:	f107 030c 	add.w	r3, r7, #12
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff fdba 	bl	800c374 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c804:	f001 ba8b 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c808:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c80c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c80e:	f001 ba86 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c812:	4b32      	ldr	r3, [pc, #200]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c81a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c81e:	d103      	bne.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c820:	4b30      	ldr	r3, [pc, #192]	@ (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c822:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c824:	f001 ba7b 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c82c:	f001 ba77 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c830:	2300      	movs	r3, #0
 800c832:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c834:	f001 ba73 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c83c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c840:	430b      	orrs	r3, r1
 800c842:	d126      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c844:	4b25      	ldr	r3, [pc, #148]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c84a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c84e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c850:	4b22      	ldr	r3, [pc, #136]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c85c:	d106      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c860:	2b00      	cmp	r3, #0
 800c862:	d103      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c864:	4b1f      	ldr	r3, [pc, #124]	@ (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c866:	637b      	str	r3, [r7, #52]	@ 0x34
 800c868:	f001 ba59 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c86c:	4b1b      	ldr	r3, [pc, #108]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c878:	d107      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c880:	d103      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c882:	4b19      	ldr	r3, [pc, #100]	@ (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c884:	637b      	str	r3, [r7, #52]	@ 0x34
 800c886:	f001 ba4a 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c88e:	f001 ba46 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c892:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c896:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c89a:	430b      	orrs	r3, r1
 800c89c:	d16e      	bne.n	800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c89e:	4b0f      	ldr	r3, [pc, #60]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c8a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c8a4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c8a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8b0:	d03d      	beq.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8b8:	d85c      	bhi.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8c0:	d014      	beq.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8c8:	d854      	bhi.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d01f      	beq.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8d6:	d012      	beq.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c8d8:	e04c      	b.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c8da:	bf00      	nop
 800c8dc:	46020c00 	.word	0x46020c00
 800c8e0:	0007a120 	.word	0x0007a120
 800c8e4:	00f42400 	.word	0x00f42400
 800c8e8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff fa8b 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8fa:	f001 ba10 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8fe:	f107 0318 	add.w	r3, r7, #24
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fbdc 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c90c:	f001 ba07 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c910:	4ba7      	ldr	r3, [pc, #668]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c91c:	d103      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c91e:	4ba5      	ldr	r3, [pc, #660]	@ (800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c920:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c922:	f001 b9fc 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c926:	2300      	movs	r3, #0
 800c928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c92a:	f001 b9f8 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c92e:	4ba0      	ldr	r3, [pc, #640]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0320 	and.w	r3, r3, #32
 800c936:	2b20      	cmp	r3, #32
 800c938:	d118      	bne.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c93a:	4b9d      	ldr	r3, [pc, #628]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c942:	2b00      	cmp	r3, #0
 800c944:	d005      	beq.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c946:	4b9a      	ldr	r3, [pc, #616]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	0e1b      	lsrs	r3, r3, #24
 800c94c:	f003 030f 	and.w	r3, r3, #15
 800c950:	e006      	b.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c952:	4b97      	ldr	r3, [pc, #604]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c958:	041b      	lsls	r3, r3, #16
 800c95a:	0e1b      	lsrs	r3, r3, #24
 800c95c:	f003 030f 	and.w	r3, r3, #15
 800c960:	4a95      	ldr	r2, [pc, #596]	@ (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c966:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c968:	f001 b9d9 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c96c:	2300      	movs	r3, #0
 800c96e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c970:	f001 b9d5 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c974:	2300      	movs	r3, #0
 800c976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c978:	f001 b9d1 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c97c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c980:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c984:	430b      	orrs	r3, r1
 800c986:	d17f      	bne.n	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c988:	4b89      	ldr	r3, [pc, #548]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c98a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c98e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c992:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c996:	2b00      	cmp	r3, #0
 800c998:	d165      	bne.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c99a:	4b85      	ldr	r3, [pc, #532]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9a0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c9a4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c9ac:	d034      	beq.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c9b4:	d853      	bhi.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9bc:	d00b      	beq.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9c4:	d84b      	bhi.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d016      	beq.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c9d2:	d009      	beq.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c9d4:	e043      	b.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff fa16 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c9e4:	f001 b99b 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9e8:	f107 0318 	add.w	r3, r7, #24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff fb67 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c9f6:	f001 b992 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c9fa:	4b6d      	ldr	r3, [pc, #436]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca06:	d103      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800ca08:	4b6a      	ldr	r3, [pc, #424]	@ (800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ca0a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ca0c:	f001 b987 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ca14:	f001 b983 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ca18:	4b65      	ldr	r3, [pc, #404]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b20      	cmp	r3, #32
 800ca22:	d118      	bne.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca24:	4b62      	ldr	r3, [pc, #392]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d005      	beq.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800ca30:	4b5f      	ldr	r3, [pc, #380]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	0e1b      	lsrs	r3, r3, #24
 800ca36:	f003 030f 	and.w	r3, r3, #15
 800ca3a:	e006      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ca3c:	4b5c      	ldr	r3, [pc, #368]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca42:	041b      	lsls	r3, r3, #16
 800ca44:	0e1b      	lsrs	r3, r3, #24
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	4a5b      	ldr	r2, [pc, #364]	@ (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ca4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca50:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ca52:	f001 b964 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ca56:	2300      	movs	r3, #0
 800ca58:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ca5a:	f001 b960 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ca62:	f001 b95c 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca6c:	d108      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff f9ca 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ca78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca7c:	f001 b94f 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800ca80:	2300      	movs	r3, #0
 800ca82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca84:	f001 b94b 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800ca88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8c:	1e51      	subs	r1, r2, #1
 800ca8e:	430b      	orrs	r3, r1
 800ca90:	d136      	bne.n	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ca92:	4b47      	ldr	r3, [pc, #284]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca98:	f003 0303 	and.w	r3, r3, #3
 800ca9c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d104      	bne.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800caa4:	f7fe f9cc 	bl	800ae40 <HAL_RCC_GetPCLK2Freq>
 800caa8:	6378      	str	r0, [r7, #52]	@ 0x34
 800caaa:	f001 b938 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800caae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d104      	bne.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cab4:	f7fe f894 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800cab8:	6378      	str	r0, [r7, #52]	@ 0x34
 800caba:	f001 b930 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800cabe:	4b3c      	ldr	r3, [pc, #240]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caca:	d106      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800cacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d103      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800cad2:	4b3a      	ldr	r3, [pc, #232]	@ (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cad4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad6:	f001 b922 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800cada:	4b35      	ldr	r3, [pc, #212]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cadc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cae0:	f003 0302 	and.w	r3, r3, #2
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d107      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800cae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caea:	2b03      	cmp	r3, #3
 800caec:	d104      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800caee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800caf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800caf4:	f001 b913 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800caf8:	2300      	movs	r3, #0
 800cafa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cafc:	f001 b90f 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800cb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb04:	1e91      	subs	r1, r2, #2
 800cb06:	430b      	orrs	r3, r1
 800cb08:	d136      	bne.n	800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800cb0a:	4b29      	ldr	r3, [pc, #164]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb10:	f003 030c 	and.w	r3, r3, #12
 800cb14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800cb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d104      	bne.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb1c:	f7fe f97c 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800cb20:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb22:	f001 b8fc 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	2b04      	cmp	r3, #4
 800cb2a:	d104      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb2c:	f7fe f858 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800cb30:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb32:	f001 b8f4 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800cb36:	4b1e      	ldr	r3, [pc, #120]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb42:	d106      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	2b08      	cmp	r3, #8
 800cb48:	d103      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800cb4a:	4b1c      	ldr	r3, [pc, #112]	@ (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cb4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb4e:	f001 b8e6 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800cb52:	4b17      	ldr	r3, [pc, #92]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d107      	bne.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800cb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb62:	2b0c      	cmp	r3, #12
 800cb64:	d104      	bne.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800cb66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb6c:	f001 b8d7 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800cb70:	2300      	movs	r3, #0
 800cb72:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb74:	f001 b8d3 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800cb78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb7c:	1f11      	subs	r1, r2, #4
 800cb7e:	430b      	orrs	r3, r1
 800cb80:	d13f      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800cb82:	4b0b      	ldr	r3, [pc, #44]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cb8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d104      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb94:	f7fe f940 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800cb98:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb9a:	f001 b8c0 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba0:	2b10      	cmp	r3, #16
 800cba2:	d10d      	bne.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cba4:	f7fe f81c 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800cba8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbaa:	f001 b8b8 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cbae:	bf00      	nop
 800cbb0:	46020c00 	.word	0x46020c00
 800cbb4:	02dc6c00 	.word	0x02dc6c00
 800cbb8:	0801184c 	.word	0x0801184c
 800cbbc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cbc0:	4ba8      	ldr	r3, [pc, #672]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbcc:	d106      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	2b20      	cmp	r3, #32
 800cbd2:	d103      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800cbd4:	4ba4      	ldr	r3, [pc, #656]	@ (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbd8:	f001 b8a1 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800cbdc:	4ba1      	ldr	r3, [pc, #644]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cbe2:	f003 0302 	and.w	r3, r3, #2
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d107      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbec:	2b30      	cmp	r3, #48	@ 0x30
 800cbee:	d104      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800cbf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbf6:	f001 b892 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbfe:	f001 b88e 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800cc02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc06:	f1a2 0108 	sub.w	r1, r2, #8
 800cc0a:	430b      	orrs	r3, r1
 800cc0c:	d136      	bne.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cc0e:	4b95      	ldr	r3, [pc, #596]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc14:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cc18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d104      	bne.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc20:	f7fe f8fa 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800cc24:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc26:	f001 b87a 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	2b40      	cmp	r3, #64	@ 0x40
 800cc2e:	d104      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc30:	f7fd ffd6 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800cc34:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc36:	f001 b872 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800cc3a:	4b8a      	ldr	r3, [pc, #552]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc46:	d106      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4a:	2b80      	cmp	r3, #128	@ 0x80
 800cc4c:	d103      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cc4e:	4b86      	ldr	r3, [pc, #536]	@ (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc50:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc52:	f001 b864 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cc56:	4b83      	ldr	r3, [pc, #524]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc5c:	f003 0302 	and.w	r3, r3, #2
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d107      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc66:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc68:	d104      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cc6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc70:	f001 b855 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc78:	f001 b851 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cc7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc80:	f1a2 0110 	sub.w	r1, r2, #16
 800cc84:	430b      	orrs	r3, r1
 800cc86:	d139      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cc88:	4b76      	ldr	r3, [pc, #472]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d104      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc9a:	f7fe f8bd 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800cc9e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cca0:	f001 b83d 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccaa:	d104      	bne.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccac:	f7fd ff98 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800ccb0:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccb2:	f001 b834 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ccb6:	4b6b      	ldr	r3, [pc, #428]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccc2:	d107      	bne.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccca:	d103      	bne.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cccc:	4b66      	ldr	r3, [pc, #408]	@ (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ccce:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccd0:	f001 b825 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ccd4:	4b63      	ldr	r3, [pc, #396]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ccda:	f003 0302 	and.w	r3, r3, #2
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d108      	bne.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cce8:	d104      	bne.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ccea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccee:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccf0:	f001 b815 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccf8:	f001 b811 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800ccfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd00:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cd04:	430b      	orrs	r3, r1
 800cd06:	d139      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cd08:	4b56      	ldr	r3, [pc, #344]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cd12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d104      	bne.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd1a:	f7fe f87d 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800cd1e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd20:	f000 bffd 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd2a:	d104      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd2c:	f7fd ff58 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800cd30:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd32:	f000 bff4 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cd36:	4b4b      	ldr	r3, [pc, #300]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd42:	d107      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd4a:	d103      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cd4c:	4b46      	ldr	r3, [pc, #280]	@ (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd50:	f000 bfe5 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cd54:	4b43      	ldr	r3, [pc, #268]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd5a:	f003 0302 	and.w	r3, r3, #2
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d108      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cd68:	d104      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cd6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd70:	f000 bfd5 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cd74:	2300      	movs	r3, #0
 800cd76:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd78:	f000 bfd1 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cd7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd80:	f1a2 0120 	sub.w	r1, r2, #32
 800cd84:	430b      	orrs	r3, r1
 800cd86:	d158      	bne.n	800ce3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cd88:	4b36      	ldr	r3, [pc, #216]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cd8e:	f003 0307 	and.w	r3, r3, #7
 800cd92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d104      	bne.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cd9a:	f7fe f865 	bl	800ae68 <HAL_RCC_GetPCLK3Freq>
 800cd9e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cda0:	f000 bfbd 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800cda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d104      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cdaa:	f7fd ff19 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800cdae:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdb0:	f000 bfb5 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800cdb4:	4b2b      	ldr	r3, [pc, #172]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdc0:	d106      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc4:	2b02      	cmp	r3, #2
 800cdc6:	d103      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800cdc8:	4b27      	ldr	r3, [pc, #156]	@ (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cdca:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdcc:	f000 bfa7 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800cdd0:	4b24      	ldr	r3, [pc, #144]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cdd6:	f003 0302 	and.w	r3, r3, #2
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d107      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800cdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d104      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cde4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cde8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdea:	f000 bf98 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800cdee:	4b1d      	ldr	r3, [pc, #116]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 0320 	and.w	r3, r3, #32
 800cdf6:	2b20      	cmp	r3, #32
 800cdf8:	d11b      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdfc:	2b04      	cmp	r3, #4
 800cdfe:	d118      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce00:	4b18      	ldr	r3, [pc, #96]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d005      	beq.n	800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ce0c:	4b15      	ldr	r3, [pc, #84]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	0e1b      	lsrs	r3, r3, #24
 800ce12:	f003 030f 	and.w	r3, r3, #15
 800ce16:	e006      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ce18:	4b12      	ldr	r3, [pc, #72]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce1e:	041b      	lsls	r3, r3, #16
 800ce20:	0e1b      	lsrs	r3, r3, #24
 800ce22:	f003 030f 	and.w	r3, r3, #15
 800ce26:	4a11      	ldr	r2, [pc, #68]	@ (800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ce28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce2e:	f000 bf76 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ce32:	2300      	movs	r3, #0
 800ce34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce36:	f000 bf72 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ce3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce3e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ce42:	430b      	orrs	r3, r1
 800ce44:	d172      	bne.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ce46:	4b07      	ldr	r3, [pc, #28]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ce50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ce52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce58:	d10a      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ce5a:	f7fd fec1 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800ce5e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce60:	f000 bf5d 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ce64:	46020c00 	.word	0x46020c00
 800ce68:	00f42400 	.word	0x00f42400
 800ce6c:	0801184c 	.word	0x0801184c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ce70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce76:	d108      	bne.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce78:	f107 0318 	add.w	r3, r7, #24
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7ff f91f 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce86:	f000 bf4a 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d104      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800ce90:	f7fd ffa8 	bl	800ade4 <HAL_RCC_GetHCLKFreq>
 800ce94:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce96:	f000 bf42 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cea0:	d122      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cea2:	4bb0      	ldr	r3, [pc, #704]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0320 	and.w	r3, r3, #32
 800ceaa:	2b20      	cmp	r3, #32
 800ceac:	d118      	bne.n	800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ceae:	4bad      	ldr	r3, [pc, #692]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d005      	beq.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800ceba:	4baa      	ldr	r3, [pc, #680]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	0e1b      	lsrs	r3, r3, #24
 800cec0:	f003 030f 	and.w	r3, r3, #15
 800cec4:	e006      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cec6:	4ba7      	ldr	r3, [pc, #668]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cecc:	041b      	lsls	r3, r3, #16
 800cece:	0e1b      	lsrs	r3, r3, #24
 800ced0:	f003 030f 	and.w	r3, r3, #15
 800ced4:	4aa4      	ldr	r2, [pc, #656]	@ (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ced6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cedc:	f000 bf1f 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cee0:	2300      	movs	r3, #0
 800cee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cee4:	f000 bf1b 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cee8:	4b9e      	ldr	r3, [pc, #632]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cef4:	d107      	bne.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cefc:	d103      	bne.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800cefe:	4b9b      	ldr	r3, [pc, #620]	@ (800d16c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cf00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf02:	f000 bf0c 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800cf06:	4b97      	ldr	r3, [pc, #604]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf12:	d107      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800cf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf1a:	d103      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800cf1c:	4b93      	ldr	r3, [pc, #588]	@ (800d16c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cf1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf20:	f000 befd 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800cf24:	2300      	movs	r3, #0
 800cf26:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf28:	f000 bef9 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800cf2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf30:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cf34:	430b      	orrs	r3, r1
 800cf36:	d158      	bne.n	800cfea <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cf38:	4b8a      	ldr	r3, [pc, #552]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cf3e:	f003 0307 	and.w	r3, r3, #7
 800cf42:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf46:	2b04      	cmp	r3, #4
 800cf48:	d84b      	bhi.n	800cfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800cf4a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800cf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf50:	0800cf89 	.word	0x0800cf89
 800cf54:	0800cf65 	.word	0x0800cf65
 800cf58:	0800cf77 	.word	0x0800cf77
 800cf5c:	0800cf93 	.word	0x0800cf93
 800cf60:	0800cf9d 	.word	0x0800cf9d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe ff4f 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf72:	f000 bed4 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf76:	f107 030c 	add.w	r3, r7, #12
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7ff f9fa 	bl	800c374 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf84:	f000 becb 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cf88:	f7fd ff2c 	bl	800ade4 <HAL_RCC_GetHCLKFreq>
 800cf8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf8e:	f000 bec6 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf92:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cf96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf98:	f000 bec1 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf9c:	4b71      	ldr	r3, [pc, #452]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 0320 	and.w	r3, r3, #32
 800cfa4:	2b20      	cmp	r3, #32
 800cfa6:	d118      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cfa8:	4b6e      	ldr	r3, [pc, #440]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d005      	beq.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800cfb4:	4b6b      	ldr	r3, [pc, #428]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	0e1b      	lsrs	r3, r3, #24
 800cfba:	f003 030f 	and.w	r3, r3, #15
 800cfbe:	e006      	b.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800cfc0:	4b68      	ldr	r3, [pc, #416]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfc6:	041b      	lsls	r3, r3, #16
 800cfc8:	0e1b      	lsrs	r3, r3, #24
 800cfca:	f003 030f 	and.w	r3, r3, #15
 800cfce:	4a66      	ldr	r2, [pc, #408]	@ (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfd4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cfd6:	f000 bea2 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfde:	f000 be9e 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfe6:	f000 be9a 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800cfea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfee:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cff2:	430b      	orrs	r3, r1
 800cff4:	d167      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cff6:	4b5b      	ldr	r3, [pc, #364]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cffc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d000:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d008:	d036      	beq.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d010:	d855      	bhi.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d014:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d018:	d029      	beq.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800d01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d020:	d84d      	bhi.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d028:	d013      	beq.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800d02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d030:	d845      	bhi.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d034:	2b00      	cmp	r3, #0
 800d036:	d015      	beq.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d03e:	d13e      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d044:	4618      	mov	r0, r3
 800d046:	f7fe fee1 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d04e:	f000 be66 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d052:	f107 030c 	add.w	r3, r7, #12
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff f98c 	bl	800c374 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d060:	f000 be5d 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d064:	f7fd febe 	bl	800ade4 <HAL_RCC_GetHCLKFreq>
 800d068:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d06a:	f000 be58 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d06e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d074:	f000 be53 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d078:	4b3a      	ldr	r3, [pc, #232]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0320 	and.w	r3, r3, #32
 800d080:	2b20      	cmp	r3, #32
 800d082:	d118      	bne.n	800d0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d084:	4b37      	ldr	r3, [pc, #220]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800d090:	4b34      	ldr	r3, [pc, #208]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	0e1b      	lsrs	r3, r3, #24
 800d096:	f003 030f 	and.w	r3, r3, #15
 800d09a:	e006      	b.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d09c:	4b31      	ldr	r3, [pc, #196]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d09e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0a2:	041b      	lsls	r3, r3, #16
 800d0a4:	0e1b      	lsrs	r3, r3, #24
 800d0a6:	f003 030f 	and.w	r3, r3, #15
 800d0aa:	4a2f      	ldr	r2, [pc, #188]	@ (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d0b2:	f000 be34 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0ba:	f000 be30 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0c2:	f000 be2c 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ca:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d0ce:	430b      	orrs	r3, r1
 800d0d0:	d152      	bne.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d0d2:	4b24      	ldr	r3, [pc, #144]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d0d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d0dc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d104      	bne.n	800d0ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d0e4:	f7fd fe98 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800d0e8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0ea:	f000 be18 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0f4:	d104      	bne.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d0f6:	f7fd fd73 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d0fa:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0fc:	f000 be0f 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d100:	4b18      	ldr	r3, [pc, #96]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d10c:	d107      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d114:	d103      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d116:	4b15      	ldr	r3, [pc, #84]	@ (800d16c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d118:	637b      	str	r3, [r7, #52]	@ 0x34
 800d11a:	f000 be00 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d11e:	4b11      	ldr	r3, [pc, #68]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b20      	cmp	r3, #32
 800d128:	d122      	bne.n	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d130:	d11e      	bne.n	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d132:	4b0c      	ldr	r3, [pc, #48]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d005      	beq.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d13e:	4b09      	ldr	r3, [pc, #36]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	0e1b      	lsrs	r3, r3, #24
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	e006      	b.n	800d158 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d14a:	4b06      	ldr	r3, [pc, #24]	@ (800d164 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d14c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d150:	041b      	lsls	r3, r3, #16
 800d152:	0e1b      	lsrs	r3, r3, #24
 800d154:	f003 030f 	and.w	r3, r3, #15
 800d158:	4a03      	ldr	r2, [pc, #12]	@ (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d15e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d160:	f000 bddd 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d164:	46020c00 	.word	0x46020c00
 800d168:	0801184c 	.word	0x0801184c
 800d16c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d170:	2300      	movs	r3, #0
 800d172:	637b      	str	r3, [r7, #52]	@ 0x34
 800d174:	f000 bdd3 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d17c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d180:	430b      	orrs	r3, r1
 800d182:	d14c      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d184:	4ba8      	ldr	r3, [pc, #672]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d18a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d18e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d192:	2b00      	cmp	r3, #0
 800d194:	d104      	bne.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d196:	f7fd fe3f 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800d19a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d19c:	f000 bdbf 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1a6:	d104      	bne.n	800d1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d1a8:	f7fd fd1a 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d1ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1ae:	f000 bdb6 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d1b2:	4b9d      	ldr	r3, [pc, #628]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1be:	d107      	bne.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1c6:	d103      	bne.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d1c8:	4b98      	ldr	r3, [pc, #608]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d1ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1cc:	f000 bda7 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d1d0:	4b95      	ldr	r3, [pc, #596]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f003 0320 	and.w	r3, r3, #32
 800d1d8:	2b20      	cmp	r3, #32
 800d1da:	d11c      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d1e2:	d118      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1e4:	4b90      	ldr	r3, [pc, #576]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d005      	beq.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d1f0:	4b8d      	ldr	r3, [pc, #564]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	0e1b      	lsrs	r3, r3, #24
 800d1f6:	f003 030f 	and.w	r3, r3, #15
 800d1fa:	e006      	b.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d1fc:	4b8a      	ldr	r3, [pc, #552]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d202:	041b      	lsls	r3, r3, #16
 800d204:	0e1b      	lsrs	r3, r3, #24
 800d206:	f003 030f 	and.w	r3, r3, #15
 800d20a:	4a89      	ldr	r2, [pc, #548]	@ (800d430 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d210:	637b      	str	r3, [r7, #52]	@ 0x34
 800d212:	f000 bd84 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d216:	2300      	movs	r3, #0
 800d218:	637b      	str	r3, [r7, #52]	@ 0x34
 800d21a:	f000 bd80 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d21e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d222:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d226:	430b      	orrs	r3, r1
 800d228:	d158      	bne.n	800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d22a:	4b7f      	ldr	r3, [pc, #508]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d22c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d230:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d234:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d238:	2bc0      	cmp	r3, #192	@ 0xc0
 800d23a:	d028      	beq.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d240:	d848      	bhi.n	800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d244:	2b80      	cmp	r3, #128	@ 0x80
 800d246:	d00e      	beq.n	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	2b80      	cmp	r3, #128	@ 0x80
 800d24c:	d842      	bhi.n	800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d250:	2b00      	cmp	r3, #0
 800d252:	d003      	beq.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d256:	2b40      	cmp	r3, #64	@ 0x40
 800d258:	d014      	beq.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d25a:	e03b      	b.n	800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d25c:	f7fd fe04 	bl	800ae68 <HAL_RCC_GetPCLK3Freq>
 800d260:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d262:	f000 bd5c 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d266:	4b70      	ldr	r3, [pc, #448]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d26e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d272:	d103      	bne.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d274:	4b6d      	ldr	r3, [pc, #436]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d276:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d278:	f000 bd51 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d27c:	2300      	movs	r3, #0
 800d27e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d280:	f000 bd4d 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d284:	f7fd fcac 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d288:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d28a:	f000 bd48 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d28e:	4b66      	ldr	r3, [pc, #408]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f003 0320 	and.w	r3, r3, #32
 800d296:	2b20      	cmp	r3, #32
 800d298:	d118      	bne.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d29a:	4b63      	ldr	r3, [pc, #396]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d005      	beq.n	800d2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d2a6:	4b60      	ldr	r3, [pc, #384]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	0e1b      	lsrs	r3, r3, #24
 800d2ac:	f003 030f 	and.w	r3, r3, #15
 800d2b0:	e006      	b.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d2b2:	4b5d      	ldr	r3, [pc, #372]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2b8:	041b      	lsls	r3, r3, #16
 800d2ba:	0e1b      	lsrs	r3, r3, #24
 800d2bc:	f003 030f 	and.w	r3, r3, #15
 800d2c0:	4a5b      	ldr	r2, [pc, #364]	@ (800d430 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2c8:	f000 bd29 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2d0:	f000 bd25 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2d8:	f000 bd21 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2e0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d2e4:	430b      	orrs	r3, r1
 800d2e6:	d14c      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d2e8:	4b4f      	ldr	r3, [pc, #316]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d2f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d104      	bne.n	800d304 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2fa:	f7fd fd8d 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800d2fe:	6378      	str	r0, [r7, #52]	@ 0x34
 800d300:	f000 bd0d 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d30a:	d104      	bne.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d30c:	f7fd fc68 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d310:	6378      	str	r0, [r7, #52]	@ 0x34
 800d312:	f000 bd04 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d316:	4b44      	ldr	r3, [pc, #272]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d31e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d322:	d107      	bne.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d32a:	d103      	bne.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d32c:	4b3f      	ldr	r3, [pc, #252]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d32e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d330:	f000 bcf5 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d334:	4b3c      	ldr	r3, [pc, #240]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 0320 	and.w	r3, r3, #32
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	d11c      	bne.n	800d37a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d342:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d346:	d118      	bne.n	800d37a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d348:	4b37      	ldr	r3, [pc, #220]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d354:	4b34      	ldr	r3, [pc, #208]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	0e1b      	lsrs	r3, r3, #24
 800d35a:	f003 030f 	and.w	r3, r3, #15
 800d35e:	e006      	b.n	800d36e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d360:	4b31      	ldr	r3, [pc, #196]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d366:	041b      	lsls	r3, r3, #16
 800d368:	0e1b      	lsrs	r3, r3, #24
 800d36a:	f003 030f 	and.w	r3, r3, #15
 800d36e:	4a30      	ldr	r2, [pc, #192]	@ (800d430 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d374:	637b      	str	r3, [r7, #52]	@ 0x34
 800d376:	f000 bcd2 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d37a:	2300      	movs	r3, #0
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d37e:	f000 bcce 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d382:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d386:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d38a:	430b      	orrs	r3, r1
 800d38c:	d152      	bne.n	800d434 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d38e:	4b26      	ldr	r3, [pc, #152]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d394:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d398:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d104      	bne.n	800d3aa <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d3a0:	f7fd fd3a 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800d3a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3a6:	f000 bcba 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d3b0:	d104      	bne.n	800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d3b2:	f7fd fc15 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d3b6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3b8:	f000 bcb1 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d3bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3c8:	d107      	bne.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3d0:	d103      	bne.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d3d2:	4b16      	ldr	r3, [pc, #88]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d3d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3d6:	f000 bca2 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d3da:	4b13      	ldr	r3, [pc, #76]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b20      	cmp	r3, #32
 800d3e4:	d11c      	bne.n	800d420 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d3ec:	d118      	bne.n	800d420 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d005      	beq.n	800d406 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	0e1b      	lsrs	r3, r3, #24
 800d400:	f003 030f 	and.w	r3, r3, #15
 800d404:	e006      	b.n	800d414 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d406:	4b08      	ldr	r3, [pc, #32]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d40c:	041b      	lsls	r3, r3, #16
 800d40e:	0e1b      	lsrs	r3, r3, #24
 800d410:	f003 030f 	and.w	r3, r3, #15
 800d414:	4a06      	ldr	r2, [pc, #24]	@ (800d430 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d41a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d41c:	f000 bc7f 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d420:	2300      	movs	r3, #0
 800d422:	637b      	str	r3, [r7, #52]	@ 0x34
 800d424:	f000 bc7b 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d428:	46020c00 	.word	0x46020c00
 800d42c:	00f42400 	.word	0x00f42400
 800d430:	0801184c 	.word	0x0801184c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d434:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d438:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d43c:	430b      	orrs	r3, r1
 800d43e:	d14c      	bne.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d440:	4ba6      	ldr	r3, [pc, #664]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d446:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d44a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d104      	bne.n	800d45c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d452:	f7fd fce1 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800d456:	6378      	str	r0, [r7, #52]	@ 0x34
 800d458:	f000 bc61 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d462:	d104      	bne.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d464:	f7fd fbbc 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d468:	6378      	str	r0, [r7, #52]	@ 0x34
 800d46a:	f000 bc58 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d46e:	4b9b      	ldr	r3, [pc, #620]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d47a:	d107      	bne.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d482:	d103      	bne.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d484:	4b96      	ldr	r3, [pc, #600]	@ (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d486:	637b      	str	r3, [r7, #52]	@ 0x34
 800d488:	f000 bc49 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d48c:	4b93      	ldr	r3, [pc, #588]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b20      	cmp	r3, #32
 800d496:	d11c      	bne.n	800d4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d49e:	d118      	bne.n	800d4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4a0:	4b8e      	ldr	r3, [pc, #568]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d005      	beq.n	800d4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d4ac:	4b8b      	ldr	r3, [pc, #556]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	0e1b      	lsrs	r3, r3, #24
 800d4b2:	f003 030f 	and.w	r3, r3, #15
 800d4b6:	e006      	b.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d4b8:	4b88      	ldr	r3, [pc, #544]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4be:	041b      	lsls	r3, r3, #16
 800d4c0:	0e1b      	lsrs	r3, r3, #24
 800d4c2:	f003 030f 	and.w	r3, r3, #15
 800d4c6:	4a87      	ldr	r2, [pc, #540]	@ (800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4ce:	f000 bc26 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4d6:	f000 bc22 	b.w	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d4e2:	430b      	orrs	r3, r1
 800d4e4:	d164      	bne.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d4e6:	4b7d      	ldr	r3, [pc, #500]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d120      	bne.n	800d53a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d4f8:	4b78      	ldr	r3, [pc, #480]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0320 	and.w	r3, r3, #32
 800d500:	2b20      	cmp	r3, #32
 800d502:	d117      	bne.n	800d534 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d504:	4b75      	ldr	r3, [pc, #468]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d005      	beq.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d510:	4b72      	ldr	r3, [pc, #456]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	0e1b      	lsrs	r3, r3, #24
 800d516:	f003 030f 	and.w	r3, r3, #15
 800d51a:	e006      	b.n	800d52a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d51c:	4b6f      	ldr	r3, [pc, #444]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d51e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d522:	041b      	lsls	r3, r3, #16
 800d524:	0e1b      	lsrs	r3, r3, #24
 800d526:	f003 030f 	and.w	r3, r3, #15
 800d52a:	4a6e      	ldr	r2, [pc, #440]	@ (800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d530:	637b      	str	r3, [r7, #52]	@ 0x34
 800d532:	e3f4      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d534:	2300      	movs	r3, #0
 800d536:	637b      	str	r3, [r7, #52]	@ 0x34
 800d538:	e3f1      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d53a:	4b68      	ldr	r3, [pc, #416]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d53c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d548:	d112      	bne.n	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d550:	d10e      	bne.n	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d552:	4b62      	ldr	r3, [pc, #392]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d55c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d560:	d102      	bne.n	800d568 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d562:	23fa      	movs	r3, #250	@ 0xfa
 800d564:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d566:	e3da      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d568:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d56c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d56e:	e3d6      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d570:	4b5a      	ldr	r3, [pc, #360]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d57c:	d106      	bne.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d584:	d102      	bne.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d586:	4b56      	ldr	r3, [pc, #344]	@ (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d588:	637b      	str	r3, [r7, #52]	@ 0x34
 800d58a:	e3c8      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d58c:	4b53      	ldr	r3, [pc, #332]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d58e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d592:	f003 0302 	and.w	r3, r3, #2
 800d596:	2b02      	cmp	r3, #2
 800d598:	d107      	bne.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5a0:	d103      	bne.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d5a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5a8:	e3b9      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ae:	e3b6      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	d164      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d5bc:	4b47      	ldr	r3, [pc, #284]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d5c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d5c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d120      	bne.n	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d5ce:	4b43      	ldr	r3, [pc, #268]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f003 0320 	and.w	r3, r3, #32
 800d5d6:	2b20      	cmp	r3, #32
 800d5d8:	d117      	bne.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d5da:	4b40      	ldr	r3, [pc, #256]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d005      	beq.n	800d5f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d5e6:	4b3d      	ldr	r3, [pc, #244]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	0e1b      	lsrs	r3, r3, #24
 800d5ec:	f003 030f 	and.w	r3, r3, #15
 800d5f0:	e006      	b.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d5f2:	4b3a      	ldr	r3, [pc, #232]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d5f8:	041b      	lsls	r3, r3, #16
 800d5fa:	0e1b      	lsrs	r3, r3, #24
 800d5fc:	f003 030f 	and.w	r3, r3, #15
 800d600:	4a38      	ldr	r2, [pc, #224]	@ (800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d606:	637b      	str	r3, [r7, #52]	@ 0x34
 800d608:	e389      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d60a:	2300      	movs	r3, #0
 800d60c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d60e:	e386      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d610:	4b32      	ldr	r3, [pc, #200]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d616:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d61a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d61e:	d112      	bne.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d626:	d10e      	bne.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d628:	4b2c      	ldr	r3, [pc, #176]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d62a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d62e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d636:	d102      	bne.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d638:	23fa      	movs	r3, #250	@ 0xfa
 800d63a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d63c:	e36f      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d63e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d642:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d644:	e36b      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d646:	4b25      	ldr	r3, [pc, #148]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d64e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d652:	d106      	bne.n	800d662 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d65a:	d102      	bne.n	800d662 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d65c:	4b20      	ldr	r3, [pc, #128]	@ (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d660:	e35d      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d662:	4b1e      	ldr	r3, [pc, #120]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d668:	f003 0302 	and.w	r3, r3, #2
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d107      	bne.n	800d680 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d672:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d676:	d103      	bne.n	800d680 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d67c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d67e:	e34e      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d680:	2300      	movs	r3, #0
 800d682:	637b      	str	r3, [r7, #52]	@ 0x34
 800d684:	e34b      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d68a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d68e:	430b      	orrs	r3, r1
 800d690:	d14e      	bne.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d692:	4b12      	ldr	r3, [pc, #72]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d698:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d69c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d103      	bne.n	800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d6a4:	f7fd fbb8 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800d6a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6aa:	e338      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d6ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6ba:	d119      	bne.n	800d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d6c2:	d115      	bne.n	800d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d6c4:	4b05      	ldr	r3, [pc, #20]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d6ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6d2:	d109      	bne.n	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d6d4:	23fa      	movs	r3, #250	@ 0xfa
 800d6d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d6d8:	e321      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d6da:	bf00      	nop
 800d6dc:	46020c00 	.word	0x46020c00
 800d6e0:	00f42400 	.word	0x00f42400
 800d6e4:	0801184c 	.word	0x0801184c
      }
      else
      {
        frequency = LSI_VALUE;
 800d6e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d6ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d6ee:	e316      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d6f0:	4ba8      	ldr	r3, [pc, #672]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6fc:	d106      	bne.n	800d70c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d700:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d704:	d102      	bne.n	800d70c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d706:	4ba4      	ldr	r3, [pc, #656]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d708:	637b      	str	r3, [r7, #52]	@ 0x34
 800d70a:	e308      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d70c:	4ba1      	ldr	r3, [pc, #644]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d70e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d712:	f003 0302 	and.w	r3, r3, #2
 800d716:	2b02      	cmp	r3, #2
 800d718:	d107      	bne.n	800d72a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d720:	d103      	bne.n	800d72a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d726:	637b      	str	r3, [r7, #52]	@ 0x34
 800d728:	e2f9      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d72a:	2300      	movs	r3, #0
 800d72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d72e:	e2f6      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d730:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d734:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d738:	430b      	orrs	r3, r1
 800d73a:	d12d      	bne.n	800d798 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d73c:	4b95      	ldr	r3, [pc, #596]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d73e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d742:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d746:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d748:	4b92      	ldr	r3, [pc, #584]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d754:	d105      	bne.n	800d762 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d102      	bne.n	800d762 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d75c:	4b8e      	ldr	r3, [pc, #568]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d75e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d760:	e2dd      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d768:	d107      	bne.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d76a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fe fb4c 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d776:	637b      	str	r3, [r7, #52]	@ 0x34
 800d778:	e2d1      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d780:	d107      	bne.n	800d792 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d782:	f107 0318 	add.w	r3, r7, #24
 800d786:	4618      	mov	r0, r3
 800d788:	f7fe fc9a 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d790:	e2c5      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	637b      	str	r3, [r7, #52]	@ 0x34
 800d796:	e2c2      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d79c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d7a0:	430b      	orrs	r3, r1
 800d7a2:	d156      	bne.n	800d852 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d7a4:	4b7b      	ldr	r3, [pc, #492]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d7ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d7b6:	d028      	beq.n	800d80a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d7be:	d845      	bhi.n	800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7c6:	d013      	beq.n	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7ce:	d83d      	bhi.n	800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d004      	beq.n	800d7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7dc:	d004      	beq.n	800d7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d7de:	e035      	b.n	800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d7e0:	f7fd fb2e 	bl	800ae40 <HAL_RCC_GetPCLK2Freq>
 800d7e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7e6:	e29a      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d7e8:	f7fd f9fa 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d7ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7ee:	e296      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7f0:	4b68      	ldr	r3, [pc, #416]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7fc:	d102      	bne.n	800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d7fe:	4b66      	ldr	r3, [pc, #408]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d800:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d802:	e28c      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d808:	e289      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d80a:	4b62      	ldr	r3, [pc, #392]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f003 0320 	and.w	r3, r3, #32
 800d812:	2b20      	cmp	r3, #32
 800d814:	d117      	bne.n	800d846 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d816:	4b5f      	ldr	r3, [pc, #380]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d005      	beq.n	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d822:	4b5c      	ldr	r3, [pc, #368]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	0e1b      	lsrs	r3, r3, #24
 800d828:	f003 030f 	and.w	r3, r3, #15
 800d82c:	e006      	b.n	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d82e:	4b59      	ldr	r3, [pc, #356]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d834:	041b      	lsls	r3, r3, #16
 800d836:	0e1b      	lsrs	r3, r3, #24
 800d838:	f003 030f 	and.w	r3, r3, #15
 800d83c:	4a57      	ldr	r2, [pc, #348]	@ (800d99c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d842:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d844:	e26b      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d84a:	e268      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d84c:	2300      	movs	r3, #0
 800d84e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d850:	e265      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d852:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d856:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d85a:	430b      	orrs	r3, r1
 800d85c:	d156      	bne.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d85e:	4b4d      	ldr	r3, [pc, #308]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d868:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d870:	d028      	beq.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d878:	d845      	bhi.n	800d906 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d880:	d013      	beq.n	800d8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d888:	d83d      	bhi.n	800d906 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d004      	beq.n	800d89a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d896:	d004      	beq.n	800d8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d898:	e035      	b.n	800d906 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d89a:	f7fd fabd 	bl	800ae18 <HAL_RCC_GetPCLK1Freq>
 800d89e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8a0:	e23d      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d8a2:	f7fd f99d 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d8a6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8a8:	e239      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8aa:	4b3a      	ldr	r3, [pc, #232]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8b6:	d102      	bne.n	800d8be <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d8b8:	4b37      	ldr	r3, [pc, #220]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d8ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8bc:	e22f      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8c2:	e22c      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d8c4:	4b33      	ldr	r3, [pc, #204]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f003 0320 	and.w	r3, r3, #32
 800d8cc:	2b20      	cmp	r3, #32
 800d8ce:	d117      	bne.n	800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8d0:	4b30      	ldr	r3, [pc, #192]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d005      	beq.n	800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d8dc:	4b2d      	ldr	r3, [pc, #180]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	0e1b      	lsrs	r3, r3, #24
 800d8e2:	f003 030f 	and.w	r3, r3, #15
 800d8e6:	e006      	b.n	800d8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d8e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d8ee:	041b      	lsls	r3, r3, #16
 800d8f0:	0e1b      	lsrs	r3, r3, #24
 800d8f2:	f003 030f 	and.w	r3, r3, #15
 800d8f6:	4a29      	ldr	r2, [pc, #164]	@ (800d99c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8fe:	e20e      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d900:	2300      	movs	r3, #0
 800d902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d904:	e20b      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d906:	2300      	movs	r3, #0
 800d908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d90a:	e208      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d910:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d914:	430b      	orrs	r3, r1
 800d916:	d17c      	bne.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d918:	4b1e      	ldr	r3, [pc, #120]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d91a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d91e:	f003 0318 	and.w	r3, r3, #24
 800d922:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d926:	2b18      	cmp	r3, #24
 800d928:	d870      	bhi.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d92a:	a201      	add	r2, pc, #4	@ (adr r2, 800d930 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d930:	0800d9a1 	.word	0x0800d9a1
 800d934:	0800da0d 	.word	0x0800da0d
 800d938:	0800da0d 	.word	0x0800da0d
 800d93c:	0800da0d 	.word	0x0800da0d
 800d940:	0800da0d 	.word	0x0800da0d
 800d944:	0800da0d 	.word	0x0800da0d
 800d948:	0800da0d 	.word	0x0800da0d
 800d94c:	0800da0d 	.word	0x0800da0d
 800d950:	0800d9a9 	.word	0x0800d9a9
 800d954:	0800da0d 	.word	0x0800da0d
 800d958:	0800da0d 	.word	0x0800da0d
 800d95c:	0800da0d 	.word	0x0800da0d
 800d960:	0800da0d 	.word	0x0800da0d
 800d964:	0800da0d 	.word	0x0800da0d
 800d968:	0800da0d 	.word	0x0800da0d
 800d96c:	0800da0d 	.word	0x0800da0d
 800d970:	0800d9b1 	.word	0x0800d9b1
 800d974:	0800da0d 	.word	0x0800da0d
 800d978:	0800da0d 	.word	0x0800da0d
 800d97c:	0800da0d 	.word	0x0800da0d
 800d980:	0800da0d 	.word	0x0800da0d
 800d984:	0800da0d 	.word	0x0800da0d
 800d988:	0800da0d 	.word	0x0800da0d
 800d98c:	0800da0d 	.word	0x0800da0d
 800d990:	0800d9cb 	.word	0x0800d9cb
 800d994:	46020c00 	.word	0x46020c00
 800d998:	00f42400 	.word	0x00f42400
 800d99c:	0801184c 	.word	0x0801184c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d9a0:	f7fd fa62 	bl	800ae68 <HAL_RCC_GetPCLK3Freq>
 800d9a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d9a6:	e1ba      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d9a8:	f7fd f91a 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800d9ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d9ae:	e1b6      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d9b0:	4b9f      	ldr	r3, [pc, #636]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9bc:	d102      	bne.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d9be:	4b9d      	ldr	r3, [pc, #628]	@ (800dc34 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d9c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9c2:	e1ac      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9c8:	e1a9      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d9ca:	4b99      	ldr	r3, [pc, #612]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 0320 	and.w	r3, r3, #32
 800d9d2:	2b20      	cmp	r3, #32
 800d9d4:	d117      	bne.n	800da06 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d9d6:	4b96      	ldr	r3, [pc, #600]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d005      	beq.n	800d9ee <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d9e2:	4b93      	ldr	r3, [pc, #588]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	0e1b      	lsrs	r3, r3, #24
 800d9e8:	f003 030f 	and.w	r3, r3, #15
 800d9ec:	e006      	b.n	800d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d9ee:	4b90      	ldr	r3, [pc, #576]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9f4:	041b      	lsls	r3, r3, #16
 800d9f6:	0e1b      	lsrs	r3, r3, #24
 800d9f8:	f003 030f 	and.w	r3, r3, #15
 800d9fc:	4a8e      	ldr	r2, [pc, #568]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800da04:	e18b      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800da06:	2300      	movs	r3, #0
 800da08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da0a:	e188      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800da0c:	2300      	movs	r3, #0
 800da0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da10:	e185      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800da12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da16:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800da1a:	430b      	orrs	r3, r1
 800da1c:	d155      	bne.n	800daca <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800da1e:	4b84      	ldr	r3, [pc, #528]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800da28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800da2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da30:	d013      	beq.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800da32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da38:	d844      	bhi.n	800dac4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800da3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da40:	d013      	beq.n	800da6a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da48:	d83c      	bhi.n	800dac4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800da4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d014      	beq.n	800da7a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800da50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da56:	d014      	beq.n	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800da58:	e034      	b.n	800dac4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da5a:	f107 0318 	add.w	r3, r7, #24
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe fb2e 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da68:	e159      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fe f9cc 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800da74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da78:	e151      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da7a:	f7fd f8b1 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800da7e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da80:	e14d      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da82:	4b6b      	ldr	r3, [pc, #428]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f003 0320 	and.w	r3, r3, #32
 800da8a:	2b20      	cmp	r3, #32
 800da8c:	d117      	bne.n	800dabe <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da8e:	4b68      	ldr	r3, [pc, #416]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800da9a:	4b65      	ldr	r3, [pc, #404]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	0e1b      	lsrs	r3, r3, #24
 800daa0:	f003 030f 	and.w	r3, r3, #15
 800daa4:	e006      	b.n	800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800daa6:	4b62      	ldr	r3, [pc, #392]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800daac:	041b      	lsls	r3, r3, #16
 800daae:	0e1b      	lsrs	r3, r3, #24
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	4a60      	ldr	r2, [pc, #384]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800dab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dabc:	e12f      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dabe:	2300      	movs	r3, #0
 800dac0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dac2:	e12c      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dac4:	2300      	movs	r3, #0
 800dac6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dac8:	e129      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800daca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dace:	1e59      	subs	r1, r3, #1
 800dad0:	ea52 0301 	orrs.w	r3, r2, r1
 800dad4:	d13c      	bne.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800dad6:	4b56      	ldr	r3, [pc, #344]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dad8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dadc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800dae0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dae8:	d027      	beq.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800daea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800daf0:	d82b      	bhi.n	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800daf8:	d017      	beq.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db00:	d823      	bhi.n	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	2b00      	cmp	r3, #0
 800db06:	d004      	beq.n	800db12 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800db08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db0e:	d004      	beq.n	800db1a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800db10:	e01b      	b.n	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800db12:	f7fd f865 	bl	800abe0 <HAL_RCC_GetSysClockFreq>
 800db16:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db18:	e101      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe f974 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800db24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db28:	e0f9      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db2a:	f107 0318 	add.w	r3, r7, #24
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe fac6 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db38:	e0f1      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db3a:	f107 030c 	add.w	r3, r7, #12
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fe fc18 	bl	800c374 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db48:	e0e9      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db4a:	2300      	movs	r3, #0
 800db4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db4e:	e0e6      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800db50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db54:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800db58:	430b      	orrs	r3, r1
 800db5a:	d131      	bne.n	800dbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800db5c:	4b34      	ldr	r3, [pc, #208]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800db62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db66:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800db68:	4b31      	ldr	r3, [pc, #196]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db6e:	f003 0302 	and.w	r3, r3, #2
 800db72:	2b02      	cmp	r3, #2
 800db74:	d106      	bne.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d103      	bne.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800db7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db80:	637b      	str	r3, [r7, #52]	@ 0x34
 800db82:	e0cc      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800db84:	4b2a      	ldr	r3, [pc, #168]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800db92:	d112      	bne.n	800dbba <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800db94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db9a:	d10e      	bne.n	800dbba <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db9c:	4b24      	ldr	r3, [pc, #144]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dbaa:	d102      	bne.n	800dbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800dbac:	23fa      	movs	r3, #250	@ 0xfa
 800dbae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dbb0:	e0b5      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dbb2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dbb6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dbb8:	e0b1      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbbe:	e0ae      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800dbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbc4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dbc8:	430b      	orrs	r3, r1
 800dbca:	d13b      	bne.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800dbcc:	4b18      	ldr	r3, [pc, #96]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dbce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dbd6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800dbd8:	4b15      	ldr	r3, [pc, #84]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbe4:	d105      	bne.n	800dbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d102      	bne.n	800dbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800dbec:	4b13      	ldr	r3, [pc, #76]	@ (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800dbee:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbf0:	e095      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800dbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbfe:	d106      	bne.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800dc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc06:	d102      	bne.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800dc08:	4b0d      	ldr	r3, [pc, #52]	@ (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800dc0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc0c:	e087      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800dc0e:	4b08      	ldr	r3, [pc, #32]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc1a:	d106      	bne.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc22:	d102      	bne.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800dc24:	4b03      	ldr	r3, [pc, #12]	@ (800dc34 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800dc26:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc28:	e079      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc2e:	e076      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dc30:	46020c00 	.word	0x46020c00
 800dc34:	00f42400 	.word	0x00f42400
 800dc38:	0801184c 	.word	0x0801184c
 800dc3c:	02dc6c00 	.word	0x02dc6c00
 800dc40:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800dc44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc48:	1e99      	subs	r1, r3, #2
 800dc4a:	ea52 0301 	orrs.w	r3, r2, r1
 800dc4e:	d120      	bne.n	800dc92 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800dc50:	4b35      	ldr	r3, [pc, #212]	@ (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dc52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dc56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d004      	beq.n	800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800dc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc68:	d008      	beq.n	800dc7c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800dc6a:	e00f      	b.n	800dc8c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc6c:	f107 030c 	add.w	r3, r7, #12
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fe fb7f 	bl	800c374 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc7a:	e050      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc7c:	f107 0318 	add.w	r3, r7, #24
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe fa1d 	bl	800c0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800dc86:	6a3b      	ldr	r3, [r7, #32]
 800dc88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc8a:	e048      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc90:	e045      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800dc92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc96:	f1a3 0108 	sub.w	r1, r3, #8
 800dc9a:	ea52 0301 	orrs.w	r3, r2, r1
 800dc9e:	d13c      	bne.n	800dd1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800dca0:	4b21      	ldr	r3, [pc, #132]	@ (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dca2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dca6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dcaa:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800dcac:	4b1e      	ldr	r3, [pc, #120]	@ (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dcb8:	d105      	bne.n	800dcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800dcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800dcc0:	4b1a      	ldr	r3, [pc, #104]	@ (800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800dcc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcc4:	e02b      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800dcc6:	4b18      	ldr	r3, [pc, #96]	@ (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dcd2:	d106      	bne.n	800dce2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dcda:	d102      	bne.n	800dce2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800dcdc:	4b14      	ldr	r3, [pc, #80]	@ (800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800dcde:	637b      	str	r3, [r7, #52]	@ 0x34
 800dce0:	e01d      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800dce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dce8:	d107      	bne.n	800dcfa <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fe f88c 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcf8:	e011      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dd00:	d108      	bne.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fe f880 	bl	800be0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0e:	085b      	lsrs	r3, r3, #1
 800dd10:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd12:	e004      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800dd14:	2300      	movs	r3, #0
 800dd16:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd18:	e001      	b.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3738      	adds	r7, #56	@ 0x38
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	46020c00 	.word	0x46020c00
 800dd2c:	00f42400 	.word	0x00f42400
 800dd30:	007a1200 	.word	0x007a1200

0800dd34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dd3c:	4b47      	ldr	r3, [pc, #284]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a46      	ldr	r2, [pc, #280]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dd42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd48:	f7f4 fea6 	bl	8002a98 <HAL_GetTick>
 800dd4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd4e:	e008      	b.n	800dd62 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd50:	f7f4 fea2 	bl	8002a98 <HAL_GetTick>
 800dd54:	4602      	mov	r2, r0
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d901      	bls.n	800dd62 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	e077      	b.n	800de52 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd62:	4b3e      	ldr	r3, [pc, #248]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1f0      	bne.n	800dd50 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dd6e:	4b3b      	ldr	r3, [pc, #236]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dd76:	f023 0303 	bic.w	r3, r3, #3
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	6811      	ldr	r1, [r2, #0]
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	6852      	ldr	r2, [r2, #4]
 800dd82:	3a01      	subs	r2, #1
 800dd84:	0212      	lsls	r2, r2, #8
 800dd86:	430a      	orrs	r2, r1
 800dd88:	4934      	ldr	r1, [pc, #208]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dd8e:	4b33      	ldr	r3, [pc, #204]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dd90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd92:	4b33      	ldr	r3, [pc, #204]	@ (800de60 <RCCEx_PLL2_Config+0x12c>)
 800dd94:	4013      	ands	r3, r2
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	6892      	ldr	r2, [r2, #8]
 800dd9a:	3a01      	subs	r2, #1
 800dd9c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	68d2      	ldr	r2, [r2, #12]
 800dda4:	3a01      	subs	r2, #1
 800dda6:	0252      	lsls	r2, r2, #9
 800dda8:	b292      	uxth	r2, r2
 800ddaa:	4311      	orrs	r1, r2
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	6912      	ldr	r2, [r2, #16]
 800ddb0:	3a01      	subs	r2, #1
 800ddb2:	0412      	lsls	r2, r2, #16
 800ddb4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ddb8:	4311      	orrs	r1, r2
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6952      	ldr	r2, [r2, #20]
 800ddbe:	3a01      	subs	r2, #1
 800ddc0:	0612      	lsls	r2, r2, #24
 800ddc2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ddc6:	430a      	orrs	r2, r1
 800ddc8:	4924      	ldr	r1, [pc, #144]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ddce:	4b23      	ldr	r3, [pc, #140]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800ddd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd2:	f023 020c 	bic.w	r2, r3, #12
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	699b      	ldr	r3, [r3, #24]
 800ddda:	4920      	ldr	r1, [pc, #128]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dddc:	4313      	orrs	r3, r2
 800ddde:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dde0:	4b1e      	ldr	r3, [pc, #120]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800dde2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	491c      	ldr	r1, [pc, #112]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800ddea:	4313      	orrs	r3, r2
 800ddec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800ddee:	4b1b      	ldr	r3, [pc, #108]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800ddf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddf2:	4a1a      	ldr	r2, [pc, #104]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800ddf4:	f023 0310 	bic.w	r3, r3, #16
 800ddf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ddfa:	4b18      	ldr	r3, [pc, #96]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800ddfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	69d2      	ldr	r2, [r2, #28]
 800de0a:	00d2      	lsls	r2, r2, #3
 800de0c:	4913      	ldr	r1, [pc, #76]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800de0e:	4313      	orrs	r3, r2
 800de10:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800de12:	4b12      	ldr	r3, [pc, #72]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800de14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de16:	4a11      	ldr	r2, [pc, #68]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800de18:	f043 0310 	orr.w	r3, r3, #16
 800de1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800de1e:	4b0f      	ldr	r3, [pc, #60]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a0e      	ldr	r2, [pc, #56]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800de24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800de28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de2a:	f7f4 fe35 	bl	8002a98 <HAL_GetTick>
 800de2e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de30:	e008      	b.n	800de44 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de32:	f7f4 fe31 	bl	8002a98 <HAL_GetTick>
 800de36:	4602      	mov	r2, r0
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	2b02      	cmp	r3, #2
 800de3e:	d901      	bls.n	800de44 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800de40:	2303      	movs	r3, #3
 800de42:	e006      	b.n	800de52 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de44:	4b05      	ldr	r3, [pc, #20]	@ (800de5c <RCCEx_PLL2_Config+0x128>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d0f0      	beq.n	800de32 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800de50:	2300      	movs	r3, #0

}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	46020c00 	.word	0x46020c00
 800de60:	80800000 	.word	0x80800000

0800de64 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800de6c:	4b47      	ldr	r3, [pc, #284]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a46      	ldr	r2, [pc, #280]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800de72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de78:	f7f4 fe0e 	bl	8002a98 <HAL_GetTick>
 800de7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de7e:	e008      	b.n	800de92 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de80:	f7f4 fe0a 	bl	8002a98 <HAL_GetTick>
 800de84:	4602      	mov	r2, r0
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d901      	bls.n	800de92 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800de8e:	2303      	movs	r3, #3
 800de90:	e077      	b.n	800df82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de92:	4b3e      	ldr	r3, [pc, #248]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1f0      	bne.n	800de80 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800de9e:	4b3b      	ldr	r3, [pc, #236]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800dea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dea2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dea6:	f023 0303 	bic.w	r3, r3, #3
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	6811      	ldr	r1, [r2, #0]
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	6852      	ldr	r2, [r2, #4]
 800deb2:	3a01      	subs	r2, #1
 800deb4:	0212      	lsls	r2, r2, #8
 800deb6:	430a      	orrs	r2, r1
 800deb8:	4934      	ldr	r1, [pc, #208]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800deba:	4313      	orrs	r3, r2
 800debc:	630b      	str	r3, [r1, #48]	@ 0x30
 800debe:	4b33      	ldr	r3, [pc, #204]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800dec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dec2:	4b33      	ldr	r3, [pc, #204]	@ (800df90 <RCCEx_PLL3_Config+0x12c>)
 800dec4:	4013      	ands	r3, r2
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	6892      	ldr	r2, [r2, #8]
 800deca:	3a01      	subs	r2, #1
 800decc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	68d2      	ldr	r2, [r2, #12]
 800ded4:	3a01      	subs	r2, #1
 800ded6:	0252      	lsls	r2, r2, #9
 800ded8:	b292      	uxth	r2, r2
 800deda:	4311      	orrs	r1, r2
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	6912      	ldr	r2, [r2, #16]
 800dee0:	3a01      	subs	r2, #1
 800dee2:	0412      	lsls	r2, r2, #16
 800dee4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dee8:	4311      	orrs	r1, r2
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	6952      	ldr	r2, [r2, #20]
 800deee:	3a01      	subs	r2, #1
 800def0:	0612      	lsls	r2, r2, #24
 800def2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800def6:	430a      	orrs	r2, r1
 800def8:	4924      	ldr	r1, [pc, #144]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800defa:	4313      	orrs	r3, r2
 800defc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800defe:	4b23      	ldr	r3, [pc, #140]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df02:	f023 020c 	bic.w	r2, r3, #12
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	4920      	ldr	r1, [pc, #128]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df0c:	4313      	orrs	r3, r2
 800df0e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800df10:	4b1e      	ldr	r3, [pc, #120]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6a1b      	ldr	r3, [r3, #32]
 800df18:	491c      	ldr	r1, [pc, #112]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df1a:	4313      	orrs	r3, r2
 800df1c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800df1e:	4b1b      	ldr	r3, [pc, #108]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df22:	4a1a      	ldr	r2, [pc, #104]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df24:	f023 0310 	bic.w	r3, r3, #16
 800df28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800df2a:	4b18      	ldr	r3, [pc, #96]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df32:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	69d2      	ldr	r2, [r2, #28]
 800df3a:	00d2      	lsls	r2, r2, #3
 800df3c:	4913      	ldr	r1, [pc, #76]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df3e:	4313      	orrs	r3, r2
 800df40:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800df42:	4b12      	ldr	r3, [pc, #72]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df46:	4a11      	ldr	r2, [pc, #68]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df48:	f043 0310 	orr.w	r3, r3, #16
 800df4c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800df4e:	4b0f      	ldr	r3, [pc, #60]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a0e      	ldr	r2, [pc, #56]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df58:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800df5a:	f7f4 fd9d 	bl	8002a98 <HAL_GetTick>
 800df5e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df60:	e008      	b.n	800df74 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df62:	f7f4 fd99 	bl	8002a98 <HAL_GetTick>
 800df66:	4602      	mov	r2, r0
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	d901      	bls.n	800df74 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800df70:	2303      	movs	r3, #3
 800df72:	e006      	b.n	800df82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df74:	4b05      	ldr	r3, [pc, #20]	@ (800df8c <RCCEx_PLL3_Config+0x128>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d0f0      	beq.n	800df62 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	46020c00 	.word	0x46020c00
 800df90:	80800000 	.word	0x80800000

0800df94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800df9c:	2301      	movs	r3, #1
 800df9e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d071      	beq.n	800e08a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7f4 f89a 	bl	80020f4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dfc8:	4b32      	ldr	r3, [pc, #200]	@ (800e094 <HAL_RTC_Init+0x100>)
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	f003 0310 	and.w	r3, r3, #16
 800dfd0:	2b10      	cmp	r3, #16
 800dfd2:	d051      	beq.n	800e078 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dfd4:	4b2f      	ldr	r3, [pc, #188]	@ (800e094 <HAL_RTC_Init+0x100>)
 800dfd6:	22ca      	movs	r2, #202	@ 0xca
 800dfd8:	625a      	str	r2, [r3, #36]	@ 0x24
 800dfda:	4b2e      	ldr	r3, [pc, #184]	@ (800e094 <HAL_RTC_Init+0x100>)
 800dfdc:	2253      	movs	r2, #83	@ 0x53
 800dfde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f88b 	bl	800e0fc <RTC_EnterInitMode>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d13f      	bne.n	800e070 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800dff0:	4b28      	ldr	r3, [pc, #160]	@ (800e094 <HAL_RTC_Init+0x100>)
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	4a27      	ldr	r2, [pc, #156]	@ (800e094 <HAL_RTC_Init+0x100>)
 800dff6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800dffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dffe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e000:	4b24      	ldr	r3, [pc, #144]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e002:	699a      	ldr	r2, [r3, #24]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6859      	ldr	r1, [r3, #4]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	4319      	orrs	r1, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	699b      	ldr	r3, [r3, #24]
 800e012:	430b      	orrs	r3, r1
 800e014:	491f      	ldr	r1, [pc, #124]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e016:	4313      	orrs	r3, r2
 800e018:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68da      	ldr	r2, [r3, #12]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	041b      	lsls	r3, r3, #16
 800e024:	491b      	ldr	r1, [pc, #108]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e026:	4313      	orrs	r3, r2
 800e028:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e02a:	4b1a      	ldr	r3, [pc, #104]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e03a:	430b      	orrs	r3, r1
 800e03c:	4915      	ldr	r1, [pc, #84]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e03e:	4313      	orrs	r3, r2
 800e040:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f896 	bl	800e174 <RTC_ExitInitMode>
 800e048:	4603      	mov	r3, r0
 800e04a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10e      	bne.n	800e070 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800e052:	4b10      	ldr	r3, [pc, #64]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a19      	ldr	r1, [r3, #32]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	69db      	ldr	r3, [r3, #28]
 800e062:	4319      	orrs	r1, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	695b      	ldr	r3, [r3, #20]
 800e068:	430b      	orrs	r3, r1
 800e06a:	490a      	ldr	r1, [pc, #40]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e06c:	4313      	orrs	r3, r2
 800e06e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e070:	4b08      	ldr	r3, [pc, #32]	@ (800e094 <HAL_RTC_Init+0x100>)
 800e072:	22ff      	movs	r2, #255	@ 0xff
 800e074:	625a      	str	r2, [r3, #36]	@ 0x24
 800e076:	e001      	b.n	800e07c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800e078:	2300      	movs	r3, #0
 800e07a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d103      	bne.n	800e08a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	46007800 	.word	0x46007800

0800e098 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800e0a0:	4b15      	ldr	r3, [pc, #84]	@ (800e0f8 <HAL_RTC_WaitForSynchro+0x60>)
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	4a14      	ldr	r2, [pc, #80]	@ (800e0f8 <HAL_RTC_WaitForSynchro+0x60>)
 800e0a6:	f023 0320 	bic.w	r3, r3, #32
 800e0aa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e0ac:	f7f4 fcf4 	bl	8002a98 <HAL_GetTick>
 800e0b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e0b2:	e013      	b.n	800e0dc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e0b4:	f7f4 fcf0 	bl	8002a98 <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e0c2:	d90b      	bls.n	800e0dc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e0f8 <HAL_RTC_WaitForSynchro+0x60>)
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	f003 0320 	and.w	r3, r3, #32
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10c      	bne.n	800e0ea <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2203      	movs	r2, #3
 800e0d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e008      	b.n	800e0ee <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e0dc:	4b06      	ldr	r3, [pc, #24]	@ (800e0f8 <HAL_RTC_WaitForSynchro+0x60>)
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	f003 0320 	and.w	r3, r3, #32
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d0e5      	beq.n	800e0b4 <HAL_RTC_WaitForSynchro+0x1c>
 800e0e8:	e000      	b.n	800e0ec <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e0ea:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	46007800 	.word	0x46007800

0800e0fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e104:	2300      	movs	r3, #0
 800e106:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e108:	4b19      	ldr	r3, [pc, #100]	@ (800e170 <RTC_EnterInitMode+0x74>)
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e110:	2b00      	cmp	r3, #0
 800e112:	d128      	bne.n	800e166 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e114:	4b16      	ldr	r3, [pc, #88]	@ (800e170 <RTC_EnterInitMode+0x74>)
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	4a15      	ldr	r2, [pc, #84]	@ (800e170 <RTC_EnterInitMode+0x74>)
 800e11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e11e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e120:	f7f4 fcba 	bl	8002a98 <HAL_GetTick>
 800e124:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e126:	e013      	b.n	800e150 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e128:	f7f4 fcb6 	bl	8002a98 <HAL_GetTick>
 800e12c:	4602      	mov	r2, r0
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e136:	d90b      	bls.n	800e150 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e138:	4b0d      	ldr	r3, [pc, #52]	@ (800e170 <RTC_EnterInitMode+0x74>)
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10f      	bne.n	800e164 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e144:	2303      	movs	r3, #3
 800e146:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2203      	movs	r2, #3
 800e14c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e150:	4b07      	ldr	r3, [pc, #28]	@ (800e170 <RTC_EnterInitMode+0x74>)
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d104      	bne.n	800e166 <RTC_EnterInitMode+0x6a>
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d1e2      	bne.n	800e128 <RTC_EnterInitMode+0x2c>
 800e162:	e000      	b.n	800e166 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e164:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e166:	7bfb      	ldrb	r3, [r7, #15]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	46007800 	.word	0x46007800

0800e174 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e180:	4b1a      	ldr	r3, [pc, #104]	@ (800e1ec <RTC_ExitInitMode+0x78>)
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	4a19      	ldr	r2, [pc, #100]	@ (800e1ec <RTC_ExitInitMode+0x78>)
 800e186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e18a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e18c:	4b17      	ldr	r3, [pc, #92]	@ (800e1ec <RTC_ExitInitMode+0x78>)
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	f003 0320 	and.w	r3, r3, #32
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10c      	bne.n	800e1b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7ff ff7d 	bl	800e098 <HAL_RTC_WaitForSynchro>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d01e      	beq.n	800e1e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2203      	movs	r2, #3
 800e1a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	73fb      	strb	r3, [r7, #15]
 800e1b0:	e017      	b.n	800e1e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e1ec <RTC_ExitInitMode+0x78>)
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	4a0d      	ldr	r2, [pc, #52]	@ (800e1ec <RTC_ExitInitMode+0x78>)
 800e1b8:	f023 0320 	bic.w	r3, r3, #32
 800e1bc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff ff6a 	bl	800e098 <HAL_RTC_WaitForSynchro>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d005      	beq.n	800e1d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2203      	movs	r2, #3
 800e1ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e1d2:	2303      	movs	r3, #3
 800e1d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e1d6:	4b05      	ldr	r3, [pc, #20]	@ (800e1ec <RTC_ExitInitMode+0x78>)
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	4a04      	ldr	r2, [pc, #16]	@ (800e1ec <RTC_ExitInitMode+0x78>)
 800e1dc:	f043 0320 	orr.w	r3, r3, #32
 800e1e0:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	46007800 	.word	0x46007800

0800e1f0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	4910      	ldr	r1, [pc, #64]	@ (800e244 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e204:	4313      	orrs	r3, r2
 800e206:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	689a      	ldr	r2, [r3, #8]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	431a      	orrs	r2, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	490c      	ldr	r1, [pc, #48]	@ (800e248 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e218:	4313      	orrs	r3, r2
 800e21a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e21c:	4b0a      	ldr	r3, [pc, #40]	@ (800e248 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	6919      	ldr	r1, [r3, #16]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	041b      	lsls	r3, r3, #16
 800e22e:	430b      	orrs	r3, r1
 800e230:	4905      	ldr	r1, [pc, #20]	@ (800e248 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e232:	4313      	orrs	r3, r2
 800e234:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr
 800e244:	46007800 	.word	0x46007800
 800e248:	46007c00 	.word	0x46007c00

0800e24c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b086      	sub	sp, #24
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
 800e258:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d904      	bls.n	800e26a <HAL_SAI_InitProtocol+0x1e>
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	3b03      	subs	r3, #3
 800e264:	2b01      	cmp	r3, #1
 800e266:	d812      	bhi.n	800e28e <HAL_SAI_InitProtocol+0x42>
 800e268:	e008      	b.n	800e27c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	68b9      	ldr	r1, [r7, #8]
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f000 fc05 	bl	800ea80 <SAI_InitI2S>
 800e276:	4603      	mov	r3, r0
 800e278:	75fb      	strb	r3, [r7, #23]
      break;
 800e27a:	e00b      	b.n	800e294 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	68b9      	ldr	r1, [r7, #8]
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 fcae 	bl	800ebe4 <SAI_InitPCM>
 800e288:	4603      	mov	r3, r0
 800e28a:	75fb      	strb	r3, [r7, #23]
      break;
 800e28c:	e002      	b.n	800e294 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	75fb      	strb	r3, [r7, #23]
      break;
 800e292:	bf00      	nop
  }

  if (status == HAL_OK)
 800e294:	7dfb      	ldrb	r3, [r7, #23]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d104      	bne.n	800e2a4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f000 f808 	bl	800e2b0 <HAL_SAI_Init>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3718      	adds	r7, #24
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08a      	sub	sp, #40	@ 0x28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e1ce      	b.n	800e660 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d10e      	bne.n	800e2ea <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a83      	ldr	r2, [pc, #524]	@ (800e4e0 <HAL_SAI_Init+0x230>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d107      	bne.n	800e2e6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d103      	bne.n	800e2e6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e1ba      	b.n	800e660 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d106      	bne.n	800e304 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7f4 f8a8 	bl	8002454 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fda9 	bl	800ee5c <SAI_Disable>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	e1a5      	b.n	800e660 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2202      	movs	r2, #2
 800e318:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d00c      	beq.n	800e33e <HAL_SAI_Init+0x8e>
 800e324:	2b02      	cmp	r3, #2
 800e326:	d80d      	bhi.n	800e344 <HAL_SAI_Init+0x94>
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <HAL_SAI_Init+0x82>
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d003      	beq.n	800e338 <HAL_SAI_Init+0x88>
 800e330:	e008      	b.n	800e344 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e336:	e008      	b.n	800e34a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e338:	2310      	movs	r3, #16
 800e33a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e33c:	e005      	b.n	800e34a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e33e:	2320      	movs	r3, #32
 800e340:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e342:	e002      	b.n	800e34a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e348:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d81d      	bhi.n	800e38e <HAL_SAI_Init+0xde>
 800e352:	a201      	add	r2, pc, #4	@ (adr r2, 800e358 <HAL_SAI_Init+0xa8>)
 800e354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e358:	0800e369 	.word	0x0800e369
 800e35c:	0800e36f 	.word	0x0800e36f
 800e360:	0800e377 	.word	0x0800e377
 800e364:	0800e37f 	.word	0x0800e37f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e368:	2300      	movs	r3, #0
 800e36a:	61fb      	str	r3, [r7, #28]
      break;
 800e36c:	e012      	b.n	800e394 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e36e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e372:	61fb      	str	r3, [r7, #28]
      break;
 800e374:	e00e      	b.n	800e394 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e376:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e37a:	61fb      	str	r3, [r7, #28]
      break;
 800e37c:	e00a      	b.n	800e394 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e37e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e382:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e386:	f043 0301 	orr.w	r3, r3, #1
 800e38a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e38c:	e002      	b.n	800e394 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	61fb      	str	r3, [r7, #28]
      break;
 800e392:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a51      	ldr	r2, [pc, #324]	@ (800e4e0 <HAL_SAI_Init+0x230>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d004      	beq.n	800e3a8 <HAL_SAI_Init+0xf8>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a50      	ldr	r2, [pc, #320]	@ (800e4e4 <HAL_SAI_Init+0x234>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d103      	bne.n	800e3b0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e3a8:	4a4f      	ldr	r2, [pc, #316]	@ (800e4e8 <HAL_SAI_Init+0x238>)
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ac:	6013      	str	r3, [r2, #0]
 800e3ae:	e002      	b.n	800e3b6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e3b0:	4a4e      	ldr	r2, [pc, #312]	@ (800e4ec <HAL_SAI_Init+0x23c>)
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b4:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d077      	beq.n	800e4ae <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a47      	ldr	r2, [pc, #284]	@ (800e4e0 <HAL_SAI_Init+0x230>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d004      	beq.n	800e3d2 <HAL_SAI_Init+0x122>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a45      	ldr	r2, [pc, #276]	@ (800e4e4 <HAL_SAI_Init+0x234>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d107      	bne.n	800e3e2 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e3d2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e3d6:	f04f 0100 	mov.w	r1, #0
 800e3da:	f7fe f925 	bl	800c628 <HAL_RCCEx_GetPeriphCLKFreq>
 800e3de:	61b8      	str	r0, [r7, #24]
 800e3e0:	e006      	b.n	800e3f0 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e3e2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e3e6:	f04f 0100 	mov.w	r1, #0
 800e3ea:	f7fe f91d 	bl	800c628 <HAL_RCCEx_GetPeriphCLKFreq>
 800e3ee:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e3f8:	d120      	bne.n	800e43c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3fe:	2b04      	cmp	r3, #4
 800e400:	d102      	bne.n	800e408 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e402:	2340      	movs	r3, #64	@ 0x40
 800e404:	613b      	str	r3, [r7, #16]
 800e406:	e00a      	b.n	800e41e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e40c:	2b08      	cmp	r3, #8
 800e40e:	d103      	bne.n	800e418 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e414:	613b      	str	r3, [r7, #16]
 800e416:	e002      	b.n	800e41e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e41c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e41e:	69ba      	ldr	r2, [r7, #24]
 800e420:	4613      	mov	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	4619      	mov	r1, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a1b      	ldr	r3, [r3, #32]
 800e42e:	693a      	ldr	r2, [r7, #16]
 800e430:	fb02 f303 	mul.w	r3, r2, r3
 800e434:	fbb1 f3f3 	udiv	r3, r1, r3
 800e438:	617b      	str	r3, [r7, #20]
 800e43a:	e017      	b.n	800e46c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e444:	d101      	bne.n	800e44a <HAL_SAI_Init+0x19a>
 800e446:	2302      	movs	r3, #2
 800e448:	e000      	b.n	800e44c <HAL_SAI_Init+0x19c>
 800e44a:	2301      	movs	r3, #1
 800e44c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e44e:	69ba      	ldr	r2, [r7, #24]
 800e450:	4613      	mov	r3, r2
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	4413      	add	r3, r2
 800e456:	005b      	lsls	r3, r3, #1
 800e458:	4619      	mov	r1, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6a1b      	ldr	r3, [r3, #32]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	fb02 f303 	mul.w	r3, r2, r3
 800e464:	021b      	lsls	r3, r3, #8
 800e466:	fbb1 f3f3 	udiv	r3, r1, r3
 800e46a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	4a20      	ldr	r2, [pc, #128]	@ (800e4f0 <HAL_SAI_Init+0x240>)
 800e470:	fba2 2303 	umull	r2, r3, r2, r3
 800e474:	08da      	lsrs	r2, r3, #3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e47a:	6979      	ldr	r1, [r7, #20]
 800e47c:	4b1c      	ldr	r3, [pc, #112]	@ (800e4f0 <HAL_SAI_Init+0x240>)
 800e47e:	fba3 2301 	umull	r2, r3, r3, r1
 800e482:	08da      	lsrs	r2, r3, #3
 800e484:	4613      	mov	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	1aca      	subs	r2, r1, r3
 800e48e:	2a08      	cmp	r2, #8
 800e490:	d904      	bls.n	800e49c <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4a0:	2b04      	cmp	r3, #4
 800e4a2:	d104      	bne.n	800e4ae <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4a8:	085a      	lsrs	r2, r3, #1
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d003      	beq.n	800e4be <HAL_SAI_Init+0x20e>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	2b02      	cmp	r3, #2
 800e4bc:	d109      	bne.n	800e4d2 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d101      	bne.n	800e4ca <HAL_SAI_Init+0x21a>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	e001      	b.n	800e4ce <HAL_SAI_Init+0x21e>
 800e4ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4ce:	623b      	str	r3, [r7, #32]
 800e4d0:	e012      	b.n	800e4f8 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d10c      	bne.n	800e4f4 <HAL_SAI_Init+0x244>
 800e4da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4de:	e00a      	b.n	800e4f6 <HAL_SAI_Init+0x246>
 800e4e0:	40015404 	.word	0x40015404
 800e4e4:	40015424 	.word	0x40015424
 800e4e8:	40015400 	.word	0x40015400
 800e4ec:	40015800 	.word	0x40015800
 800e4f0:	cccccccd 	.word	0xcccccccd
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6819      	ldr	r1, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	4b59      	ldr	r3, [pc, #356]	@ (800e668 <HAL_SAI_Init+0x3b8>)
 800e504:	400b      	ands	r3, r1
 800e506:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	6819      	ldr	r1, [r3, #0]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e516:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e51c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e522:	431a      	orrs	r2, r3
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e530:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e53c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e542:	051b      	lsls	r3, r3, #20
 800e544:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e54a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	430a      	orrs	r2, r1
 800e558:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	6812      	ldr	r2, [r2, #0]
 800e564:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e568:	f023 030f 	bic.w	r3, r3, #15
 800e56c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6859      	ldr	r1, [r3, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	69da      	ldr	r2, [r3, #28]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e57c:	431a      	orrs	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e582:	431a      	orrs	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	430a      	orrs	r2, r1
 800e58a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6899      	ldr	r1, [r3, #8]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	4b35      	ldr	r3, [pc, #212]	@ (800e66c <HAL_SAI_Init+0x3bc>)
 800e598:	400b      	ands	r3, r1
 800e59a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6899      	ldr	r1, [r3, #8]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5a6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e5ac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e5b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e5b8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e5c2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	430a      	orrs	r2, r1
 800e5ca:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68d9      	ldr	r1, [r3, #12]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e5da:	400b      	ands	r3, r1
 800e5dc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68d9      	ldr	r1, [r3, #12]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5ec:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5f2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e5f4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	021b      	lsls	r3, r3, #8
 800e5fe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	430a      	orrs	r2, r1
 800e606:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a18      	ldr	r2, [pc, #96]	@ (800e670 <HAL_SAI_Init+0x3c0>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d119      	bne.n	800e646 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e612:	4b18      	ldr	r3, [pc, #96]	@ (800e674 <HAL_SAI_Init+0x3c4>)
 800e614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e616:	4a17      	ldr	r2, [pc, #92]	@ (800e674 <HAL_SAI_Init+0x3c4>)
 800e618:	f023 0301 	bic.w	r3, r3, #1
 800e61c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e624:	2b01      	cmp	r3, #1
 800e626:	d10e      	bne.n	800e646 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e630:	3b01      	subs	r3, #1
 800e632:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e634:	490f      	ldr	r1, [pc, #60]	@ (800e674 <HAL_SAI_Init+0x3c4>)
 800e636:	4313      	orrs	r3, r2
 800e638:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e63a:	4b0e      	ldr	r3, [pc, #56]	@ (800e674 <HAL_SAI_Init+0x3c4>)
 800e63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e63e:	4a0d      	ldr	r2, [pc, #52]	@ (800e674 <HAL_SAI_Init+0x3c4>)
 800e640:	f043 0301 	orr.w	r3, r3, #1
 800e644:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3728      	adds	r7, #40	@ 0x28
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	f005c010 	.word	0xf005c010
 800e66c:	fff88000 	.word	0xfff88000
 800e670:	40015404 	.word	0x40015404
 800e674:	40015400 	.word	0x40015400

0800e678 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	603b      	str	r3, [r7, #0]
 800e684:	4613      	mov	r3, r2
 800e686:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800e688:	f7f4 fa06 	bl	8002a98 <HAL_GetTick>
 800e68c:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <HAL_SAI_Transmit+0x22>
 800e694:	88fb      	ldrh	r3, [r7, #6]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d101      	bne.n	800e69e <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 800e69a:	2301      	movs	r3, #1
 800e69c:	e0ee      	b.n	800e87c <HAL_SAI_Transmit+0x204>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	f040 80e7 	bne.w	800e87a <HAL_SAI_Transmit+0x202>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d101      	bne.n	800e6ba <HAL_SAI_Transmit+0x42>
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	e0e0      	b.n	800e87c <HAL_SAI_Transmit+0x204>
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->XferSize = Size;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	88fa      	ldrh	r2, [r7, #6]
 800e6c6:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	88fa      	ldrh	r2, [r7, #6]
 800e6ce:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->pBuffPtr = pData;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2212      	movs	r2, #18
 800e6dc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f040 80b1 	bne.w	800e85a <HAL_SAI_Transmit+0x1e2>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f000 faf5 	bl	800ece8 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e70c:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0U)
 800e70e:	e0a4      	b.n	800e85a <HAL_SAI_Transmit+0x1e2>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	695b      	ldr	r3, [r3, #20]
 800e716:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e71a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e71e:	d06b      	beq.n	800e7f8 <HAL_SAI_Transmit+0x180>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e724:	2b40      	cmp	r3, #64	@ 0x40
 800e726:	d10f      	bne.n	800e748 <HAL_SAI_Transmit+0xd0>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10b      	bne.n	800e748 <HAL_SAI_Transmit+0xd0>
        {
          hsai->Instance->DR = *hsai->pBuffPtr;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e734:	781a      	ldrb	r2, [r3, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr++;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e740:	1c5a      	adds	r2, r3, #1
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	679a      	str	r2, [r3, #120]	@ 0x78
 800e746:	e04e      	b.n	800e7e6 <HAL_SAI_Transmit+0x16e>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e74c:	2b80      	cmp	r3, #128	@ 0x80
 800e74e:	d819      	bhi.n	800e784 <HAL_SAI_Transmit+0x10c>
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	021b      	lsls	r3, r3, #8
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e774:	1c5a      	adds	r2, r3, #1
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	679a      	str	r2, [r3, #120]	@ 0x78
          hsai->Instance->DR = temp;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	61da      	str	r2, [r3, #28]
 800e782:	e030      	b.n	800e7e6 <HAL_SAI_Transmit+0x16e>
        }
        else
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	021b      	lsls	r3, r3, #8
 800e79e:	693a      	ldr	r2, [r7, #16]
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7a8:	1c5a      	adds	r2, r3, #1
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	041b      	lsls	r3, r3, #16
 800e7b6:	693a      	ldr	r2, [r7, #16]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7c0:	1c5a      	adds	r2, r3, #1
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	061b      	lsls	r3, r3, #24
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	679a      	str	r2, [r3, #120]	@ 0x78
          hsai->Instance->DR = temp;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	693a      	ldr	r2, [r7, #16]
 800e7e4:	61da      	str	r2, [r3, #28]
        }
        hsai->XferCount--;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
 800e7f6:	e030      	b.n	800e85a <HAL_SAI_Transmit+0x1e2>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800e7f8:	f7f4 f94e 	bl	8002a98 <HAL_GetTick>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	683a      	ldr	r2, [r7, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d302      	bcc.n	800e80e <HAL_SAI_Transmit+0x196>
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d125      	bne.n	800e85a <HAL_SAI_Transmit+0x1e2>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e814:	d021      	beq.n	800e85a <HAL_SAI_Transmit+0x1e2>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e81c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f04f 32ff 	mov.w	r2, #4294967295
 800e82e:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f000 fb13 	bl	800ee5c <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	685a      	ldr	r2, [r3, #4]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f042 0208 	orr.w	r2, r2, #8
 800e844:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

          return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e010      	b.n	800e87c <HAL_SAI_Transmit+0x204>
    while (hsai->XferCount > 0U)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e860:	2b00      	cmp	r3, #0
 800e862:	f47f af55 	bne.w	800e710 <HAL_SAI_Transmit+0x98>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2201      	movs	r2, #1
 800e86a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	e000      	b.n	800e87c <HAL_SAI_Transmit+0x204>
  }
  else
  {
    return HAL_BUSY;
 800e87a:	2302      	movs	r3, #2
  }
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	4613      	mov	r3, r2
 800e890:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <HAL_SAI_Receive_DMA+0x1a>
 800e898:	88fb      	ldrh	r3, [r7, #6]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e0c6      	b.n	800ea30 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	f040 80bf 	bne.w	800ea2e <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d101      	bne.n	800e8be <HAL_SAI_Receive_DMA+0x3a>
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	e0b8      	b.n	800ea30 <HAL_SAI_Receive_DMA+0x1ac>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	88fa      	ldrh	r2, [r7, #6]
 800e8d0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	88fa      	ldrh	r2, [r7, #6]
 800e8d8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2222      	movs	r2, #34	@ 0x22
 800e8e8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8f2:	4a51      	ldr	r2, [pc, #324]	@ (800ea38 <HAL_SAI_Receive_DMA+0x1b4>)
 800e8f4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8fc:	4a4f      	ldr	r2, [pc, #316]	@ (800ea3c <HAL_SAI_Receive_DMA+0x1b8>)
 800e8fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e906:	4a4e      	ldr	r2, [pc, #312]	@ (800ea40 <HAL_SAI_Receive_DMA+0x1bc>)
 800e908:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e910:	2200      	movs	r2, #0
 800e912:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e918:	2b40      	cmp	r3, #64	@ 0x40
 800e91a:	d106      	bne.n	800e92a <HAL_SAI_Receive_DMA+0xa6>
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e920:	2b00      	cmp	r3, #0
 800e922:	d102      	bne.n	800e92a <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e924:	88fb      	ldrh	r3, [r7, #6]
 800e926:	613b      	str	r3, [r7, #16]
 800e928:	e00a      	b.n	800e940 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e92e:	2b80      	cmp	r3, #128	@ 0x80
 800e930:	d803      	bhi.n	800e93a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e932:	88fb      	ldrh	r3, [r7, #6]
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	613b      	str	r3, [r7, #16]
 800e938:	e002      	b.n	800e940 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e93a:	88fb      	ldrh	r3, [r7, #6]
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d02d      	beq.n	800e9ac <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d021      	beq.n	800e9a0 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	693a      	ldr	r2, [r7, #16]
 800e968:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f103 021c 	add.w	r2, r3, #28
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e994:	4618      	mov	r0, r3
 800e996:	f7f7 fd1d 	bl	80063d4 <HAL_DMAEx_List_Start_IT>
 800e99a:	4603      	mov	r3, r0
 800e99c:	75fb      	strb	r3, [r7, #23]
 800e99e:	e014      	b.n	800e9ca <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e041      	b.n	800ea30 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	331c      	adds	r3, #28
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9be:	461a      	mov	r2, r3
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	f7f6 fd75 	bl	80054b0 <HAL_DMA_Start_IT>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e9ca:	7dfb      	ldrb	r3, [r7, #23]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d005      	beq.n	800e9dc <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e029      	b.n	800ea30 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e9dc:	2100      	movs	r1, #0
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f000 fa05 	bl	800edee <SAI_InterruptFlag>
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	691a      	ldr	r2, [r3, #16]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	430a      	orrs	r2, r1
 800e9f2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ea02:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d107      	bne.n	800ea22 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ea20:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	e000      	b.n	800ea30 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800ea2e:	2302      	movs	r3, #2
  }
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3718      	adds	r7, #24
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	0800ef2f 	.word	0x0800ef2f
 800ea3c:	0800eed1 	.word	0x0800eed1
 800ea40:	0800ef4b 	.word	0x0800ef4b

0800ea44 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b087      	sub	sp, #28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d003      	beq.n	800eaae <SAI_InitI2S+0x2e>
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d103      	bne.n	800eab6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	651a      	str	r2, [r3, #80]	@ 0x50
 800eab4:	e002      	b.n	800eabc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2201      	movs	r2, #1
 800eaba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800eac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eaca:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2200      	movs	r2, #0
 800ead0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	f003 0301 	and.w	r3, r3, #1
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d001      	beq.n	800eae6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800eae2:	2301      	movs	r3, #1
 800eae4:	e077      	b.n	800ebd6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d107      	bne.n	800eafc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800eaf8:	665a      	str	r2, [r3, #100]	@ 0x64
 800eafa:	e006      	b.n	800eb0a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800eb02:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d84f      	bhi.n	800ebb0 <SAI_InitI2S+0x130>
 800eb10:	a201      	add	r2, pc, #4	@ (adr r2, 800eb18 <SAI_InitI2S+0x98>)
 800eb12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb16:	bf00      	nop
 800eb18:	0800eb29 	.word	0x0800eb29
 800eb1c:	0800eb4b 	.word	0x0800eb4b
 800eb20:	0800eb6d 	.word	0x0800eb6d
 800eb24:	0800eb8f 	.word	0x0800eb8f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2280      	movs	r2, #128	@ 0x80
 800eb2c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	085b      	lsrs	r3, r3, #1
 800eb32:	015a      	lsls	r2, r3, #5
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	085b      	lsrs	r3, r3, #1
 800eb3c:	011a      	lsls	r2, r3, #4
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2240      	movs	r2, #64	@ 0x40
 800eb46:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb48:	e035      	b.n	800ebb6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2280      	movs	r2, #128	@ 0x80
 800eb4e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	085b      	lsrs	r3, r3, #1
 800eb54:	019a      	lsls	r2, r3, #6
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	085b      	lsrs	r3, r3, #1
 800eb5e:	015a      	lsls	r2, r3, #5
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2280      	movs	r2, #128	@ 0x80
 800eb68:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb6a:	e024      	b.n	800ebb6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	22c0      	movs	r2, #192	@ 0xc0
 800eb70:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	085b      	lsrs	r3, r3, #1
 800eb76:	019a      	lsls	r2, r3, #6
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	085b      	lsrs	r3, r3, #1
 800eb80:	015a      	lsls	r2, r3, #5
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2280      	movs	r2, #128	@ 0x80
 800eb8a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb8c:	e013      	b.n	800ebb6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	22e0      	movs	r2, #224	@ 0xe0
 800eb92:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	085b      	lsrs	r3, r3, #1
 800eb98:	019a      	lsls	r2, r3, #6
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	085b      	lsrs	r3, r3, #1
 800eba2:	015a      	lsls	r2, r3, #5
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2280      	movs	r2, #128	@ 0x80
 800ebac:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ebae:	e002      	b.n	800ebb6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	75fb      	strb	r3, [r7, #23]
      break;
 800ebb4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d10b      	bne.n	800ebd4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d102      	bne.n	800ebc8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2210      	movs	r2, #16
 800ebc6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	d102      	bne.n	800ebd4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2208      	movs	r2, #8
 800ebd2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ebd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	371c      	adds	r7, #28
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop

0800ebe4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b087      	sub	sp, #28
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
 800ebf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <SAI_InitPCM+0x2e>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d103      	bne.n	800ec1a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2201      	movs	r2, #1
 800ec16:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec18:	e002      	b.n	800ec20 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ec2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ec34:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	683a      	ldr	r2, [r7, #0]
 800ec40:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec48:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	2b04      	cmp	r3, #4
 800ec4e:	d103      	bne.n	800ec58 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2201      	movs	r2, #1
 800ec54:	659a      	str	r2, [r3, #88]	@ 0x58
 800ec56:	e002      	b.n	800ec5e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	220d      	movs	r2, #13
 800ec5c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b03      	cmp	r3, #3
 800ec62:	d837      	bhi.n	800ecd4 <SAI_InitPCM+0xf0>
 800ec64:	a201      	add	r2, pc, #4	@ (adr r2, 800ec6c <SAI_InitPCM+0x88>)
 800ec66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6a:	bf00      	nop
 800ec6c:	0800ec7d 	.word	0x0800ec7d
 800ec70:	0800ec93 	.word	0x0800ec93
 800ec74:	0800eca9 	.word	0x0800eca9
 800ec78:	0800ecbf 	.word	0x0800ecbf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2280      	movs	r2, #128	@ 0x80
 800ec80:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	011a      	lsls	r2, r3, #4
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2240      	movs	r2, #64	@ 0x40
 800ec8e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ec90:	e023      	b.n	800ecda <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2280      	movs	r2, #128	@ 0x80
 800ec96:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	015a      	lsls	r2, r3, #5
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2280      	movs	r2, #128	@ 0x80
 800eca4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eca6:	e018      	b.n	800ecda <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	22c0      	movs	r2, #192	@ 0xc0
 800ecac:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	015a      	lsls	r2, r3, #5
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2280      	movs	r2, #128	@ 0x80
 800ecba:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ecbc:	e00d      	b.n	800ecda <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	22e0      	movs	r2, #224	@ 0xe0
 800ecc2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	015a      	lsls	r2, r3, #5
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2280      	movs	r2, #128	@ 0x80
 800ecd0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ecd2:	e002      	b.n	800ecda <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	75fb      	strb	r3, [r7, #23]
      break;
 800ecd8:	bf00      	nop
  }

  return status;
 800ecda:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	371c      	adds	r7, #28
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800ecf0:	e06a      	b.n	800edc8 <SAI_FillFifo+0xe0>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ecf6:	2b40      	cmp	r3, #64	@ 0x40
 800ecf8:	d10f      	bne.n	800ed1a <SAI_FillFifo+0x32>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d10b      	bne.n	800ed1a <SAI_FillFifo+0x32>
    {
      hsai->Instance->DR = *hsai->pBuffPtr;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed06:	781a      	ldrb	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr++;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed12:	1c5a      	adds	r2, r3, #1
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	679a      	str	r2, [r3, #120]	@ 0x78
 800ed18:	e04e      	b.n	800edb8 <SAI_FillFifo+0xd0>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed1e:	2b80      	cmp	r3, #128	@ 0x80
 800ed20:	d819      	bhi.n	800ed56 <SAI_FillFifo+0x6e>
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed2e:	1c5a      	adds	r2, r3, #1
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	021b      	lsls	r3, r3, #8
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsai->Instance->DR = temp;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	61da      	str	r2, [r3, #28]
 800ed54:	e030      	b.n	800edb8 <SAI_FillFifo+0xd0>
    }
    else
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	021b      	lsls	r3, r3, #8
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	4313      	orrs	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed7a:	1c5a      	adds	r2, r3, #1
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	041b      	lsls	r3, r3, #16
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	061b      	lsls	r3, r3, #24
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800edaa:	1c5a      	adds	r2, r3, #1
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	679a      	str	r2, [r3, #120]	@ 0x78
      hsai->Instance->DR = temp;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68fa      	ldr	r2, [r7, #12]
 800edb6:	61da      	str	r2, [r3, #28]
    }
    hsai->XferCount--;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800edbe:	3b01      	subs	r3, #1
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800edd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800edd6:	d004      	beq.n	800ede2 <SAI_FillFifo+0xfa>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d187      	bne.n	800ecf2 <SAI_FillFifo+0xa>
  }
}
 800ede2:	bf00      	nop
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800edee:	b480      	push	{r7}
 800edf0:	b085      	sub	sp, #20
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	460b      	mov	r3, r1
 800edf8:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800edfe:	78fb      	ldrb	r3, [r7, #3]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d103      	bne.n	800ee0c <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f043 0308 	orr.w	r3, r3, #8
 800ee0a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee10:	2b08      	cmp	r3, #8
 800ee12:	d10b      	bne.n	800ee2c <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d003      	beq.n	800ee24 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d103      	bne.n	800ee2c <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f043 0310 	orr.w	r3, r3, #16
 800ee2a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	d003      	beq.n	800ee3c <SAI_InterruptFlag+0x4e>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d104      	bne.n	800ee46 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ee42:	60fb      	str	r3, [r7, #12]
 800ee44:	e003      	b.n	800ee4e <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f043 0304 	orr.w	r3, r3, #4
 800ee4c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3714      	adds	r7, #20
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr

0800ee5c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ee64:	4b18      	ldr	r3, [pc, #96]	@ (800eec8 <SAI_Disable+0x6c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a18      	ldr	r2, [pc, #96]	@ (800eecc <SAI_Disable+0x70>)
 800ee6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee6e:	0b1b      	lsrs	r3, r3, #12
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ee74:	2300      	movs	r3, #0
 800ee76:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ee86:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d10a      	bne.n	800eea4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	72fb      	strb	r3, [r7, #11]
      break;
 800eea2:	e009      	b.n	800eeb8 <SAI_Disable+0x5c>
    }
    count--;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	3b01      	subs	r3, #1
 800eea8:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e7      	bne.n	800ee88 <SAI_Disable+0x2c>

  return status;
 800eeb8:	7afb      	ldrb	r3, [r7, #11]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	20000000 	.word	0x20000000
 800eecc:	95cbec1b 	.word	0x95cbec1b

0800eed0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eedc:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eee2:	2b81      	cmp	r3, #129	@ 0x81
 800eee4:	d01c      	beq.n	800ef20 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	681a      	ldr	r2, [r3, #0]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800eef4:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800eefe:	2100      	movs	r1, #0
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7ff ff74 	bl	800edee <SAI_InterruptFlag>
 800ef06:	4603      	mov	r3, r0
 800ef08:	43d9      	mvns	r1, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	691a      	ldr	r2, [r3, #16]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	400a      	ands	r2, r1
 800ef16:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f7ff fd8f 	bl	800ea44 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ef26:	bf00      	nop
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b084      	sub	sp, #16
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ef3a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7ff fd8b 	bl	800ea58 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b084      	sub	sp, #16
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ef56:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ef76:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f7ff ff6f 	bl	800ee5c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2201      	movs	r2, #1
 800ef82:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f7ff fd6c 	bl	800ea6c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ef94:	bf00      	nop
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d101      	bne.n	800efae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efaa:	2301      	movs	r3, #1
 800efac:	e049      	b.n	800f042 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d106      	bne.n	800efc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7f3 f8e2 	bl	800218c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2202      	movs	r2, #2
 800efcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f000 f94a 	bl	800f274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2201      	movs	r2, #1
 800efe4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
	...

0800f04c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f062:	2b01      	cmp	r3, #1
 800f064:	d101      	bne.n	800f06a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f066:	2302      	movs	r3, #2
 800f068:	e0ff      	b.n	800f26a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2201      	movs	r2, #1
 800f06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b14      	cmp	r3, #20
 800f076:	f200 80f0 	bhi.w	800f25a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f07a:	a201      	add	r2, pc, #4	@ (adr r2, 800f080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f080:	0800f0d5 	.word	0x0800f0d5
 800f084:	0800f25b 	.word	0x0800f25b
 800f088:	0800f25b 	.word	0x0800f25b
 800f08c:	0800f25b 	.word	0x0800f25b
 800f090:	0800f115 	.word	0x0800f115
 800f094:	0800f25b 	.word	0x0800f25b
 800f098:	0800f25b 	.word	0x0800f25b
 800f09c:	0800f25b 	.word	0x0800f25b
 800f0a0:	0800f157 	.word	0x0800f157
 800f0a4:	0800f25b 	.word	0x0800f25b
 800f0a8:	0800f25b 	.word	0x0800f25b
 800f0ac:	0800f25b 	.word	0x0800f25b
 800f0b0:	0800f197 	.word	0x0800f197
 800f0b4:	0800f25b 	.word	0x0800f25b
 800f0b8:	0800f25b 	.word	0x0800f25b
 800f0bc:	0800f25b 	.word	0x0800f25b
 800f0c0:	0800f1d9 	.word	0x0800f1d9
 800f0c4:	0800f25b 	.word	0x0800f25b
 800f0c8:	0800f25b 	.word	0x0800f25b
 800f0cc:	0800f25b 	.word	0x0800f25b
 800f0d0:	0800f219 	.word	0x0800f219
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68b9      	ldr	r1, [r7, #8]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 f9d0 	bl	800f480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	699a      	ldr	r2, [r3, #24]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f042 0208 	orr.w	r2, r2, #8
 800f0ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	699a      	ldr	r2, [r3, #24]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f022 0204 	bic.w	r2, r2, #4
 800f0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	6999      	ldr	r1, [r3, #24]
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	691a      	ldr	r2, [r3, #16]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	430a      	orrs	r2, r1
 800f110:	619a      	str	r2, [r3, #24]
      break;
 800f112:	e0a5      	b.n	800f260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	68b9      	ldr	r1, [r7, #8]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 fa72 	bl	800f604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	699a      	ldr	r2, [r3, #24]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f12e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	699a      	ldr	r2, [r3, #24]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f13e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6999      	ldr	r1, [r3, #24]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	691b      	ldr	r3, [r3, #16]
 800f14a:	021a      	lsls	r2, r3, #8
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	430a      	orrs	r2, r1
 800f152:	619a      	str	r2, [r3, #24]
      break;
 800f154:	e084      	b.n	800f260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	68b9      	ldr	r1, [r7, #8]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f000 fb01 	bl	800f764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	69da      	ldr	r2, [r3, #28]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f042 0208 	orr.w	r2, r2, #8
 800f170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	69da      	ldr	r2, [r3, #28]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f022 0204 	bic.w	r2, r2, #4
 800f180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	69d9      	ldr	r1, [r3, #28]
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	691a      	ldr	r2, [r3, #16]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	430a      	orrs	r2, r1
 800f192:	61da      	str	r2, [r3, #28]
      break;
 800f194:	e064      	b.n	800f260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68b9      	ldr	r1, [r7, #8]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 fb8f 	bl	800f8c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	69da      	ldr	r2, [r3, #28]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	69da      	ldr	r2, [r3, #28]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	69d9      	ldr	r1, [r3, #28]
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	691b      	ldr	r3, [r3, #16]
 800f1cc:	021a      	lsls	r2, r3, #8
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	430a      	orrs	r2, r1
 800f1d4:	61da      	str	r2, [r3, #28]
      break;
 800f1d6:	e043      	b.n	800f260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68b9      	ldr	r1, [r7, #8]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 fc1e 	bl	800fa20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f042 0208 	orr.w	r2, r2, #8
 800f1f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f022 0204 	bic.w	r2, r2, #4
 800f202:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	691a      	ldr	r2, [r3, #16]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	430a      	orrs	r2, r1
 800f214:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f216:	e023      	b.n	800f260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	68b9      	ldr	r1, [r7, #8]
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fc80 	bl	800fb24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f232:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f242:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	021a      	lsls	r2, r3, #8
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	430a      	orrs	r2, r1
 800f256:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f258:	e002      	b.n	800f260 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f25a:	2301      	movs	r3, #1
 800f25c:	75fb      	strb	r3, [r7, #23]
      break;
 800f25e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2200      	movs	r2, #0
 800f264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f268:	7dfb      	ldrb	r3, [r7, #23]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3718      	adds	r7, #24
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop

0800f274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a6e      	ldr	r2, [pc, #440]	@ (800f440 <TIM_Base_SetConfig+0x1cc>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d02b      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a6d      	ldr	r2, [pc, #436]	@ (800f444 <TIM_Base_SetConfig+0x1d0>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d027      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f29a:	d023      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f2a2:	d01f      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a68      	ldr	r2, [pc, #416]	@ (800f448 <TIM_Base_SetConfig+0x1d4>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d01b      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a67      	ldr	r2, [pc, #412]	@ (800f44c <TIM_Base_SetConfig+0x1d8>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d017      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a66      	ldr	r2, [pc, #408]	@ (800f450 <TIM_Base_SetConfig+0x1dc>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d013      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a65      	ldr	r2, [pc, #404]	@ (800f454 <TIM_Base_SetConfig+0x1e0>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d00f      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a64      	ldr	r2, [pc, #400]	@ (800f458 <TIM_Base_SetConfig+0x1e4>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d00b      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a63      	ldr	r2, [pc, #396]	@ (800f45c <TIM_Base_SetConfig+0x1e8>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d007      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a62      	ldr	r2, [pc, #392]	@ (800f460 <TIM_Base_SetConfig+0x1ec>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d003      	beq.n	800f2e4 <TIM_Base_SetConfig+0x70>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4a61      	ldr	r2, [pc, #388]	@ (800f464 <TIM_Base_SetConfig+0x1f0>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d108      	bne.n	800f2f6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	68fa      	ldr	r2, [r7, #12]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a51      	ldr	r2, [pc, #324]	@ (800f440 <TIM_Base_SetConfig+0x1cc>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d043      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a50      	ldr	r2, [pc, #320]	@ (800f444 <TIM_Base_SetConfig+0x1d0>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d03f      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f30c:	d03b      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f314:	d037      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a4b      	ldr	r2, [pc, #300]	@ (800f448 <TIM_Base_SetConfig+0x1d4>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d033      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a4a      	ldr	r2, [pc, #296]	@ (800f44c <TIM_Base_SetConfig+0x1d8>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d02f      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a49      	ldr	r2, [pc, #292]	@ (800f450 <TIM_Base_SetConfig+0x1dc>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d02b      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a48      	ldr	r2, [pc, #288]	@ (800f454 <TIM_Base_SetConfig+0x1e0>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d027      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a47      	ldr	r2, [pc, #284]	@ (800f458 <TIM_Base_SetConfig+0x1e4>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d023      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a46      	ldr	r2, [pc, #280]	@ (800f45c <TIM_Base_SetConfig+0x1e8>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d01f      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4a45      	ldr	r2, [pc, #276]	@ (800f460 <TIM_Base_SetConfig+0x1ec>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d01b      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a44      	ldr	r2, [pc, #272]	@ (800f464 <TIM_Base_SetConfig+0x1f0>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d017      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a43      	ldr	r2, [pc, #268]	@ (800f468 <TIM_Base_SetConfig+0x1f4>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d013      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a42      	ldr	r2, [pc, #264]	@ (800f46c <TIM_Base_SetConfig+0x1f8>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d00f      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a41      	ldr	r2, [pc, #260]	@ (800f470 <TIM_Base_SetConfig+0x1fc>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d00b      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a40      	ldr	r2, [pc, #256]	@ (800f474 <TIM_Base_SetConfig+0x200>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d007      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a3f      	ldr	r2, [pc, #252]	@ (800f478 <TIM_Base_SetConfig+0x204>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d003      	beq.n	800f386 <TIM_Base_SetConfig+0x112>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a3e      	ldr	r2, [pc, #248]	@ (800f47c <TIM_Base_SetConfig+0x208>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d108      	bne.n	800f398 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f38c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	4313      	orrs	r3, r2
 800f396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	695b      	ldr	r3, [r3, #20]
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	689a      	ldr	r2, [r3, #8]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4a20      	ldr	r2, [pc, #128]	@ (800f440 <TIM_Base_SetConfig+0x1cc>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d023      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	4a1f      	ldr	r2, [pc, #124]	@ (800f444 <TIM_Base_SetConfig+0x1d0>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d01f      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4a24      	ldr	r2, [pc, #144]	@ (800f460 <TIM_Base_SetConfig+0x1ec>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d01b      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a23      	ldr	r2, [pc, #140]	@ (800f464 <TIM_Base_SetConfig+0x1f0>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d017      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a22      	ldr	r2, [pc, #136]	@ (800f468 <TIM_Base_SetConfig+0x1f4>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d013      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a21      	ldr	r2, [pc, #132]	@ (800f46c <TIM_Base_SetConfig+0x1f8>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d00f      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a20      	ldr	r2, [pc, #128]	@ (800f470 <TIM_Base_SetConfig+0x1fc>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d00b      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a1f      	ldr	r2, [pc, #124]	@ (800f474 <TIM_Base_SetConfig+0x200>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d007      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4a1e      	ldr	r2, [pc, #120]	@ (800f478 <TIM_Base_SetConfig+0x204>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d003      	beq.n	800f40c <TIM_Base_SetConfig+0x198>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4a1d      	ldr	r2, [pc, #116]	@ (800f47c <TIM_Base_SetConfig+0x208>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d103      	bne.n	800f414 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	691a      	ldr	r2, [r3, #16]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2201      	movs	r2, #1
 800f418:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	691b      	ldr	r3, [r3, #16]
 800f41e:	f003 0301 	and.w	r3, r3, #1
 800f422:	2b01      	cmp	r3, #1
 800f424:	d105      	bne.n	800f432 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	f023 0201 	bic.w	r2, r3, #1
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	611a      	str	r2, [r3, #16]
  }
}
 800f432:	bf00      	nop
 800f434:	3714      	adds	r7, #20
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	40012c00 	.word	0x40012c00
 800f444:	50012c00 	.word	0x50012c00
 800f448:	40000400 	.word	0x40000400
 800f44c:	50000400 	.word	0x50000400
 800f450:	40000800 	.word	0x40000800
 800f454:	50000800 	.word	0x50000800
 800f458:	40000c00 	.word	0x40000c00
 800f45c:	50000c00 	.word	0x50000c00
 800f460:	40013400 	.word	0x40013400
 800f464:	50013400 	.word	0x50013400
 800f468:	40014000 	.word	0x40014000
 800f46c:	50014000 	.word	0x50014000
 800f470:	40014400 	.word	0x40014400
 800f474:	50014400 	.word	0x50014400
 800f478:	40014800 	.word	0x40014800
 800f47c:	50014800 	.word	0x50014800

0800f480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f480:	b480      	push	{r7}
 800f482:	b087      	sub	sp, #28
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6a1b      	ldr	r3, [r3, #32]
 800f48e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a1b      	ldr	r3, [r3, #32]
 800f494:	f023 0201 	bic.w	r2, r3, #1
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	699b      	ldr	r3, [r3, #24]
 800f4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f4ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	f023 0302 	bic.w	r3, r3, #2
 800f4cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	697a      	ldr	r2, [r7, #20]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a40      	ldr	r2, [pc, #256]	@ (800f5dc <TIM_OC1_SetConfig+0x15c>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d023      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a3f      	ldr	r2, [pc, #252]	@ (800f5e0 <TIM_OC1_SetConfig+0x160>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d01f      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a3e      	ldr	r2, [pc, #248]	@ (800f5e4 <TIM_OC1_SetConfig+0x164>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d01b      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a3d      	ldr	r2, [pc, #244]	@ (800f5e8 <TIM_OC1_SetConfig+0x168>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d017      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a3c      	ldr	r2, [pc, #240]	@ (800f5ec <TIM_OC1_SetConfig+0x16c>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d013      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a3b      	ldr	r2, [pc, #236]	@ (800f5f0 <TIM_OC1_SetConfig+0x170>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d00f      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4a3a      	ldr	r2, [pc, #232]	@ (800f5f4 <TIM_OC1_SetConfig+0x174>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d00b      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a39      	ldr	r2, [pc, #228]	@ (800f5f8 <TIM_OC1_SetConfig+0x178>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d007      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a38      	ldr	r2, [pc, #224]	@ (800f5fc <TIM_OC1_SetConfig+0x17c>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d003      	beq.n	800f528 <TIM_OC1_SetConfig+0xa8>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a37      	ldr	r2, [pc, #220]	@ (800f600 <TIM_OC1_SetConfig+0x180>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d10c      	bne.n	800f542 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f023 0308 	bic.w	r3, r3, #8
 800f52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	697a      	ldr	r2, [r7, #20]
 800f536:	4313      	orrs	r3, r2
 800f538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	f023 0304 	bic.w	r3, r3, #4
 800f540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a25      	ldr	r2, [pc, #148]	@ (800f5dc <TIM_OC1_SetConfig+0x15c>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d023      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4a24      	ldr	r2, [pc, #144]	@ (800f5e0 <TIM_OC1_SetConfig+0x160>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d01f      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4a23      	ldr	r2, [pc, #140]	@ (800f5e4 <TIM_OC1_SetConfig+0x164>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d01b      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4a22      	ldr	r2, [pc, #136]	@ (800f5e8 <TIM_OC1_SetConfig+0x168>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d017      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4a21      	ldr	r2, [pc, #132]	@ (800f5ec <TIM_OC1_SetConfig+0x16c>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d013      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4a20      	ldr	r2, [pc, #128]	@ (800f5f0 <TIM_OC1_SetConfig+0x170>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d00f      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	4a1f      	ldr	r2, [pc, #124]	@ (800f5f4 <TIM_OC1_SetConfig+0x174>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d00b      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4a1e      	ldr	r2, [pc, #120]	@ (800f5f8 <TIM_OC1_SetConfig+0x178>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d007      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	4a1d      	ldr	r2, [pc, #116]	@ (800f5fc <TIM_OC1_SetConfig+0x17c>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d003      	beq.n	800f592 <TIM_OC1_SetConfig+0x112>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4a1c      	ldr	r2, [pc, #112]	@ (800f600 <TIM_OC1_SetConfig+0x180>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d111      	bne.n	800f5b6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f5a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	693a      	ldr	r2, [r7, #16]
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	699b      	ldr	r3, [r3, #24]
 800f5b0:	693a      	ldr	r2, [r7, #16]
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	685a      	ldr	r2, [r3, #4]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	697a      	ldr	r2, [r7, #20]
 800f5ce:	621a      	str	r2, [r3, #32]
}
 800f5d0:	bf00      	nop
 800f5d2:	371c      	adds	r7, #28
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr
 800f5dc:	40012c00 	.word	0x40012c00
 800f5e0:	50012c00 	.word	0x50012c00
 800f5e4:	40013400 	.word	0x40013400
 800f5e8:	50013400 	.word	0x50013400
 800f5ec:	40014000 	.word	0x40014000
 800f5f0:	50014000 	.word	0x50014000
 800f5f4:	40014400 	.word	0x40014400
 800f5f8:	50014400 	.word	0x50014400
 800f5fc:	40014800 	.word	0x40014800
 800f600:	50014800 	.word	0x50014800

0800f604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f604:	b480      	push	{r7}
 800f606:	b087      	sub	sp, #28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a1b      	ldr	r3, [r3, #32]
 800f612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a1b      	ldr	r3, [r3, #32]
 800f618:	f023 0210 	bic.w	r2, r3, #16
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	699b      	ldr	r3, [r3, #24]
 800f62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f63e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	021b      	lsls	r3, r3, #8
 800f646:	68fa      	ldr	r2, [r7, #12]
 800f648:	4313      	orrs	r3, r2
 800f64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f023 0320 	bic.w	r3, r3, #32
 800f652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	011b      	lsls	r3, r3, #4
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a36      	ldr	r2, [pc, #216]	@ (800f73c <TIM_OC2_SetConfig+0x138>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d00b      	beq.n	800f680 <TIM_OC2_SetConfig+0x7c>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a35      	ldr	r2, [pc, #212]	@ (800f740 <TIM_OC2_SetConfig+0x13c>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d007      	beq.n	800f680 <TIM_OC2_SetConfig+0x7c>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a34      	ldr	r2, [pc, #208]	@ (800f744 <TIM_OC2_SetConfig+0x140>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d003      	beq.n	800f680 <TIM_OC2_SetConfig+0x7c>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a33      	ldr	r2, [pc, #204]	@ (800f748 <TIM_OC2_SetConfig+0x144>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d10d      	bne.n	800f69c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	011b      	lsls	r3, r3, #4
 800f68e:	697a      	ldr	r2, [r7, #20]
 800f690:	4313      	orrs	r3, r2
 800f692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f69a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a27      	ldr	r2, [pc, #156]	@ (800f73c <TIM_OC2_SetConfig+0x138>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d023      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4a26      	ldr	r2, [pc, #152]	@ (800f740 <TIM_OC2_SetConfig+0x13c>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d01f      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a25      	ldr	r2, [pc, #148]	@ (800f744 <TIM_OC2_SetConfig+0x140>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d01b      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a24      	ldr	r2, [pc, #144]	@ (800f748 <TIM_OC2_SetConfig+0x144>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d017      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a23      	ldr	r2, [pc, #140]	@ (800f74c <TIM_OC2_SetConfig+0x148>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d013      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a22      	ldr	r2, [pc, #136]	@ (800f750 <TIM_OC2_SetConfig+0x14c>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d00f      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a21      	ldr	r2, [pc, #132]	@ (800f754 <TIM_OC2_SetConfig+0x150>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d00b      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a20      	ldr	r2, [pc, #128]	@ (800f758 <TIM_OC2_SetConfig+0x154>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d007      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a1f      	ldr	r2, [pc, #124]	@ (800f75c <TIM_OC2_SetConfig+0x158>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d003      	beq.n	800f6ec <TIM_OC2_SetConfig+0xe8>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a1e      	ldr	r2, [pc, #120]	@ (800f760 <TIM_OC2_SetConfig+0x15c>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d113      	bne.n	800f714 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f6f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	693a      	ldr	r2, [r7, #16]
 800f704:	4313      	orrs	r3, r2
 800f706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	699b      	ldr	r3, [r3, #24]
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	693a      	ldr	r2, [r7, #16]
 800f710:	4313      	orrs	r3, r2
 800f712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	693a      	ldr	r2, [r7, #16]
 800f718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	685a      	ldr	r2, [r3, #4]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	621a      	str	r2, [r3, #32]
}
 800f72e:	bf00      	nop
 800f730:	371c      	adds	r7, #28
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	40012c00 	.word	0x40012c00
 800f740:	50012c00 	.word	0x50012c00
 800f744:	40013400 	.word	0x40013400
 800f748:	50013400 	.word	0x50013400
 800f74c:	40014000 	.word	0x40014000
 800f750:	50014000 	.word	0x50014000
 800f754:	40014400 	.word	0x40014400
 800f758:	50014400 	.word	0x50014400
 800f75c:	40014800 	.word	0x40014800
 800f760:	50014800 	.word	0x50014800

0800f764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f764:	b480      	push	{r7}
 800f766:	b087      	sub	sp, #28
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6a1b      	ldr	r3, [r3, #32]
 800f772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6a1b      	ldr	r3, [r3, #32]
 800f778:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	69db      	ldr	r3, [r3, #28]
 800f78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f023 0303 	bic.w	r3, r3, #3
 800f79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f7b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	021b      	lsls	r3, r3, #8
 800f7b8:	697a      	ldr	r2, [r7, #20]
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4a35      	ldr	r2, [pc, #212]	@ (800f898 <TIM_OC3_SetConfig+0x134>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d00b      	beq.n	800f7de <TIM_OC3_SetConfig+0x7a>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4a34      	ldr	r2, [pc, #208]	@ (800f89c <TIM_OC3_SetConfig+0x138>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d007      	beq.n	800f7de <TIM_OC3_SetConfig+0x7a>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4a33      	ldr	r2, [pc, #204]	@ (800f8a0 <TIM_OC3_SetConfig+0x13c>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d003      	beq.n	800f7de <TIM_OC3_SetConfig+0x7a>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4a32      	ldr	r2, [pc, #200]	@ (800f8a4 <TIM_OC3_SetConfig+0x140>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d10d      	bne.n	800f7fa <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f7e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	021b      	lsls	r3, r3, #8
 800f7ec:	697a      	ldr	r2, [r7, #20]
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f7f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4a26      	ldr	r2, [pc, #152]	@ (800f898 <TIM_OC3_SetConfig+0x134>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d023      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4a25      	ldr	r2, [pc, #148]	@ (800f89c <TIM_OC3_SetConfig+0x138>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d01f      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a24      	ldr	r2, [pc, #144]	@ (800f8a0 <TIM_OC3_SetConfig+0x13c>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d01b      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a23      	ldr	r2, [pc, #140]	@ (800f8a4 <TIM_OC3_SetConfig+0x140>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d017      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a22      	ldr	r2, [pc, #136]	@ (800f8a8 <TIM_OC3_SetConfig+0x144>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d013      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a21      	ldr	r2, [pc, #132]	@ (800f8ac <TIM_OC3_SetConfig+0x148>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d00f      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a20      	ldr	r2, [pc, #128]	@ (800f8b0 <TIM_OC3_SetConfig+0x14c>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d00b      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4a1f      	ldr	r2, [pc, #124]	@ (800f8b4 <TIM_OC3_SetConfig+0x150>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d007      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a1e      	ldr	r2, [pc, #120]	@ (800f8b8 <TIM_OC3_SetConfig+0x154>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d003      	beq.n	800f84a <TIM_OC3_SetConfig+0xe6>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a1d      	ldr	r2, [pc, #116]	@ (800f8bc <TIM_OC3_SetConfig+0x158>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d113      	bne.n	800f872 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	695b      	ldr	r3, [r3, #20]
 800f85e:	011b      	lsls	r3, r3, #4
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	4313      	orrs	r3, r2
 800f864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	699b      	ldr	r3, [r3, #24]
 800f86a:	011b      	lsls	r3, r3, #4
 800f86c:	693a      	ldr	r2, [r7, #16]
 800f86e:	4313      	orrs	r3, r2
 800f870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	685a      	ldr	r2, [r3, #4]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	621a      	str	r2, [r3, #32]
}
 800f88c:	bf00      	nop
 800f88e:	371c      	adds	r7, #28
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	40012c00 	.word	0x40012c00
 800f89c:	50012c00 	.word	0x50012c00
 800f8a0:	40013400 	.word	0x40013400
 800f8a4:	50013400 	.word	0x50013400
 800f8a8:	40014000 	.word	0x40014000
 800f8ac:	50014000 	.word	0x50014000
 800f8b0:	40014400 	.word	0x40014400
 800f8b4:	50014400 	.word	0x50014400
 800f8b8:	40014800 	.word	0x40014800
 800f8bc:	50014800 	.word	0x50014800

0800f8c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a1b      	ldr	r3, [r3, #32]
 800f8d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f8ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	021b      	lsls	r3, r3, #8
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	4313      	orrs	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f90e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	031b      	lsls	r3, r3, #12
 800f916:	697a      	ldr	r2, [r7, #20]
 800f918:	4313      	orrs	r3, r2
 800f91a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a36      	ldr	r2, [pc, #216]	@ (800f9f8 <TIM_OC4_SetConfig+0x138>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d00b      	beq.n	800f93c <TIM_OC4_SetConfig+0x7c>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a35      	ldr	r2, [pc, #212]	@ (800f9fc <TIM_OC4_SetConfig+0x13c>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d007      	beq.n	800f93c <TIM_OC4_SetConfig+0x7c>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a34      	ldr	r2, [pc, #208]	@ (800fa00 <TIM_OC4_SetConfig+0x140>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d003      	beq.n	800f93c <TIM_OC4_SetConfig+0x7c>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a33      	ldr	r2, [pc, #204]	@ (800fa04 <TIM_OC4_SetConfig+0x144>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d10d      	bne.n	800f958 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	031b      	lsls	r3, r3, #12
 800f94a:	697a      	ldr	r2, [r7, #20]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f956:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a27      	ldr	r2, [pc, #156]	@ (800f9f8 <TIM_OC4_SetConfig+0x138>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d023      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a26      	ldr	r2, [pc, #152]	@ (800f9fc <TIM_OC4_SetConfig+0x13c>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d01f      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4a25      	ldr	r2, [pc, #148]	@ (800fa00 <TIM_OC4_SetConfig+0x140>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d01b      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a24      	ldr	r2, [pc, #144]	@ (800fa04 <TIM_OC4_SetConfig+0x144>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d017      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a23      	ldr	r2, [pc, #140]	@ (800fa08 <TIM_OC4_SetConfig+0x148>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d013      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a22      	ldr	r2, [pc, #136]	@ (800fa0c <TIM_OC4_SetConfig+0x14c>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d00f      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a21      	ldr	r2, [pc, #132]	@ (800fa10 <TIM_OC4_SetConfig+0x150>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d00b      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a20      	ldr	r2, [pc, #128]	@ (800fa14 <TIM_OC4_SetConfig+0x154>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d007      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a1f      	ldr	r2, [pc, #124]	@ (800fa18 <TIM_OC4_SetConfig+0x158>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d003      	beq.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800fa1c <TIM_OC4_SetConfig+0x15c>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d113      	bne.n	800f9d0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f9ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f9b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	019b      	lsls	r3, r3, #6
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	699b      	ldr	r3, [r3, #24]
 800f9c8:	019b      	lsls	r3, r3, #6
 800f9ca:	693a      	ldr	r2, [r7, #16]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	697a      	ldr	r2, [r7, #20]
 800f9e8:	621a      	str	r2, [r3, #32]
}
 800f9ea:	bf00      	nop
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	40012c00 	.word	0x40012c00
 800f9fc:	50012c00 	.word	0x50012c00
 800fa00:	40013400 	.word	0x40013400
 800fa04:	50013400 	.word	0x50013400
 800fa08:	40014000 	.word	0x40014000
 800fa0c:	50014000 	.word	0x50014000
 800fa10:	40014400 	.word	0x40014400
 800fa14:	50014400 	.word	0x50014400
 800fa18:	40014800 	.word	0x40014800
 800fa1c:	50014800 	.word	0x50014800

0800fa20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6a1b      	ldr	r3, [r3, #32]
 800fa34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fa64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	689b      	ldr	r3, [r3, #8]
 800fa6a:	041b      	lsls	r3, r3, #16
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4a21      	ldr	r2, [pc, #132]	@ (800fafc <TIM_OC5_SetConfig+0xdc>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d023      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4a20      	ldr	r2, [pc, #128]	@ (800fb00 <TIM_OC5_SetConfig+0xe0>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d01f      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4a1f      	ldr	r2, [pc, #124]	@ (800fb04 <TIM_OC5_SetConfig+0xe4>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d01b      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4a1e      	ldr	r2, [pc, #120]	@ (800fb08 <TIM_OC5_SetConfig+0xe8>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d017      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a1d      	ldr	r2, [pc, #116]	@ (800fb0c <TIM_OC5_SetConfig+0xec>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d013      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4a1c      	ldr	r2, [pc, #112]	@ (800fb10 <TIM_OC5_SetConfig+0xf0>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d00f      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a1b      	ldr	r2, [pc, #108]	@ (800fb14 <TIM_OC5_SetConfig+0xf4>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d00b      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a1a      	ldr	r2, [pc, #104]	@ (800fb18 <TIM_OC5_SetConfig+0xf8>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d007      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a19      	ldr	r2, [pc, #100]	@ (800fb1c <TIM_OC5_SetConfig+0xfc>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d003      	beq.n	800fac2 <TIM_OC5_SetConfig+0xa2>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a18      	ldr	r2, [pc, #96]	@ (800fb20 <TIM_OC5_SetConfig+0x100>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d109      	bne.n	800fad6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	695b      	ldr	r3, [r3, #20]
 800face:	021b      	lsls	r3, r3, #8
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	4313      	orrs	r3, r2
 800fad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	697a      	ldr	r2, [r7, #20]
 800fada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	685a      	ldr	r2, [r3, #4]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	693a      	ldr	r2, [r7, #16]
 800faee:	621a      	str	r2, [r3, #32]
}
 800faf0:	bf00      	nop
 800faf2:	371c      	adds	r7, #28
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr
 800fafc:	40012c00 	.word	0x40012c00
 800fb00:	50012c00 	.word	0x50012c00
 800fb04:	40013400 	.word	0x40013400
 800fb08:	50013400 	.word	0x50013400
 800fb0c:	40014000 	.word	0x40014000
 800fb10:	50014000 	.word	0x50014000
 800fb14:	40014400 	.word	0x40014400
 800fb18:	50014400 	.word	0x50014400
 800fb1c:	40014800 	.word	0x40014800
 800fb20:	50014800 	.word	0x50014800

0800fb24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b087      	sub	sp, #28
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a1b      	ldr	r3, [r3, #32]
 800fb32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6a1b      	ldr	r3, [r3, #32]
 800fb38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	021b      	lsls	r3, r3, #8
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	4313      	orrs	r3, r2
 800fb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fb6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	051b      	lsls	r3, r3, #20
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a22      	ldr	r2, [pc, #136]	@ (800fc04 <TIM_OC6_SetConfig+0xe0>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d023      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	4a21      	ldr	r2, [pc, #132]	@ (800fc08 <TIM_OC6_SetConfig+0xe4>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d01f      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4a20      	ldr	r2, [pc, #128]	@ (800fc0c <TIM_OC6_SetConfig+0xe8>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d01b      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4a1f      	ldr	r2, [pc, #124]	@ (800fc10 <TIM_OC6_SetConfig+0xec>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d017      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4a1e      	ldr	r2, [pc, #120]	@ (800fc14 <TIM_OC6_SetConfig+0xf0>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d013      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4a1d      	ldr	r2, [pc, #116]	@ (800fc18 <TIM_OC6_SetConfig+0xf4>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d00f      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a1c      	ldr	r2, [pc, #112]	@ (800fc1c <TIM_OC6_SetConfig+0xf8>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d00b      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a1b      	ldr	r2, [pc, #108]	@ (800fc20 <TIM_OC6_SetConfig+0xfc>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d007      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a1a      	ldr	r2, [pc, #104]	@ (800fc24 <TIM_OC6_SetConfig+0x100>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d003      	beq.n	800fbc8 <TIM_OC6_SetConfig+0xa4>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a19      	ldr	r2, [pc, #100]	@ (800fc28 <TIM_OC6_SetConfig+0x104>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d109      	bne.n	800fbdc <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fbce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	695b      	ldr	r3, [r3, #20]
 800fbd4:	029b      	lsls	r3, r3, #10
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	621a      	str	r2, [r3, #32]
}
 800fbf6:	bf00      	nop
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	40012c00 	.word	0x40012c00
 800fc08:	50012c00 	.word	0x50012c00
 800fc0c:	40013400 	.word	0x40013400
 800fc10:	50013400 	.word	0x50013400
 800fc14:	40014000 	.word	0x40014000
 800fc18:	50014000 	.word	0x50014000
 800fc1c:	40014400 	.word	0x40014400
 800fc20:	50014400 	.word	0x50014400
 800fc24:	40014800 	.word	0x40014800
 800fc28:	50014800 	.word	0x50014800

0800fc2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b085      	sub	sp, #20
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d101      	bne.n	800fc44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc40:	2302      	movs	r3, #2
 800fc42:	e097      	b.n	800fd74 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2201      	movs	r2, #1
 800fc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2202      	movs	r2, #2
 800fc50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a45      	ldr	r2, [pc, #276]	@ (800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d00e      	beq.n	800fc8c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4a44      	ldr	r2, [pc, #272]	@ (800fd84 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d009      	beq.n	800fc8c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a42      	ldr	r2, [pc, #264]	@ (800fd88 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d004      	beq.n	800fc8c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4a41      	ldr	r2, [pc, #260]	@ (800fd8c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d108      	bne.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fc92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a2f      	ldr	r2, [pc, #188]	@ (800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d040      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a2e      	ldr	r2, [pc, #184]	@ (800fd84 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d03b      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcd8:	d036      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fce2:	d031      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a29      	ldr	r2, [pc, #164]	@ (800fd90 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d02c      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4a28      	ldr	r2, [pc, #160]	@ (800fd94 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d027      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4a26      	ldr	r2, [pc, #152]	@ (800fd98 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d022      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4a25      	ldr	r2, [pc, #148]	@ (800fd9c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d01d      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a23      	ldr	r2, [pc, #140]	@ (800fda0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d018      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a22      	ldr	r2, [pc, #136]	@ (800fda4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d013      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4a18      	ldr	r2, [pc, #96]	@ (800fd88 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d00e      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a17      	ldr	r2, [pc, #92]	@ (800fd8c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d009      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a1b      	ldr	r2, [pc, #108]	@ (800fda8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d004      	beq.n	800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a1a      	ldr	r2, [pc, #104]	@ (800fdac <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d10c      	bne.n	800fd62 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	68ba      	ldr	r2, [r7, #8]
 800fd56:	4313      	orrs	r3, r2
 800fd58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2201      	movs	r2, #1
 800fd66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr
 800fd80:	40012c00 	.word	0x40012c00
 800fd84:	50012c00 	.word	0x50012c00
 800fd88:	40013400 	.word	0x40013400
 800fd8c:	50013400 	.word	0x50013400
 800fd90:	40000400 	.word	0x40000400
 800fd94:	50000400 	.word	0x50000400
 800fd98:	40000800 	.word	0x40000800
 800fd9c:	50000800 	.word	0x50000800
 800fda0:	40000c00 	.word	0x40000c00
 800fda4:	50000c00 	.word	0x50000c00
 800fda8:	40014000 	.word	0x40014000
 800fdac:	50014000 	.word	0x50014000

0800fdb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d101      	bne.n	800fdc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e042      	b.n	800fe48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d106      	bne.n	800fdda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7f2 fa35 	bl	8002244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2224      	movs	r2, #36	@ 0x24
 800fdde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f022 0201 	bic.w	r2, r2, #1
 800fdf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d002      	beq.n	800fe00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fd02 	bl	8010804 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fb51 	bl	80104a8 <UART_SetConfig>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d101      	bne.n	800fe10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	e01b      	b.n	800fe48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	685a      	ldr	r2, [r3, #4]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fe1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	689a      	ldr	r2, [r3, #8]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fe2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f042 0201 	orr.w	r2, r2, #1
 800fe3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fd81 	bl	8010948 <UART_CheckIdleState>
 800fe46:	4603      	mov	r3, r0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b0ba      	sub	sp, #232	@ 0xe8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	69db      	ldr	r3, [r3, #28]
 800fe5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fe76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fe7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fe7e:	4013      	ands	r3, r2
 800fe80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fe84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d11b      	bne.n	800fec4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fe8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe90:	f003 0320 	and.w	r3, r3, #32
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d015      	beq.n	800fec4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fe98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe9c:	f003 0320 	and.w	r3, r3, #32
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d105      	bne.n	800feb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800feac:	2b00      	cmp	r3, #0
 800feae:	d009      	beq.n	800fec4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 82cb 	beq.w	8010450 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	4798      	blx	r3
      }
      return;
 800fec2:	e2c5      	b.n	8010450 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 8123 	beq.w	8010114 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fece:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fed2:	4b8d      	ldr	r3, [pc, #564]	@ (8010108 <HAL_UART_IRQHandler+0x2b8>)
 800fed4:	4013      	ands	r3, r2
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800feda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fede:	4b8b      	ldr	r3, [pc, #556]	@ (801010c <HAL_UART_IRQHandler+0x2bc>)
 800fee0:	4013      	ands	r3, r2
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 8116 	beq.w	8010114 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feec:	f003 0301 	and.w	r3, r3, #1
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d011      	beq.n	800ff18 <HAL_UART_IRQHandler+0xc8>
 800fef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00b      	beq.n	800ff18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2201      	movs	r2, #1
 800ff06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff0e:	f043 0201 	orr.w	r2, r3, #1
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff1c:	f003 0302 	and.w	r3, r3, #2
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d011      	beq.n	800ff48 <HAL_UART_IRQHandler+0xf8>
 800ff24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00b      	beq.n	800ff48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2202      	movs	r2, #2
 800ff36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff3e:	f043 0204 	orr.w	r2, r3, #4
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff4c:	f003 0304 	and.w	r3, r3, #4
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d011      	beq.n	800ff78 <HAL_UART_IRQHandler+0x128>
 800ff54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff58:	f003 0301 	and.w	r3, r3, #1
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00b      	beq.n	800ff78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2204      	movs	r2, #4
 800ff66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff6e:	f043 0202 	orr.w	r2, r3, #2
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ff78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff7c:	f003 0308 	and.w	r3, r3, #8
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d017      	beq.n	800ffb4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff88:	f003 0320 	and.w	r3, r3, #32
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d105      	bne.n	800ff9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ff90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ff94:	4b5c      	ldr	r3, [pc, #368]	@ (8010108 <HAL_UART_IRQHandler+0x2b8>)
 800ff96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00b      	beq.n	800ffb4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2208      	movs	r2, #8
 800ffa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffaa:	f043 0208 	orr.w	r2, r3, #8
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ffb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d012      	beq.n	800ffe6 <HAL_UART_IRQHandler+0x196>
 800ffc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00c      	beq.n	800ffe6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ffd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffdc:	f043 0220 	orr.w	r2, r3, #32
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f000 8231 	beq.w	8010454 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fff6:	f003 0320 	and.w	r3, r3, #32
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d013      	beq.n	8010026 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010002:	f003 0320 	and.w	r3, r3, #32
 8010006:	2b00      	cmp	r3, #0
 8010008:	d105      	bne.n	8010016 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801000a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801000e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010012:	2b00      	cmp	r3, #0
 8010014:	d007      	beq.n	8010026 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801001a:	2b00      	cmp	r3, #0
 801001c:	d003      	beq.n	8010026 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801002c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801003a:	2b40      	cmp	r3, #64	@ 0x40
 801003c:	d005      	beq.n	801004a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801003e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010042:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010046:	2b00      	cmp	r3, #0
 8010048:	d054      	beq.n	80100f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fd93 	bl	8010b76 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801005a:	2b40      	cmp	r3, #64	@ 0x40
 801005c:	d146      	bne.n	80100ec <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	3308      	adds	r3, #8
 8010064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801006c:	e853 3f00 	ldrex	r3, [r3]
 8010070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801007c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3308      	adds	r3, #8
 8010086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801008a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801008e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801009a:	e841 2300 	strex	r3, r2, [r1]
 801009e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80100a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1d9      	bne.n	801005e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d017      	beq.n	80100e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100ba:	4a15      	ldr	r2, [pc, #84]	@ (8010110 <HAL_UART_IRQHandler+0x2c0>)
 80100bc:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7f5 facf 	bl	8005668 <HAL_DMA_Abort_IT>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d019      	beq.n	8010104 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80100de:	4610      	mov	r0, r2
 80100e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100e2:	e00f      	b.n	8010104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 f9c9 	bl	801047c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ea:	e00b      	b.n	8010104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 f9c5 	bl	801047c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100f2:	e007      	b.n	8010104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f9c1 	bl	801047c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010102:	e1a7      	b.n	8010454 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010104:	bf00      	nop
    return;
 8010106:	e1a5      	b.n	8010454 <HAL_UART_IRQHandler+0x604>
 8010108:	10000001 	.word	0x10000001
 801010c:	04000120 	.word	0x04000120
 8010110:	08010c43 	.word	0x08010c43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010118:	2b01      	cmp	r3, #1
 801011a:	f040 8150 	bne.w	80103be <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801011e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010122:	f003 0310 	and.w	r3, r3, #16
 8010126:	2b00      	cmp	r3, #0
 8010128:	f000 8149 	beq.w	80103be <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801012c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010130:	f003 0310 	and.w	r3, r3, #16
 8010134:	2b00      	cmp	r3, #0
 8010136:	f000 8142 	beq.w	80103be <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2210      	movs	r2, #16
 8010140:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801014c:	2b40      	cmp	r3, #64	@ 0x40
 801014e:	f040 80b8 	bne.w	80102c2 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801015c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010164:	2b00      	cmp	r3, #0
 8010166:	f000 8177 	beq.w	8010458 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010170:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010174:	429a      	cmp	r2, r3
 8010176:	f080 816f 	bcs.w	8010458 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801018a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801018c:	2b81      	cmp	r3, #129	@ 0x81
 801018e:	f000 8087 	beq.w	80102a0 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801019e:	e853 3f00 	ldrex	r3, [r3]
 80101a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80101a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80101aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	461a      	mov	r2, r3
 80101b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80101bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80101c0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80101c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80101cc:	e841 2300 	strex	r3, r2, [r1]
 80101d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80101d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1da      	bne.n	8010192 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	3308      	adds	r3, #8
 80101e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80101e6:	e853 3f00 	ldrex	r3, [r3]
 80101ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80101ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80101ee:	f023 0301 	bic.w	r3, r3, #1
 80101f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3308      	adds	r3, #8
 80101fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010200:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010204:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010206:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010208:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801020c:	e841 2300 	strex	r3, r2, [r1]
 8010210:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1e1      	bne.n	80101dc <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	3308      	adds	r3, #8
 801021e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010222:	e853 3f00 	ldrex	r3, [r3]
 8010226:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801022a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801022e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3308      	adds	r3, #8
 8010238:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801023c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801023e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010240:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010242:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010244:	e841 2300 	strex	r3, r2, [r1]
 8010248:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801024a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801024c:	2b00      	cmp	r3, #0
 801024e:	d1e3      	bne.n	8010218 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2220      	movs	r2, #32
 8010254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010266:	e853 3f00 	ldrex	r3, [r3]
 801026a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801026c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801026e:	f023 0310 	bic.w	r3, r3, #16
 8010272:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	461a      	mov	r2, r3
 801027c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010280:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010282:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010284:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010286:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010288:	e841 2300 	strex	r3, r2, [r1]
 801028c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801028e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1e4      	bne.n	801025e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801029a:	4618      	mov	r0, r3
 801029c:	f7f5 f968 	bl	8005570 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2202      	movs	r2, #2
 80102a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	4619      	mov	r1, r3
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 f8e8 	bl	8010490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80102c0:	e0ca      	b.n	8010458 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	1ad3      	subs	r3, r2, r3
 80102d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102dc:	b29b      	uxth	r3, r3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f000 80bc 	beq.w	801045c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80102e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f000 80b7 	beq.w	801045c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f6:	e853 3f00 	ldrex	r3, [r3]
 80102fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80102fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	461a      	mov	r2, r3
 801030c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010310:	647b      	str	r3, [r7, #68]	@ 0x44
 8010312:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010314:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010316:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010318:	e841 2300 	strex	r3, r2, [r1]
 801031c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801031e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1e4      	bne.n	80102ee <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	3308      	adds	r3, #8
 801032a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801032c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032e:	e853 3f00 	ldrex	r3, [r3]
 8010332:	623b      	str	r3, [r7, #32]
   return(result);
 8010334:	6a3b      	ldr	r3, [r7, #32]
 8010336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801033a:	f023 0301 	bic.w	r3, r3, #1
 801033e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3308      	adds	r3, #8
 8010348:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801034c:	633a      	str	r2, [r7, #48]	@ 0x30
 801034e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010354:	e841 2300 	strex	r3, r2, [r1]
 8010358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801035a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1e1      	bne.n	8010324 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2220      	movs	r2, #32
 8010364:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	e853 3f00 	ldrex	r3, [r3]
 8010380:	60fb      	str	r3, [r7, #12]
   return(result);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f023 0310 	bic.w	r3, r3, #16
 8010388:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	461a      	mov	r2, r3
 8010392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010396:	61fb      	str	r3, [r7, #28]
 8010398:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039a:	69b9      	ldr	r1, [r7, #24]
 801039c:	69fa      	ldr	r2, [r7, #28]
 801039e:	e841 2300 	strex	r3, r2, [r1]
 80103a2:	617b      	str	r3, [r7, #20]
   return(result);
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1e4      	bne.n	8010374 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2202      	movs	r2, #2
 80103ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80103b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80103b4:	4619      	mov	r1, r3
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 f86a 	bl	8010490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80103bc:	e04e      	b.n	801045c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80103be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d014      	beq.n	80103f4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80103ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d105      	bne.n	80103e2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80103d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d008      	beq.n	80103f4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d03a      	beq.n	8010460 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	4798      	blx	r3
    }
    return;
 80103f2:	e035      	b.n	8010460 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80103f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d009      	beq.n	8010414 <HAL_UART_IRQHandler+0x5c4>
 8010400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 fc2e 	bl	8010c6e <UART_EndTransmit_IT>
    return;
 8010412:	e026      	b.n	8010462 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010418:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d009      	beq.n	8010434 <HAL_UART_IRQHandler+0x5e4>
 8010420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010424:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010428:	2b00      	cmp	r3, #0
 801042a:	d003      	beq.n	8010434 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 fc53 	bl	8010cd8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010432:	e016      	b.n	8010462 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801043c:	2b00      	cmp	r3, #0
 801043e:	d010      	beq.n	8010462 <HAL_UART_IRQHandler+0x612>
 8010440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010444:	2b00      	cmp	r3, #0
 8010446:	da0c      	bge.n	8010462 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 fc3b 	bl	8010cc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801044e:	e008      	b.n	8010462 <HAL_UART_IRQHandler+0x612>
      return;
 8010450:	bf00      	nop
 8010452:	e006      	b.n	8010462 <HAL_UART_IRQHandler+0x612>
    return;
 8010454:	bf00      	nop
 8010456:	e004      	b.n	8010462 <HAL_UART_IRQHandler+0x612>
      return;
 8010458:	bf00      	nop
 801045a:	e002      	b.n	8010462 <HAL_UART_IRQHandler+0x612>
      return;
 801045c:	bf00      	nop
 801045e:	e000      	b.n	8010462 <HAL_UART_IRQHandler+0x612>
    return;
 8010460:	bf00      	nop
  }
}
 8010462:	37e8      	adds	r7, #232	@ 0xe8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010470:	bf00      	nop
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010484:	bf00      	nop
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010490:	b480      	push	{r7}
 8010492:	b083      	sub	sp, #12
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	460b      	mov	r3, r1
 801049a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801049c:	bf00      	nop
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104ac:	b094      	sub	sp, #80	@ 0x50
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80104b2:	2300      	movs	r3, #0
 80104b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80104b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	4b83      	ldr	r3, [pc, #524]	@ (80106cc <UART_SetConfig+0x224>)
 80104be:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c2:	689a      	ldr	r2, [r3, #8]
 80104c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c6:	691b      	ldr	r3, [r3, #16]
 80104c8:	431a      	orrs	r2, r3
 80104ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104cc:	695b      	ldr	r3, [r3, #20]
 80104ce:	431a      	orrs	r2, r3
 80104d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d2:	69db      	ldr	r3, [r3, #28]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	497c      	ldr	r1, [pc, #496]	@ (80106d0 <UART_SetConfig+0x228>)
 80104e0:	4019      	ands	r1, r3
 80104e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104e8:	430b      	orrs	r3, r1
 80104ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80104f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f8:	68d9      	ldr	r1, [r3, #12]
 80104fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	ea40 0301 	orr.w	r3, r0, r1
 8010502:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010506:	699b      	ldr	r3, [r3, #24]
 8010508:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801050a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	4b6f      	ldr	r3, [pc, #444]	@ (80106cc <UART_SetConfig+0x224>)
 8010510:	429a      	cmp	r2, r3
 8010512:	d009      	beq.n	8010528 <UART_SetConfig+0x80>
 8010514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	4b6e      	ldr	r3, [pc, #440]	@ (80106d4 <UART_SetConfig+0x22c>)
 801051a:	429a      	cmp	r2, r3
 801051c:	d004      	beq.n	8010528 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801051e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010520:	6a1a      	ldr	r2, [r3, #32]
 8010522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010524:	4313      	orrs	r3, r2
 8010526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	689b      	ldr	r3, [r3, #8]
 801052e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010532:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8010536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801053c:	430b      	orrs	r3, r1
 801053e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010546:	f023 000f 	bic.w	r0, r3, #15
 801054a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801054e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	ea40 0301 	orr.w	r3, r0, r1
 8010556:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	4b5e      	ldr	r3, [pc, #376]	@ (80106d8 <UART_SetConfig+0x230>)
 801055e:	429a      	cmp	r2, r3
 8010560:	d102      	bne.n	8010568 <UART_SetConfig+0xc0>
 8010562:	2301      	movs	r3, #1
 8010564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010566:	e032      	b.n	80105ce <UART_SetConfig+0x126>
 8010568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	4b5b      	ldr	r3, [pc, #364]	@ (80106dc <UART_SetConfig+0x234>)
 801056e:	429a      	cmp	r2, r3
 8010570:	d102      	bne.n	8010578 <UART_SetConfig+0xd0>
 8010572:	2302      	movs	r3, #2
 8010574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010576:	e02a      	b.n	80105ce <UART_SetConfig+0x126>
 8010578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	4b58      	ldr	r3, [pc, #352]	@ (80106e0 <UART_SetConfig+0x238>)
 801057e:	429a      	cmp	r2, r3
 8010580:	d102      	bne.n	8010588 <UART_SetConfig+0xe0>
 8010582:	2304      	movs	r3, #4
 8010584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010586:	e022      	b.n	80105ce <UART_SetConfig+0x126>
 8010588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	4b55      	ldr	r3, [pc, #340]	@ (80106e4 <UART_SetConfig+0x23c>)
 801058e:	429a      	cmp	r2, r3
 8010590:	d102      	bne.n	8010598 <UART_SetConfig+0xf0>
 8010592:	2308      	movs	r3, #8
 8010594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010596:	e01a      	b.n	80105ce <UART_SetConfig+0x126>
 8010598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	4b52      	ldr	r3, [pc, #328]	@ (80106e8 <UART_SetConfig+0x240>)
 801059e:	429a      	cmp	r2, r3
 80105a0:	d102      	bne.n	80105a8 <UART_SetConfig+0x100>
 80105a2:	2310      	movs	r3, #16
 80105a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105a6:	e012      	b.n	80105ce <UART_SetConfig+0x126>
 80105a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	4b4f      	ldr	r3, [pc, #316]	@ (80106ec <UART_SetConfig+0x244>)
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d103      	bne.n	80105ba <UART_SetConfig+0x112>
 80105b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80105b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105b8:	e009      	b.n	80105ce <UART_SetConfig+0x126>
 80105ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	4b43      	ldr	r3, [pc, #268]	@ (80106cc <UART_SetConfig+0x224>)
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d102      	bne.n	80105ca <UART_SetConfig+0x122>
 80105c4:	2320      	movs	r3, #32
 80105c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105c8:	e001      	b.n	80105ce <UART_SetConfig+0x126>
 80105ca:	2300      	movs	r3, #0
 80105cc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80105ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	4b3e      	ldr	r3, [pc, #248]	@ (80106cc <UART_SetConfig+0x224>)
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d005      	beq.n	80105e4 <UART_SetConfig+0x13c>
 80105d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	4b3d      	ldr	r3, [pc, #244]	@ (80106d4 <UART_SetConfig+0x22c>)
 80105de:	429a      	cmp	r2, r3
 80105e0:	f040 8088 	bne.w	80106f4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80105e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80105e6:	2200      	movs	r2, #0
 80105e8:	623b      	str	r3, [r7, #32]
 80105ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80105ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80105f0:	f7fc f81a 	bl	800c628 <HAL_RCCEx_GetPeriphCLKFreq>
 80105f4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80105f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f000 80eb 	beq.w	80107d4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80105fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010602:	4a3b      	ldr	r2, [pc, #236]	@ (80106f0 <UART_SetConfig+0x248>)
 8010604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010608:	461a      	mov	r2, r3
 801060a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801060c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010610:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010614:	685a      	ldr	r2, [r3, #4]
 8010616:	4613      	mov	r3, r2
 8010618:	005b      	lsls	r3, r3, #1
 801061a:	4413      	add	r3, r2
 801061c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801061e:	429a      	cmp	r2, r3
 8010620:	d305      	bcc.n	801062e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801062a:	429a      	cmp	r2, r3
 801062c:	d903      	bls.n	8010636 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801062e:	2301      	movs	r3, #1
 8010630:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010634:	e048      	b.n	80106c8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010638:	2200      	movs	r2, #0
 801063a:	61bb      	str	r3, [r7, #24]
 801063c:	61fa      	str	r2, [r7, #28]
 801063e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010642:	4a2b      	ldr	r2, [pc, #172]	@ (80106f0 <UART_SetConfig+0x248>)
 8010644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010648:	b29b      	uxth	r3, r3
 801064a:	2200      	movs	r2, #0
 801064c:	613b      	str	r3, [r7, #16]
 801064e:	617a      	str	r2, [r7, #20]
 8010650:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010654:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010658:	f7ef fe2c 	bl	80002b4 <__aeabi_uldivmod>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	4610      	mov	r0, r2
 8010662:	4619      	mov	r1, r3
 8010664:	f04f 0200 	mov.w	r2, #0
 8010668:	f04f 0300 	mov.w	r3, #0
 801066c:	020b      	lsls	r3, r1, #8
 801066e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010672:	0202      	lsls	r2, r0, #8
 8010674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010676:	6849      	ldr	r1, [r1, #4]
 8010678:	0849      	lsrs	r1, r1, #1
 801067a:	2000      	movs	r0, #0
 801067c:	460c      	mov	r4, r1
 801067e:	4605      	mov	r5, r0
 8010680:	eb12 0804 	adds.w	r8, r2, r4
 8010684:	eb43 0905 	adc.w	r9, r3, r5
 8010688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	2200      	movs	r2, #0
 801068e:	60bb      	str	r3, [r7, #8]
 8010690:	60fa      	str	r2, [r7, #12]
 8010692:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010696:	4640      	mov	r0, r8
 8010698:	4649      	mov	r1, r9
 801069a:	f7ef fe0b 	bl	80002b4 <__aeabi_uldivmod>
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	4613      	mov	r3, r2
 80106a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80106a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80106ac:	d308      	bcc.n	80106c0 <UART_SetConfig+0x218>
 80106ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80106b4:	d204      	bcs.n	80106c0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80106b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80106bc:	60da      	str	r2, [r3, #12]
 80106be:	e003      	b.n	80106c8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80106c0:	2301      	movs	r3, #1
 80106c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80106c6:	e085      	b.n	80107d4 <UART_SetConfig+0x32c>
 80106c8:	e084      	b.n	80107d4 <UART_SetConfig+0x32c>
 80106ca:	bf00      	nop
 80106cc:	46002400 	.word	0x46002400
 80106d0:	cfff69f3 	.word	0xcfff69f3
 80106d4:	56002400 	.word	0x56002400
 80106d8:	40013800 	.word	0x40013800
 80106dc:	40004400 	.word	0x40004400
 80106e0:	40004800 	.word	0x40004800
 80106e4:	40004c00 	.word	0x40004c00
 80106e8:	40005000 	.word	0x40005000
 80106ec:	40006400 	.word	0x40006400
 80106f0:	0801190c 	.word	0x0801190c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f6:	69db      	ldr	r3, [r3, #28]
 80106f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80106fc:	d13c      	bne.n	8010778 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80106fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010700:	2200      	movs	r2, #0
 8010702:	603b      	str	r3, [r7, #0]
 8010704:	607a      	str	r2, [r7, #4]
 8010706:	e9d7 0100 	ldrd	r0, r1, [r7]
 801070a:	f7fb ff8d 	bl	800c628 <HAL_RCCEx_GetPeriphCLKFreq>
 801070e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010712:	2b00      	cmp	r3, #0
 8010714:	d05e      	beq.n	80107d4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801071a:	4a39      	ldr	r2, [pc, #228]	@ (8010800 <UART_SetConfig+0x358>)
 801071c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010720:	461a      	mov	r2, r3
 8010722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010724:	fbb3 f3f2 	udiv	r3, r3, r2
 8010728:	005a      	lsls	r2, r3, #1
 801072a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	085b      	lsrs	r3, r3, #1
 8010730:	441a      	add	r2, r3
 8010732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	fbb2 f3f3 	udiv	r3, r2, r3
 801073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801073c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801073e:	2b0f      	cmp	r3, #15
 8010740:	d916      	bls.n	8010770 <UART_SetConfig+0x2c8>
 8010742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010748:	d212      	bcs.n	8010770 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801074a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801074c:	b29b      	uxth	r3, r3
 801074e:	f023 030f 	bic.w	r3, r3, #15
 8010752:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010756:	085b      	lsrs	r3, r3, #1
 8010758:	b29b      	uxth	r3, r3
 801075a:	f003 0307 	and.w	r3, r3, #7
 801075e:	b29a      	uxth	r2, r3
 8010760:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010762:	4313      	orrs	r3, r2
 8010764:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801076c:	60da      	str	r2, [r3, #12]
 801076e:	e031      	b.n	80107d4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010770:	2301      	movs	r3, #1
 8010772:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010776:	e02d      	b.n	80107d4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801077a:	2200      	movs	r2, #0
 801077c:	469a      	mov	sl, r3
 801077e:	4693      	mov	fp, r2
 8010780:	4650      	mov	r0, sl
 8010782:	4659      	mov	r1, fp
 8010784:	f7fb ff50 	bl	800c628 <HAL_RCCEx_GetPeriphCLKFreq>
 8010788:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801078a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801078c:	2b00      	cmp	r3, #0
 801078e:	d021      	beq.n	80107d4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010794:	4a1a      	ldr	r2, [pc, #104]	@ (8010800 <UART_SetConfig+0x358>)
 8010796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801079a:	461a      	mov	r2, r3
 801079c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801079e:	fbb3 f2f2 	udiv	r2, r3, r2
 80107a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	085b      	lsrs	r3, r3, #1
 80107a8:	441a      	add	r2, r3
 80107aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80107b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107b6:	2b0f      	cmp	r3, #15
 80107b8:	d909      	bls.n	80107ce <UART_SetConfig+0x326>
 80107ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107c0:	d205      	bcs.n	80107ce <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80107c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	60da      	str	r2, [r3, #12]
 80107cc:	e002      	b.n	80107d4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80107ce:	2301      	movs	r3, #1
 80107d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80107d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d6:	2201      	movs	r2, #1
 80107d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80107dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107de:	2201      	movs	r2, #1
 80107e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80107e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e6:	2200      	movs	r2, #0
 80107e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80107ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ec:	2200      	movs	r2, #0
 80107ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80107f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3750      	adds	r7, #80	@ 0x50
 80107f8:	46bd      	mov	sp, r7
 80107fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107fe:	bf00      	nop
 8010800:	0801190c 	.word	0x0801190c

08010804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010810:	f003 0308 	and.w	r3, r3, #8
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00a      	beq.n	801082e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	430a      	orrs	r2, r1
 801082c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00a      	beq.n	8010850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	430a      	orrs	r2, r1
 801084e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010854:	f003 0302 	and.w	r3, r3, #2
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00a      	beq.n	8010872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	430a      	orrs	r2, r1
 8010870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010876:	f003 0304 	and.w	r3, r3, #4
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00a      	beq.n	8010894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	430a      	orrs	r2, r1
 8010892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010898:	f003 0310 	and.w	r3, r3, #16
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00a      	beq.n	80108b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	430a      	orrs	r2, r1
 80108b4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108ba:	f003 0320 	and.w	r3, r3, #32
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d00a      	beq.n	80108d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	430a      	orrs	r2, r1
 80108d6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d01a      	beq.n	801091a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	430a      	orrs	r2, r1
 80108f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010902:	d10a      	bne.n	801091a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	430a      	orrs	r2, r1
 8010918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801091e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00a      	beq.n	801093c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	430a      	orrs	r2, r1
 801093a:	605a      	str	r2, [r3, #4]
  }
}
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b098      	sub	sp, #96	@ 0x60
 801094c:	af02      	add	r7, sp, #8
 801094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010958:	f7f2 f89e 	bl	8002a98 <HAL_GetTick>
 801095c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f003 0308 	and.w	r3, r3, #8
 8010968:	2b08      	cmp	r3, #8
 801096a:	d12f      	bne.n	80109cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801096c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010974:	2200      	movs	r2, #0
 8010976:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 f88e 	bl	8010a9c <UART_WaitOnFlagUntilTimeout>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	d022      	beq.n	80109cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801098c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801098e:	e853 3f00 	ldrex	r3, [r3]
 8010992:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801099a:	653b      	str	r3, [r7, #80]	@ 0x50
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	461a      	mov	r2, r3
 80109a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80109a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80109aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80109ac:	e841 2300 	strex	r3, r2, [r1]
 80109b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80109b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1e6      	bne.n	8010986 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2220      	movs	r2, #32
 80109bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109c8:	2303      	movs	r3, #3
 80109ca:	e063      	b.n	8010a94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f003 0304 	and.w	r3, r3, #4
 80109d6:	2b04      	cmp	r3, #4
 80109d8:	d149      	bne.n	8010a6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109e2:	2200      	movs	r2, #0
 80109e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f857 	bl	8010a9c <UART_WaitOnFlagUntilTimeout>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d03c      	beq.n	8010a6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fc:	e853 3f00 	ldrex	r3, [r3]
 8010a00:	623b      	str	r3, [r7, #32]
   return(result);
 8010a02:	6a3b      	ldr	r3, [r7, #32]
 8010a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	461a      	mov	r2, r3
 8010a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a1a:	e841 2300 	strex	r3, r2, [r1]
 8010a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d1e6      	bne.n	80109f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	3308      	adds	r3, #8
 8010a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	e853 3f00 	ldrex	r3, [r3]
 8010a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f023 0301 	bic.w	r3, r3, #1
 8010a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	3308      	adds	r3, #8
 8010a44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a46:	61fa      	str	r2, [r7, #28]
 8010a48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a4a:	69b9      	ldr	r1, [r7, #24]
 8010a4c:	69fa      	ldr	r2, [r7, #28]
 8010a4e:	e841 2300 	strex	r3, r2, [r1]
 8010a52:	617b      	str	r3, [r7, #20]
   return(result);
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d1e5      	bne.n	8010a26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2220      	movs	r2, #32
 8010a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2200      	movs	r2, #0
 8010a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	e012      	b.n	8010a94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2220      	movs	r2, #32
 8010a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2220      	movs	r2, #32
 8010a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2200      	movs	r2, #0
 8010a88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a92:	2300      	movs	r3, #0
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3758      	adds	r7, #88	@ 0x58
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	603b      	str	r3, [r7, #0]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010aac:	e04f      	b.n	8010b4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab4:	d04b      	beq.n	8010b4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ab6:	f7f1 ffef 	bl	8002a98 <HAL_GetTick>
 8010aba:	4602      	mov	r2, r0
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	69ba      	ldr	r2, [r7, #24]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d302      	bcc.n	8010acc <UART_WaitOnFlagUntilTimeout+0x30>
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d101      	bne.n	8010ad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010acc:	2303      	movs	r3, #3
 8010ace:	e04e      	b.n	8010b6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f003 0304 	and.w	r3, r3, #4
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d037      	beq.n	8010b4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	2b80      	cmp	r3, #128	@ 0x80
 8010ae2:	d034      	beq.n	8010b4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	2b40      	cmp	r3, #64	@ 0x40
 8010ae8:	d031      	beq.n	8010b4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	69db      	ldr	r3, [r3, #28]
 8010af0:	f003 0308 	and.w	r3, r3, #8
 8010af4:	2b08      	cmp	r3, #8
 8010af6:	d110      	bne.n	8010b1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2208      	movs	r2, #8
 8010afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010b00:	68f8      	ldr	r0, [r7, #12]
 8010b02:	f000 f838 	bl	8010b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2208      	movs	r2, #8
 8010b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010b16:	2301      	movs	r3, #1
 8010b18:	e029      	b.n	8010b6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	69db      	ldr	r3, [r3, #28]
 8010b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010b28:	d111      	bne.n	8010b4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f000 f81e 	bl	8010b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2220      	movs	r2, #32
 8010b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2200      	movs	r2, #0
 8010b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	e00f      	b.n	8010b6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	69da      	ldr	r2, [r3, #28]
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	4013      	ands	r3, r2
 8010b58:	68ba      	ldr	r2, [r7, #8]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	bf0c      	ite	eq
 8010b5e:	2301      	moveq	r3, #1
 8010b60:	2300      	movne	r3, #0
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	461a      	mov	r2, r3
 8010b66:	79fb      	ldrb	r3, [r7, #7]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d0a0      	beq.n	8010aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b6c:	2300      	movs	r3, #0
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b76:	b480      	push	{r7}
 8010b78:	b095      	sub	sp, #84	@ 0x54
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b86:	e853 3f00 	ldrex	r3, [r3]
 8010b8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	461a      	mov	r2, r3
 8010b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010ba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ba4:	e841 2300 	strex	r3, r2, [r1]
 8010ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1e6      	bne.n	8010b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb8:	6a3b      	ldr	r3, [r7, #32]
 8010bba:	e853 3f00 	ldrex	r3, [r3]
 8010bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010bc6:	f023 0301 	bic.w	r3, r3, #1
 8010bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	3308      	adds	r3, #8
 8010bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010bdc:	e841 2300 	strex	r3, r2, [r1]
 8010be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d1e3      	bne.n	8010bb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d118      	bne.n	8010c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	e853 3f00 	ldrex	r3, [r3]
 8010bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	f023 0310 	bic.w	r3, r3, #16
 8010c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c0e:	61bb      	str	r3, [r7, #24]
 8010c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c12:	6979      	ldr	r1, [r7, #20]
 8010c14:	69ba      	ldr	r2, [r7, #24]
 8010c16:	e841 2300 	strex	r3, r2, [r1]
 8010c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d1e6      	bne.n	8010bf0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2220      	movs	r2, #32
 8010c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010c36:	bf00      	nop
 8010c38:	3754      	adds	r7, #84	@ 0x54
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b084      	sub	sp, #16
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2200      	movs	r2, #0
 8010c54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c60:	68f8      	ldr	r0, [r7, #12]
 8010c62:	f7ff fc0b 	bl	801047c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c66:	bf00      	nop
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b088      	sub	sp, #32
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	e853 3f00 	ldrex	r3, [r3]
 8010c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c8a:	61fb      	str	r3, [r7, #28]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	461a      	mov	r2, r3
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	61bb      	str	r3, [r7, #24]
 8010c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c98:	6979      	ldr	r1, [r7, #20]
 8010c9a:	69ba      	ldr	r2, [r7, #24]
 8010c9c:	e841 2300 	strex	r3, r2, [r1]
 8010ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d1e6      	bne.n	8010c76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2220      	movs	r2, #32
 8010cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f7ff fbd6 	bl	8010468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cbc:	bf00      	nop
 8010cbe:	3720      	adds	r7, #32
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b083      	sub	sp, #12
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ccc:	bf00      	nop
 8010cce:	370c      	adds	r7, #12
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	4770      	bx	lr

08010cd8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ce0:	bf00      	nop
 8010ce2:	370c      	adds	r7, #12
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d101      	bne.n	8010d02 <HAL_UARTEx_DisableFifoMode+0x16>
 8010cfe:	2302      	movs	r3, #2
 8010d00:	e027      	b.n	8010d52 <HAL_UARTEx_DisableFifoMode+0x66>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2201      	movs	r2, #1
 8010d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2224      	movs	r2, #36	@ 0x24
 8010d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	f022 0201 	bic.w	r2, r2, #1
 8010d28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010d30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2200      	movs	r2, #0
 8010d36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2220      	movs	r2, #32
 8010d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010d50:	2300      	movs	r3, #0
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3714      	adds	r7, #20
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr

08010d5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b084      	sub	sp, #16
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
 8010d66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d101      	bne.n	8010d76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010d72:	2302      	movs	r3, #2
 8010d74:	e02d      	b.n	8010dd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2201      	movs	r2, #1
 8010d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2224      	movs	r2, #36	@ 0x24
 8010d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f022 0201 	bic.w	r2, r2, #1
 8010d9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	689b      	ldr	r3, [r3, #8]
 8010da4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	683a      	ldr	r2, [r7, #0]
 8010dae:	430a      	orrs	r2, r1
 8010db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 f850 	bl	8010e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2220      	movs	r2, #32
 8010dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3710      	adds	r7, #16
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b084      	sub	sp, #16
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
 8010de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d101      	bne.n	8010df2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010dee:	2302      	movs	r3, #2
 8010df0:	e02d      	b.n	8010e4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2201      	movs	r2, #1
 8010df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2224      	movs	r2, #36	@ 0x24
 8010dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f022 0201 	bic.w	r2, r2, #1
 8010e18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	689b      	ldr	r3, [r3, #8]
 8010e20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	430a      	orrs	r2, r1
 8010e2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 f812 	bl	8010e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2220      	movs	r2, #32
 8010e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2200      	movs	r2, #0
 8010e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e4c:	2300      	movs	r3, #0
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
	...

08010e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d108      	bne.n	8010e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2201      	movs	r2, #1
 8010e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010e78:	e031      	b.n	8010ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010e7a:	2308      	movs	r3, #8
 8010e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010e7e:	2308      	movs	r3, #8
 8010e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	689b      	ldr	r3, [r3, #8]
 8010e88:	0e5b      	lsrs	r3, r3, #25
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	f003 0307 	and.w	r3, r3, #7
 8010e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	689b      	ldr	r3, [r3, #8]
 8010e98:	0f5b      	lsrs	r3, r3, #29
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	f003 0307 	and.w	r3, r3, #7
 8010ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ea2:	7bbb      	ldrb	r3, [r7, #14]
 8010ea4:	7b3a      	ldrb	r2, [r7, #12]
 8010ea6:	4911      	ldr	r1, [pc, #68]	@ (8010eec <UARTEx_SetNbDataToProcess+0x94>)
 8010ea8:	5c8a      	ldrb	r2, [r1, r2]
 8010eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010eae:	7b3a      	ldrb	r2, [r7, #12]
 8010eb0:	490f      	ldr	r1, [pc, #60]	@ (8010ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8010eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ec0:	7bfb      	ldrb	r3, [r7, #15]
 8010ec2:	7b7a      	ldrb	r2, [r7, #13]
 8010ec4:	4909      	ldr	r1, [pc, #36]	@ (8010eec <UARTEx_SetNbDataToProcess+0x94>)
 8010ec6:	5c8a      	ldrb	r2, [r1, r2]
 8010ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010ecc:	7b7a      	ldrb	r2, [r7, #13]
 8010ece:	4908      	ldr	r1, [pc, #32]	@ (8010ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8010ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010ede:	bf00      	nop
 8010ee0:	3714      	adds	r7, #20
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	08011924 	.word	0x08011924
 8010ef0:	0801192c 	.word	0x0801192c

08010ef4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b086      	sub	sp, #24
 8010ef8:	af02      	add	r7, sp, #8
 8010efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010efc:	2300      	movs	r3, #0
 8010efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010f00:	f7f1 fdca 	bl	8002a98 <HAL_GetTick>
 8010f04:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	73fb      	strb	r3, [r7, #15]
 8010f10:	e137      	b.n	8011182 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a76      	ldr	r2, [pc, #472]	@ (80110f0 <HAL_XSPI_Init+0x1fc>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d008      	beq.n	8010f2e <HAL_XSPI_Init+0x3a>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a74      	ldr	r2, [pc, #464]	@ (80110f4 <HAL_XSPI_Init+0x200>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d003      	beq.n	8010f2e <HAL_XSPI_Init+0x3a>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a73      	ldr	r2, [pc, #460]	@ (80110f8 <HAL_XSPI_Init+0x204>)
 8010f2c:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4a72      	ldr	r2, [pc, #456]	@ (80110fc <HAL_XSPI_Init+0x208>)
 8010f34:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4a6d      	ldr	r2, [pc, #436]	@ (80110f0 <HAL_XSPI_Init+0x1fc>)
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d008      	beq.n	8010f52 <HAL_XSPI_Init+0x5e>
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4a6b      	ldr	r2, [pc, #428]	@ (80110f4 <HAL_XSPI_Init+0x200>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d003      	beq.n	8010f52 <HAL_XSPI_Init+0x5e>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4a6a      	ldr	r2, [pc, #424]	@ (80110f8 <HAL_XSPI_Init+0x204>)
 8010f50:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	4a66      	ldr	r2, [pc, #408]	@ (80110f0 <HAL_XSPI_Init+0x1fc>)
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d008      	beq.n	8010f6e <HAL_XSPI_Init+0x7a>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4a64      	ldr	r2, [pc, #400]	@ (80110f4 <HAL_XSPI_Init+0x200>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d003      	beq.n	8010f6e <HAL_XSPI_Init+0x7a>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a63      	ldr	r2, [pc, #396]	@ (80110f8 <HAL_XSPI_Init+0x204>)
 8010f6c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f040 8102 	bne.w	8011182 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f7f0 fe10 	bl	8001ba4 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010f84:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 f8ff 	bl	801118c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	689a      	ldr	r2, [r3, #8]
 8010f94:	4b5a      	ldr	r3, [pc, #360]	@ (8011100 <HAL_XSPI_Init+0x20c>)
 8010f96:	4013      	ands	r3, r2
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	68d1      	ldr	r1, [r2, #12]
 8010f9c:	687a      	ldr	r2, [r7, #4]
 8010f9e:	6912      	ldr	r2, [r2, #16]
 8010fa0:	0412      	lsls	r2, r2, #16
 8010fa2:	4311      	orrs	r1, r2
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	6952      	ldr	r2, [r2, #20]
 8010fa8:	3a01      	subs	r2, #1
 8010faa:	0212      	lsls	r2, r2, #8
 8010fac:	4311      	orrs	r1, r2
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	69d2      	ldr	r2, [r2, #28]
 8010fb2:	4311      	orrs	r1, r2
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	6812      	ldr	r2, [r2, #0]
 8010fb8:	430b      	orrs	r3, r1
 8010fba:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80110f0 <HAL_XSPI_Init+0x1fc>)
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d00e      	beq.n	8010fe4 <HAL_XSPI_Init+0xf0>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4a4a      	ldr	r2, [pc, #296]	@ (80110f4 <HAL_XSPI_Init+0x200>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d009      	beq.n	8010fe4 <HAL_XSPI_Init+0xf0>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	4a48      	ldr	r2, [pc, #288]	@ (80110f8 <HAL_XSPI_Init+0x204>)
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d004      	beq.n	8010fe4 <HAL_XSPI_Init+0xf0>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	4a49      	ldr	r2, [pc, #292]	@ (8011104 <HAL_XSPI_Init+0x210>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d10a      	bne.n	8010ffa <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	689b      	ldr	r3, [r3, #8]
 8010fea:	f023 0108 	bic.w	r1, r3, #8
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	430a      	orrs	r2, r1
 8010ff8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6a1a      	ldr	r2, [r3, #32]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	430a      	orrs	r2, r1
 801100e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801101e:	041a      	lsls	r2, r3, #16
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	430a      	orrs	r2, r1
 8011026:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4a30      	ldr	r2, [pc, #192]	@ (80110f0 <HAL_XSPI_Init+0x1fc>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d00e      	beq.n	8011050 <HAL_XSPI_Init+0x15c>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4a2f      	ldr	r2, [pc, #188]	@ (80110f4 <HAL_XSPI_Init+0x200>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d009      	beq.n	8011050 <HAL_XSPI_Init+0x15c>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4a2d      	ldr	r2, [pc, #180]	@ (80110f8 <HAL_XSPI_Init+0x204>)
 8011042:	4293      	cmp	r3, r2
 8011044:	d004      	beq.n	8011050 <HAL_XSPI_Init+0x15c>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4a2e      	ldr	r2, [pc, #184]	@ (8011104 <HAL_XSPI_Init+0x210>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d10a      	bne.n	8011066 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	691b      	ldr	r3, [r3, #16]
 8011056:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	430a      	orrs	r2, r1
 8011064:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801106e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	3b01      	subs	r3, #1
 8011080:	021a      	lsls	r2, r3, #8
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	430a      	orrs	r2, r1
 8011088:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	2200      	movs	r2, #0
 8011094:	2120      	movs	r1, #32
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 f887 	bl	80111aa <XSPI_WaitFlagStateUntilTimeout>
 801109c:	4603      	mov	r3, r0
 801109e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80110a0:	7bfb      	ldrb	r3, [r7, #15]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d16d      	bne.n	8011182 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	430a      	orrs	r2, r1
 80110ba:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a0e      	ldr	r2, [pc, #56]	@ (80110fc <HAL_XSPI_Init+0x208>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d004      	beq.n	80110d0 <HAL_XSPI_Init+0x1dc>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a0f      	ldr	r2, [pc, #60]	@ (8011108 <HAL_XSPI_Init+0x214>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d11d      	bne.n	801110c <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	2200      	movs	r2, #0
 80110da:	2120      	movs	r1, #32
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 f864 	bl	80111aa <XSPI_WaitFlagStateUntilTimeout>
 80110e2:	4603      	mov	r3, r0
 80110e4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80110e6:	7bfb      	ldrb	r3, [r7, #15]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00f      	beq.n	801110c <HAL_XSPI_Init+0x218>
          {
            return status;
 80110ec:	7bfb      	ldrb	r3, [r7, #15]
 80110ee:	e049      	b.n	8011184 <HAL_XSPI_Init+0x290>
 80110f0:	420d1400 	.word	0x420d1400
 80110f4:	520d1400 	.word	0x520d1400
 80110f8:	420d2400 	.word	0x420d2400
 80110fc:	420d3400 	.word	0x420d3400
 8011100:	f8e0c0fc 	.word	0xf8e0c0fc
 8011104:	520d2400 	.word	0x520d2400
 8011108:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	689a      	ldr	r2, [r3, #8]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	430a      	orrs	r2, r1
 8011120:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801112a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011136:	431a      	orrs	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	430a      	orrs	r2, r1
 801113e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f042 0201 	orr.w	r2, r2, #1
 8011150:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	699b      	ldr	r3, [r3, #24]
 8011156:	2b02      	cmp	r3, #2
 8011158:	d107      	bne.n	801116a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	689a      	ldr	r2, [r3, #8]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f042 0202 	orr.w	r2, r2, #2
 8011168:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011172:	d103      	bne.n	801117c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2201      	movs	r2, #1
 8011178:	655a      	str	r2, [r3, #84]	@ 0x54
 801117a:	e002      	b.n	8011182 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2202      	movs	r2, #2
 8011180:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011182:	7bfb      	ldrb	r3, [r7, #15]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801118c:	b480      	push	{r7}
 801118e:	b083      	sub	sp, #12
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	683a      	ldr	r2, [r7, #0]
 801119a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	370c      	adds	r7, #12
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr

080111aa <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b084      	sub	sp, #16
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	60f8      	str	r0, [r7, #12]
 80111b2:	60b9      	str	r1, [r7, #8]
 80111b4:	603b      	str	r3, [r7, #0]
 80111b6:	4613      	mov	r3, r2
 80111b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80111ba:	e01a      	b.n	80111f2 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c2:	d016      	beq.n	80111f2 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111c4:	f7f1 fc68 	bl	8002a98 <HAL_GetTick>
 80111c8:	4602      	mov	r2, r0
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	1ad3      	subs	r3, r2, r3
 80111ce:	69ba      	ldr	r2, [r7, #24]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d302      	bcc.n	80111da <XSPI_WaitFlagStateUntilTimeout+0x30>
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d10b      	bne.n	80111f2 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111e0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111e6:	f043 0201 	orr.w	r2, r3, #1
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80111ee:	2303      	movs	r3, #3
 80111f0:	e00e      	b.n	8011210 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	6a1a      	ldr	r2, [r3, #32]
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	4013      	ands	r3, r2
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	bf14      	ite	ne
 8011200:	2301      	movne	r3, #1
 8011202:	2300      	moveq	r3, #0
 8011204:	b2db      	uxtb	r3, r3
 8011206:	461a      	mov	r2, r3
 8011208:	79fb      	ldrb	r3, [r7, #7]
 801120a:	429a      	cmp	r2, r3
 801120c:	d1d6      	bne.n	80111bc <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011218:	b084      	sub	sp, #16
 801121a:	b580      	push	{r7, lr}
 801121c:	b084      	sub	sp, #16
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	f107 001c 	add.w	r0, r7, #28
 8011226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801122a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801122e:	2b03      	cmp	r3, #3
 8011230:	d105      	bne.n	801123e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fa8e 	bl	8011760 <USB_CoreReset>
 8011244:	4603      	mov	r3, r0
 8011246:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8011248:	7fbb      	ldrb	r3, [r7, #30]
 801124a:	2b01      	cmp	r3, #1
 801124c:	d10b      	bne.n	8011266 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	689b      	ldr	r3, [r3, #8]
 8011252:	f043 0208 	orr.w	r2, r3, #8
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	689b      	ldr	r3, [r3, #8]
 801125e:	f043 0220 	orr.w	r2, r3, #32
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8011266:	7bfb      	ldrb	r3, [r7, #15]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3710      	adds	r7, #16
 801126c:	46bd      	mov	sp, r7
 801126e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011272:	b004      	add	sp, #16
 8011274:	4770      	bx	lr

08011276 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011276:	b480      	push	{r7}
 8011278:	b083      	sub	sp, #12
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	f023 0201 	bic.w	r2, r3, #1
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	460b      	mov	r3, r1
 80112a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80112a4:	2300      	movs	r3, #0
 80112a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80112b4:	78fb      	ldrb	r3, [r7, #3]
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d115      	bne.n	80112e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80112c6:	200a      	movs	r0, #10
 80112c8:	f7f1 fbf2 	bl	8002ab0 <HAL_Delay>
      ms += 10U;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	330a      	adds	r3, #10
 80112d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 fa36 	bl	8011744 <USB_GetMode>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d01e      	beq.n	801131c <USB_SetCurrentMode+0x84>
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80112e2:	d9f0      	bls.n	80112c6 <USB_SetCurrentMode+0x2e>
 80112e4:	e01a      	b.n	801131c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80112e6:	78fb      	ldrb	r3, [r7, #3]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d115      	bne.n	8011318 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80112f8:	200a      	movs	r0, #10
 80112fa:	f7f1 fbd9 	bl	8002ab0 <HAL_Delay>
      ms += 10U;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	330a      	adds	r3, #10
 8011302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 fa1d 	bl	8011744 <USB_GetMode>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d005      	beq.n	801131c <USB_SetCurrentMode+0x84>
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2bc7      	cmp	r3, #199	@ 0xc7
 8011314:	d9f0      	bls.n	80112f8 <USB_SetCurrentMode+0x60>
 8011316:	e001      	b.n	801131c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011318:	2301      	movs	r3, #1
 801131a:	e005      	b.n	8011328 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2bc8      	cmp	r3, #200	@ 0xc8
 8011320:	d101      	bne.n	8011326 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	e000      	b.n	8011328 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011326:	2300      	movs	r3, #0
}
 8011328:	4618      	mov	r0, r3
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011330:	b084      	sub	sp, #16
 8011332:	b580      	push	{r7, lr}
 8011334:	b086      	sub	sp, #24
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801133e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011342:	2300      	movs	r3, #0
 8011344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801134a:	2300      	movs	r3, #0
 801134c:	613b      	str	r3, [r7, #16]
 801134e:	e009      	b.n	8011364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	3340      	adds	r3, #64	@ 0x40
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	4413      	add	r3, r2
 801135a:	2200      	movs	r2, #0
 801135c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	3301      	adds	r3, #1
 8011362:	613b      	str	r3, [r7, #16]
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	2b0e      	cmp	r3, #14
 8011368:	d9f2      	bls.n	8011350 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801136e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011376:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801137a:	2b00      	cmp	r3, #0
 801137c:	d11c      	bne.n	80113b8 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801138c:	f043 0302 	orr.w	r3, r3, #2
 8011390:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011396:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80113b6:	e011      	b.n	80113dc <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80113e2:	461a      	mov	r2, r3
 80113e4:	2300      	movs	r3, #0
 80113e6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80113e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80113ec:	2b03      	cmp	r3, #3
 80113ee:	d10d      	bne.n	801140c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80113f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d104      	bne.n	8011402 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80113f8:	2100      	movs	r1, #0
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 f968 	bl	80116d0 <USB_SetDevSpeed>
 8011400:	e008      	b.n	8011414 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011402:	2101      	movs	r1, #1
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f000 f963 	bl	80116d0 <USB_SetDevSpeed>
 801140a:	e003      	b.n	8011414 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801140c:	2103      	movs	r1, #3
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 f95e 	bl	80116d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011414:	2110      	movs	r1, #16
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f000 f8fa 	bl	8011610 <USB_FlushTxFifo>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d001      	beq.n	8011426 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8011422:	2301      	movs	r3, #1
 8011424:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f924 	bl	8011674 <USB_FlushRxFifo>
 801142c:	4603      	mov	r3, r0
 801142e:	2b00      	cmp	r3, #0
 8011430:	d001      	beq.n	8011436 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011432:	2301      	movs	r3, #1
 8011434:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801143c:	461a      	mov	r2, r3
 801143e:	2300      	movs	r3, #0
 8011440:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011448:	461a      	mov	r2, r3
 801144a:	2300      	movs	r3, #0
 801144c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011454:	461a      	mov	r2, r3
 8011456:	2300      	movs	r3, #0
 8011458:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801145a:	2300      	movs	r3, #0
 801145c:	613b      	str	r3, [r7, #16]
 801145e:	e043      	b.n	80114e8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	015a      	lsls	r2, r3, #5
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	4413      	add	r3, r2
 8011468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011476:	d118      	bne.n	80114aa <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d10a      	bne.n	8011494 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	015a      	lsls	r2, r3, #5
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	4413      	add	r3, r2
 8011486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801148a:	461a      	mov	r2, r3
 801148c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011490:	6013      	str	r3, [r2, #0]
 8011492:	e013      	b.n	80114bc <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	015a      	lsls	r2, r3, #5
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	4413      	add	r3, r2
 801149c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114a0:	461a      	mov	r2, r3
 80114a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80114a6:	6013      	str	r3, [r2, #0]
 80114a8:	e008      	b.n	80114bc <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	015a      	lsls	r2, r3, #5
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	4413      	add	r3, r2
 80114b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114b6:	461a      	mov	r2, r3
 80114b8:	2300      	movs	r3, #0
 80114ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	015a      	lsls	r2, r3, #5
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	4413      	add	r3, r2
 80114c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114c8:	461a      	mov	r2, r3
 80114ca:	2300      	movs	r3, #0
 80114cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	015a      	lsls	r2, r3, #5
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	4413      	add	r3, r2
 80114d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114da:	461a      	mov	r2, r3
 80114dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80114e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	3301      	adds	r3, #1
 80114e6:	613b      	str	r3, [r7, #16]
 80114e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80114ec:	461a      	mov	r2, r3
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d3b5      	bcc.n	8011460 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114f4:	2300      	movs	r3, #0
 80114f6:	613b      	str	r3, [r7, #16]
 80114f8:	e043      	b.n	8011582 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	015a      	lsls	r2, r3, #5
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	4413      	add	r3, r2
 8011502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801150c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011510:	d118      	bne.n	8011544 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10a      	bne.n	801152e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	015a      	lsls	r2, r3, #5
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	4413      	add	r3, r2
 8011520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011524:	461a      	mov	r2, r3
 8011526:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801152a:	6013      	str	r3, [r2, #0]
 801152c:	e013      	b.n	8011556 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	015a      	lsls	r2, r3, #5
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	4413      	add	r3, r2
 8011536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801153a:	461a      	mov	r2, r3
 801153c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011540:	6013      	str	r3, [r2, #0]
 8011542:	e008      	b.n	8011556 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011550:	461a      	mov	r2, r3
 8011552:	2300      	movs	r3, #0
 8011554:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	015a      	lsls	r2, r3, #5
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	4413      	add	r3, r2
 801155e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011562:	461a      	mov	r2, r3
 8011564:	2300      	movs	r3, #0
 8011566:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	015a      	lsls	r2, r3, #5
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	4413      	add	r3, r2
 8011570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011574:	461a      	mov	r2, r3
 8011576:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801157a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	3301      	adds	r3, #1
 8011580:	613b      	str	r3, [r7, #16]
 8011582:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011586:	461a      	mov	r2, r3
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	4293      	cmp	r3, r2
 801158c:	d3b5      	bcc.n	80114fa <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011594:	691b      	ldr	r3, [r3, #16]
 8011596:	68fa      	ldr	r2, [r7, #12]
 8011598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801159c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80115a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80115ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80115b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d105      	bne.n	80115c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	699b      	ldr	r3, [r3, #24]
 80115bc:	f043 0210 	orr.w	r2, r3, #16
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	699a      	ldr	r2, [r3, #24]
 80115c8:	4b10      	ldr	r3, [pc, #64]	@ (801160c <USB_DevInit+0x2dc>)
 80115ca:	4313      	orrs	r3, r2
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80115d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d005      	beq.n	80115e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	f043 0208 	orr.w	r2, r3, #8
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80115e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d107      	bne.n	80115fc <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	699b      	ldr	r3, [r3, #24]
 80115f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80115f4:	f043 0304 	orr.w	r3, r3, #4
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80115fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3718      	adds	r7, #24
 8011602:	46bd      	mov	sp, r7
 8011604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011608:	b004      	add	sp, #16
 801160a:	4770      	bx	lr
 801160c:	803c3800 	.word	0x803c3800

08011610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011610:	b480      	push	{r7}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801161a:	2300      	movs	r3, #0
 801161c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	3301      	adds	r3, #1
 8011622:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801162a:	d901      	bls.n	8011630 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801162c:	2303      	movs	r3, #3
 801162e:	e01b      	b.n	8011668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	691b      	ldr	r3, [r3, #16]
 8011634:	2b00      	cmp	r3, #0
 8011636:	daf2      	bge.n	801161e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011638:	2300      	movs	r3, #0
 801163a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	019b      	lsls	r3, r3, #6
 8011640:	f043 0220 	orr.w	r2, r3, #32
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	3301      	adds	r3, #1
 801164c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011654:	d901      	bls.n	801165a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011656:	2303      	movs	r3, #3
 8011658:	e006      	b.n	8011668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	691b      	ldr	r3, [r3, #16]
 801165e:	f003 0320 	and.w	r3, r3, #32
 8011662:	2b20      	cmp	r3, #32
 8011664:	d0f0      	beq.n	8011648 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr

08011674 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011674:	b480      	push	{r7}
 8011676:	b085      	sub	sp, #20
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801167c:	2300      	movs	r3, #0
 801167e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	3301      	adds	r3, #1
 8011684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801168c:	d901      	bls.n	8011692 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801168e:	2303      	movs	r3, #3
 8011690:	e018      	b.n	80116c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	2b00      	cmp	r3, #0
 8011698:	daf2      	bge.n	8011680 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801169a:	2300      	movs	r3, #0
 801169c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2210      	movs	r2, #16
 80116a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	3301      	adds	r3, #1
 80116a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80116b0:	d901      	bls.n	80116b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80116b2:	2303      	movs	r3, #3
 80116b4:	e006      	b.n	80116c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	691b      	ldr	r3, [r3, #16]
 80116ba:	f003 0310 	and.w	r3, r3, #16
 80116be:	2b10      	cmp	r3, #16
 80116c0:	d0f0      	beq.n	80116a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3714      	adds	r7, #20
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	460b      	mov	r3, r1
 80116da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	78fb      	ldrb	r3, [r7, #3]
 80116ea:	68f9      	ldr	r1, [r7, #12]
 80116ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80116f0:	4313      	orrs	r3, r2
 80116f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3714      	adds	r7, #20
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr

08011702 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011702:	b480      	push	{r7}
 8011704:	b085      	sub	sp, #20
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801171c:	f023 0303 	bic.w	r3, r3, #3
 8011720:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	68fa      	ldr	r2, [r7, #12]
 801172c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011730:	f043 0302 	orr.w	r3, r3, #2
 8011734:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011736:	2300      	movs	r3, #0
}
 8011738:	4618      	mov	r0, r3
 801173a:	3714      	adds	r7, #20
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011744:	b480      	push	{r7}
 8011746:	b083      	sub	sp, #12
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	695b      	ldr	r3, [r3, #20]
 8011750:	f003 0301 	and.w	r3, r3, #1
}
 8011754:	4618      	mov	r0, r3
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011760:	b480      	push	{r7}
 8011762:	b085      	sub	sp, #20
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011768:	2300      	movs	r3, #0
 801176a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	3301      	adds	r3, #1
 8011770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011778:	d901      	bls.n	801177e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801177a:	2303      	movs	r3, #3
 801177c:	e01b      	b.n	80117b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	691b      	ldr	r3, [r3, #16]
 8011782:	2b00      	cmp	r3, #0
 8011784:	daf2      	bge.n	801176c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011786:	2300      	movs	r3, #0
 8011788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	691b      	ldr	r3, [r3, #16]
 801178e:	f043 0201 	orr.w	r2, r3, #1
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	3301      	adds	r3, #1
 801179a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80117a2:	d901      	bls.n	80117a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80117a4:	2303      	movs	r3, #3
 80117a6:	e006      	b.n	80117b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	f003 0301 	and.w	r3, r3, #1
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d0f0      	beq.n	8011796 <USB_CoreReset+0x36>

  return HAL_OK;
 80117b4:	2300      	movs	r3, #0
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3714      	adds	r7, #20
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr

080117c2 <memset>:
 80117c2:	4402      	add	r2, r0
 80117c4:	4603      	mov	r3, r0
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d100      	bne.n	80117cc <memset+0xa>
 80117ca:	4770      	bx	lr
 80117cc:	f803 1b01 	strb.w	r1, [r3], #1
 80117d0:	e7f9      	b.n	80117c6 <memset+0x4>
	...

080117d4 <__libc_init_array>:
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	4d0d      	ldr	r5, [pc, #52]	@ (801180c <__libc_init_array+0x38>)
 80117d8:	2600      	movs	r6, #0
 80117da:	4c0d      	ldr	r4, [pc, #52]	@ (8011810 <__libc_init_array+0x3c>)
 80117dc:	1b64      	subs	r4, r4, r5
 80117de:	10a4      	asrs	r4, r4, #2
 80117e0:	42a6      	cmp	r6, r4
 80117e2:	d109      	bne.n	80117f8 <__libc_init_array+0x24>
 80117e4:	4d0b      	ldr	r5, [pc, #44]	@ (8011814 <__libc_init_array+0x40>)
 80117e6:	2600      	movs	r6, #0
 80117e8:	4c0b      	ldr	r4, [pc, #44]	@ (8011818 <__libc_init_array+0x44>)
 80117ea:	f000 f817 	bl	801181c <_init>
 80117ee:	1b64      	subs	r4, r4, r5
 80117f0:	10a4      	asrs	r4, r4, #2
 80117f2:	42a6      	cmp	r6, r4
 80117f4:	d105      	bne.n	8011802 <__libc_init_array+0x2e>
 80117f6:	bd70      	pop	{r4, r5, r6, pc}
 80117f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80117fc:	3601      	adds	r6, #1
 80117fe:	4798      	blx	r3
 8011800:	e7ee      	b.n	80117e0 <__libc_init_array+0xc>
 8011802:	f855 3b04 	ldr.w	r3, [r5], #4
 8011806:	3601      	adds	r6, #1
 8011808:	4798      	blx	r3
 801180a:	e7f2      	b.n	80117f2 <__libc_init_array+0x1e>
 801180c:	0801193c 	.word	0x0801193c
 8011810:	0801193c 	.word	0x0801193c
 8011814:	0801193c 	.word	0x0801193c
 8011818:	08011940 	.word	0x08011940

0801181c <_init>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	bf00      	nop
 8011820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011822:	bc08      	pop	{r3}
 8011824:	469e      	mov	lr, r3
 8011826:	4770      	bx	lr

08011828 <_fini>:
 8011828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801182a:	bf00      	nop
 801182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801182e:	bc08      	pop	{r3}
 8011830:	469e      	mov	lr, r3
 8011832:	4770      	bx	lr
