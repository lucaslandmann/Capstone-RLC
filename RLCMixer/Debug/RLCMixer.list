
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118d0  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011b44  08011b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c44  08011c44  0001302c  2**0
                  CONTENTS
  4 .ARM          00000008  08011c44  08011c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c4c  08011c4c  0001302c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c4c  08011c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011c50  08011c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08011c54  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eee4  2000002c  08011c80  0001302c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000ef10  08011c80  00013f10  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001302c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c33  00000000  00000000  00013062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d12  00000000  00000000  00044c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab0  00000000  00000000  000499a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000217b  00000000  00000000  0004c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047326  00000000  00000000  0004e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b12  00000000  00000000  000958f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9d8  00000000  00000000  000cb40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287de3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bdb8  00000000  00000000  00287e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00293be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000002c 	.word	0x2000002c
 8000290:	00000000 	.word	0x00000000
 8000294:	08011b2c 	.word	0x08011b2c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000030 	.word	0x20000030
 80002b0:	08011b2c 	.word	0x08011b2c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fa67 	bl	8002aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8ef 	bl	80007b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f959 	bl	8000890 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f98e 	bl	80008fe <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fefd 	bl	80013e0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb8b 	bl	8000d00 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb4b 	bl	8000c84 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbbf 	bl	8000d70 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc3b 	bl	8000e6c <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc79 	bl	8000eec <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc8b 	bl	8000f14 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd09 	bl	8001014 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdc1 	bl	8001188 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f989 	bl	800091c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe6f 	bl	80012ec <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd4f 	bl	80010b0 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fabd 	bl	8000b90 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbe9 	bl	8000dec <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 feb3 	bl	8001384 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe15 	bl	800124c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000622:	220d      	movs	r2, #13
 8000624:	4952      	ldr	r1, [pc, #328]	@ (8000770 <main+0x1a4>)
 8000626:	4853      	ldr	r0, [pc, #332]	@ (8000774 <main+0x1a8>)
 8000628:	f003 f988 	bl	800393c <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 800062c:	2202      	movs	r2, #2
 800062e:	4952      	ldr	r1, [pc, #328]	@ (8000778 <main+0x1ac>)
 8000630:	4852      	ldr	r0, [pc, #328]	@ (800077c <main+0x1b0>)
 8000632:	f003 f983 	bl	800393c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000636:	4852      	ldr	r0, [pc, #328]	@ (8000780 <main+0x1b4>)
 8000638:	f00e fc02 	bl	800ee40 <HAL_TIM_Base_Start>

  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f002 faf6 	bl	8002c30 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	484e      	ldr	r0, [pc, #312]	@ (8000784 <main+0x1b8>)
 800064a:	f007 f8db 	bl	8007804 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000652:	f002 faed 	bl	8002c30 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e010      	b.n	800067e <main+0xb2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4a49      	ldr	r2, [pc, #292]	@ (8000788 <main+0x1bc>)
 8000662:	441a      	add	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2302      	movs	r3, #2
 800066a:	2190      	movs	r1, #144	@ 0x90
 800066c:	4847      	ldr	r0, [pc, #284]	@ (800078c <main+0x1c0>)
 800066e:	f007 f9d3 	bl	8007a18 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f002 fadc 	bl	8002c30 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b1d      	cmp	r3, #29
 8000682:	d9eb      	bls.n	800065c <main+0x90>
  }

  HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f002 fad3 	bl	8002c30 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 800068a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800068e:	4940      	ldr	r1, [pc, #256]	@ (8000790 <main+0x1c4>)
 8000690:	4840      	ldr	r0, [pc, #256]	@ (8000794 <main+0x1c8>)
 8000692:	f00e f84b 	bl	800e72c <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 8000696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800069a:	493f      	ldr	r1, [pc, #252]	@ (8000798 <main+0x1cc>)
 800069c:	483f      	ldr	r0, [pc, #252]	@ (800079c <main+0x1d0>)
 800069e:	f00d ff43 	bl	800e528 <HAL_SAI_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 80006a2:	f002 fab9 	bl	8002c18 <HAL_GetTick>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006ac:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 80006ae:	f002 fab3 	bl	8002c18 <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d809      	bhi.n	80006ce <main+0x102>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 80006ba:	f002 faad 	bl	8002c18 <HAL_GetTick>
 80006be:	4603      	mov	r3, r0
 80006c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006c4:	60bb      	str	r3, [r7, #8]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80006c6:	2104      	movs	r1, #4
 80006c8:	4835      	ldr	r0, [pc, #212]	@ (80007a0 <main+0x1d4>)
 80006ca:	f007 f8b3 	bl	8007834 <HAL_GPIO_TogglePin>
	  }


	  if(adcReady)
 80006ce:	4b35      	ldr	r3, [pc, #212]	@ (80007a4 <main+0x1d8>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d02c      	beq.n	8000732 <main+0x166>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 80006d8:	2300      	movs	r3, #0
 80006da:	80fb      	strh	r3, [r7, #6]
 80006dc:	e023      	b.n	8000726 <main+0x15a>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 80006de:	2300      	movs	r3, #0
 80006e0:	80bb      	strh	r3, [r7, #4]
 80006e2:	e019      	b.n	8000718 <main+0x14c>
		        {
		        	//int32_t raw = adcData[channelCount*sample + channel] >> 1;
		        	//float convert = (float)raw / 16777216.0f;
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 80006e4:	4b30      	ldr	r3, [pc, #192]	@ (80007a8 <main+0x1dc>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	00d9      	lsls	r1, r3, #3
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	440b      	add	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	88fd      	ldrh	r5, [r7, #6]
 80006f8:	88bc      	ldrh	r4, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffa6 	bl	800164c <signExtend24>
 8000700:	4602      	mov	r2, r0
 8000702:	492a      	ldr	r1, [pc, #168]	@ (80007ac <main+0x1e0>)
 8000704:	f240 230b 	movw	r3, #523	@ 0x20b
 8000708:	fb05 f303 	mul.w	r3, r5, r3
 800070c:	4423      	add	r3, r4
 800070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	80bb      	strh	r3, [r7, #4]
 8000718:	88bb      	ldrh	r3, [r7, #4]
 800071a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800071e:	d3e1      	bcc.n	80006e4 <main+0x118>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	3301      	adds	r3, #1
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2b07      	cmp	r3, #7
 800072a:	d9d8      	bls.n	80006de <main+0x112>
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <main+0x1d8>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <main+0x1e4>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0b8      	beq.n	80006ae <main+0xe2>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 800073c:	2300      	movs	r3, #0
 800073e:	807b      	strh	r3, [r7, #2]
 8000740:	e00e      	b.n	8000760 <main+0x194>
		  {
			  dacData[(sample * 2) + 1] = channels[0].channelData[sample] * gain;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	4a19      	ldr	r2, [pc, #100]	@ (80007ac <main+0x1e0>)
 8000746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <main+0x1e8>)
 800074c:	6819      	ldr	r1, [r3, #0]
 800074e:	887b      	ldrh	r3, [r7, #2]
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	3304      	adds	r3, #4
 8000754:	440b      	add	r3, r1
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	807b      	strh	r3, [r7, #2]
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000766:	d3ec      	bcc.n	8000742 <main+0x176>
		  }
		  dacReady = false;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <main+0x1e4>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 800076e:	e79e      	b.n	80006ae <main+0xe2>
 8000770:	20000d7c 	.word	0x20000d7c
 8000774:	20000048 	.word	0x20000048
 8000778:	20000d98 	.word	0x20000d98
 800077c:	200000d4 	.word	0x200000d4
 8000780:	200007b8 	.word	0x200007b8
 8000784:	42021000 	.word	0x42021000
 8000788:	20000000 	.word	0x20000000
 800078c:	20000354 	.word	0x20000354
 8000790:	20000d9c 	.word	0x20000d9c
 8000794:	2000056c 	.word	0x2000056c
 8000798:	20008d9c 	.word	0x20008d9c
 800079c:	200004d4 	.word	0x200004d4
 80007a0:	42020c00 	.word	0x42020c00
 80007a4:	2000eefc 	.word	0x2000eefc
 80007a8:	2000ef00 	.word	0x2000ef00
 80007ac:	2000ad9c 	.word	0x2000ad9c
 80007b0:	2000eefd 	.word	0x2000eefd
 80007b4:	2000ef04 	.word	0x2000ef04

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09e      	sub	sp, #120	@ 0x78
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	2260      	movs	r2, #96	@ 0x60
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f011 f983 	bl	8011ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
 80007da:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007dc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007e0:	f008 ff5e 	bl	80096a0 <HAL_PWREx_ControlVoltageScaling>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007ea:	f000 ff9d 	bl	8001728 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ee:	f008 ff47 	bl	8009680 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <SystemClock_Config+0xd4>)
 80007f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007f8:	4a24      	ldr	r2, [pc, #144]	@ (800088c <SystemClock_Config+0xd4>)
 80007fa:	f023 0318 	bic.w	r3, r3, #24
 80007fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000802:	2307      	movs	r3, #7
 8000804:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000806:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800080c:	2381      	movs	r3, #129	@ 0x81
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	2303      	movs	r3, #3
 8000820:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800082a:	2308      	movs	r3, #8
 800082c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800082e:	2308      	movs	r3, #8
 8000830:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800083a:	230c      	movs	r3, #12
 800083c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	4618      	mov	r0, r3
 8000848:	f009 f854 	bl	80098f4 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000852:	f000 ff69 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	231f      	movs	r3, #31
 8000858:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2303      	movs	r3, #3
 800085c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2103      	movs	r1, #3
 8000872:	4618      	mov	r0, r3
 8000874:	f009 ff1a 	bl	800a6ac <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800087e:	f000 ff53 	bl	8001728 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3778      	adds	r7, #120	@ 0x78
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	46020c00 	.word	0x46020c00

08000890 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0b8      	sub	sp, #224	@ 0xe0
 8000894:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	22e0      	movs	r2, #224	@ 0xe0
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f011 f918 	bl	8011ad2 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80008a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a6:	f04f 0301 	mov.w	r3, #1
 80008aa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80008b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80008bc:	2303      	movs	r3, #3
 80008be:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80008c4:	230c      	movs	r3, #12
 80008c6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80008cc:	2303      	movs	r3, #3
 80008ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008d4:	230c      	movs	r3, #12
 80008d6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 80008de:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00a fab0 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 80008f2:	f000 ff19 	bl	8001728 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	37e0      	adds	r7, #224	@ 0xe0
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000902:	f008 ffb9 	bl	8009878 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000906:	2002      	movs	r0, #2
 8000908:	f008 ff56 	bl	80097b8 <HAL_PWREx_ConfigSupply>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000912:	f000 ff09 	bl	8001728 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2220      	movs	r2, #32
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f011 f8d2 	bl	8011ad2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800092e:	4b89      	ldr	r3, [pc, #548]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000930:	4a89      	ldr	r2, [pc, #548]	@ (8000b58 <MX_ADC1_Init+0x23c>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000934:	4b87      	ldr	r3, [pc, #540]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800093a:	4b86      	ldr	r3, [pc, #536]	@ (8000b54 <MX_ADC1_Init+0x238>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000940:	4b84      	ldr	r3, [pc, #528]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b83      	ldr	r3, [pc, #524]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800094c:	4b81      	ldr	r3, [pc, #516]	@ (8000b54 <MX_ADC1_Init+0x238>)
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000952:	4b80      	ldr	r3, [pc, #512]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000954:	2204      	movs	r2, #4
 8000956:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000958:	4b7e      	ldr	r3, [pc, #504]	@ (8000b54 <MX_ADC1_Init+0x238>)
 800095a:	2201      	movs	r2, #1
 800095c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800095e:	4b7d      	ldr	r3, [pc, #500]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000960:	2201      	movs	r2, #1
 8000962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000966:	4b7b      	ldr	r3, [pc, #492]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000968:	220d      	movs	r2, #13
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800096c:	4b79      	ldr	r3, [pc, #484]	@ (8000b54 <MX_ADC1_Init+0x238>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000974:	4b77      	ldr	r3, [pc, #476]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000976:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800097a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800097c:	4b75      	ldr	r3, [pc, #468]	@ (8000b54 <MX_ADC1_Init+0x238>)
 800097e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000982:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000984:	4b73      	ldr	r3, [pc, #460]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000986:	2201      	movs	r2, #1
 8000988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800098c:	4b71      	ldr	r3, [pc, #452]	@ (8000b54 <MX_ADC1_Init+0x238>)
 800098e:	2200      	movs	r2, #0
 8000990:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000992:	4b70      	ldr	r3, [pc, #448]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000994:	2200      	movs	r2, #0
 8000996:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000998:	4b6e      	ldr	r3, [pc, #440]	@ (8000b54 <MX_ADC1_Init+0x238>)
 800099a:	2200      	movs	r2, #0
 800099c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800099e:	4b6d      	ldr	r3, [pc, #436]	@ (8000b54 <MX_ADC1_Init+0x238>)
 80009a0:	2203      	movs	r2, #3
 80009a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000b54 <MX_ADC1_Init+0x238>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ac:	4869      	ldr	r0, [pc, #420]	@ (8000b54 <MX_ADC1_Init+0x238>)
 80009ae:	f002 fcdd 	bl	800336c <HAL_ADC_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80009b8:	f000 feb6 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009bc:	4b67      	ldr	r3, [pc, #412]	@ (8000b5c <MX_ADC1_Init+0x240>)
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c0:	2306      	movs	r3, #6
 80009c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ce:	2304      	movs	r3, #4
 80009d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	485e      	ldr	r0, [pc, #376]	@ (8000b54 <MX_ADC1_Init+0x238>)
 80009dc:	f003 fbf4 	bl	80041c8 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80009e6:	f000 fe9f 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ea:	4b5d      	ldr	r3, [pc, #372]	@ (8000b60 <MX_ADC1_Init+0x244>)
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ee:	230c      	movs	r3, #12
 80009f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4857      	ldr	r0, [pc, #348]	@ (8000b54 <MX_ADC1_Init+0x238>)
 80009f8:	f003 fbe6 	bl	80041c8 <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000a02:	f000 fe91 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a06:	4b57      	ldr	r3, [pc, #348]	@ (8000b64 <MX_ADC1_Init+0x248>)
 8000a08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4850      	ldr	r0, [pc, #320]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000a14:	f003 fbd8 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a1e:	f000 fe83 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a22:	4b51      	ldr	r3, [pc, #324]	@ (8000b68 <MX_ADC1_Init+0x24c>)
 8000a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a26:	2318      	movs	r3, #24
 8000a28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4849      	ldr	r0, [pc, #292]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000a30:	f003 fbca 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a3a:	f000 fe75 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b6c <MX_ADC1_Init+0x250>)
 8000a40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4841      	ldr	r0, [pc, #260]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000a4e:	f003 fbbb 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a58:	f000 fe66 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a5c:	4b44      	ldr	r3, [pc, #272]	@ (8000b70 <MX_ADC1_Init+0x254>)
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a60:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	483a      	ldr	r0, [pc, #232]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000a6c:	f003 fbac 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a76:	f000 fe57 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b74 <MX_ADC1_Init+0x258>)
 8000a7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a7e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4832      	ldr	r0, [pc, #200]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000a8a:	f003 fb9d 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a94:	f000 fe48 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a98:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <MX_ADC1_Init+0x25c>)
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a9c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000aa0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	482b      	ldr	r0, [pc, #172]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000aa8:	f003 fb8e 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000ab2:	f000 fe39 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ab6:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <MX_ADC1_Init+0x260>)
 8000ab8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000aba:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4823      	ldr	r0, [pc, #140]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000ac6:	f003 fb7f 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000ad0:	f000 fe2a 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <MX_ADC1_Init+0x264>)
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000adc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481c      	ldr	r0, [pc, #112]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000ae4:	f003 fb70 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000aee:	f000 fe1b 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000af2:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <MX_ADC1_Init+0x268>)
 8000af4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000af6:	f240 2306 	movw	r3, #518	@ 0x206
 8000afa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000b02:	f003 fb61 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b0c:	f000 fe0c 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_ADC1_Init+0x26c>)
 8000b12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b14:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000b20:	f003 fb52 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b2a:	f000 fdfd 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <MX_ADC1_Init+0x270>)
 8000b30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b32:	f240 2312 	movw	r3, #530	@ 0x212
 8000b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_ADC1_Init+0x238>)
 8000b3e:	f003 fb43 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b48:	f000 fdee 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000048 	.word	0x20000048
 8000b58:	42028000 	.word	0x42028000
 8000b5c:	04000002 	.word	0x04000002
 8000b60:	08000004 	.word	0x08000004
 8000b64:	0c000008 	.word	0x0c000008
 8000b68:	10000010 	.word	0x10000010
 8000b6c:	14000020 	.word	0x14000020
 8000b70:	1c000080 	.word	0x1c000080
 8000b74:	20000100 	.word	0x20000100
 8000b78:	2a000400 	.word	0x2a000400
 8000b7c:	2e000800 	.word	0x2e000800
 8000b80:	32001000 	.word	0x32001000
 8000b84:	3e008000 	.word	0x3e008000
 8000b88:	42010000 	.word	0x42010000
 8000b8c:	ce080000 	.word	0xce080000

08000b90 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f010 ff98 	bl	8011ad2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ba2:	4b34      	ldr	r3, [pc, #208]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000ba4:	4a34      	ldr	r2, [pc, #208]	@ (8000c78 <MX_ADC4_Init+0xe8>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba8:	4b32      	ldr	r3, [pc, #200]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000bae:	4b31      	ldr	r3, [pc, #196]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000bba:	4b2e      	ldr	r3, [pc, #184]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bbc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bc0:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bce:	4b29      	ldr	r3, [pc, #164]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000bf8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bfc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c18:	4816      	ldr	r0, [pc, #88]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000c1a:	f002 fba7 	bl	800336c <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c24:	f000 fd80 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_ADC4_Init+0xec>)
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c34:	2304      	movs	r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000c42:	f003 fac1 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c4c:	f000 fd6c 	bl	8001728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_ADC4_Init+0xf0>)
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c54:	2304      	movs	r3, #4
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_ADC4_Init+0xe4>)
 8000c5e:	f003 fab3 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c68:	f000 fd5e 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000d4 	.word	0x200000d4
 8000c78:	46021000 	.word	0x46021000
 8000c7c:	1c000080 	.word	0x1c000080
 8000c80:	20000100 	.word	0x20000100

08000c84 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <MX_DMA2D_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cd0:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cd2:	f005 fa03 	bl	80060dc <HAL_DMA2D_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 fd24 	bl	8001728 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_DMA2D_Init+0x74>)
 8000ce4:	f005 fa5c 	bl	80061a0 <HAL_DMA2D_ConfigLayer>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 fd1b 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000028c 	.word	0x2000028c
 8000cfc:	4002b000 	.word	0x4002b000

08000d00 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <MX_GPDMA1_Init+0x6c>)
 8000d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0c:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <MX_GPDMA1_Init+0x6c>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_GPDMA1_Init+0x6c>)
 8000d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	201d      	movs	r0, #29
 8000d2a:	f004 fa79 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d2e:	201d      	movs	r0, #29
 8000d30:	f004 fa90 	bl	8005254 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	201e      	movs	r0, #30
 8000d3a:	f004 fa71 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d3e:	201e      	movs	r0, #30
 8000d40:	f004 fa88 	bl	8005254 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	201f      	movs	r0, #31
 8000d4a:	f004 fa69 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d4e:	201f      	movs	r0, #31
 8000d50:	f004 fa80 	bl	8005254 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	2020      	movs	r0, #32
 8000d5a:	f004 fa61 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d5e:	2020      	movs	r0, #32
 8000d60:	f004 fa78 	bl	8005254 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	46020c00 	.word	0x46020c00

08000d70 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <MX_HSPI1_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000d88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d8c:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000d90:	221a      	movs	r2, #26
 8000d92:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_HSPI1_Init+0x74>)
 8000dd2:	f010 fa17 	bl	8011204 <HAL_XSPI_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f000 fca4 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200002f4 	.word	0x200002f4
 8000de8:	420d3400 	.word	0x420d3400

08000dec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000df2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <MX_I2C1_Init+0x78>)
 8000df4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000df8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <MX_I2C1_Init+0x7c>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e26:	480e      	ldr	r0, [pc, #56]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e28:	f006 fd5a 	bl	80078e0 <HAL_I2C_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e32:	f000 fc79 	bl	8001728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4809      	ldr	r0, [pc, #36]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e3a:	f007 fee5 	bl	8008c08 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e44:	f000 fc70 	bl	8001728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_I2C1_Init+0x74>)
 8000e4c:	f007 ff27 	bl	8008c9e <HAL_I2CEx_ConfigDigitalFilter>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 fc67 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000354 	.word	0x20000354
 8000e64:	40005400 	.word	0x40005400
 8000e68:	20a0c4df 	.word	0x20a0c4df

08000e6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee4 <MX_I2C2_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <MX_I2C2_Init+0x7c>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea6:	480e      	ldr	r0, [pc, #56]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000ea8:	f006 fd1a 	bl	80078e0 <HAL_I2C_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eb2:	f000 fc39 	bl	8001728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000eba:	f007 fea5 	bl	8008c08 <HAL_I2CEx_ConfigAnalogFilter>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f000 fc30 	bl	8001728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_I2C2_Init+0x74>)
 8000ecc:	f007 fee7 	bl	8008c9e <HAL_I2CEx_ConfigDigitalFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 fc27 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200003a8 	.word	0x200003a8
 8000ee4:	40005800 	.word	0x40005800
 8000ee8:	20a0c4df 	.word	0x20a0c4df

08000eec <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f007 ff21 	bl	8008d38 <HAL_ICACHE_ConfigAssociativityMode>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000efc:	f000 fc14 	bl	8001728 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f00:	f007 ff3a 	bl	8008d78 <HAL_ICACHE_Enable>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f0a:	f000 fc0d 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	@ 0x38
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2234      	movs	r2, #52	@ 0x34
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f010 fdd6 	bl	8011ad2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f26:	4b39      	ldr	r3, [pc, #228]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f28:	4a39      	ldr	r2, [pc, #228]	@ (8001010 <MX_LTDC_Init+0xfc>)
 8000f2a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f2c:	4b37      	ldr	r3, [pc, #220]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f32:	4b36      	ldr	r3, [pc, #216]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f38:	4b34      	ldr	r3, [pc, #208]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f3e:	4b33      	ldr	r3, [pc, #204]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f44:	4b31      	ldr	r3, [pc, #196]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f46:	2203      	movs	r2, #3
 8000f48:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f4a:	4b30      	ldr	r3, [pc, #192]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f50:	4b2e      	ldr	r3, [pc, #184]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f52:	220b      	movs	r2, #11
 8000f54:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f56:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f58:	220b      	movs	r2, #11
 8000f5a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f5e:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f62:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f64:	4b29      	ldr	r3, [pc, #164]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f66:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f6e:	f240 3233 	movw	r2, #819	@ 0x333
 8000f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f74:	4b25      	ldr	r3, [pc, #148]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f76:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f84:	4b21      	ldr	r3, [pc, #132]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f94:	481d      	ldr	r0, [pc, #116]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000f96:	f007 feff 	bl	8008d98 <HAL_LTDC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fa0:	f000 fbc2 	bl	8001728 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fa8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fb2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fb6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fbc:	23ff      	movs	r3, #255	@ 0xff
 8000fbe:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fc4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <MX_LTDC_Init+0xf8>)
 8000ff4:	f008 f862 	bl	80090bc <HAL_LTDC_ConfigLayer>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000ffe:	f000 fb93 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	@ 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200003fc 	.word	0x200003fc
 8001010:	40016800 	.word	0x40016800

08001014 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800102c:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <MX_RTC_Init+0x94>)
 800102e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <MX_RTC_Init+0x98>)
 8001030:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <MX_RTC_Init+0x94>)
 800103a:	227f      	movs	r2, #127	@ 0x7f
 800103c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001040:	22ff      	movs	r2, #255	@ 0xff
 8001042:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_RTC_Init+0x94>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001058:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800105e:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001064:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800106a:	480f      	ldr	r0, [pc, #60]	@ (80010a8 <MX_RTC_Init+0x94>)
 800106c:	f00c feea 	bl	800de44 <HAL_RTC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001076:	f000 fb57 	bl	8001728 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <MX_RTC_Init+0x94>)
 8001090:	f00d f806 	bl	800e0a0 <HAL_RTCEx_PrivilegeModeSet>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800109a:	f000 fb45 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200004a4 	.word	0x200004a4
 80010ac:	46007800 	.word	0x46007800

080010b0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010b6:	4a30      	ldr	r2, [pc, #192]	@ (8001178 <MX_SAI2_Init+0xc8>)
 80010b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010cc:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80010d8:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010da:	4a28      	ldr	r2, [pc, #160]	@ (800117c <MX_SAI2_Init+0xcc>)
 80010dc:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010de:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010e4:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010ea:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010ec:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010f2:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <MX_SAI2_Init+0xc4>)
 80010fa:	2210      	movs	r2, #16
 80010fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80010fe:	2302      	movs	r3, #2
 8001100:	2202      	movs	r2, #2
 8001102:	2101      	movs	r1, #1
 8001104:	481b      	ldr	r0, [pc, #108]	@ (8001174 <MX_SAI2_Init+0xc4>)
 8001106:	f00c fff9 	bl	800e0fc <HAL_SAI_InitProtocol>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001110:	f000 fb0a 	bl	8001728 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001116:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <MX_SAI2_Init+0xd4>)
 8001118:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <MX_SAI2_Init+0xd0>)
 800111c:	2201      	movs	r2, #1
 800111e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_SAI2_Init+0xd0>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001134:	2202      	movs	r2, #2
 8001136:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_SAI2_Init+0xd0>)
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <MX_SAI2_Init+0xcc>)
 800113c:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001146:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800114a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_SAI2_Init+0xd0>)
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001154:	2200      	movs	r2, #0
 8001156:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001158:	2308      	movs	r3, #8
 800115a:	2202      	movs	r2, #2
 800115c:	2100      	movs	r1, #0
 800115e:	4808      	ldr	r0, [pc, #32]	@ (8001180 <MX_SAI2_Init+0xd0>)
 8001160:	f00c ffcc 	bl	800e0fc <HAL_SAI_InitProtocol>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 800116a:	f000 fadd 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200004d4 	.word	0x200004d4
 8001178:	40015804 	.word	0x40015804
 800117c:	00017700 	.word	0x00017700
 8001180:	2000056c 	.word	0x2000056c
 8001184:	40015824 	.word	0x40015824

08001188 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011ae:	4a26      	ldr	r2, [pc, #152]	@ (8001248 <MX_TIM3_Init+0xc0>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011b4:	22a0      	movs	r2, #160	@ 0xa0
 80011b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011c0:	2264      	movs	r2, #100	@ 0x64
 80011c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011d0:	481c      	ldr	r0, [pc, #112]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011d2:	f00d fecd 	bl	800ef70 <HAL_TIM_PWM_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011dc:	f000 faa4 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4815      	ldr	r0, [pc, #84]	@ (8001244 <MX_TIM3_Init+0xbc>)
 80011f0:	f00e fea4 	bl	800ff3c <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011fa:	f000 fa95 	bl	8001728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fe:	2360      	movs	r3, #96	@ 0x60
 8001200:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001202:	234b      	movs	r3, #75	@ 0x4b
 8001204:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	220c      	movs	r2, #12
 8001212:	4619      	mov	r1, r3
 8001214:	480b      	ldr	r0, [pc, #44]	@ (8001244 <MX_TIM3_Init+0xbc>)
 8001216:	f00d ff03 	bl	800f020 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001220:	f000 fa82 	bl	8001728 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <MX_TIM3_Init+0xbc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69da      	ldr	r2, [r3, #28]
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_TIM3_Init+0xbc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001232:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001234:	4803      	ldr	r0, [pc, #12]	@ (8001244 <MX_TIM3_Init+0xbc>)
 8001236:	f001 f825 	bl	8002284 <HAL_TIM_MspPostInit>

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000076c 	.word	0x2000076c
 8001248:	40000400 	.word	0x40000400

0800124c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <MX_TIM15_Init+0x98>)
 800126c:	4a1e      	ldr	r2, [pc, #120]	@ (80012e8 <MX_TIM15_Init+0x9c>)
 800126e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_TIM15_Init+0x98>)
 8001272:	221a      	movs	r2, #26
 8001274:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_TIM15_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <MX_TIM15_Init+0x98>)
 800127e:	2231      	movs	r2, #49	@ 0x31
 8001280:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_TIM15_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_TIM15_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_TIM15_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001294:	4813      	ldr	r0, [pc, #76]	@ (80012e4 <MX_TIM15_Init+0x98>)
 8001296:	f00d fd7c 	bl	800ed92 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80012a0:	f000 fa42 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <MX_TIM15_Init+0x98>)
 80012b2:	f00d ffc9 	bl	800f248 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80012bc:	f000 fa34 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012c0:	2320      	movs	r3, #32
 80012c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_TIM15_Init+0x98>)
 80012ce:	f00e fe35 	bl	800ff3c <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80012d8:	f000 fa26 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200007b8 	.word	0x200007b8
 80012e8:	40014000 	.word	0x40014000

080012ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f0:	4b22      	ldr	r3, [pc, #136]	@ (800137c <MX_USART1_UART_Init+0x90>)
 80012f2:	4a23      	ldr	r2, [pc, #140]	@ (8001380 <MX_USART1_UART_Init+0x94>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <MX_USART1_UART_Init+0x90>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <MX_USART1_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_USART1_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_USART1_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001334:	4811      	ldr	r0, [pc, #68]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001336:	f00e fec3 	bl	80100c0 <HAL_UART_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001340:	f000 f9f2 	bl	8001728 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	480d      	ldr	r0, [pc, #52]	@ (800137c <MX_USART1_UART_Init+0x90>)
 8001348:	f00f fe91 	bl	801106e <HAL_UARTEx_SetTxFifoThreshold>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001352:	f000 f9e9 	bl	8001728 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4808      	ldr	r0, [pc, #32]	@ (800137c <MX_USART1_UART_Init+0x90>)
 800135a:	f00f fec6 	bl	80110ea <HAL_UARTEx_SetRxFifoThreshold>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 f9e0 	bl	8001728 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <MX_USART1_UART_Init+0x90>)
 800136a:	f00f fe47 	bl	8010ffc <HAL_UARTEx_DisableFifoMode>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f9d8 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000804 	.word	0x20000804
 8001380:	40013800 	.word	0x40013800

08001384 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800138a:	4a14      	ldr	r2, [pc, #80]	@ (80013dc <MX_USB_OTG_HS_PCD_Init+0x58>)
 800138c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001390:	2209      	movs	r2, #9
 8001392:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001396:	2200      	movs	r2, #0
 8001398:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800139c:	2203      	movs	r2, #3
 800139e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013c6:	f008 f82a 	bl	800941e <HAL_PCD_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013d0:	f000 f9aa 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000898 	.word	0x20000898
 80013dc:	42040000 	.word	0x42040000

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	@ 0x38
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001628 <MX_GPIO_Init+0x248>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	4a8a      	ldr	r2, [pc, #552]	@ (8001628 <MX_GPIO_Init+0x248>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001406:	4b88      	ldr	r3, [pc, #544]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b84      	ldr	r3, [pc, #528]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141a:	4a83      	ldr	r2, [pc, #524]	@ (8001628 <MX_GPIO_Init+0x248>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001424:	4b80      	ldr	r3, [pc, #512]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	4b7d      	ldr	r3, [pc, #500]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001438:	4a7b      	ldr	r2, [pc, #492]	@ (8001628 <MX_GPIO_Init+0x248>)
 800143a:	f043 0320 	orr.w	r3, r3, #32
 800143e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001442:	4b79      	ldr	r3, [pc, #484]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001450:	4b75      	ldr	r3, [pc, #468]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001456:	4a74      	ldr	r2, [pc, #464]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001460:	4b71      	ldr	r3, [pc, #452]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b6e      	ldr	r3, [pc, #440]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001474:	4a6c      	ldr	r2, [pc, #432]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800147e:	4b6a      	ldr	r3, [pc, #424]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	4b66      	ldr	r3, [pc, #408]	@ (8001628 <MX_GPIO_Init+0x248>)
 800148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001492:	4a65      	ldr	r2, [pc, #404]	@ (8001628 <MX_GPIO_Init+0x248>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800149c:	4b62      	ldr	r3, [pc, #392]	@ (8001628 <MX_GPIO_Init+0x248>)
 800149e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c8:	4b57      	ldr	r3, [pc, #348]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ce:	4a56      	ldr	r2, [pc, #344]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d8:	4b53      	ldr	r3, [pc, #332]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014e6:	4b50      	ldr	r3, [pc, #320]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001628 <MX_GPIO_Init+0x248>)
 80014f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2104      	movs	r1, #4
 8001508:	4848      	ldr	r0, [pc, #288]	@ (800162c <MX_GPIO_Init+0x24c>)
 800150a:	f006 f97b 	bl	8007804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2110      	movs	r1, #16
 8001512:	4846      	ldr	r0, [pc, #280]	@ (800162c <MX_GPIO_Init+0x24c>)
 8001514:	f006 f976 	bl	8007804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2114      	movs	r1, #20
 800151c:	4844      	ldr	r0, [pc, #272]	@ (8001630 <MX_GPIO_Init+0x250>)
 800151e:	f006 f971 	bl	8007804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001522:	2314      	movs	r3, #20
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	483c      	ldr	r0, [pc, #240]	@ (800162c <MX_GPIO_Init+0x24c>)
 800153a:	f005 ff8b 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800153e:	2320      	movs	r3, #32
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001542:	4b3c      	ldr	r3, [pc, #240]	@ (8001634 <MX_GPIO_Init+0x254>)
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4836      	ldr	r0, [pc, #216]	@ (800162c <MX_GPIO_Init+0x24c>)
 8001552:	f005 ff7f 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001556:	2302      	movs	r3, #2
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800155a:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <MX_GPIO_Init+0x258>)
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4834      	ldr	r0, [pc, #208]	@ (800163c <MX_GPIO_Init+0x25c>)
 800156a:	f005 ff73 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 800156e:	2310      	movs	r3, #16
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <MX_GPIO_Init+0x260>)
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001576:	2301      	movs	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	482e      	ldr	r0, [pc, #184]	@ (800163c <MX_GPIO_Init+0x25c>)
 8001582:	f005 ff67 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001586:	2314      	movs	r3, #20
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4824      	ldr	r0, [pc, #144]	@ (8001630 <MX_GPIO_Init+0x250>)
 800159e:	f005 ff59 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	481e      	ldr	r0, [pc, #120]	@ (8001630 <MX_GPIO_Init+0x250>)
 80015b6:	f005 ff4d 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80015ba:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	481d      	ldr	r0, [pc, #116]	@ (8001644 <MX_GPIO_Init+0x264>)
 80015d0:	f005 ff40 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015d4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4817      	ldr	r0, [pc, #92]	@ (8001648 <MX_GPIO_Init+0x268>)
 80015ea:	f005 ff33 	bl	8007454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	200c      	movs	r0, #12
 80015f4:	f003 fe14 	bl	8005220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015f8:	200c      	movs	r0, #12
 80015fa:	f003 fe2b 	bl	8005254 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200f      	movs	r0, #15
 8001604:	f003 fe0c 	bl	8005220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001608:	200f      	movs	r0, #15
 800160a:	f003 fe23 	bl	8005254 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2010      	movs	r0, #16
 8001614:	f003 fe04 	bl	8005220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001618:	2010      	movs	r0, #16
 800161a:	f003 fe1b 	bl	8005254 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	3738      	adds	r7, #56	@ 0x38
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	46020c00 	.word	0x46020c00
 800162c:	42021000 	.word	0x42021000
 8001630:	42020c00 	.word	0x42020c00
 8001634:	10110000 	.word	0x10110000
 8001638:	10310000 	.word	0x10310000
 800163c:	42020000 	.word	0x42020000
 8001640:	10210000 	.word	0x10210000
 8001644:	42021800 	.word	0x42021800
 8001648:	42020400 	.word	0x42020400

0800164c <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <signExtend24+0x1a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001664:	e002      	b.n	800166c <signExtend24+0x20>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_SAI_RxHalfCpltCallback+0x20>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_SAI_RxHalfCpltCallback+0x24>)
 8001688:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <HAL_SAI_RxHalfCpltCallback+0x28>)
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	2000eefc 	.word	0x2000eefc
 800169c:	2000ef00 	.word	0x2000ef00
 80016a0:	20000d9c 	.word	0x20000d9c

080016a4 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_SAI_RxCpltCallback+0x20>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_SAI_RxCpltCallback+0x24>)
 80016b4:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <HAL_SAI_RxCpltCallback+0x28>)
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	2000eefc 	.word	0x2000eefc
 80016c8:	2000ef00 	.word	0x2000ef00
 80016cc:	20004d9c 	.word	0x20004d9c

080016d0 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	dacReady = true;
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_SAI_TxHalfCpltCallback+0x20>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_SAI_TxHalfCpltCallback+0x24>)
 80016e0:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <HAL_SAI_TxHalfCpltCallback+0x28>)
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	2000eefd 	.word	0x2000eefd
 80016f4:	2000ef04 	.word	0x2000ef04
 80016f8:	20008d9c 	.word	0x20008d9c

080016fc <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_SAI_TxCpltCallback+0x20>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_SAI_TxCpltCallback+0x24>)
 800170c:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <HAL_SAI_TxCpltCallback+0x28>)
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	2000eefd 	.word	0x2000eefd
 8001720:	2000ef04 	.word	0x2000ef04
 8001724:	20009d9c 	.word	0x20009d9c

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <Error_Handler+0x8>

08001734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_MspInit+0x30>)
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001740:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <HAL_MspInit+0x30>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_MspInit+0x30>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001758:	f008 f89e 	bl	8009898 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	46020c00 	.word	0x46020c00

08001768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0e0      	sub	sp, #384	@ 0x180
 800176c:	af00      	add	r7, sp, #0
 800176e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001772:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001776:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800178c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001790:	4618      	mov	r0, r3
 8001792:	23e0      	movs	r3, #224	@ 0xe0
 8001794:	461a      	mov	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	f010 f99b 	bl	8011ad2 <memset>
  if(hadc->Instance==ADC1)
 800179c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017a0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4aa1      	ldr	r2, [pc, #644]	@ (8001a30 <HAL_ADC_MspInit+0x2c8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	f040 8152 	bne.w	8001a54 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80017b0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017b4:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80017b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80017c4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017c8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	4618      	mov	r0, r3
 80017da:	f009 fb37 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80017e4:	f7ff ffa0 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017e8:	4b92      	ldr	r3, [pc, #584]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ee:	4a91      	ldr	r2, [pc, #580]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 80017f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 80017fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017fe:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001802:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001806:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001810:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001814:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b87      	ldr	r3, [pc, #540]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 8001818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181c:	4a85      	ldr	r2, [pc, #532]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001826:	4b83      	ldr	r3, [pc, #524]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 8001828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800182c:	f003 0204 	and.w	r2, r3, #4
 8001830:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001834:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800183e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001842:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	4b7b      	ldr	r3, [pc, #492]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 8001846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184a:	4a7a      	ldr	r2, [pc, #488]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001854:	4b77      	ldr	r3, [pc, #476]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 8001856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001862:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800186c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001870:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b70      	ldr	r3, [pc, #448]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 8001874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001878:	4a6e      	ldr	r2, [pc, #440]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001882:	4b6c      	ldr	r3, [pc, #432]	@ (8001a34 <HAL_ADC_MspInit+0x2cc>)
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001888:	f003 0202 	and.w	r2, r3, #2
 800188c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001890:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800189a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800189e:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80018a0:	230f      	movs	r3, #15
 80018a2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018b6:	4619      	mov	r1, r3
 80018b8:	485f      	ldr	r0, [pc, #380]	@ (8001a38 <HAL_ADC_MspInit+0x2d0>)
 80018ba:	f005 fdcb 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80018be:	23ed      	movs	r3, #237	@ 0xed
 80018c0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4859      	ldr	r0, [pc, #356]	@ (8001a3c <HAL_ADC_MspInit+0x2d4>)
 80018d8:	f005 fdbc 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018f2:	4619      	mov	r1, r3
 80018f4:	4852      	ldr	r0, [pc, #328]	@ (8001a40 <HAL_ADC_MspInit+0x2d8>)
 80018f6:	f005 fdad 	bl	8007454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80018fa:	2321      	movs	r3, #33	@ 0x21
 80018fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001918:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800191c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001920:	2301      	movs	r3, #1
 8001922:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001926:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800192a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800193a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800193e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8001954:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001958:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 800195c:	232b      	movs	r3, #43	@ 0x2b
 800195e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 800196e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001972:	4934      	ldr	r1, [pc, #208]	@ (8001a44 <HAL_ADC_MspInit+0x2dc>)
 8001974:	4618      	mov	r0, r3
 8001976:	f004 fe81 	bl	800667c <HAL_DMAEx_List_BuildNode>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8001980:	f7ff fed2 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001984:	4a2f      	ldr	r2, [pc, #188]	@ (8001a44 <HAL_ADC_MspInit+0x2dc>)
 8001986:	2100      	movs	r1, #0
 8001988:	482f      	ldr	r0, [pc, #188]	@ (8001a48 <HAL_ADC_MspInit+0x2e0>)
 800198a:	f004 fea3 	bl	80066d4 <HAL_DMAEx_List_InsertNode>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001994:	f7ff fec8 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001998:	482b      	ldr	r0, [pc, #172]	@ (8001a48 <HAL_ADC_MspInit+0x2e0>)
 800199a:	f004 ff64 	bl	8006866 <HAL_DMAEx_List_SetCircularMode>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 80019a4:	f7ff fec0 	bl	8001728 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019aa:	4a29      	ldr	r2, [pc, #164]	@ (8001a50 <HAL_ADC_MspInit+0x2e8>)
 80019ac:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80019ae:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80019ba:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019c0:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019c8:	2281      	movs	r2, #129	@ 0x81
 80019ca:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80019cc:	481f      	ldr	r0, [pc, #124]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019ce:	f004 fc95 	bl	80062fc <HAL_DMAEx_List_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 80019d8:	f7ff fea6 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80019dc:	491a      	ldr	r1, [pc, #104]	@ (8001a48 <HAL_ADC_MspInit+0x2e0>)
 80019de:	481b      	ldr	r0, [pc, #108]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019e0:	f004 ffa2 	bl	8006928 <HAL_DMAEx_List_LinkQ>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 80019ea:	f7ff fe9d 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 80019ee:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019f2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80019fc:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 80019fe:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a02:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	480f      	ldr	r0, [pc, #60]	@ (8001a4c <HAL_ADC_MspInit+0x2e4>)
 8001a0e:	f004 f883 	bl	8005b18 <HAL_DMA_ConfigChannelAttributes>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001a18:	f7ff fe86 	bl	8001728 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2025      	movs	r0, #37	@ 0x25
 8001a22:	f003 fbfd 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a26:	2025      	movs	r0, #37	@ 0x25
 8001a28:	f003 fc14 	bl	8005254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001a2c:	e0c0      	b.n	8001bb0 <HAL_ADC_MspInit+0x448>
 8001a2e:	bf00      	nop
 8001a30:	42028000 	.word	0x42028000
 8001a34:	46020c00 	.word	0x46020c00
 8001a38:	42020800 	.word	0x42020800
 8001a3c:	42020000 	.word	0x42020000
 8001a40:	42020400 	.word	0x42020400
 8001a44:	20000160 	.word	0x20000160
 8001a48:	20000184 	.word	0x20000184
 8001a4c:	2000019c 	.word	0x2000019c
 8001a50:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001a54:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a58:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a56      	ldr	r2, [pc, #344]	@ (8001bbc <HAL_ADC_MspInit+0x454>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	f040 80a4 	bne.w	8001bb0 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001a68:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a6c:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001a70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001a7c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a80:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a88:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f009 f9db 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001a9c:	f7ff fe44 	bl	8001728 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001aa0:	4b47      	ldr	r3, [pc, #284]	@ (8001bc0 <HAL_ADC_MspInit+0x458>)
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa6:	4a46      	ldr	r2, [pc, #280]	@ (8001bc0 <HAL_ADC_MspInit+0x458>)
 8001aa8:	f043 0320 	orr.w	r3, r3, #32
 8001aac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ab0:	4b43      	ldr	r3, [pc, #268]	@ (8001bc0 <HAL_ADC_MspInit+0x458>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab6:	f003 0220 	and.w	r2, r3, #32
 8001aba:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001abe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ac8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001acc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ace:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc0 <HAL_ADC_MspInit+0x458>)
 8001ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad4:	4a3a      	ldr	r2, [pc, #232]	@ (8001bc0 <HAL_ADC_MspInit+0x458>)
 8001ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ada:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <HAL_ADC_MspInit+0x458>)
 8001ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae4:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001ae8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001aec:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001af6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001afa:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b12:	4619      	mov	r1, r3
 8001b14:	482b      	ldr	r0, [pc, #172]	@ (8001bc4 <HAL_ADC_MspInit+0x45c>)
 8001b16:	f005 fc9d 	bl	8007454 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001bcc <HAL_ADC_MspInit+0x464>)
 8001b1e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001b20:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b26:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b2c:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b38:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b3e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b48:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b4c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001b72:	4815      	ldr	r0, [pc, #84]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b74:	f003 fc30 	bl	80053d8 <HAL_DMA_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001b7e:	f7ff fdd3 	bl	8001728 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001b82:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b86:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b8e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b90:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001b92:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b96:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	4809      	ldr	r0, [pc, #36]	@ (8001bc8 <HAL_ADC_MspInit+0x460>)
 8001ba2:	f003 ffb9 	bl	8005b18 <HAL_DMA_ConfigChannelAttributes>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001bac:	f7ff fdbc 	bl	8001728 <Error_Handler>
}
 8001bb0:	bf00      	nop
 8001bb2:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	46021000 	.word	0x46021000
 8001bc0:	46020c00 	.word	0x46020c00
 8001bc4:	42021800 	.word	0x42021800
 8001bc8:	20000214 	.word	0x20000214
 8001bcc:	40020150 	.word	0x40020150

08001bd0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <HAL_DMA2D_MspInit+0x3c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10e      	bne.n	8001c00 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_DMA2D_MspInit+0x40>)
 8001be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be8:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <HAL_DMA2D_MspInit+0x40>)
 8001bea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <HAL_DMA2D_MspInit+0x40>)
 8001bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	4002b000 	.word	0x4002b000
 8001c10:	46020c00 	.word	0x46020c00

08001c14 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	@ 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2a      	ldr	r2, [pc, #168]	@ (8001cdc <HAL_XSPI_MspInit+0xc8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d14d      	bne.n	8001cd2 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001c36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3c:	4a28      	ldr	r2, [pc, #160]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c46:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c54:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c78:	4a19      	ldr	r2, [pc, #100]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c82:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <HAL_XSPI_MspInit+0xcc>)
 8001c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001c90:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001c94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <HAL_XSPI_MspInit+0xd0>)
 8001cae:	f005 fbd1 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <HAL_XSPI_MspInit+0xd4>)
 8001cce:	f005 fbc1 	bl	8007454 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	420d3400 	.word	0x420d3400
 8001ce0:	46020c00 	.word	0x46020c00
 8001ce4:	42021c00 	.word	0x42021c00
 8001ce8:	42022000 	.word	0x42022000

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0c4      	sub	sp, #272	@ 0x110
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cfa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	22e0      	movs	r2, #224	@ 0xe0
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00f fedc 	bl	8011ad2 <memset>
  if(hi2c->Instance==I2C1)
 8001d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a63      	ldr	r2, [pc, #396]	@ (8001eb4 <HAL_I2C_MspInit+0x1c8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d14f      	bne.n	8001dcc <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d2c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3e:	f107 0318 	add.w	r3, r7, #24
 8001d42:	4618      	mov	r0, r3
 8001d44:	f009 f882 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001d4e:	f7ff fceb 	bl	8001728 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d52:	4b59      	ldr	r3, [pc, #356]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d58:	4a57      	ldr	r2, [pc, #348]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d62:	4b55      	ldr	r3, [pc, #340]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d70:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d78:	2312      	movs	r3, #18
 8001d7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d90:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d94:	4619      	mov	r1, r3
 8001d96:	4849      	ldr	r0, [pc, #292]	@ (8001ebc <HAL_I2C_MspInit+0x1d0>)
 8001d98:	f005 fb5c 	bl	8007454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9c:	4b46      	ldr	r3, [pc, #280]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001da2:	4a45      	ldr	r2, [pc, #276]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001da4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001da8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001dac:	4b42      	ldr	r3, [pc, #264]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001db2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dc4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dc8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dca:	e06e      	b.n	8001eaa <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001dcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a39      	ldr	r2, [pc, #228]	@ (8001ec0 <HAL_I2C_MspInit+0x1d4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d165      	bne.n	8001eaa <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dde:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df0:	f107 0318 	add.w	r3, r7, #24
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 f829 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e00:	f7ff fc92 	bl	8001728 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e04:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e14:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e1a:	f003 0220 	and.w	r2, r3, #32
 8001e1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e30:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e32:	2303      	movs	r3, #3
 8001e34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e50:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e54:	4619      	mov	r1, r3
 8001e56:	481b      	ldr	r0, [pc, #108]	@ (8001ec4 <HAL_I2C_MspInit+0x1d8>)
 8001e58:	f005 fafc 	bl	8007454 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e5c:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e62:	4a15      	ldr	r2, [pc, #84]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001e64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e68:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e6c:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_I2C_MspInit+0x1cc>)
 8001e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e72:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e88:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2039      	movs	r0, #57	@ 0x39
 8001e90:	f003 f9c6 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001e94:	2039      	movs	r0, #57	@ 0x39
 8001e96:	f003 f9dd 	bl	8005254 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	203a      	movs	r0, #58	@ 0x3a
 8001ea0:	f003 f9be 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ea4:	203a      	movs	r0, #58	@ 0x3a
 8001ea6:	f003 f9d5 	bl	8005254 <HAL_NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	46020c00 	.word	0x46020c00
 8001ebc:	42021800 	.word	0x42021800
 8001ec0:	40005800 	.word	0x40005800
 8001ec4:	42021400 	.word	0x42021400

08001ec8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0c6      	sub	sp, #280	@ 0x118
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ed2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ed6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee8:	f107 0320 	add.w	r3, r7, #32
 8001eec:	22e0      	movs	r2, #224	@ 0xe0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00f fdee 	bl	8011ad2 <memset>
  if(hltdc->Instance==LTDC)
 8001ef6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001efa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a92      	ldr	r2, [pc, #584]	@ (800214c <HAL_LTDC_MspInit+0x284>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	f040 811b 	bne.w	8002140 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0302 	mov.w	r3, #2
 8001f12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001f20:	2304      	movs	r3, #4
 8001f22:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001f24:	2332      	movs	r3, #50	@ 0x32
 8001f26:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001f30:	2308      	movs	r3, #8
 8001f32:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001f3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	4618      	mov	r0, r3
 8001f48:	f008 ff80 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001f52:	f7ff fbe9 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f56:	4b7e      	ldr	r3, [pc, #504]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001f58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f5c:	4a7c      	ldr	r2, [pc, #496]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001f5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f62:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f66:	4b7a      	ldr	r3, [pc, #488]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f7a:	4a75      	ldr	r2, [pc, #468]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f84:	4b72      	ldr	r3, [pc, #456]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8a:	f003 0202 	and.w	r2, r3, #2
 8001f8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f92:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fa0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa2:	4b6b      	ldr	r3, [pc, #428]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa8:	4a69      	ldr	r2, [pc, #420]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fb2:	4b67      	ldr	r3, [pc, #412]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb8:	f003 0210 	and.w	r2, r3, #16
 8001fbc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8001fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe6:	f003 0208 	and.w	r2, r3, #8
 8001fea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ffc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	4b54      	ldr	r3, [pc, #336]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8002000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002004:	4a52      	ldr	r2, [pc, #328]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800200e:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <HAL_LTDC_MspInit+0x288>)
 8002010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002014:	f003 0204 	and.w	r2, r3, #4
 8002018:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800201c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800202a:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800202c:	2304      	movs	r3, #4
 800202e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002044:	2308      	movs	r3, #8
 8002046:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800204e:	4619      	mov	r1, r3
 8002050:	4840      	ldr	r0, [pc, #256]	@ (8002154 <HAL_LTDC_MspInit+0x28c>)
 8002052:	f005 f9ff 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002056:	f64f 7381 	movw	r3, #65409	@ 0xff81
 800205a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002070:	2308      	movs	r3, #8
 8002072:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002076:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800207a:	4619      	mov	r1, r3
 800207c:	4836      	ldr	r0, [pc, #216]	@ (8002158 <HAL_LTDC_MspInit+0x290>)
 800207e:	f005 f9e9 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002082:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002086:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800209c:	2308      	movs	r3, #8
 800209e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020a6:	4619      	mov	r1, r3
 80020a8:	482c      	ldr	r0, [pc, #176]	@ (800215c <HAL_LTDC_MspInit+0x294>)
 80020aa:	f005 f9d3 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	23c0      	movs	r3, #192	@ 0xc0
 80020b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80020c6:	2307      	movs	r3, #7
 80020c8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020cc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020d0:	4619      	mov	r1, r3
 80020d2:	4823      	ldr	r0, [pc, #140]	@ (8002160 <HAL_LTDC_MspInit+0x298>)
 80020d4:	f005 f9be 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020f2:	2308      	movs	r3, #8
 80020f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020fc:	4619      	mov	r1, r3
 80020fe:	4818      	ldr	r0, [pc, #96]	@ (8002160 <HAL_LTDC_MspInit+0x298>)
 8002100:	f005 f9a8 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002108:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800211e:	2307      	movs	r3, #7
 8002120:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002128:	4619      	mov	r1, r3
 800212a:	480a      	ldr	r0, [pc, #40]	@ (8002154 <HAL_LTDC_MspInit+0x28c>)
 800212c:	f005 f992 	bl	8007454 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	2087      	movs	r0, #135	@ 0x87
 8002136:	f003 f873 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800213a:	2087      	movs	r0, #135	@ 0x87
 800213c:	f003 f88a 	bl	8005254 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002140:	bf00      	nop
 8002142:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40016800 	.word	0x40016800
 8002150:	46020c00 	.word	0x46020c00
 8002154:	42020400 	.word	0x42020400
 8002158:	42021000 	.word	0x42021000
 800215c:	42020c00 	.word	0x42020c00
 8002160:	42020800 	.word	0x42020800

08002164 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0bc      	sub	sp, #240	@ 0xf0
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	22e0      	movs	r2, #224	@ 0xe0
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f00f fcac 	bl	8011ad2 <memset>
  if(hrtc->Instance==RTC)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_RTC_MspInit+0x90>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d132      	bne.n	80021ea <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002184:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4618      	mov	r0, r3
 800219e:	f008 fe55 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80021a8:	f7ff fabe 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_RTC_MspInit+0x94>)
 80021ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021b2:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_RTC_MspInit+0x94>)
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_RTC_MspInit+0x94>)
 80021be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021c2:	4a0d      	ldr	r2, [pc, #52]	@ (80021f8 <HAL_RTC_MspInit+0x94>)
 80021c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_RTC_MspInit+0x94>)
 80021ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80021da:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_RTC_MspInit+0x94>)
 80021dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021e0:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <HAL_RTC_MspInit+0x94>)
 80021e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80021ea:	bf00      	nop
 80021ec:	37f0      	adds	r7, #240	@ 0xf0
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	46007800 	.word	0x46007800
 80021f8:	46020c00 	.word	0x46020c00

080021fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0b      	ldr	r2, [pc, #44]	@ (8002238 <HAL_TIM_PWM_MspInit+0x3c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10e      	bne.n	800222c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_TIM_PWM_MspInit+0x40>)
 8002210:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002214:	4a09      	ldr	r2, [pc, #36]	@ (800223c <HAL_TIM_PWM_MspInit+0x40>)
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <HAL_TIM_PWM_MspInit+0x40>)
 8002220:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40000400 	.word	0x40000400
 800223c:	46020c00 	.word	0x46020c00

08002240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0b      	ldr	r2, [pc, #44]	@ (800227c <HAL_TIM_Base_MspInit+0x3c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002252:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <HAL_TIM_Base_MspInit+0x40>)
 8002254:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002258:	4a09      	ldr	r2, [pc, #36]	@ (8002280 <HAL_TIM_Base_MspInit+0x40>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_TIM_Base_MspInit+0x40>)
 8002264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40014000 	.word	0x40014000
 8002280:	46020c00 	.word	0x46020c00

08002284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <HAL_TIM_MspPostInit+0x68>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d11e      	bne.n	80022e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_TIM_MspPostInit+0x6c>)
 80022a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ac:	4a10      	ldr	r2, [pc, #64]	@ (80022f0 <HAL_TIM_MspPostInit+0x6c>)
 80022ae:	f043 0310 	orr.w	r3, r3, #16
 80022b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_TIM_MspPostInit+0x6c>)
 80022b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80022c4:	2340      	movs	r3, #64	@ 0x40
 80022c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	4619      	mov	r1, r3
 80022de:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_TIM_MspPostInit+0x70>)
 80022e0:	f005 f8b8 	bl	8007454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40000400 	.word	0x40000400
 80022f0:	46020c00 	.word	0x46020c00
 80022f4:	42021000 	.word	0x42021000

080022f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b0c2      	sub	sp, #264	@ 0x108
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002306:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	22e0      	movs	r2, #224	@ 0xe0
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f00f fbd6 	bl	8011ad2 <memset>
  if(huart->Instance==USART1)
 8002326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800232a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2f      	ldr	r2, [pc, #188]	@ (80023f0 <HAL_UART_MspInit+0xf8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d155      	bne.n	80023e4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002338:	f04f 0201 	mov.w	r2, #1
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002344:	2300      	movs	r3, #0
 8002346:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4618      	mov	r0, r3
 800234e:	f008 fd7d 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002358:	f7ff f9e6 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235c:	4b25      	ldr	r3, [pc, #148]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 800235e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002362:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800236c:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 800236e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b1e      	ldr	r3, [pc, #120]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 800237c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002380:	4a1c      	ldr	r2, [pc, #112]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800238a:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_UART_MspInit+0xfc>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002390:	f003 0201 	and.w	r2, r3, #1
 8002394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002398:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023a6:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c2:	2307      	movs	r3, #7
 80023c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80023cc:	4619      	mov	r1, r3
 80023ce:	480a      	ldr	r0, [pc, #40]	@ (80023f8 <HAL_UART_MspInit+0x100>)
 80023d0:	f005 f840 	bl	8007454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	203d      	movs	r0, #61	@ 0x3d
 80023da:	f002 ff21 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023de:	203d      	movs	r0, #61	@ 0x3d
 80023e0:	f002 ff38 	bl	8005254 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80023e4:	bf00      	nop
 80023e6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40013800 	.word	0x40013800
 80023f4:	46020c00 	.word	0x46020c00
 80023f8:	42020000 	.word	0x42020000

080023fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0be      	sub	sp, #248	@ 0xf8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	22e0      	movs	r2, #224	@ 0xe0
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f00f fb60 	bl	8011ad2 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a3a      	ldr	r2, [pc, #232]	@ (8002500 <HAL_PCD_MspInit+0x104>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d16d      	bne.n	80024f8 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241c:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 800241e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002422:	4a38      	ldr	r2, [pc, #224]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800242c:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 800242e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0308 	mov.w	r3, #8
 8002442:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002446:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800244a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244e:	f107 0318 	add.w	r3, r7, #24
 8002452:	4618      	mov	r0, r3
 8002454:	f008 fcfa 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 800245e:	f7ff f963 	bl	8001728 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002462:	200c      	movs	r0, #12
 8002464:	f000 fc1c 	bl	8002ca0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002468:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 800246a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800246e:	4a25      	ldr	r2, [pc, #148]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002474:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002478:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 800247a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002486:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 8002488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248c:	4a1d      	ldr	r2, [pc, #116]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 800248e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002496:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 8002498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800249c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a4:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11b      	bne.n	80024ea <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 80024b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b8:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80024d0:	f007 f9c2 	bl	8009858 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80024d4:	f007 f9f0 	bl	80098b8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	4a09      	ldr	r2, [pc, #36]	@ (8002504 <HAL_PCD_MspInit+0x108>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024e8:	e003      	b.n	80024f2 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80024ea:	f007 f9b5 	bl	8009858 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80024ee:	f007 f9e3 	bl	80098b8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f000 fbc0 	bl	8002c78 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80024f8:	bf00      	nop
 80024fa:	37f8      	adds	r7, #248	@ 0xf8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	42040000 	.word	0x42040000
 8002504:	46020c00 	.word	0x46020c00

08002508 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0a4      	sub	sp, #144	@ 0x90
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4abb      	ldr	r2, [pc, #748]	@ (8002804 <HAL_SAI_MspInit+0x2fc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f040 80ca 	bne.w	80026b0 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800251c:	4bba      	ldr	r3, [pc, #744]	@ (8002808 <HAL_SAI_MspInit+0x300>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10e      	bne.n	8002542 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002524:	4bb9      	ldr	r3, [pc, #740]	@ (800280c <HAL_SAI_MspInit+0x304>)
 8002526:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800252a:	4ab8      	ldr	r2, [pc, #736]	@ (800280c <HAL_SAI_MspInit+0x304>)
 800252c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002530:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002534:	4bb5      	ldr	r3, [pc, #724]	@ (800280c <HAL_SAI_MspInit+0x304>)
 8002536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800253a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002542:	4bb1      	ldr	r3, [pc, #708]	@ (8002808 <HAL_SAI_MspInit+0x300>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	4aaf      	ldr	r2, [pc, #700]	@ (8002808 <HAL_SAI_MspInit+0x300>)
 800254a:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800254c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002550:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002564:	230d      	movs	r3, #13
 8002566:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800256e:	4619      	mov	r1, r3
 8002570:	48a7      	ldr	r0, [pc, #668]	@ (8002810 <HAL_SAI_MspInit+0x308>)
 8002572:	f004 ff6f 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002576:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800257a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800258e:	230d      	movs	r3, #13
 8002590:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002594:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002598:	4619      	mov	r1, r3
 800259a:	489d      	ldr	r0, [pc, #628]	@ (8002810 <HAL_SAI_MspInit+0x308>)
 800259c:	f004 ff5a 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025b8:	230d      	movs	r3, #13
 80025ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025c2:	4619      	mov	r1, r3
 80025c4:	4893      	ldr	r0, [pc, #588]	@ (8002814 <HAL_SAI_MspInit+0x30c>)
 80025c6:	f004 ff45 	bl	8007454 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80025ca:	2321      	movs	r3, #33	@ 0x21
 80025cc:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 80025ce:	2326      	movs	r3, #38	@ 0x26
 80025d0:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025da:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80025dc:	2308      	movs	r3, #8
 80025de:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80025e4:	2302      	movs	r3, #2
 80025e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80025e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025fa:	2300      	movs	r3, #0
 80025fc:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80025fe:	2300      	movs	r3, #0
 8002600:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002602:	2300      	movs	r3, #0
 8002604:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800260a:	2300      	movs	r3, #0
 800260c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4981      	ldr	r1, [pc, #516]	@ (8002818 <HAL_SAI_MspInit+0x310>)
 8002614:	4618      	mov	r0, r3
 8002616:	f004 f831 	bl	800667c <HAL_DMAEx_List_BuildNode>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002620:	f7ff f882 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002624:	4a7c      	ldr	r2, [pc, #496]	@ (8002818 <HAL_SAI_MspInit+0x310>)
 8002626:	2100      	movs	r1, #0
 8002628:	487c      	ldr	r0, [pc, #496]	@ (800281c <HAL_SAI_MspInit+0x314>)
 800262a:	f004 f853 	bl	80066d4 <HAL_DMAEx_List_InsertNode>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002634:	f7ff f878 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002638:	4878      	ldr	r0, [pc, #480]	@ (800281c <HAL_SAI_MspInit+0x314>)
 800263a:	f004 f914 	bl	8006866 <HAL_DMAEx_List_SetCircularMode>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002644:	f7ff f870 	bl	8001728 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002648:	4b75      	ldr	r3, [pc, #468]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 800264a:	4a76      	ldr	r2, [pc, #472]	@ (8002824 <HAL_SAI_MspInit+0x31c>)
 800264c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800264e:	4b74      	ldr	r3, [pc, #464]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 8002650:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002654:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002656:	4b72      	ldr	r3, [pc, #456]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 8002658:	2200      	movs	r2, #0
 800265a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800265c:	4b70      	ldr	r3, [pc, #448]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 800265e:	2200      	movs	r2, #0
 8002660:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002662:	4b6f      	ldr	r3, [pc, #444]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002668:	4b6d      	ldr	r3, [pc, #436]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 800266a:	2281      	movs	r2, #129	@ 0x81
 800266c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 800266e:	486c      	ldr	r0, [pc, #432]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 8002670:	f003 fe44 	bl	80062fc <HAL_DMAEx_List_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 800267a:	f7ff f855 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 800267e:	4967      	ldr	r1, [pc, #412]	@ (800281c <HAL_SAI_MspInit+0x314>)
 8002680:	4867      	ldr	r0, [pc, #412]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 8002682:	f004 f951 	bl	8006928 <HAL_DMAEx_List_LinkQ>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 800268c:	f7ff f84c 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a63      	ldr	r2, [pc, #396]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 8002694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002698:	4a61      	ldr	r2, [pc, #388]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800269e:	2110      	movs	r1, #16
 80026a0:	485f      	ldr	r0, [pc, #380]	@ (8002820 <HAL_SAI_MspInit+0x318>)
 80026a2:	f003 fa39 	bl	8005b18 <HAL_DMA_ConfigChannelAttributes>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 80026ac:	f7ff f83c 	bl	8001728 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002828 <HAL_SAI_MspInit+0x320>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	f040 80eb 	bne.w	8002892 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80026bc:	4b52      	ldr	r3, [pc, #328]	@ (8002808 <HAL_SAI_MspInit+0x300>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10e      	bne.n	80026e2 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026c4:	4b51      	ldr	r3, [pc, #324]	@ (800280c <HAL_SAI_MspInit+0x304>)
 80026c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026ca:	4a50      	ldr	r2, [pc, #320]	@ (800280c <HAL_SAI_MspInit+0x304>)
 80026cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026d0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80026d4:	4b4d      	ldr	r3, [pc, #308]	@ (800280c <HAL_SAI_MspInit+0x304>)
 80026d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80026e2:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <HAL_SAI_MspInit+0x300>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a47      	ldr	r2, [pc, #284]	@ (8002808 <HAL_SAI_MspInit+0x300>)
 80026ea:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002704:	230d      	movs	r3, #13
 8002706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800270e:	4619      	mov	r1, r3
 8002710:	4846      	ldr	r0, [pc, #280]	@ (800282c <HAL_SAI_MspInit+0x324>)
 8002712:	f004 fe9f 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800271a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800272e:	230d      	movs	r3, #13
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002734:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002738:	4619      	mov	r1, r3
 800273a:	483d      	ldr	r0, [pc, #244]	@ (8002830 <HAL_SAI_MspInit+0x328>)
 800273c:	f004 fe8a 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002740:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002744:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002758:	230d      	movs	r3, #13
 800275a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002762:	4619      	mov	r1, r3
 8002764:	4832      	ldr	r0, [pc, #200]	@ (8002830 <HAL_SAI_MspInit+0x328>)
 8002766:	f004 fe75 	bl	8007454 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800276a:	2321      	movs	r3, #33	@ 0x21
 800276c:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 800276e:	2327      	movs	r3, #39	@ 0x27
 8002770:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800277e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002784:	2302      	movs	r3, #2
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002788:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800278e:	2301      	movs	r3, #1
 8002790:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002796:	2300      	movs	r3, #0
 8002798:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800279a:	2300      	movs	r3, #0
 800279c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800279e:	2300      	movs	r3, #0
 80027a0:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80027a2:	2300      	movs	r3, #0
 80027a4:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80027aa:	2300      	movs	r3, #0
 80027ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4920      	ldr	r1, [pc, #128]	@ (8002834 <HAL_SAI_MspInit+0x32c>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 ff61 	bl	800667c <HAL_DMAEx_List_BuildNode>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 80027c0:	f7fe ffb2 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80027c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002834 <HAL_SAI_MspInit+0x32c>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	481b      	ldr	r0, [pc, #108]	@ (8002838 <HAL_SAI_MspInit+0x330>)
 80027ca:	f003 ff83 	bl	80066d4 <HAL_DMAEx_List_InsertNode>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 80027d4:	f7fe ffa8 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80027d8:	4817      	ldr	r0, [pc, #92]	@ (8002838 <HAL_SAI_MspInit+0x330>)
 80027da:	f004 f844 	bl	8006866 <HAL_DMAEx_List_SetCircularMode>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 80027e4:	f7fe ffa0 	bl	8001728 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80027e8:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_SAI_MspInit+0x334>)
 80027ea:	4a15      	ldr	r2, [pc, #84]	@ (8002840 <HAL_SAI_MspInit+0x338>)
 80027ec:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <HAL_SAI_MspInit+0x334>)
 80027f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80027f4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_SAI_MspInit+0x334>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <HAL_SAI_MspInit+0x334>)
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
 8002802:	e01f      	b.n	8002844 <HAL_SAI_MspInit+0x33c>
 8002804:	40015804 	.word	0x40015804
 8002808:	2000ef08 	.word	0x2000ef08
 800280c:	46020c00 	.word	0x46020c00
 8002810:	42020400 	.word	0x42020400
 8002814:	42021800 	.word	0x42021800
 8002818:	20000604 	.word	0x20000604
 800281c:	20000628 	.word	0x20000628
 8002820:	20000640 	.word	0x20000640
 8002824:	400201d0 	.word	0x400201d0
 8002828:	40015824 	.word	0x40015824
 800282c:	42020000 	.word	0x42020000
 8002830:	42020800 	.word	0x42020800
 8002834:	200006b8 	.word	0x200006b8
 8002838:	200006dc 	.word	0x200006dc
 800283c:	200006f4 	.word	0x200006f4
 8002840:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_SAI_MspInit+0x394>)
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <HAL_SAI_MspInit+0x394>)
 800284c:	2281      	movs	r2, #129	@ 0x81
 800284e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002850:	4812      	ldr	r0, [pc, #72]	@ (800289c <HAL_SAI_MspInit+0x394>)
 8002852:	f003 fd53 	bl	80062fc <HAL_DMAEx_List_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 800285c:	f7fe ff64 	bl	8001728 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002860:	490f      	ldr	r1, [pc, #60]	@ (80028a0 <HAL_SAI_MspInit+0x398>)
 8002862:	480e      	ldr	r0, [pc, #56]	@ (800289c <HAL_SAI_MspInit+0x394>)
 8002864:	f004 f860 	bl	8006928 <HAL_DMAEx_List_LinkQ>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 800286e:	f7fe ff5b 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_SAI_MspInit+0x394>)
 8002876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800287a:	4a08      	ldr	r2, [pc, #32]	@ (800289c <HAL_SAI_MspInit+0x394>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002880:	2110      	movs	r1, #16
 8002882:	4806      	ldr	r0, [pc, #24]	@ (800289c <HAL_SAI_MspInit+0x394>)
 8002884:	f003 f948 	bl	8005b18 <HAL_DMA_ConfigChannelAttributes>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 800288e:	f7fe ff4b 	bl	8001728 <Error_Handler>
    }

    }
}
 8002892:	bf00      	nop
 8002894:	3790      	adds	r7, #144	@ 0x90
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200006f4 	.word	0x200006f4
 80028a0:	200006dc 	.word	0x200006dc

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <NMI_Handler+0x4>

080028ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <MemManage_Handler+0x4>

080028bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <UsageFault_Handler+0x4>

080028cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fa:	f000 f979 	bl	8002bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}

08002902 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002906:	2002      	movs	r0, #2
 8002908:	f004 ffae 	bl	8007868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002914:	2010      	movs	r0, #16
 8002916:	f004 ffa7 	bl	8007868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}

0800291e <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002922:	2020      	movs	r0, #32
 8002924:	f004 ffa0 	bl	8007868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002930:	4802      	ldr	r0, [pc, #8]	@ (800293c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002932:	f002 ff82 	bl	800583a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000019c 	.word	0x2000019c

08002940 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002946:	f002 ff78 	bl	800583a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200006f4 	.word	0x200006f4

08002954 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <GPDMA1_Channel2_IRQHandler+0x10>)
 800295a:	f002 ff6e 	bl	800583a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000214 	.word	0x20000214

08002968 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <GPDMA1_Channel3_IRQHandler+0x10>)
 800296e:	f002 ff64 	bl	800583a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000640 	.word	0x20000640

0800297c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <ADC1_2_IRQHandler+0x10>)
 8002982:	f001 f925 	bl	8003bd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000048 	.word	0x20000048

08002990 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <I2C2_EV_IRQHandler+0x10>)
 8002996:	f005 f933 	bl	8007c00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200003a8 	.word	0x200003a8

080029a4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <I2C2_ER_IRQHandler+0x10>)
 80029aa:	f005 f943 	bl	8007c34 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200003a8 	.word	0x200003a8

080029b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <USART1_IRQHandler+0x10>)
 80029be:	f00d fbcf 	bl	8010160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000804 	.word	0x20000804

080029cc <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <LTDC_IRQHandler+0x10>)
 80029d2:	f006 fab1 	bl	8008f38 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200003fc 	.word	0x200003fc

080029e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029e4:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <SystemInit+0x68>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	4a17      	ldr	r2, [pc, #92]	@ (8002a48 <SystemInit+0x68>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80029f4:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <SystemInit+0x6c>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80029fa:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <SystemInit+0x6c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <SystemInit+0x6c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <SystemInit+0x6c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <SystemInit+0x6c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	@ (8002a4c <SystemInit+0x6c>)
 8002a12:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a16:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <SystemInit+0x6c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <SystemInit+0x6c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <SystemInit+0x6c>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <SystemInit+0x6c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <SystemInit+0x68>)
 8002a36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a3a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00
 8002a4c:	46020c00 	.word	0x46020c00

08002a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002a50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a88 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a54:	f7ff ffc4 	bl	80029e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a5a:	e003      	b.n	8002a64 <LoopCopyDataInit>

08002a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a62:	3104      	adds	r1, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a64:	480a      	ldr	r0, [pc, #40]	@ (8002a90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a6c:	d3f6      	bcc.n	8002a5c <CopyDataInit>
	ldr	r2, =_sbss
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a70:	e002      	b.n	8002a78 <LoopFillZerobss>

08002a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a74:	f842 3b04 	str.w	r3, [r2], #4

08002a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <LoopForever+0x16>)
	cmp	r2, r3
 8002a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a7c:	d3f9      	bcc.n	8002a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a7e:	f00f f831 	bl	8011ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a82:	f7fd fda3 	bl	80005cc <main>

08002a86 <LoopForever>:

LoopForever:
    b LoopForever
 8002a86:	e7fe      	b.n	8002a86 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002a88:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002a8c:	08011c54 	.word	0x08011c54
	ldr	r0, =_sdata
 8002a90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a94:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8002a98:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 8002a9c:	2000ef10 	.word	0x2000ef10

08002aa0 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC4_IRQHandler>
	...

08002aa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_Init+0x50>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a11      	ldr	r2, [pc, #68]	@ (8002af4 <HAL_Init+0x50>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f002 fba8 	bl	800520a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002aba:	f007 ffe9 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <HAL_Init+0x54>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	490c      	ldr	r1, [pc, #48]	@ (8002afc <HAL_Init+0x58>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b00 <HAL_Init+0x5c>)
 8002ad2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ad4:	2004      	movs	r0, #4
 8002ad6:	f002 fbed 	bl	80052b4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ada:	200f      	movs	r0, #15
 8002adc:	f000 f812 	bl	8002b04 <HAL_InitTick>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e002      	b.n	8002af0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aea:	f7fe fe23 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40022000 	.word	0x40022000
 8002af8:	46020c00 	.word	0x46020c00
 8002afc:	08011b44 	.word	0x08011b44
 8002b00:	20000020 	.word	0x20000020

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b10:	4b33      	ldr	r3, [pc, #204]	@ (8002be0 <HAL_InitTick+0xdc>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e05c      	b.n	8002bd6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b1c:	4b31      	ldr	r3, [pc, #196]	@ (8002be4 <HAL_InitTick+0xe0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d10c      	bne.n	8002b42 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b28:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <HAL_InitTick+0xe4>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002be0 <HAL_InitTick+0xdc>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e037      	b.n	8002bb2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b42:	f002 fc0f 	bl	8005364 <HAL_SYSTICK_GetCLKSourceConfig>
 8002b46:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d023      	beq.n	8002b96 <HAL_InitTick+0x92>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d82d      	bhi.n	8002bb0 <HAL_InitTick+0xac>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_InitTick+0x5e>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d00d      	beq.n	8002b7c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002b60:	e026      	b.n	8002bb0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002b62:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <HAL_InitTick+0xe4>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_InitTick+0xdc>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002b70:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	60fb      	str	r3, [r7, #12]
        break;
 8002b7a:	e01a      	b.n	8002bb2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b7c:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <HAL_InitTick+0xdc>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b8a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	60fb      	str	r3, [r7, #12]
        break;
 8002b94:	e00d      	b.n	8002bb2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_InitTick+0xdc>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ba4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	60fb      	str	r3, [r7, #12]
        break;
 8002bae:	e000      	b.n	8002bb2 <HAL_InitTick+0xae>
        break;
 8002bb0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f002 fb5c 	bl	8005270 <HAL_SYSTICK_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e009      	b.n	8002bd6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	f002 fb29 	bl	8005220 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002bce:	4a07      	ldr	r2, [pc, #28]	@ (8002bec <HAL_InitTick+0xe8>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000028 	.word	0x20000028
 8002be4:	e000e010 	.word	0xe000e010
 8002be8:	20000020 	.word	0x20000020
 8002bec:	20000024 	.word	0x20000024

08002bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_IncTick+0x20>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_IncTick+0x24>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_IncTick+0x24>)
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000028 	.word	0x20000028
 8002c14:	2000ef0c 	.word	0x2000ef0c

08002c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_GetTick+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	2000ef0c 	.word	0x2000ef0c

08002c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7ff ffee 	bl	8002c18 <HAL_GetTick>
 8002c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d005      	beq.n	8002c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_Delay+0x44>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c56:	bf00      	nop
 8002c58:	f7ff ffde 	bl	8002c18 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d8f7      	bhi.n	8002c58 <HAL_Delay+0x28>
  {
  }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000028 	.word	0x20000028

08002c78 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c84:	f023 0201 	bic.w	r2, r3, #1
 8002c88:	4904      	ldr	r1, [pc, #16]	@ (8002c9c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	46000400 	.word	0x46000400

08002ca0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cac:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002cb0:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	46000400 	.word	0x46000400

08002cc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	@ (8002d6c <LL_ADC_SetResolution+0x3c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d104      	bne.n	8002d50 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	46021000 	.word	0x46021000

08002d70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3360      	adds	r3, #96	@ 0x60
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	431a      	orrs	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3360      	adds	r3, #96	@ 0x60
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3360      	adds	r3, #96	@ 0x60
 8002dee:	461a      	mov	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3360      	adds	r3, #96	@ 0x60
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b087      	sub	sp, #28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3360      	adds	r3, #96	@ 0x60
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d002      	beq.n	8002eb2 <LL_ADC_SetGainCompensation+0x32>
 8002eac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002eb0:	e000      	b.n	8002eb4 <LL_ADC_SetGainCompensation+0x34>
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2107      	movs	r1, #7
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe8 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d020      	beq.n	8002f82 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3330      	adds	r3, #48	@ 0x30
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	4413      	add	r3, r2
 8002f52:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	211f      	movs	r1, #31
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	0e9b      	lsrs	r3, r3, #26
 8002f6c:	f003 011f 	and.w	r1, r3, #31
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002f80:	e02b      	b.n	8002fda <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	210f      	movs	r1, #15
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	401a      	ands	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	e010      	b.n	8002fcc <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	613b      	str	r3, [r7, #16]
  return result;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	e003      	b.n	8002fcc <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	f001 011f 	and.w	r1, r1, #31
 8002fd2:	408b      	lsls	r3, r1
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fda:	bf00      	nop
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	46021000 	.word	0x46021000

08002fec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	0e9b      	lsrs	r3, r3, #26
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2201      	movs	r2, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	e015      	b.n	800303c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	60fb      	str	r3, [r7, #12]
  return result;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e003      	b.n	8003032 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	401a      	ands	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030aa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b08b      	sub	sp, #44	@ 0x2c
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003188 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d042      	beq.n	800315e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <LL_ADC_SetChannelSamplingTime+0x28>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	0e9b      	lsrs	r3, r3, #26
 80030e6:	f003 021f 	and.w	r2, r3, #31
 80030ea:	e011      	b.n	8003110 <LL_ADC_SetChannelSamplingTime+0x4c>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	617b      	str	r3, [r7, #20]
  return result;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003102:	2320      	movs	r3, #32
 8003104:	e003      	b.n	800310e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	0e5b      	lsrs	r3, r3, #25
 8003114:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	1ad2      	subs	r2, r2, r3
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3314      	adds	r3, #20
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	0e5b      	lsrs	r3, r3, #25
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	4413      	add	r3, r2
 800313c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2107      	movs	r1, #7
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	401a      	ands	r2, r3
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	431a      	orrs	r2, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800315c:	e00e      	b.n	800317c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	43db      	mvns	r3, r3
 8003168:	401a      	ands	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	0219      	lsls	r1, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	400b      	ands	r3, r1
 8003172:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003176:	431a      	orrs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	615a      	str	r2, [r3, #20]
}
 800317c:	bf00      	nop
 800317e:	372c      	adds	r7, #44	@ 0x2c
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	46021000 	.word	0x46021000

0800318c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0318 	and.w	r3, r3, #24
 80031ae:	4908      	ldr	r1, [pc, #32]	@ (80031d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031b0:	40d9      	lsrs	r1, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	400b      	ands	r3, r1
 80031b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	000fffff 	.word	0x000fffff

080031d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 031f 	and.w	r3, r3, #31
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800321c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6093      	str	r3, [r2, #8]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003244:	d101      	bne.n	800324a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800326c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003294:	d101      	bne.n	800329a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <LL_ADC_IsEnabled+0x18>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_ADC_IsEnabled+0x1a>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003306:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800330a:	f043 0204 	orr.w	r2, r3, #4
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d101      	bne.n	8003336 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b08      	cmp	r3, #8
 8003356:	d101      	bne.n	800335c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b08b      	sub	sp, #44	@ 0x2c
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e2ce      	b.n	800392a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a95      	ldr	r2, [pc, #596]	@ (80035f0 <HAL_ADC_Init+0x284>)
 800339a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fe f9df 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff37 	bl	8003230 <LL_ADC_IsDeepPowerDownEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff1d 	bl	800320c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff52 	bl	8003280 <LL_ADC_IsInternalRegulatorEnabled>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d115      	bne.n	800340e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff36 	bl	8003258 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ec:	4b81      	ldr	r3, [pc, #516]	@ (80035f4 <HAL_ADC_Init+0x288>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	4a81      	ldr	r2, [pc, #516]	@ (80035f8 <HAL_ADC_Init+0x28c>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003400:	e002      	b.n	8003408 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f9      	bne.n	8003402 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff34 	bl	8003280 <LL_ADC_IsInternalRegulatorEnabled>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10e      	bne.n	800343c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff6c 	bl	800331e <LL_ADC_REG_IsConversionOngoing>
 8003446:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	f040 825f 	bne.w	8003914 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 825b 	bne.w	8003914 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003462:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003466:	f043 0202 	orr.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff2c 	bl	80032d0 <LL_ADC_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d14f      	bne.n	800351e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5b      	ldr	r2, [pc, #364]	@ (80035f0 <HAL_ADC_Init+0x284>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d037      	beq.n	80034f8 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5b      	ldr	r2, [pc, #364]	@ (80035fc <HAL_ADC_Init+0x290>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_ADC_Init+0x130>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5a      	ldr	r2, [pc, #360]	@ (8003600 <HAL_ADC_Init+0x294>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10e      	bne.n	80034ba <HAL_ADC_Init+0x14e>
 800349c:	4857      	ldr	r0, [pc, #348]	@ (80035fc <HAL_ADC_Init+0x290>)
 800349e:	f7ff ff17 	bl	80032d0 <LL_ADC_IsEnabled>
 80034a2:	4604      	mov	r4, r0
 80034a4:	4856      	ldr	r0, [pc, #344]	@ (8003600 <HAL_ADC_Init+0x294>)
 80034a6:	f7ff ff13 	bl	80032d0 <LL_ADC_IsEnabled>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4323      	orrs	r3, r4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	e008      	b.n	80034cc <HAL_ADC_Init+0x160>
 80034ba:	484d      	ldr	r0, [pc, #308]	@ (80035f0 <HAL_ADC_Init+0x284>)
 80034bc:	f7ff ff08 	bl	80032d0 <LL_ADC_IsEnabled>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d026      	beq.n	800351e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a49      	ldr	r2, [pc, #292]	@ (80035fc <HAL_ADC_Init+0x290>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_ADC_Init+0x178>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a48      	ldr	r2, [pc, #288]	@ (8003600 <HAL_ADC_Init+0x294>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_Init+0x17c>
 80034e4:	4a47      	ldr	r2, [pc, #284]	@ (8003604 <HAL_ADC_Init+0x298>)
 80034e6:	e000      	b.n	80034ea <HAL_ADC_Init+0x17e>
 80034e8:	4a47      	ldr	r2, [pc, #284]	@ (8003608 <HAL_ADC_Init+0x29c>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7ff fbe9 	bl	8002cc8 <LL_ADC_SetCommonClock>
 80034f6:	e012      	b.n	800351e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7ff fc14 	bl	8002d30 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003508:	4b3f      	ldr	r3, [pc, #252]	@ (8003608 <HAL_ADC_Init+0x29c>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003518:	493b      	ldr	r1, [pc, #236]	@ (8003608 <HAL_ADC_Init+0x29c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a33      	ldr	r2, [pc, #204]	@ (80035f0 <HAL_ADC_Init+0x284>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d010      	beq.n	800354a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800352e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003534:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800353a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003542:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003544:	4313      	orrs	r3, r2
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	e035      	b.n	80035b6 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7f1b      	ldrb	r3, [r3, #28]
 800354e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003556:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003558:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800355e:	2a00      	cmp	r2, #0
 8003560:	d002      	beq.n	8003568 <HAL_ADC_Init+0x1fc>
 8003562:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003566:	e000      	b.n	800356a <HAL_ADC_Init+0x1fe>
 8003568:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800356a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003570:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	da04      	bge.n	8003584 <HAL_ADC_Init+0x218>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003582:	e001      	b.n	8003588 <HAL_ADC_Init+0x21c>
 8003584:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003588:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	491b      	ldr	r1, [pc, #108]	@ (80035fc <HAL_ADC_Init+0x290>)
 8003590:	428b      	cmp	r3, r1
 8003592:	d004      	beq.n	800359e <HAL_ADC_Init+0x232>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4919      	ldr	r1, [pc, #100]	@ (8003600 <HAL_ADC_Init+0x294>)
 800359a:	428b      	cmp	r3, r1
 800359c:	d103      	bne.n	80035a6 <HAL_ADC_Init+0x23a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035a4:	e003      	b.n	80035ae <HAL_ADC_Init+0x242>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ac:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035ae:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d131      	bne.n	8003624 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <HAL_ADC_Init+0x284>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	3b01      	subs	r3, #1
 80035d0:	045b      	lsls	r3, r3, #17
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	e024      	b.n	8003624 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d113      	bne.n	800360c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ea:	623b      	str	r3, [r7, #32]
 80035ec:	e01a      	b.n	8003624 <HAL_ADC_Init+0x2b8>
 80035ee:	bf00      	nop
 80035f0:	46021000 	.word	0x46021000
 80035f4:	20000020 	.word	0x20000020
 80035f8:	053e2d63 	.word	0x053e2d63
 80035fc:	42028000 	.word	0x42028000
 8003600:	42028100 	.word	0x42028100
 8003604:	42028300 	.word	0x42028300
 8003608:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a75      	ldr	r2, [pc, #468]	@ (8003800 <HAL_ADC_Init+0x494>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d018      	beq.n	8003660 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	4313      	orrs	r3, r2
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	4313      	orrs	r3, r2
 8003648:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4b6c      	ldr	r3, [pc, #432]	@ (8003804 <HAL_ADC_Init+0x498>)
 8003652:	4013      	ands	r3, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	430b      	orrs	r3, r1
 800365c:	60d3      	str	r3, [r2, #12]
 800365e:	e031      	b.n	80036c4 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	4313      	orrs	r3, r2
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	4313      	orrs	r3, r2
 800367a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	4b61      	ldr	r3, [pc, #388]	@ (8003808 <HAL_ADC_Init+0x49c>)
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	6a39      	ldr	r1, [r7, #32]
 800368c:	430b      	orrs	r3, r1
 800368e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003800 <HAL_ADC_Init+0x494>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f000 80a4 	beq.w	8003818 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fe22 	bl	800331e <LL_ADC_REG_IsConversionOngoing>
 80036da:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fe2f 	bl	8003344 <LL_ADC_INJ_IsConversionOngoing>
 80036e6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d166      	bne.n	80037bc <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d163      	bne.n	80037bc <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7f1b      	ldrb	r3, [r3, #28]
 80036f8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4943      	ldr	r1, [pc, #268]	@ (800380c <HAL_ADC_Init+0x4a0>)
 8003700:	428b      	cmp	r3, r1
 8003702:	d004      	beq.n	800370e <HAL_ADC_Init+0x3a2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4941      	ldr	r1, [pc, #260]	@ (8003810 <HAL_ADC_Init+0x4a4>)
 800370a:	428b      	cmp	r3, r1
 800370c:	d102      	bne.n	8003714 <HAL_ADC_Init+0x3a8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	e002      	b.n	800371a <HAL_ADC_Init+0x3ae>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800371a:	4313      	orrs	r3, r2
 800371c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003728:	f023 0303 	bic.w	r3, r3, #3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	430b      	orrs	r3, r1
 8003734:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f7ff fb99 	bl	8002e80 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003754:	2b01      	cmp	r3, #1
 8003756:	d11e      	bne.n	8003796 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375c:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_ADC_Init+0x4a8>)
 8003766:	4013      	ands	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800376c:	0411      	lsls	r1, r2, #16
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003772:	4311      	orrs	r1, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003784:	0892      	lsrs	r2, r2, #2
 8003786:	430a      	orrs	r2, r1
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	611a      	str	r2, [r3, #16]
 8003794:	e007      	b.n	80037a6 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d10c      	bne.n	80037de <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f023 010f 	bic.w	r1, r3, #15
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d2:	1e5a      	subs	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
 80037dc:	e007      	b.n	80037ee <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 020f 	bic.w	r2, r2, #15
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80037fe:	e092      	b.n	8003926 <HAL_ADC_Init+0x5ba>
 8003800:	46021000 	.word	0x46021000
 8003804:	fff0c013 	.word	0xfff0c013
 8003808:	ffde800d 	.word	0xffde800d
 800380c:	42028000 	.word	0x42028000
 8003810:	42028100 	.word	0x42028100
 8003814:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800381e:	2b01      	cmp	r3, #1
 8003820:	d111      	bne.n	8003846 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800382a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003830:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003836:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	4313      	orrs	r3, r2
 800383c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <HAL_ADC_Init+0x5c8>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	69f9      	ldr	r1, [r7, #28]
 8003856:	430b      	orrs	r3, r1
 8003858:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	461a      	mov	r2, r3
 8003864:	2100      	movs	r1, #0
 8003866:	f7ff fb2e 	bl	8002ec6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003872:	461a      	mov	r2, r3
 8003874:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003878:	f7ff fb25 	bl	8002ec6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f062 020f 	orn	r2, r2, #15
 8003892:	629a      	str	r2, [r3, #40]	@ 0x28
 8003894:	e018      	b.n	80038c8 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800389e:	d113      	bne.n	80038c8 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	f003 031c 	and.w	r3, r3, #28
 80038b2:	f06f 020f 	mvn.w	r2, #15
 80038b6:	fa02 f103 	lsl.w	r1, r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <HAL_ADC_Init+0x5cc>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d10b      	bne.n	80038f0 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80038ee:	e01a      	b.n	8003926 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f4:	f023 0312 	bic.w	r3, r3, #18
 80038f8:	f043 0210 	orr.w	r2, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003912:	e008      	b.n	8003926 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003918:	f043 0210 	orr.w	r2, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800392a:	4618      	mov	r0, r3
 800392c:	372c      	adds	r7, #44	@ 0x2c
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}
 8003932:	bf00      	nop
 8003934:	f7fffc02 	.word	0xf7fffc02
 8003938:	833ffff3 	.word	0x833ffff3

0800393c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b0a2      	sub	sp, #136	@ 0x88
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a98      	ldr	r2, [pc, #608]	@ (8003bb0 <HAL_ADC_Start_DMA+0x274>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_ADC_Start_DMA+0x20>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a97      	ldr	r2, [pc, #604]	@ (8003bb4 <HAL_ADC_Start_DMA+0x278>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d101      	bne.n	8003960 <HAL_ADC_Start_DMA+0x24>
 800395c:	4b96      	ldr	r3, [pc, #600]	@ (8003bb8 <HAL_ADC_Start_DMA+0x27c>)
 800395e:	e000      	b.n	8003962 <HAL_ADC_Start_DMA+0x26>
 8003960:	4b96      	ldr	r3, [pc, #600]	@ (8003bbc <HAL_ADC_Start_DMA+0x280>)
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fc36 	bl	80031d4 <LL_ADC_GetMultimode>
 8003968:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fcd5 	bl	800331e <LL_ADC_REG_IsConversionOngoing>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 8111 	bne.w	8003b9e <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_ADC_Start_DMA+0x4e>
 8003986:	2302      	movs	r3, #2
 8003988:	e10e      	b.n	8003ba8 <HAL_ADC_Start_DMA+0x26c>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003992:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003998:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800399a:	2b05      	cmp	r3, #5
 800399c:	d003      	beq.n	80039a6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800399e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	f040 80f4 	bne.w	8003b8e <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f001 fa2c 	bl	8004e04 <ADC_Enable>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039b2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 80e4 	bne.w	8003b84 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a7a      	ldr	r2, [pc, #488]	@ (8003bc0 <HAL_ADC_Start_DMA+0x284>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d026      	beq.n	8003a28 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a75      	ldr	r2, [pc, #468]	@ (8003bb4 <HAL_ADC_Start_DMA+0x278>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_Start_DMA+0xae>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	e000      	b.n	80039ec <HAL_ADC_Start_DMA+0xb0>
 80039ea:	4b71      	ldr	r3, [pc, #452]	@ (8003bb0 <HAL_ADC_Start_DMA+0x274>)
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d002      	beq.n	80039fa <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a16:	f023 0206 	bic.w	r2, r3, #6
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a1e:	e006      	b.n	8003a2e <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a26:	e002      	b.n	8003a2e <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	4a64      	ldr	r2, [pc, #400]	@ (8003bc4 <HAL_ADC_Start_DMA+0x288>)
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	4a63      	ldr	r2, [pc, #396]	@ (8003bc8 <HAL_ADC_Start_DMA+0x28c>)
 8003a3c:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	4a62      	ldr	r2, [pc, #392]	@ (8003bcc <HAL_ADC_Start_DMA+0x290>)
 8003a44:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	221c      	movs	r2, #28
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0210 	orr.w	r2, r2, #16
 8003a64:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a55      	ldr	r2, [pc, #340]	@ (8003bc0 <HAL_ADC_Start_DMA+0x284>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d107      	bne.n	8003a80 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04f      	beq.n	8003b2e <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d046      	beq.n	8003b26 <HAL_ADC_Start_DMA+0x1ea>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d040      	beq.n	8003b26 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 fdf8 	bl	80066a8 <HAL_DMAEx_List_GetNodeConfig>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e072      	b.n	8003ba8 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d104      	bne.n	8003ad2 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ad0:	e00a      	b.n	8003ae8 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d104      	bne.n	8003ae2 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae0:	e002      	b.n	8003ae8 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003af4:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f002 fd1b 	bl	8006554 <HAL_DMAEx_List_Start_IT>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b24:	e028      	b.n	8003b78 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b2c:	e024      	b.n	8003b78 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d104      	bne.n	8003b42 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b40:	e00c      	b.n	8003b5c <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d104      	bne.n	8003b56 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b54:	e002      	b.n	8003b5c <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3340      	adds	r3, #64	@ 0x40
 8003b66:	4619      	mov	r1, r3
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b6e:	f001 fd5f 	bl	8005630 <HAL_DMA_Start_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fbba 	bl	80032f6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b82:	e00f      	b.n	8003ba4 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003b9c:	e002      	b.n	8003ba4 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003ba4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3788      	adds	r7, #136	@ 0x88
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	42028000 	.word	0x42028000
 8003bb4:	42028100 	.word	0x42028100
 8003bb8:	42028300 	.word	0x42028300
 8003bbc:	46021300 	.word	0x46021300
 8003bc0:	46021000 	.word	0x46021000
 8003bc4:	08004f39 	.word	0x08004f39
 8003bc8:	08005011 	.word	0x08005011
 8003bcc:	0800502d 	.word	0x0800502d

08003bd0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a77      	ldr	r2, [pc, #476]	@ (8003dd0 <HAL_ADC_IRQHandler+0x200>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADC_IRQHandler+0x30>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a76      	ldr	r2, [pc, #472]	@ (8003dd4 <HAL_ADC_IRQHandler+0x204>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADC_IRQHandler+0x34>
 8003c00:	4b75      	ldr	r3, [pc, #468]	@ (8003dd8 <HAL_ADC_IRQHandler+0x208>)
 8003c02:	e000      	b.n	8003c06 <HAL_ADC_IRQHandler+0x36>
 8003c04:	4b75      	ldr	r3, [pc, #468]	@ (8003ddc <HAL_ADC_IRQHandler+0x20c>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fae4 	bl	80031d4 <LL_ADC_GetMultimode>
 8003c0c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d017      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x78>
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d012      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d105      	bne.n	8003c3a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c32:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f001 fa2e 	bl	800509c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2202      	movs	r2, #2
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <HAL_ADC_IRQHandler+0x8c>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80d1 	beq.w	8003e0a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80cb 	beq.w	8003e0a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a53      	ldr	r2, [pc, #332]	@ (8003de0 <HAL_ADC_IRQHandler+0x210>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d06c      	beq.n	8003d70 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f932 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80aa 	beq.w	8003dfc <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a49      	ldr	r2, [pc, #292]	@ (8003dd4 <HAL_ADC_IRQHandler+0x204>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d002      	beq.n	8003cb8 <HAL_ADC_IRQHandler+0xe8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e000      	b.n	8003cba <HAL_ADC_IRQHandler+0xea>
 8003cb8:	4b45      	ldr	r3, [pc, #276]	@ (8003dd0 <HAL_ADC_IRQHandler+0x200>)
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d008      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d002      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b09      	cmp	r3, #9
 8003cd2:	d104      	bne.n	8003cde <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	e00c      	b.n	8003cf8 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd4 <HAL_ADC_IRQHandler+0x204>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d002      	beq.n	8003cee <HAL_ADC_IRQHandler+0x11e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	e000      	b.n	8003cf0 <HAL_ADC_IRQHandler+0x120>
 8003cee:	4b38      	ldr	r3, [pc, #224]	@ (8003dd0 <HAL_ADC_IRQHandler+0x200>)
 8003cf0:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d17c      	bne.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d175      	bne.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fb02 	bl	800331e <LL_ADC_REG_IsConversionOngoing>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11a      	bne.n	8003d56 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020c 	bic.w	r2, r2, #12
 8003d2e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d159      	bne.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	679a      	str	r2, [r3, #120]	@ 0x78
 8003d54:	e052      	b.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003d6e:	e045      	b.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff f8c5 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d03d      	beq.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d138      	bne.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d131      	bne.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fabe 	bl	800331e <LL_ADC_REG_IsConversionOngoing>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11d      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020c 	bic.w	r2, r2, #12
 8003db6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	679a      	str	r2, [r3, #120]	@ 0x78
 8003dcc:	e016      	b.n	8003dfc <HAL_ADC_IRQHandler+0x22c>
 8003dce:	bf00      	nop
 8003dd0:	42028000 	.word	0x42028000
 8003dd4:	42028100 	.word	0x42028100
 8003dd8:	42028300 	.word	0x42028300
 8003ddc:	46021300 	.word	0x46021300
 8003de0:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f99d 	bl	800413c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	220c      	movs	r2, #12
 8003e08:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a8c      	ldr	r2, [pc, #560]	@ (8004040 <HAL_ADC_IRQHandler+0x470>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f000 8095 	beq.w	8003f40 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <HAL_ADC_IRQHandler+0x25a>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8085 	beq.w	8003f40 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d07f      	beq.n	8003f40 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e50:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff f91e 	bl	800309e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003e62:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff f84b 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e6e:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a73      	ldr	r2, [pc, #460]	@ (8004044 <HAL_ADC_IRQHandler+0x474>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d002      	beq.n	8003e80 <HAL_ADC_IRQHandler+0x2b0>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	e000      	b.n	8003e82 <HAL_ADC_IRQHandler+0x2b2>
 8003e80:	4b71      	ldr	r3, [pc, #452]	@ (8004048 <HAL_ADC_IRQHandler+0x478>)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d008      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d002      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b07      	cmp	r3, #7
 8003e9a:	d104      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	e00c      	b.n	8003ec0 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a66      	ldr	r2, [pc, #408]	@ (8004044 <HAL_ADC_IRQHandler+0x474>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d002      	beq.n	8003eb6 <HAL_ADC_IRQHandler+0x2e6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_IRQHandler+0x2e8>
 8003eb6:	4b64      	ldr	r3, [pc, #400]	@ (8004048 <HAL_ADC_IRQHandler+0x478>)
 8003eb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d035      	beq.n	8003f32 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x310>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02d      	beq.n	8003f32 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d128      	bne.n	8003f32 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d121      	bne.n	8003f32 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fa26 	bl	8003344 <LL_ADC_INJ_IsConversionOngoing>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d119      	bne.n	8003f32 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f0c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f001 f894 	bl	8005060 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2260      	movs	r2, #96	@ 0x60
 8003f3e:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d011      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x39e>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00c      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8ff 	bl	8004164 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2280      	movs	r2, #128	@ 0x80
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d012      	beq.n	8003f9e <HAL_ADC_IRQHandler+0x3ce>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 f870 	bl	8005074 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d012      	beq.n	8003fce <HAL_ADC_IRQHandler+0x3fe>
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 f862 	bl	8005088 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d05d      	beq.n	8004094 <HAL_ADC_IRQHandler+0x4c4>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d058      	beq.n	8004094 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003fea:	2301      	movs	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fee:	e03b      	b.n	8004068 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a12      	ldr	r2, [pc, #72]	@ (8004040 <HAL_ADC_IRQHandler+0x470>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02c      	beq.n	8004054 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a10      	ldr	r2, [pc, #64]	@ (8004048 <HAL_ADC_IRQHandler+0x478>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_ADC_IRQHandler+0x444>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a0d      	ldr	r2, [pc, #52]	@ (8004044 <HAL_ADC_IRQHandler+0x474>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <HAL_ADC_IRQHandler+0x448>
 8004014:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <HAL_ADC_IRQHandler+0x47c>)
 8004016:	e000      	b.n	800401a <HAL_ADC_IRQHandler+0x44a>
 8004018:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <HAL_ADC_IRQHandler+0x480>)
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff f8e8 	bl	80031f0 <LL_ADC_GetMultiDMATransfer>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d020      	beq.n	8004068 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004026:	2301      	movs	r3, #1
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
 800402a:	e01d      	b.n	8004068 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800403a:	2301      	movs	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	e013      	b.n	8004068 <HAL_ADC_IRQHandler+0x498>
 8004040:	46021000 	.word	0x46021000
 8004044:	42028100 	.word	0x42028100
 8004048:	42028000 	.word	0x42028000
 800404c:	42028300 	.word	0x42028300
 8004050:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff f812 	bl	8003082 <LL_ADC_REG_GetDMATransfer>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004064:	2301      	movs	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10e      	bne.n	800408c <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004072:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407e:	f043 0202 	orr.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f876 	bl	8004178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2210      	movs	r2, #16
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01b      	beq.n	80040d6 <HAL_ADC_IRQHandler+0x506>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f877 	bl	80041b4 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a17      	ldr	r2, [pc, #92]	@ (8004138 <HAL_ADC_IRQHandler+0x568>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d126      	bne.n	800412e <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_ADC_IRQHandler+0x534>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f849 	bl	800418c <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004102:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00f      	beq.n	800412e <HAL_ADC_IRQHandler+0x55e>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f841 	bl	80041a0 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800412c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800412e:	bf00      	nop
 8004130:	3728      	adds	r7, #40	@ 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	46021000 	.word	0x46021000

0800413c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b0b7      	sub	sp, #220	@ 0xdc
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4aa8      	ldr	r2, [pc, #672]	@ (8004484 <HAL_ADC_ConfigChannel+0x2bc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d103      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d102      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x36>
 80041f8:	2302      	movs	r3, #2
 80041fa:	f000 bdfe 	b.w	8004dfa <HAL_ADC_ConfigChannel+0xc32>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f887 	bl	800331e <LL_ADC_REG_IsConversionOngoing>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 85c1 	bne.w	8004d9a <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a99      	ldr	r2, [pc, #612]	@ (8004484 <HAL_ADC_ConfigChannel+0x2bc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	f000 8409 	beq.w	8004a36 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d108      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x7a>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	2201      	movs	r2, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	e01d      	b.n	800427e <HAL_ADC_ConfigChannel+0xb6>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800425a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800425e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004266:	2320      	movs	r3, #32
 8004268:	e004      	b.n	8004274 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800426a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2201      	movs	r2, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	69d1      	ldr	r1, [r2, #28]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	430b      	orrs	r3, r1
 800428a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	f7fe fe47 	bl	8002f2c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f83b 	bl	800331e <LL_ADC_REG_IsConversionOngoing>
 80042a8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff f847 	bl	8003344 <LL_ADC_INJ_IsConversionOngoing>
 80042b6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 81df 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f040 81da 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	461a      	mov	r2, r3
 80042dc:	f7fe fef2 	bl	80030c4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d046      	beq.n	8004390 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6919      	ldr	r1, [r3, #16]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004312:	f7fe fd2d 	bl	8002d70 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6919      	ldr	r1, [r3, #16]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	461a      	mov	r2, r3
 8004324:	f7fe fd5b 	bl	8002dde <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	7e9b      	ldrb	r3, [r3, #26]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d11e      	bne.n	800436e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x17e>
 8004340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004344:	e000      	b.n	8004348 <HAL_ADC_ConfigChannel+0x180>
 8004346:	2300      	movs	r3, #0
 8004348:	461a      	mov	r2, r3
 800434a:	f7fe fd7e 	bl	8002e4a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800435a:	2b01      	cmp	r3, #1
 800435c:	d102      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x19c>
 800435e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004362:	e000      	b.n	8004366 <HAL_ADC_ConfigChannel+0x19e>
 8004364:	2300      	movs	r3, #0
 8004366:	461a      	mov	r2, r3
 8004368:	f7fe fd54 	bl	8002e14 <LL_ADC_SetOffsetSignedSaturation>
 800436c:	e189      	b.n	8004682 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2200      	movs	r2, #0
 8004378:	4619      	mov	r1, r3
 800437a:	f7fe fd66 	bl	8002e4a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2200      	movs	r2, #0
 8004388:	4619      	mov	r1, r3
 800438a:	f7fe fd43 	bl	8002e14 <LL_ADC_SetOffsetSignedSaturation>
 800438e:	e178      	b.n	8004682 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fd0b 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 800439c:	4603      	mov	r3, r0
 800439e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x1f4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fd00 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 80043b2:	4603      	mov	r3, r0
 80043b4:	0e9b      	lsrs	r3, r3, #26
 80043b6:	f003 021f 	and.w	r2, r3, #31
 80043ba:	e01e      	b.n	80043fa <HAL_ADC_ConfigChannel+0x232>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fcf5 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80043da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80043e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e004      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80043ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d105      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x24a>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	0e9b      	lsrs	r3, r3, #26
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	e018      	b.n	8004444 <HAL_ADC_ConfigChannel+0x27c>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004426:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800442a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800442e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004436:	2320      	movs	r3, #32
 8004438:	e004      	b.n	8004444 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800443a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004444:	429a      	cmp	r2, r3
 8004446:	d107      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	2100      	movs	r1, #0
 8004454:	f7fe fc8c 	bl	8002d70 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fca7 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10c      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x2c0>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe fc9c 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 800447a:	4603      	mov	r3, r0
 800447c:	0e9b      	lsrs	r3, r3, #26
 800447e:	f003 021f 	and.w	r2, r3, #31
 8004482:	e020      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x2fe>
 8004484:	46021000 	.word	0x46021000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fc8f 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 8004494:	4603      	mov	r3, r0
 8004496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80044a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80044ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80044b6:	2320      	movs	r3, #32
 80044b8:	e004      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80044ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <HAL_ADC_ConfigChannel+0x316>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	0e9b      	lsrs	r3, r3, #26
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	e018      	b.n	8004510 <HAL_ADC_ConfigChannel+0x348>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80044f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80044fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004502:	2320      	movs	r3, #32
 8004504:	e004      	b.n	8004510 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2300      	movs	r3, #0
 800451e:	2101      	movs	r1, #1
 8004520:	f7fe fc26 	bl	8002d70 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fc41 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 8004530:	4603      	mov	r3, r0
 8004532:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x388>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fc36 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 8004546:	4603      	mov	r3, r0
 8004548:	0e9b      	lsrs	r3, r3, #26
 800454a:	f003 021f 	and.w	r2, r3, #31
 800454e:	e01a      	b.n	8004586 <HAL_ADC_ConfigChannel+0x3be>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fc2b 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800456a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800456e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004576:	2320      	movs	r3, #32
 8004578:	e004      	b.n	8004584 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800457a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <HAL_ADC_ConfigChannel+0x3d6>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	0e9b      	lsrs	r3, r3, #26
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	e011      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x3fa>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80045ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80045b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80045b6:	2320      	movs	r3, #32
 80045b8:	e003      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80045ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d107      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	2300      	movs	r3, #0
 80045d0:	2102      	movs	r1, #2
 80045d2:	f7fe fbcd 	bl	8002d70 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2103      	movs	r1, #3
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fbe8 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x43a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2103      	movs	r1, #3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fbdd 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 80045f8:	4603      	mov	r3, r0
 80045fa:	0e9b      	lsrs	r3, r3, #26
 80045fc:	f003 021f 	and.w	r2, r3, #31
 8004600:	e017      	b.n	8004632 <HAL_ADC_ConfigChannel+0x46a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2103      	movs	r1, #3
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fbd2 	bl	8002db2 <LL_ADC_GetOffsetChannel>
 800460e:	4603      	mov	r3, r0
 8004610:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800461a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800461c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800461e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004624:	2320      	movs	r3, #32
 8004626:	e003      	b.n	8004630 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <HAL_ADC_ConfigChannel+0x482>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	0e9b      	lsrs	r3, r3, #26
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	e011      	b.n	800466e <HAL_ADC_ConfigChannel+0x4a6>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800465c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004662:	2320      	movs	r3, #32
 8004664:	e003      	b.n	800466e <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004668:	fab3 f383 	clz	r3, r3
 800466c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800466e:	429a      	cmp	r2, r3
 8004670:	d107      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	2103      	movs	r1, #3
 800467e:	f7fe fb77 	bl	8002d70 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fe22 	bl	80032d0 <LL_ADC_IsEnabled>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	f040 83ad 	bne.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6819      	ldr	r1, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	461a      	mov	r2, r3
 80046a2:	f7fe fd73 	bl	800318c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046ae:	f040 80d6 	bne.w	800485e <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x50e>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0e9b      	lsrs	r3, r3, #26
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	bf94      	ite	ls
 80046ce:	2301      	movls	r3, #1
 80046d0:	2300      	movhi	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	e019      	b.n	800470a <HAL_ADC_ConfigChannel+0x542>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80046e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80046e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80046ee:	2320      	movs	r3, #32
 80046f0:	e003      	b.n	80046fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80046f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2b09      	cmp	r3, #9
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d04d      	beq.n	80047aa <HAL_ADC_ConfigChannel+0x5e2>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <HAL_ADC_ConfigChannel+0x562>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	0e9b      	lsrs	r3, r3, #26
 8004720:	3301      	adds	r3, #1
 8004722:	069b      	lsls	r3, r3, #26
 8004724:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004728:	e015      	b.n	8004756 <HAL_ADC_ConfigChannel+0x58e>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800473c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004742:	2320      	movs	r3, #32
 8004744:	e003      	b.n	800474e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3301      	adds	r3, #1
 8004750:	069b      	lsls	r3, r3, #26
 8004752:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x5ae>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	0e9b      	lsrs	r3, r3, #26
 8004768:	3301      	adds	r3, #1
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	2101      	movs	r1, #1
 8004770:	fa01 f303 	lsl.w	r3, r1, r3
 8004774:	e017      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x5de>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800478e:	2320      	movs	r3, #32
 8004790:	e003      	b.n	800479a <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	3301      	adds	r3, #1
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	4313      	orrs	r3, r2
 80047a8:	e04e      	b.n	8004848 <HAL_ADC_ConfigChannel+0x680>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d107      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x5fe>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	0e9b      	lsrs	r3, r3, #26
 80047bc:	3301      	adds	r3, #1
 80047be:	069b      	lsls	r3, r3, #26
 80047c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047c4:	e015      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x62a>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80047d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80047de:	2320      	movs	r3, #32
 80047e0:	e003      	b.n	80047ea <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	069b      	lsls	r3, r3, #26
 80047ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x64a>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	0e9b      	lsrs	r3, r3, #26
 8004804:	3301      	adds	r3, #1
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	e017      	b.n	8004842 <HAL_ADC_ConfigChannel+0x67a>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	61bb      	str	r3, [r7, #24]
  return result;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800482a:	2320      	movs	r3, #32
 800482c:	e003      	b.n	8004836 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	3301      	adds	r3, #1
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f303 	lsl.w	r3, r1, r3
 8004842:	4313      	orrs	r3, r2
 8004844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	461a      	mov	r2, r3
 8004856:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800485a:	f7fe fc33 	bl	80030c4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f280 82c3 	bge.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a92      	ldr	r2, [pc, #584]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_ADC_ConfigChannel+0x6b4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a91      	ldr	r2, [pc, #580]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x6b8>
 800487c:	4b90      	ldr	r3, [pc, #576]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x8f8>)
 800487e:	e000      	b.n	8004882 <HAL_ADC_ConfigChannel+0x6ba>
 8004880:	4b90      	ldr	r3, [pc, #576]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8fc>)
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fa46 	bl	8002d14 <LL_ADC_GetCommonPathInternalCh>
 8004888:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a89      	ldr	r2, [pc, #548]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0x6d8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a88      	ldr	r2, [pc, #544]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10e      	bne.n	80048be <HAL_ADC_ConfigChannel+0x6f6>
 80048a0:	4885      	ldr	r0, [pc, #532]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 80048a2:	f7fe fd15 	bl	80032d0 <LL_ADC_IsEnabled>
 80048a6:	4604      	mov	r4, r0
 80048a8:	4884      	ldr	r0, [pc, #528]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 80048aa:	f7fe fd11 	bl	80032d0 <LL_ADC_IsEnabled>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4323      	orrs	r3, r4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e008      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x708>
 80048be:	4882      	ldr	r0, [pc, #520]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x900>)
 80048c0:	f7fe fd06 	bl	80032d0 <LL_ADC_IsEnabled>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80a6 	beq.w	8004a22 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7c      	ldr	r2, [pc, #496]	@ (8004acc <HAL_ADC_ConfigChannel+0x904>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d13c      	bne.n	800495a <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d136      	bne.n	800495a <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a71      	ldr	r2, [pc, #452]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00a      	beq.n	800490c <HAL_ADC_ConfigChannel+0x744>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a70      	ldr	r2, [pc, #448]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d005      	beq.n	800490c <HAL_ADC_ConfigChannel+0x744>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a70      	ldr	r2, [pc, #448]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x900>)
 8004906:	4293      	cmp	r3, r2
 8004908:	f040 826e 	bne.w	8004de8 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a69      	ldr	r2, [pc, #420]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_ADC_ConfigChannel+0x758>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a68      	ldr	r2, [pc, #416]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x75c>
 8004920:	4a67      	ldr	r2, [pc, #412]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x8f8>)
 8004922:	e000      	b.n	8004926 <HAL_ADC_ConfigChannel+0x75e>
 8004924:	4a67      	ldr	r2, [pc, #412]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8fc>)
 8004926:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800492a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fe f9dc 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004936:	4b66      	ldr	r3, [pc, #408]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x908>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	4a65      	ldr	r2, [pc, #404]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x90c>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	3301      	adds	r3, #1
 8004946:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004948:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800494a:	e002      	b.n	8004952 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	3b01      	subs	r3, #1
 8004950:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f9      	bne.n	800494c <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004958:	e246      	b.n	8004de8 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x910>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d12b      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004964:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800496c:	2b00      	cmp	r3, #0
 800496e:	d125      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a50      	ldr	r2, [pc, #320]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00a      	beq.n	8004990 <HAL_ADC_ConfigChannel+0x7c8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a4f      	ldr	r2, [pc, #316]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d005      	beq.n	8004990 <HAL_ADC_ConfigChannel+0x7c8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a4f      	ldr	r2, [pc, #316]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x900>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f040 822e 	bne.w	8004dec <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a48      	ldr	r2, [pc, #288]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_ADC_ConfigChannel+0x7dc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a47      	ldr	r2, [pc, #284]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d101      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x7e0>
 80049a4:	4a46      	ldr	r2, [pc, #280]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x8f8>)
 80049a6:	e000      	b.n	80049aa <HAL_ADC_ConfigChannel+0x7e2>
 80049a8:	4a46      	ldr	r2, [pc, #280]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8fc>)
 80049aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f7fe f99a 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049ba:	e217      	b.n	8004dec <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a46      	ldr	r2, [pc, #280]	@ (8004adc <HAL_ADC_ConfigChannel+0x914>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f040 8213 	bne.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 820c 	bne.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a37      	ldr	r2, [pc, #220]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00a      	beq.n	80049f6 <HAL_ADC_ConfigChannel+0x82e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a35      	ldr	r2, [pc, #212]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d005      	beq.n	80049f6 <HAL_ADC_ConfigChannel+0x82e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a36      	ldr	r2, [pc, #216]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x900>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	f040 81fc 	bne.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x8f0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_ADC_ConfigChannel+0x842>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2d      	ldr	r2, [pc, #180]	@ (8004abc <HAL_ADC_ConfigChannel+0x8f4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x846>
 8004a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a0c:	e000      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x848>
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe f967 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
 8004a20:	e1e5      	b.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a34:	e1db      	b.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	f000 811b 	beq.w	8004c7e <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a50:	d004      	beq.n	8004a5c <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a56:	4a22      	ldr	r2, [pc, #136]	@ (8004ae0 <HAL_ADC_ConfigChannel+0x918>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d107      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe fac1 	bl	8002fec <LL_ADC_REG_SetSequencerChAdd>
 8004a6a:	e059      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	210f      	movs	r1, #15
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	401a      	ands	r2, r3
 8004a84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d105      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x8d4>
 8004a90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a94:	0e9b      	lsrs	r3, r3, #26
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	e027      	b.n	8004aec <HAL_ADC_ConfigChannel+0x924>
 8004a9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004aa0:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	fa93 f3a3 	rbit	r3, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
  return result;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d117      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	e019      	b.n	8004aec <HAL_ADC_ConfigChannel+0x924>
 8004ab8:	42028000 	.word	0x42028000
 8004abc:	42028100 	.word	0x42028100
 8004ac0:	42028300 	.word	0x42028300
 8004ac4:	46021300 	.word	0x46021300
 8004ac8:	46021000 	.word	0x46021000
 8004acc:	ce080000 	.word	0xce080000
 8004ad0:	20000020 	.word	0x20000020
 8004ad4:	053e2d63 	.word	0x053e2d63
 8004ad8:	ca040000 	.word	0xca040000
 8004adc:	80000001 	.word	0x80000001
 8004ae0:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	6849      	ldr	r1, [r1, #4]
 8004af0:	f001 011f 	and.w	r1, r1, #31
 8004af4:	408b      	lsls	r3, r1
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	089b      	lsrs	r3, r3, #2
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d808      	bhi.n	8004b20 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f7fe fa06 	bl	8002f2c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b2e:	f7fe fac9 	bl	80030c4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f280 8159 	bge.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a9b      	ldr	r2, [pc, #620]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_ADC_ConfigChannel+0x988>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a9a      	ldr	r2, [pc, #616]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x98c>
 8004b50:	4b99      	ldr	r3, [pc, #612]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b52:	e000      	b.n	8004b56 <HAL_ADC_ConfigChannel+0x98e>
 8004b54:	4b99      	ldr	r3, [pc, #612]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe f8dc 	bl	8002d14 <LL_ADC_GetCommonPathInternalCh>
 8004b5c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a96      	ldr	r2, [pc, #600]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbf8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d12b      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d125      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a8d      	ldr	r2, [pc, #564]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <HAL_ADC_ConfigChannel+0x9c2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a8b      	ldr	r2, [pc, #556]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x9c6>
 8004b8a:	4a8b      	ldr	r2, [pc, #556]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b8c:	e000      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x9c8>
 8004b8e:	4a8b      	ldr	r2, [pc, #556]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fe f8a7 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004ba0:	4b88      	ldr	r3, [pc, #544]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbfc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	4a88      	ldr	r2, [pc, #544]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xc00>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004bb2:	e002      	b.n	8004bba <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f9      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004bc0:	e045      	b.n	8004c4e <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a81      	ldr	r2, [pc, #516]	@ (8004dcc <HAL_ADC_ConfigChannel+0xc04>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d11b      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d115      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a74      	ldr	r2, [pc, #464]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_ADC_ConfigChannel+0xa24>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0xa28>
 8004bec:	4a72      	ldr	r2, [pc, #456]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004bee:	e000      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0xa2a>
 8004bf0:	4a72      	ldr	r2, [pc, #456]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7fe f876 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
 8004c02:	e024      	b.n	8004c4e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a71      	ldr	r2, [pc, #452]	@ (8004dd0 <HAL_ADC_ConfigChannel+0xc08>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d11f      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d115      	bne.n	8004c46 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a64      	ldr	r2, [pc, #400]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_ADC_ConfigChannel+0xa66>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a62      	ldr	r2, [pc, #392]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0xa6a>
 8004c2e:	4a62      	ldr	r2, [pc, #392]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c30:	e000      	b.n	8004c34 <HAL_ADC_ConfigChannel+0xa6c>
 8004c32:	4a62      	ldr	r2, [pc, #392]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f7fe f855 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
 8004c44:	e003      	b.n	8004c4e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a62      	ldr	r2, [pc, #392]	@ (8004dd4 <HAL_ADC_ConfigChannel+0xc0c>)
 8004c4c:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a61      	ldr	r2, [pc, #388]	@ (8004dd8 <HAL_ADC_ConfigChannel+0xc10>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	f040 80ca 	bne.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f040 80c3 	bne.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004c7c:	e0b7      	b.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c86:	d004      	beq.n	8004c92 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004c8c:	4a53      	ldr	r2, [pc, #332]	@ (8004ddc <HAL_ADC_ConfigChannel+0xc14>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d106      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe f9d9 	bl	8003052 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f280 80a2 	bge.w	8004dee <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a40      	ldr	r2, [pc, #256]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_ADC_ConfigChannel+0xaf6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0xafa>
 8004cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004cc0:	e000      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0xafc>
 8004cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe f825 	bl	8002d14 <LL_ADC_GetCommonPathInternalCh>
 8004cca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a43      	ldr	r2, [pc, #268]	@ (8004de0 <HAL_ADC_ConfigChannel+0xc18>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d115      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a34      	ldr	r2, [pc, #208]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_ADC_ConfigChannel+0xb24>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a33      	ldr	r2, [pc, #204]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d101      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0xb28>
 8004cec:	4a32      	ldr	r2, [pc, #200]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004cee:	e000      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0xb2a>
 8004cf0:	4a32      	ldr	r2, [pc, #200]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004cf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7fd fff6 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
 8004d02:	e034      	b.n	8004d6e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a36      	ldr	r2, [pc, #216]	@ (8004de4 <HAL_ADC_ConfigChannel+0xc1c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d115      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a27      	ldr	r2, [pc, #156]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_ADC_ConfigChannel+0xb5a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a25      	ldr	r2, [pc, #148]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0xb5e>
 8004d22:	4a25      	ldr	r2, [pc, #148]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d24:	e000      	b.n	8004d28 <HAL_ADC_ConfigChannel+0xb60>
 8004d26:	4a25      	ldr	r2, [pc, #148]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004d28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f7fd ffdb 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
 8004d38:	e019      	b.n	8004d6e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <HAL_ADC_ConfigChannel+0xc08>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d114      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_ADC_ConfigChannel+0xb90>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <HAL_ADC_ConfigChannel+0xbec>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0xb94>
 8004d58:	4a17      	ldr	r2, [pc, #92]	@ (8004db8 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d5a:	e000      	b.n	8004d5e <HAL_ADC_ConfigChannel+0xb96>
 8004d5c:	4a17      	ldr	r2, [pc, #92]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbf4>)
 8004d5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d62:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7fd ffc0 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <HAL_ADC_ConfigChannel+0xc10>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d13a      	bne.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d134      	bne.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004d98:	e029      	b.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004dac:	e01f      	b.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
 8004dae:	bf00      	nop
 8004db0:	42028000 	.word	0x42028000
 8004db4:	42028100 	.word	0x42028100
 8004db8:	42028300 	.word	0x42028300
 8004dbc:	46021300 	.word	0x46021300
 8004dc0:	b6002000 	.word	0xb6002000
 8004dc4:	20000020 	.word	0x20000020
 8004dc8:	053e2d63 	.word	0x053e2d63
 8004dcc:	ba004000 	.word	0xba004000
 8004dd0:	80000001 	.word	0x80000001
 8004dd4:	b2001000 	.word	0xb2001000
 8004dd8:	d7200000 	.word	0xd7200000
 8004ddc:	80000010 	.word	0x80000010
 8004de0:	ce080000 	.word	0xce080000
 8004de4:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dec:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004df6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	37dc      	adds	r7, #220	@ 0xdc
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd90      	pop	{r4, r7, pc}
 8004e02:	bf00      	nop

08004e04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fa5d 	bl	80032d0 <LL_ADC_IsEnabled>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d17b      	bne.n	8004f14 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	4b3f      	ldr	r3, [pc, #252]	@ (8004f20 <ADC_Enable+0x11c>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00d      	beq.n	8004e46 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e2e:	f043 0210 	orr.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e067      	b.n	8004f16 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe fa28 	bl	80032a8 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <ADC_Enable+0x66>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2f      	ldr	r2, [pc, #188]	@ (8004f24 <ADC_Enable+0x120>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d054      	beq.n	8004f14 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004e6a:	f7fd fed5 	bl	8002c18 <HAL_GetTick>
 8004e6e:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	@ (8004f28 <ADC_Enable+0x124>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <ADC_Enable+0x80>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8004f2c <ADC_Enable+0x128>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <ADC_Enable+0x84>
 8004e84:	4b2a      	ldr	r3, [pc, #168]	@ (8004f30 <ADC_Enable+0x12c>)
 8004e86:	e000      	b.n	8004e8a <ADC_Enable+0x86>
 8004e88:	4b2a      	ldr	r3, [pc, #168]	@ (8004f34 <ADC_Enable+0x130>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe f9a2 	bl	80031d4 <LL_ADC_GetMultimode>
 8004e90:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a25      	ldr	r2, [pc, #148]	@ (8004f2c <ADC_Enable+0x128>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d002      	beq.n	8004ea2 <ADC_Enable+0x9e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	e000      	b.n	8004ea4 <ADC_Enable+0xa0>
 8004ea2:	4b21      	ldr	r3, [pc, #132]	@ (8004f28 <ADC_Enable+0x124>)
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d02c      	beq.n	8004f06 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d130      	bne.n	8004f14 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eb2:	e028      	b.n	8004f06 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fa09 	bl	80032d0 <LL_ADC_IsEnabled>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe f9ed 	bl	80032a8 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ece:	f7fd fea3 	bl	8002c18 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d914      	bls.n	8004f06 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d00d      	beq.n	8004f06 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eee:	f043 0210 	orr.w	r2, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004efa:	f043 0201 	orr.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e007      	b.n	8004f16 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d1cf      	bne.n	8004eb4 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	8000003f 	.word	0x8000003f
 8004f24:	46021000 	.word	0x46021000
 8004f28:	42028000 	.word	0x42028000
 8004f2c:	42028100 	.word	0x42028100
 8004f30:	42028300 	.word	0x42028300
 8004f34:	46021300 	.word	0x46021300

08004f38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d14b      	bne.n	8004fea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d021      	beq.n	8004fb0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fd ffc7 	bl	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d032      	beq.n	8004fe2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d12b      	bne.n	8004fe2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11f      	bne.n	8004fe2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fa6:	f043 0201 	orr.w	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	679a      	str	r2, [r3, #120]	@ 0x78
 8004fae:	e018      	b.n	8004fe2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d111      	bne.n	8004fe2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d105      	bne.n	8004fe2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fda:	f043 0201 	orr.w	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff f8aa 	bl	800413c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fe8:	e00e      	b.n	8005008 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff f8be 	bl	8004178 <HAL_ADC_ErrorCallback>
}
 8004ffc:	e004      	b.n	8005008 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4798      	blx	r3
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff f896 	bl	8004150 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800503e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff f890 	bl	8004178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c0:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <__NVIC_SetPriorityGrouping+0x44>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050cc:	4013      	ands	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050e2:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <__NVIC_SetPriorityGrouping+0x44>)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	60d3      	str	r3, [r2, #12]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050fc:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <__NVIC_GetPriorityGrouping+0x18>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 0307 	and.w	r3, r3, #7
}
 8005106:	4618      	mov	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800511e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005122:	2b00      	cmp	r3, #0
 8005124:	db0b      	blt.n	800513e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	f003 021f 	and.w	r2, r3, #31
 800512c:	4907      	ldr	r1, [pc, #28]	@ (800514c <__NVIC_EnableIRQ+0x38>)
 800512e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2001      	movs	r0, #1
 8005136:	fa00 f202 	lsl.w	r2, r0, r2
 800513a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000e100 	.word	0xe000e100

08005150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	6039      	str	r1, [r7, #0]
 800515a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800515c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005160:	2b00      	cmp	r3, #0
 8005162:	db0a      	blt.n	800517a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	490c      	ldr	r1, [pc, #48]	@ (800519c <__NVIC_SetPriority+0x4c>)
 800516a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	440b      	add	r3, r1
 8005174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005178:	e00a      	b.n	8005190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4908      	ldr	r1, [pc, #32]	@ (80051a0 <__NVIC_SetPriority+0x50>)
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	3b04      	subs	r3, #4
 8005188:	0112      	lsls	r2, r2, #4
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	440b      	add	r3, r1
 800518e:	761a      	strb	r2, [r3, #24]
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000e100 	.word	0xe000e100
 80051a0:	e000ed00 	.word	0xe000ed00

080051a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	@ 0x24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f1c3 0307 	rsb	r3, r3, #7
 80051be:	2b04      	cmp	r3, #4
 80051c0:	bf28      	it	cs
 80051c2:	2304      	movcs	r3, #4
 80051c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3304      	adds	r3, #4
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d902      	bls.n	80051d4 <NVIC_EncodePriority+0x30>
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3b03      	subs	r3, #3
 80051d2:	e000      	b.n	80051d6 <NVIC_EncodePriority+0x32>
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	401a      	ands	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051ec:	f04f 31ff 	mov.w	r1, #4294967295
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	43d9      	mvns	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051fc:	4313      	orrs	r3, r2
         );
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3724      	adds	r7, #36	@ 0x24
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ff4c 	bl	80050b0 <__NVIC_SetPriorityGrouping>
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800522e:	f7ff ff63 	bl	80050f8 <__NVIC_GetPriorityGrouping>
 8005232:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7ff ffb3 	bl	80051a4 <NVIC_EncodePriority>
 800523e:	4602      	mov	r2, r0
 8005240:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff82 	bl	8005150 <__NVIC_SetPriority>
}
 800524c:	bf00      	nop
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800525e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff56 	bl	8005114 <__NVIC_EnableIRQ>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3b01      	subs	r3, #1
 800527c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005280:	d301      	bcc.n	8005286 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005282:	2301      	movs	r3, #1
 8005284:	e00d      	b.n	80052a2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005286:	4a0a      	ldr	r2, [pc, #40]	@ (80052b0 <HAL_SYSTICK_Config+0x40>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3b01      	subs	r3, #1
 800528c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800528e:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <HAL_SYSTICK_Config+0x40>)
 8005290:	2200      	movs	r2, #0
 8005292:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_SYSTICK_Config+0x40>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a05      	ldr	r2, [pc, #20]	@ (80052b0 <HAL_SYSTICK_Config+0x40>)
 800529a:	f043 0303 	orr.w	r3, r3, #3
 800529e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	e000e010 	.word	0xe000e010

080052b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d844      	bhi.n	800534c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80052c2:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052eb 	.word	0x080052eb
 80052cc:	08005309 	.word	0x08005309
 80052d0:	0800532b 	.word	0x0800532b
 80052d4:	0800534d 	.word	0x0800534d
 80052d8:	080052dd 	.word	0x080052dd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80052dc:	4b1f      	ldr	r3, [pc, #124]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	6013      	str	r3, [r2, #0]
      break;
 80052e8:	e031      	b.n	800534e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80052ea:	4b1c      	ldr	r3, [pc, #112]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052f0:	f023 0304 	bic.w	r3, r3, #4
 80052f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80052f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005360 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80052f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052fc:	4a18      	ldr	r2, [pc, #96]	@ (8005360 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80052fe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005306:	e022      	b.n	800534e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005308:	4b14      	ldr	r3, [pc, #80]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a13      	ldr	r2, [pc, #76]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800530e:	f023 0304 	bic.w	r3, r3, #4
 8005312:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005314:	4b12      	ldr	r3, [pc, #72]	@ (8005360 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800531a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800531e:	4a10      	ldr	r2, [pc, #64]	@ (8005360 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005320:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005328:	e011      	b.n	800534e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800532a:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a0b      	ldr	r2, [pc, #44]	@ (800535c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005336:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800533c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005340:	4a07      	ldr	r2, [pc, #28]	@ (8005360 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005342:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800534a:	e000      	b.n	800534e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800534c:	bf00      	nop
  }
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	e000e010 	.word	0xe000e010
 8005360:	46020c00 	.word	0x46020c00

08005364 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800536a:	4b19      	ldr	r3, [pc, #100]	@ (80053d0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005376:	2304      	movs	r3, #4
 8005378:	607b      	str	r3, [r7, #4]
 800537a:	e021      	b.n	80053c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800537c:	4b15      	ldr	r3, [pc, #84]	@ (80053d4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800537e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005382:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005386:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800538e:	d011      	beq.n	80053b4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005396:	d810      	bhi.n	80053ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a4:	d003      	beq.n	80053ae <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80053a6:	e008      	b.n	80053ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053a8:	2300      	movs	r3, #0
 80053aa:	607b      	str	r3, [r7, #4]
        break;
 80053ac:	e008      	b.n	80053c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80053ae:	2301      	movs	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
        break;
 80053b2:	e005      	b.n	80053c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80053b4:	2302      	movs	r3, #2
 80053b6:	607b      	str	r3, [r7, #4]
        break;
 80053b8:	e002      	b.n	80053c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
        break;
 80053be:	bf00      	nop
    }
  }
  return systick_source;
 80053c0:	687b      	ldr	r3, [r7, #4]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000e010 	.word	0xe000e010
 80053d4:	46020c00 	.word	0x46020c00

080053d8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80053e0:	f7fd fc1a 	bl	8002c18 <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0db      	b.n	80055a8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a6e      	ldr	r2, [pc, #440]	@ (80055b0 <HAL_DMA_Init+0x1d8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	f000 809f 	beq.w	800553a <HAL_DMA_Init+0x162>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6c      	ldr	r2, [pc, #432]	@ (80055b4 <HAL_DMA_Init+0x1dc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f000 8099 	beq.w	800553a <HAL_DMA_Init+0x162>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6a      	ldr	r2, [pc, #424]	@ (80055b8 <HAL_DMA_Init+0x1e0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	f000 8093 	beq.w	800553a <HAL_DMA_Init+0x162>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a68      	ldr	r2, [pc, #416]	@ (80055bc <HAL_DMA_Init+0x1e4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f000 808d 	beq.w	800553a <HAL_DMA_Init+0x162>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a66      	ldr	r2, [pc, #408]	@ (80055c0 <HAL_DMA_Init+0x1e8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	f000 8087 	beq.w	800553a <HAL_DMA_Init+0x162>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a64      	ldr	r2, [pc, #400]	@ (80055c4 <HAL_DMA_Init+0x1ec>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f000 8081 	beq.w	800553a <HAL_DMA_Init+0x162>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a62      	ldr	r2, [pc, #392]	@ (80055c8 <HAL_DMA_Init+0x1f0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d07b      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a61      	ldr	r2, [pc, #388]	@ (80055cc <HAL_DMA_Init+0x1f4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d076      	beq.n	800553a <HAL_DMA_Init+0x162>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a5f      	ldr	r2, [pc, #380]	@ (80055d0 <HAL_DMA_Init+0x1f8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d071      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a5e      	ldr	r2, [pc, #376]	@ (80055d4 <HAL_DMA_Init+0x1fc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d06c      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5c      	ldr	r2, [pc, #368]	@ (80055d8 <HAL_DMA_Init+0x200>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d067      	beq.n	800553a <HAL_DMA_Init+0x162>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5b      	ldr	r2, [pc, #364]	@ (80055dc <HAL_DMA_Init+0x204>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d062      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a59      	ldr	r2, [pc, #356]	@ (80055e0 <HAL_DMA_Init+0x208>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d05d      	beq.n	800553a <HAL_DMA_Init+0x162>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a58      	ldr	r2, [pc, #352]	@ (80055e4 <HAL_DMA_Init+0x20c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d058      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a56      	ldr	r2, [pc, #344]	@ (80055e8 <HAL_DMA_Init+0x210>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d053      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a55      	ldr	r2, [pc, #340]	@ (80055ec <HAL_DMA_Init+0x214>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d04e      	beq.n	800553a <HAL_DMA_Init+0x162>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a53      	ldr	r2, [pc, #332]	@ (80055f0 <HAL_DMA_Init+0x218>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d049      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a52      	ldr	r2, [pc, #328]	@ (80055f4 <HAL_DMA_Init+0x21c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d044      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a50      	ldr	r2, [pc, #320]	@ (80055f8 <HAL_DMA_Init+0x220>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d03f      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a4f      	ldr	r2, [pc, #316]	@ (80055fc <HAL_DMA_Init+0x224>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03a      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005600 <HAL_DMA_Init+0x228>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d035      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005604 <HAL_DMA_Init+0x22c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d030      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005608 <HAL_DMA_Init+0x230>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02b      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a49      	ldr	r2, [pc, #292]	@ (800560c <HAL_DMA_Init+0x234>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d026      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a47      	ldr	r2, [pc, #284]	@ (8005610 <HAL_DMA_Init+0x238>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d021      	beq.n	800553a <HAL_DMA_Init+0x162>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a46      	ldr	r2, [pc, #280]	@ (8005614 <HAL_DMA_Init+0x23c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01c      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a44      	ldr	r2, [pc, #272]	@ (8005618 <HAL_DMA_Init+0x240>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d017      	beq.n	800553a <HAL_DMA_Init+0x162>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a43      	ldr	r2, [pc, #268]	@ (800561c <HAL_DMA_Init+0x244>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d012      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a41      	ldr	r2, [pc, #260]	@ (8005620 <HAL_DMA_Init+0x248>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00d      	beq.n	800553a <HAL_DMA_Init+0x162>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a40      	ldr	r2, [pc, #256]	@ (8005624 <HAL_DMA_Init+0x24c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d008      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3e      	ldr	r2, [pc, #248]	@ (8005628 <HAL_DMA_Init+0x250>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <HAL_DMA_Init+0x162>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3d      	ldr	r2, [pc, #244]	@ (800562c <HAL_DMA_Init+0x254>)
 8005538:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0206 	orr.w	r2, r2, #6
 8005558:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800555a:	e00f      	b.n	800557c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800555c:	f7fd fb5c 	bl	8002c18 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b05      	cmp	r3, #5
 8005568:	d908      	bls.n	800557c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2210      	movs	r2, #16
 800556e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2203      	movs	r2, #3
 8005574:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e015      	b.n	80055a8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e8      	bne.n	800555c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fb26 	bl	8005bdc <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40020050 	.word	0x40020050
 80055b4:	50020050 	.word	0x50020050
 80055b8:	400200d0 	.word	0x400200d0
 80055bc:	500200d0 	.word	0x500200d0
 80055c0:	40020150 	.word	0x40020150
 80055c4:	50020150 	.word	0x50020150
 80055c8:	400201d0 	.word	0x400201d0
 80055cc:	500201d0 	.word	0x500201d0
 80055d0:	40020250 	.word	0x40020250
 80055d4:	50020250 	.word	0x50020250
 80055d8:	400202d0 	.word	0x400202d0
 80055dc:	500202d0 	.word	0x500202d0
 80055e0:	40020350 	.word	0x40020350
 80055e4:	50020350 	.word	0x50020350
 80055e8:	400203d0 	.word	0x400203d0
 80055ec:	500203d0 	.word	0x500203d0
 80055f0:	40020450 	.word	0x40020450
 80055f4:	50020450 	.word	0x50020450
 80055f8:	400204d0 	.word	0x400204d0
 80055fc:	500204d0 	.word	0x500204d0
 8005600:	40020550 	.word	0x40020550
 8005604:	50020550 	.word	0x50020550
 8005608:	400205d0 	.word	0x400205d0
 800560c:	500205d0 	.word	0x500205d0
 8005610:	40020650 	.word	0x40020650
 8005614:	50020650 	.word	0x50020650
 8005618:	400206d0 	.word	0x400206d0
 800561c:	500206d0 	.word	0x500206d0
 8005620:	40020750 	.word	0x40020750
 8005624:	50020750 	.word	0x50020750
 8005628:	400207d0 	.word	0x400207d0
 800562c:	500207d0 	.word	0x500207d0

08005630 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e04f      	b.n	80056e8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_DMA_Start_IT+0x26>
 8005652:	2302      	movs	r3, #2
 8005654:	e048      	b.n	80056e8 <HAL_DMA_Start_IT+0xb8>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d136      	bne.n	80056d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fa86 	bl	8005b90 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005692:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056aa:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695a      	ldr	r2, [r3, #20]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056c2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e007      	b.n	80056e8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2240      	movs	r2, #64	@ 0x40
 80056dc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80056f8:	f7fd fa8e 	bl	8002c18 <HAL_GetTick>
 80056fc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e06b      	b.n	80057e0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d008      	beq.n	8005726 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e05c      	b.n	80057e0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0204 	orr.w	r2, r2, #4
 8005734:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2205      	movs	r2, #5
 800573a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800573e:	e020      	b.n	8005782 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005740:	f7fd fa6a 	bl	8002c18 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b05      	cmp	r3, #5
 800574c:	d919      	bls.n	8005782 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005752:	f043 0210 	orr.w	r2, r3, #16
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2203      	movs	r2, #3
 800575e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005772:	2201      	movs	r2, #1
 8005774:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e02e      	b.n	80057e0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0d7      	beq.n	8005740 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0202 	orr.w	r2, r2, #2
 800579e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2204      	movs	r2, #4
 80057a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80057b0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ca:	2201      	movs	r2, #1
 80057cc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2200      	movs	r2, #0
 80057d4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e019      	b.n	800582e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d004      	beq.n	8005810 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e00e      	b.n	800582e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2204      	movs	r2, #4
 8005814:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800584a:	f023 030f 	bic.w	r3, r3, #15
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005858:	3b50      	subs	r3, #80	@ 0x50
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2201      	movs	r2, #1
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4013      	ands	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 813b 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d011      	beq.n	80058ac <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800589e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058d0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	f043 0202 	orr.w	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d011      	beq.n	8005910 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005902:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d011      	beq.n	8005942 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005934:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593a:	f043 0208 	orr.w	r2, r3, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00c      	beq.n	8005978 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005966:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d04c      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d045      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800599c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d12e      	bne.n	8005a08 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695a      	ldr	r2, [r3, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059b8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0202 	orr.w	r2, r2, #2
 80059c8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e2:	2201      	movs	r2, #1
 80059e4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d07a      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
        }

        return;
 8005a06:	e075      	b.n	8005af4 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2205      	movs	r2, #5
 8005a0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d039      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d032      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d012      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d111      	bne.n	8005a80 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a68:	2201      	movs	r2, #1
 8005a6a:	731a      	strb	r2, [r3, #12]
 8005a6c:	e008      	b.n	8005a80 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005a88:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d025      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0202 	orr.w	r2, r2, #2
 8005ab8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
 8005aee:	e002      	b.n	8005af6 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005af4:	bf00      	nop
    }
  }
}
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b0a:	b2db      	uxtb	r3, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e02b      	b.n	8005b84 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b34:	f023 030f 	bic.w	r3, r3, #15
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b42:	3b50      	subs	r3, #80	@ 0x50
 8005b44:	09db      	lsrs	r3, r3, #7
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f003 0311 	and.w	r3, r3, #17
 8005b62:	2b11      	cmp	r3, #17
 8005b64:	d106      	bne.n	8005b74 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	e006      	b.n	8005b82 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	401a      	ands	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	b291      	uxth	r1, r2
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005bbc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a53      	ldr	r2, [pc, #332]	@ (8005d68 <DMA_Init+0x18c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	f000 80a0 	beq.w	8005d62 <DMA_Init+0x186>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a51      	ldr	r2, [pc, #324]	@ (8005d6c <DMA_Init+0x190>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	f000 809a 	beq.w	8005d62 <DMA_Init+0x186>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a4f      	ldr	r2, [pc, #316]	@ (8005d70 <DMA_Init+0x194>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f000 8094 	beq.w	8005d62 <DMA_Init+0x186>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8005d74 <DMA_Init+0x198>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	f000 808e 	beq.w	8005d62 <DMA_Init+0x186>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4b      	ldr	r2, [pc, #300]	@ (8005d78 <DMA_Init+0x19c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	f000 8088 	beq.w	8005d62 <DMA_Init+0x186>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a49      	ldr	r2, [pc, #292]	@ (8005d7c <DMA_Init+0x1a0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	f000 8082 	beq.w	8005d62 <DMA_Init+0x186>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a47      	ldr	r2, [pc, #284]	@ (8005d80 <DMA_Init+0x1a4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d07c      	beq.n	8005d62 <DMA_Init+0x186>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a45      	ldr	r2, [pc, #276]	@ (8005d84 <DMA_Init+0x1a8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d077      	beq.n	8005d62 <DMA_Init+0x186>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a44      	ldr	r2, [pc, #272]	@ (8005d88 <DMA_Init+0x1ac>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d072      	beq.n	8005d62 <DMA_Init+0x186>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a42      	ldr	r2, [pc, #264]	@ (8005d8c <DMA_Init+0x1b0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d06d      	beq.n	8005d62 <DMA_Init+0x186>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a41      	ldr	r2, [pc, #260]	@ (8005d90 <DMA_Init+0x1b4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d068      	beq.n	8005d62 <DMA_Init+0x186>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a3f      	ldr	r2, [pc, #252]	@ (8005d94 <DMA_Init+0x1b8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d063      	beq.n	8005d62 <DMA_Init+0x186>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a3e      	ldr	r2, [pc, #248]	@ (8005d98 <DMA_Init+0x1bc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d05e      	beq.n	8005d62 <DMA_Init+0x186>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8005d9c <DMA_Init+0x1c0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d059      	beq.n	8005d62 <DMA_Init+0x186>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a3b      	ldr	r2, [pc, #236]	@ (8005da0 <DMA_Init+0x1c4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d054      	beq.n	8005d62 <DMA_Init+0x186>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a39      	ldr	r2, [pc, #228]	@ (8005da4 <DMA_Init+0x1c8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04f      	beq.n	8005d62 <DMA_Init+0x186>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a38      	ldr	r2, [pc, #224]	@ (8005da8 <DMA_Init+0x1cc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d04a      	beq.n	8005d62 <DMA_Init+0x186>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a36      	ldr	r2, [pc, #216]	@ (8005dac <DMA_Init+0x1d0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d045      	beq.n	8005d62 <DMA_Init+0x186>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a35      	ldr	r2, [pc, #212]	@ (8005db0 <DMA_Init+0x1d4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d040      	beq.n	8005d62 <DMA_Init+0x186>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a33      	ldr	r2, [pc, #204]	@ (8005db4 <DMA_Init+0x1d8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d03b      	beq.n	8005d62 <DMA_Init+0x186>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a32      	ldr	r2, [pc, #200]	@ (8005db8 <DMA_Init+0x1dc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d036      	beq.n	8005d62 <DMA_Init+0x186>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a30      	ldr	r2, [pc, #192]	@ (8005dbc <DMA_Init+0x1e0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d031      	beq.n	8005d62 <DMA_Init+0x186>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc0 <DMA_Init+0x1e4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d02c      	beq.n	8005d62 <DMA_Init+0x186>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc4 <DMA_Init+0x1e8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d027      	beq.n	8005d62 <DMA_Init+0x186>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc8 <DMA_Init+0x1ec>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <DMA_Init+0x186>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	@ (8005dcc <DMA_Init+0x1f0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01d      	beq.n	8005d62 <DMA_Init+0x186>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a29      	ldr	r2, [pc, #164]	@ (8005dd0 <DMA_Init+0x1f4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <DMA_Init+0x186>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a27      	ldr	r2, [pc, #156]	@ (8005dd4 <DMA_Init+0x1f8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <DMA_Init+0x186>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a26      	ldr	r2, [pc, #152]	@ (8005dd8 <DMA_Init+0x1fc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <DMA_Init+0x186>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a24      	ldr	r2, [pc, #144]	@ (8005ddc <DMA_Init+0x200>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <DMA_Init+0x186>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a23      	ldr	r2, [pc, #140]	@ (8005de0 <DMA_Init+0x204>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <DMA_Init+0x186>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a21      	ldr	r2, [pc, #132]	@ (8005de4 <DMA_Init+0x208>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d142      	bne.n	8005de8 <DMA_Init+0x20c>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e041      	b.n	8005dea <DMA_Init+0x20e>
 8005d66:	bf00      	nop
 8005d68:	40020050 	.word	0x40020050
 8005d6c:	50020050 	.word	0x50020050
 8005d70:	400200d0 	.word	0x400200d0
 8005d74:	500200d0 	.word	0x500200d0
 8005d78:	40020150 	.word	0x40020150
 8005d7c:	50020150 	.word	0x50020150
 8005d80:	400201d0 	.word	0x400201d0
 8005d84:	500201d0 	.word	0x500201d0
 8005d88:	40020250 	.word	0x40020250
 8005d8c:	50020250 	.word	0x50020250
 8005d90:	400202d0 	.word	0x400202d0
 8005d94:	500202d0 	.word	0x500202d0
 8005d98:	40020350 	.word	0x40020350
 8005d9c:	50020350 	.word	0x50020350
 8005da0:	400203d0 	.word	0x400203d0
 8005da4:	500203d0 	.word	0x500203d0
 8005da8:	40020450 	.word	0x40020450
 8005dac:	50020450 	.word	0x50020450
 8005db0:	400204d0 	.word	0x400204d0
 8005db4:	500204d0 	.word	0x500204d0
 8005db8:	40020550 	.word	0x40020550
 8005dbc:	50020550 	.word	0x50020550
 8005dc0:	400205d0 	.word	0x400205d0
 8005dc4:	500205d0 	.word	0x500205d0
 8005dc8:	40020650 	.word	0x40020650
 8005dcc:	50020650 	.word	0x50020650
 8005dd0:	400206d0 	.word	0x400206d0
 8005dd4:	500206d0 	.word	0x500206d0
 8005dd8:	40020750 	.word	0x40020750
 8005ddc:	50020750 	.word	0x50020750
 8005de0:	400207d0 	.word	0x400207d0
 8005de4:	500207d0 	.word	0x500207d0
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d012      	beq.n	8005e14 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	3b01      	subs	r3, #1
 8005df8:	051b      	lsls	r3, r3, #20
 8005dfa:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005dfe:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	3b01      	subs	r3, #1
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e0c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e46:	f040 80b0 	bne.w	8005faa <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a82      	ldr	r2, [pc, #520]	@ (8006058 <DMA_Init+0x47c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	f000 80a0 	beq.w	8005f96 <DMA_Init+0x3ba>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a80      	ldr	r2, [pc, #512]	@ (800605c <DMA_Init+0x480>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	f000 809a 	beq.w	8005f96 <DMA_Init+0x3ba>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7e      	ldr	r2, [pc, #504]	@ (8006060 <DMA_Init+0x484>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	f000 8094 	beq.w	8005f96 <DMA_Init+0x3ba>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a7c      	ldr	r2, [pc, #496]	@ (8006064 <DMA_Init+0x488>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	f000 808e 	beq.w	8005f96 <DMA_Init+0x3ba>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a7a      	ldr	r2, [pc, #488]	@ (8006068 <DMA_Init+0x48c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	f000 8088 	beq.w	8005f96 <DMA_Init+0x3ba>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a78      	ldr	r2, [pc, #480]	@ (800606c <DMA_Init+0x490>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	f000 8082 	beq.w	8005f96 <DMA_Init+0x3ba>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a76      	ldr	r2, [pc, #472]	@ (8006070 <DMA_Init+0x494>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d07c      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a74      	ldr	r2, [pc, #464]	@ (8006074 <DMA_Init+0x498>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d077      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a73      	ldr	r2, [pc, #460]	@ (8006078 <DMA_Init+0x49c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d072      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a71      	ldr	r2, [pc, #452]	@ (800607c <DMA_Init+0x4a0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d06d      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a70      	ldr	r2, [pc, #448]	@ (8006080 <DMA_Init+0x4a4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d068      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8006084 <DMA_Init+0x4a8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d063      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8006088 <DMA_Init+0x4ac>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d05e      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6b      	ldr	r2, [pc, #428]	@ (800608c <DMA_Init+0x4b0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d059      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6a      	ldr	r2, [pc, #424]	@ (8006090 <DMA_Init+0x4b4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d054      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a68      	ldr	r2, [pc, #416]	@ (8006094 <DMA_Init+0x4b8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d04f      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a67      	ldr	r2, [pc, #412]	@ (8006098 <DMA_Init+0x4bc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d04a      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a65      	ldr	r2, [pc, #404]	@ (800609c <DMA_Init+0x4c0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d045      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a64      	ldr	r2, [pc, #400]	@ (80060a0 <DMA_Init+0x4c4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d040      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a62      	ldr	r2, [pc, #392]	@ (80060a4 <DMA_Init+0x4c8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d03b      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a61      	ldr	r2, [pc, #388]	@ (80060a8 <DMA_Init+0x4cc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d036      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5f      	ldr	r2, [pc, #380]	@ (80060ac <DMA_Init+0x4d0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d031      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5e      	ldr	r2, [pc, #376]	@ (80060b0 <DMA_Init+0x4d4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d02c      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a5c      	ldr	r2, [pc, #368]	@ (80060b4 <DMA_Init+0x4d8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d027      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80060b8 <DMA_Init+0x4dc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a59      	ldr	r2, [pc, #356]	@ (80060bc <DMA_Init+0x4e0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a58      	ldr	r2, [pc, #352]	@ (80060c0 <DMA_Init+0x4e4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a56      	ldr	r2, [pc, #344]	@ (80060c4 <DMA_Init+0x4e8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a55      	ldr	r2, [pc, #340]	@ (80060c8 <DMA_Init+0x4ec>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a53      	ldr	r2, [pc, #332]	@ (80060cc <DMA_Init+0x4f0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a52      	ldr	r2, [pc, #328]	@ (80060d0 <DMA_Init+0x4f4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <DMA_Init+0x3ba>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a50      	ldr	r2, [pc, #320]	@ (80060d4 <DMA_Init+0x4f8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d101      	bne.n	8005f9a <DMA_Init+0x3be>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <DMA_Init+0x3c0>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e008      	b.n	8005fbc <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb2:	d103      	bne.n	8005fbc <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fba:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fc2:	4b45      	ldr	r3, [pc, #276]	@ (80060d8 <DMA_Init+0x4fc>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	68f9      	ldr	r1, [r7, #12]
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a36      	ldr	r2, [pc, #216]	@ (80060b8 <DMA_Init+0x4dc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <DMA_Init+0x44c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a35      	ldr	r2, [pc, #212]	@ (80060bc <DMA_Init+0x4e0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d01d      	beq.n	8006028 <DMA_Init+0x44c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a33      	ldr	r2, [pc, #204]	@ (80060c0 <DMA_Init+0x4e4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <DMA_Init+0x44c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a32      	ldr	r2, [pc, #200]	@ (80060c4 <DMA_Init+0x4e8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <DMA_Init+0x44c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a30      	ldr	r2, [pc, #192]	@ (80060c8 <DMA_Init+0x4ec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <DMA_Init+0x44c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2f      	ldr	r2, [pc, #188]	@ (80060cc <DMA_Init+0x4f0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <DMA_Init+0x44c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <DMA_Init+0x4f4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <DMA_Init+0x44c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2c      	ldr	r2, [pc, #176]	@ (80060d4 <DMA_Init+0x4f8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d101      	bne.n	800602c <DMA_Init+0x450>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <DMA_Init+0x452>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2200      	movs	r2, #0
 8006048:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40020050 	.word	0x40020050
 800605c:	50020050 	.word	0x50020050
 8006060:	400200d0 	.word	0x400200d0
 8006064:	500200d0 	.word	0x500200d0
 8006068:	40020150 	.word	0x40020150
 800606c:	50020150 	.word	0x50020150
 8006070:	400201d0 	.word	0x400201d0
 8006074:	500201d0 	.word	0x500201d0
 8006078:	40020250 	.word	0x40020250
 800607c:	50020250 	.word	0x50020250
 8006080:	400202d0 	.word	0x400202d0
 8006084:	500202d0 	.word	0x500202d0
 8006088:	40020350 	.word	0x40020350
 800608c:	50020350 	.word	0x50020350
 8006090:	400203d0 	.word	0x400203d0
 8006094:	500203d0 	.word	0x500203d0
 8006098:	40020450 	.word	0x40020450
 800609c:	50020450 	.word	0x50020450
 80060a0:	400204d0 	.word	0x400204d0
 80060a4:	500204d0 	.word	0x500204d0
 80060a8:	40020550 	.word	0x40020550
 80060ac:	50020550 	.word	0x50020550
 80060b0:	400205d0 	.word	0x400205d0
 80060b4:	500205d0 	.word	0x500205d0
 80060b8:	40020650 	.word	0x40020650
 80060bc:	50020650 	.word	0x50020650
 80060c0:	400206d0 	.word	0x400206d0
 80060c4:	500206d0 	.word	0x500206d0
 80060c8:	40020750 	.word	0x40020750
 80060cc:	50020750 	.word	0x50020750
 80060d0:	400207d0 	.word	0x400207d0
 80060d4:	500207d0 	.word	0x500207d0
 80060d8:	3c803180 	.word	0x3c803180

080060dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e053      	b.n	8006196 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fb fd64 	bl	8001bd0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800611a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6851      	ldr	r1, [r2, #4]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	69d2      	ldr	r2, [r2, #28]
 8006126:	4311      	orrs	r1, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	430b      	orrs	r3, r1
 800612e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006136:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6891      	ldr	r1, [r2, #8]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6992      	ldr	r2, [r2, #24]
 8006146:	4311      	orrs	r1, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	430b      	orrs	r3, r1
 800614e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68d1      	ldr	r1, [r2, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	430b      	orrs	r3, r1
 8006164:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	051a      	lsls	r2, r3, #20
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	055b      	lsls	r3, r3, #21
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_DMA2D_ConfigLayer+0x24>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e092      	b.n	80062ea <HAL_DMA2D_ConfigLayer+0x14a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	3328      	adds	r3, #40	@ 0x28
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80061f8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006204:	4b3c      	ldr	r3, [pc, #240]	@ (80062f8 <HAL_DMA2D_ConfigLayer+0x158>)
 8006206:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b0a      	cmp	r3, #10
 800620e:	d003      	beq.n	8006218 <HAL_DMA2D_ConfigLayer+0x78>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b09      	cmp	r3, #9
 8006216:	d107      	bne.n	8006228 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	e005      	b.n	8006234 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d120      	bne.n	800627c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	43db      	mvns	r3, r3
 8006244:	ea02 0103 	and.w	r1, r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	430a      	orrs	r2, r1
 8006250:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b0a      	cmp	r3, #10
 8006262:	d003      	beq.n	800626c <HAL_DMA2D_ConfigLayer+0xcc>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b09      	cmp	r3, #9
 800626a:	d135      	bne.n	80062d8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006278:	629a      	str	r2, [r3, #40]	@ 0x28
 800627a:	e02d      	b.n	80062d8 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b0b      	cmp	r3, #11
 8006282:	d109      	bne.n	8006298 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	049b      	lsls	r3, r3, #18
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006296:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69da      	ldr	r2, [r3, #28]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	43db      	mvns	r3, r3
 80062a2:	ea02 0103 	and.w	r1, r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b0a      	cmp	r3, #10
 80062c0:	d003      	beq.n	80062ca <HAL_DMA2D_ConfigLayer+0x12a>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b09      	cmp	r3, #9
 80062c8:	d106      	bne.n	80062d8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062d6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	ff33000f 	.word	0xff33000f

080062fc <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006304:	f7fc fc88 	bl	8002c18 <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0db      	b.n	80064cc <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a6e      	ldr	r2, [pc, #440]	@ (80064d4 <HAL_DMAEx_List_Init+0x1d8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f000 809f 	beq.w	800645e <HAL_DMAEx_List_Init+0x162>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a6c      	ldr	r2, [pc, #432]	@ (80064d8 <HAL_DMAEx_List_Init+0x1dc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	f000 8099 	beq.w	800645e <HAL_DMAEx_List_Init+0x162>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a6a      	ldr	r2, [pc, #424]	@ (80064dc <HAL_DMAEx_List_Init+0x1e0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	f000 8093 	beq.w	800645e <HAL_DMAEx_List_Init+0x162>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a68      	ldr	r2, [pc, #416]	@ (80064e0 <HAL_DMAEx_List_Init+0x1e4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f000 808d 	beq.w	800645e <HAL_DMAEx_List_Init+0x162>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a66      	ldr	r2, [pc, #408]	@ (80064e4 <HAL_DMAEx_List_Init+0x1e8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f000 8087 	beq.w	800645e <HAL_DMAEx_List_Init+0x162>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a64      	ldr	r2, [pc, #400]	@ (80064e8 <HAL_DMAEx_List_Init+0x1ec>)
 8006356:	4293      	cmp	r3, r2
 8006358:	f000 8081 	beq.w	800645e <HAL_DMAEx_List_Init+0x162>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a62      	ldr	r2, [pc, #392]	@ (80064ec <HAL_DMAEx_List_Init+0x1f0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d07b      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a61      	ldr	r2, [pc, #388]	@ (80064f0 <HAL_DMAEx_List_Init+0x1f4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d076      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a5f      	ldr	r2, [pc, #380]	@ (80064f4 <HAL_DMAEx_List_Init+0x1f8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d071      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5e      	ldr	r2, [pc, #376]	@ (80064f8 <HAL_DMAEx_List_Init+0x1fc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d06c      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5c      	ldr	r2, [pc, #368]	@ (80064fc <HAL_DMAEx_List_Init+0x200>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d067      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a5b      	ldr	r2, [pc, #364]	@ (8006500 <HAL_DMAEx_List_Init+0x204>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d062      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a59      	ldr	r2, [pc, #356]	@ (8006504 <HAL_DMAEx_List_Init+0x208>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d05d      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a58      	ldr	r2, [pc, #352]	@ (8006508 <HAL_DMAEx_List_Init+0x20c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d058      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a56      	ldr	r2, [pc, #344]	@ (800650c <HAL_DMAEx_List_Init+0x210>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d053      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a55      	ldr	r2, [pc, #340]	@ (8006510 <HAL_DMAEx_List_Init+0x214>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d04e      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a53      	ldr	r2, [pc, #332]	@ (8006514 <HAL_DMAEx_List_Init+0x218>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d049      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a52      	ldr	r2, [pc, #328]	@ (8006518 <HAL_DMAEx_List_Init+0x21c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d044      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a50      	ldr	r2, [pc, #320]	@ (800651c <HAL_DMAEx_List_Init+0x220>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d03f      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a4f      	ldr	r2, [pc, #316]	@ (8006520 <HAL_DMAEx_List_Init+0x224>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03a      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a4d      	ldr	r2, [pc, #308]	@ (8006524 <HAL_DMAEx_List_Init+0x228>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d035      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a4c      	ldr	r2, [pc, #304]	@ (8006528 <HAL_DMAEx_List_Init+0x22c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d030      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a4a      	ldr	r2, [pc, #296]	@ (800652c <HAL_DMAEx_List_Init+0x230>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02b      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a49      	ldr	r2, [pc, #292]	@ (8006530 <HAL_DMAEx_List_Init+0x234>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d026      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a47      	ldr	r2, [pc, #284]	@ (8006534 <HAL_DMAEx_List_Init+0x238>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d021      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a46      	ldr	r2, [pc, #280]	@ (8006538 <HAL_DMAEx_List_Init+0x23c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01c      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a44      	ldr	r2, [pc, #272]	@ (800653c <HAL_DMAEx_List_Init+0x240>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d017      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a43      	ldr	r2, [pc, #268]	@ (8006540 <HAL_DMAEx_List_Init+0x244>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d012      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a41      	ldr	r2, [pc, #260]	@ (8006544 <HAL_DMAEx_List_Init+0x248>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00d      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a40      	ldr	r2, [pc, #256]	@ (8006548 <HAL_DMAEx_List_Init+0x24c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d008      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a3e      	ldr	r2, [pc, #248]	@ (800654c <HAL_DMAEx_List_Init+0x250>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <HAL_DMAEx_List_Init+0x162>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a3d      	ldr	r2, [pc, #244]	@ (8006550 <HAL_DMAEx_List_Init+0x254>)
 800645c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0206 	orr.w	r2, r2, #6
 800647c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800647e:	e00f      	b.n	80064a0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006480:	f7fc fbca 	bl	8002c18 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b05      	cmp	r3, #5
 800648c:	d908      	bls.n	80064a0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2210      	movs	r2, #16
 8006492:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2203      	movs	r2, #3
 8006498:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e015      	b.n	80064cc <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e8      	bne.n	8006480 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fae0 	bl	8006a74 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40020050 	.word	0x40020050
 80064d8:	50020050 	.word	0x50020050
 80064dc:	400200d0 	.word	0x400200d0
 80064e0:	500200d0 	.word	0x500200d0
 80064e4:	40020150 	.word	0x40020150
 80064e8:	50020150 	.word	0x50020150
 80064ec:	400201d0 	.word	0x400201d0
 80064f0:	500201d0 	.word	0x500201d0
 80064f4:	40020250 	.word	0x40020250
 80064f8:	50020250 	.word	0x50020250
 80064fc:	400202d0 	.word	0x400202d0
 8006500:	500202d0 	.word	0x500202d0
 8006504:	40020350 	.word	0x40020350
 8006508:	50020350 	.word	0x50020350
 800650c:	400203d0 	.word	0x400203d0
 8006510:	500203d0 	.word	0x500203d0
 8006514:	40020450 	.word	0x40020450
 8006518:	50020450 	.word	0x50020450
 800651c:	400204d0 	.word	0x400204d0
 8006520:	500204d0 	.word	0x500204d0
 8006524:	40020550 	.word	0x40020550
 8006528:	50020550 	.word	0x50020550
 800652c:	400205d0 	.word	0x400205d0
 8006530:	500205d0 	.word	0x500205d0
 8006534:	40020650 	.word	0x40020650
 8006538:	50020650 	.word	0x50020650
 800653c:	400206d0 	.word	0x400206d0
 8006540:	500206d0 	.word	0x500206d0
 8006544:	40020750 	.word	0x40020750
 8006548:	50020750 	.word	0x50020750
 800654c:	400207d0 	.word	0x400207d0
 8006550:	500207d0 	.word	0x500207d0

08006554 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_DMAEx_List_Start_IT+0x16>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e082      	b.n	8006674 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006574:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006580:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d005      	beq.n	8006594 <HAL_DMAEx_List_Start_IT+0x40>
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d16a      	bne.n	8006664 <HAL_DMAEx_List_Start_IT+0x110>
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d067      	beq.n	8006664 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d157      	bne.n	8006650 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_DMAEx_List_Start_IT+0x5a>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e062      	b.n	8006674 <HAL_DMAEx_List_Start_IT+0x120>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c2:	2202      	movs	r2, #2
 80065c4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d0:	2200      	movs	r2, #0
 80065d2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80065e2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065fa:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006612:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f107 010c 	add.w	r1, r7, #12
 800661e:	2200      	movs	r2, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fe47 	bl	80072b4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4619      	mov	r1, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	0c0b      	lsrs	r3, r1, #16
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006644:	4013      	ands	r3, r2
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	430b      	orrs	r3, r1
 800664e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e007      	b.n	8006674 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2240      	movs	r2, #64	@ 0x40
 8006668:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_DMAEx_List_BuildNode+0x16>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e004      	b.n	80066a0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fb43 	bl	8006d24 <DMA_List_BuildNode>

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_DMAEx_List_GetNodeConfig+0x16>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e004      	b.n	80066cc <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fc7f 	bl	8006fc8 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	@ 0x30
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_DMAEx_List_InsertNode+0x18>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0b6      	b.n	800685e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d104      	bne.n	8006702 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2204      	movs	r2, #4
 80066fc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e0ad      	b.n	800685e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fd66 	bl	80071dc <DMA_List_CheckNodesBaseAddresses>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2205      	movs	r2, #5
 800671a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e09e      	b.n	800685e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fd87 	bl	800723c <DMA_List_CheckNodesTypes>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2204      	movs	r2, #4
 8006738:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e08f      	b.n	800685e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2202      	movs	r2, #2
 8006742:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800674a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800674e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fdad 	bl	80072b4 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d11a      	bne.n	8006798 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	e06c      	b.n	8006850 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006782:	4013      	ands	r3, r2
 8006784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006788:	4319      	orrs	r1, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2202      	movs	r2, #2
 8006794:	609a      	str	r2, [r3, #8]
 8006796:	e05b      	b.n	8006850 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10f      	bne.n	80067be <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067a8:	4013      	ands	r3, r2
 80067aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ae:	4319      	orrs	r1, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e043      	b.n	8006846 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80067c2:	f107 0314 	add.w	r3, r7, #20
 80067c6:	461a      	mov	r2, r3
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fda2 	bl	8007314 <DMA_List_FindNode>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d132      	bne.n	800683c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d11a      	bne.n	8006816 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	461a      	mov	r2, r3
 80067ee:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067f2:	4013      	ands	r3, r2
 80067f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067f8:	4319      	orrs	r1, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006806:	4013      	ands	r3, r2
 8006808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800680a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800680c:	4319      	orrs	r1, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006814:	e017      	b.n	8006846 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800682c:	4013      	ands	r3, r2
 800682e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006832:	4319      	orrs	r1, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800683a:	e004      	b.n	8006846 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2206      	movs	r2, #6
 8006840:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e00b      	b.n	800685e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3730      	adds	r7, #48	@ 0x30
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b08a      	sub	sp, #40	@ 0x28
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e052      	b.n	800691e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e049      	b.n	800691e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d101      	bne.n	80068a2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	e03d      	b.n	800691e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2204      	movs	r2, #4
 80068a6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e038      	b.n	800691e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d104      	bne.n	80068be <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2204      	movs	r2, #4
 80068b8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e02f      	b.n	800691e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f107 0220 	add.w	r2, r7, #32
 80068d2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fcec 	bl	80072b4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	461a      	mov	r2, r3
 80068e6:	2100      	movs	r1, #0
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fd13 	bl	8007314 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80068f8:	4013      	ands	r3, r2
 80068fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4610      	mov	r0, r2
 8006900:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006902:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006904:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3728      	adds	r7, #40	@ 0x28
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_DMAEx_List_LinkQ+0x16>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e072      	b.n	8006a28 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006948:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d002      	beq.n	800695c <HAL_DMAEx_List_LinkQ+0x34>
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b05      	cmp	r3, #5
 800695a:	d108      	bne.n	800696e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2240      	movs	r2, #64	@ 0x40
 8006960:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e05c      	b.n	8006a28 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	7b1b      	ldrb	r3, [r3, #12]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d104      	bne.n	8006982 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e052      	b.n	8006a28 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a2b      	ldr	r2, [pc, #172]	@ (8006a34 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d022      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0xaa>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a29      	ldr	r2, [pc, #164]	@ (8006a38 <HAL_DMAEx_List_LinkQ+0x110>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01d      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a28      	ldr	r2, [pc, #160]	@ (8006a3c <HAL_DMAEx_List_LinkQ+0x114>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d018      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0xaa>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a26      	ldr	r2, [pc, #152]	@ (8006a40 <HAL_DMAEx_List_LinkQ+0x118>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0xaa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a25      	ldr	r2, [pc, #148]	@ (8006a44 <HAL_DMAEx_List_LinkQ+0x11c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0xaa>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a23      	ldr	r2, [pc, #140]	@ (8006a48 <HAL_DMAEx_List_LinkQ+0x120>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0xaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a22      	ldr	r2, [pc, #136]	@ (8006a4c <HAL_DMAEx_List_LinkQ+0x124>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0xaa>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a20      	ldr	r2, [pc, #128]	@ (8006a50 <HAL_DMAEx_List_LinkQ+0x128>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d101      	bne.n	80069d6 <HAL_DMAEx_List_LinkQ+0xae>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <HAL_DMAEx_List_LinkQ+0xb0>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2203      	movs	r2, #3
 80069ee:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e019      	b.n	8006a28 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f8:	2b81      	cmp	r3, #129	@ 0x81
 80069fa:	d108      	bne.n	8006a0e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10d      	bne.n	8006a20 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2204      	movs	r2, #4
 8006a08:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e00c      	b.n	8006a28 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e003      	b.n	8006a28 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	40020650 	.word	0x40020650
 8006a38:	50020650 	.word	0x50020650
 8006a3c:	400206d0 	.word	0x400206d0
 8006a40:	500206d0 	.word	0x500206d0
 8006a44:	40020750 	.word	0x40020750
 8006a48:	50020750 	.word	0x50020750
 8006a4c:	400207d0 	.word	0x400207d0
 8006a50:	500207d0 	.word	0x500207d0

08006a54 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	b2db      	uxtb	r3, r3
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
	...

08006a74 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a85      	ldr	r2, [pc, #532]	@ (8006ca4 <DMA_List_Init+0x230>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	f000 80a0 	beq.w	8006bd4 <DMA_List_Init+0x160>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a83      	ldr	r2, [pc, #524]	@ (8006ca8 <DMA_List_Init+0x234>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	f000 809a 	beq.w	8006bd4 <DMA_List_Init+0x160>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a81      	ldr	r2, [pc, #516]	@ (8006cac <DMA_List_Init+0x238>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f000 8094 	beq.w	8006bd4 <DMA_List_Init+0x160>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a7f      	ldr	r2, [pc, #508]	@ (8006cb0 <DMA_List_Init+0x23c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	f000 808e 	beq.w	8006bd4 <DMA_List_Init+0x160>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a7d      	ldr	r2, [pc, #500]	@ (8006cb4 <DMA_List_Init+0x240>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f000 8088 	beq.w	8006bd4 <DMA_List_Init+0x160>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a7b      	ldr	r2, [pc, #492]	@ (8006cb8 <DMA_List_Init+0x244>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	f000 8082 	beq.w	8006bd4 <DMA_List_Init+0x160>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a79      	ldr	r2, [pc, #484]	@ (8006cbc <DMA_List_Init+0x248>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d07c      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a78      	ldr	r2, [pc, #480]	@ (8006cc0 <DMA_List_Init+0x24c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d077      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a76      	ldr	r2, [pc, #472]	@ (8006cc4 <DMA_List_Init+0x250>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d072      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a75      	ldr	r2, [pc, #468]	@ (8006cc8 <DMA_List_Init+0x254>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d06d      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a73      	ldr	r2, [pc, #460]	@ (8006ccc <DMA_List_Init+0x258>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d068      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a72      	ldr	r2, [pc, #456]	@ (8006cd0 <DMA_List_Init+0x25c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d063      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a70      	ldr	r2, [pc, #448]	@ (8006cd4 <DMA_List_Init+0x260>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d05e      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8006cd8 <DMA_List_Init+0x264>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d059      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a6d      	ldr	r2, [pc, #436]	@ (8006cdc <DMA_List_Init+0x268>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d054      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ce0 <DMA_List_Init+0x26c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d04f      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6a      	ldr	r2, [pc, #424]	@ (8006ce4 <DMA_List_Init+0x270>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d04a      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a69      	ldr	r2, [pc, #420]	@ (8006ce8 <DMA_List_Init+0x274>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d045      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a67      	ldr	r2, [pc, #412]	@ (8006cec <DMA_List_Init+0x278>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d040      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a66      	ldr	r2, [pc, #408]	@ (8006cf0 <DMA_List_Init+0x27c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d03b      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a64      	ldr	r2, [pc, #400]	@ (8006cf4 <DMA_List_Init+0x280>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d036      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a63      	ldr	r2, [pc, #396]	@ (8006cf8 <DMA_List_Init+0x284>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d031      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a61      	ldr	r2, [pc, #388]	@ (8006cfc <DMA_List_Init+0x288>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d02c      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a60      	ldr	r2, [pc, #384]	@ (8006d00 <DMA_List_Init+0x28c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d027      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a5e      	ldr	r2, [pc, #376]	@ (8006d04 <DMA_List_Init+0x290>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d022      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a5d      	ldr	r2, [pc, #372]	@ (8006d08 <DMA_List_Init+0x294>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d01d      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a5b      	ldr	r2, [pc, #364]	@ (8006d0c <DMA_List_Init+0x298>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d018      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d10 <DMA_List_Init+0x29c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d013      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a58      	ldr	r2, [pc, #352]	@ (8006d14 <DMA_List_Init+0x2a0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00e      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a57      	ldr	r2, [pc, #348]	@ (8006d18 <DMA_List_Init+0x2a4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d009      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a55      	ldr	r2, [pc, #340]	@ (8006d1c <DMA_List_Init+0x2a8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <DMA_List_Init+0x160>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a54      	ldr	r2, [pc, #336]	@ (8006d20 <DMA_List_Init+0x2ac>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d101      	bne.n	8006bd8 <DMA_List_Init+0x164>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <DMA_List_Init+0x166>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2200      	movs	r2, #0
 8006c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c0c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a36      	ldr	r2, [pc, #216]	@ (8006d04 <DMA_List_Init+0x290>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d022      	beq.n	8006c76 <DMA_List_Init+0x202>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a34      	ldr	r2, [pc, #208]	@ (8006d08 <DMA_List_Init+0x294>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01d      	beq.n	8006c76 <DMA_List_Init+0x202>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a33      	ldr	r2, [pc, #204]	@ (8006d0c <DMA_List_Init+0x298>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d018      	beq.n	8006c76 <DMA_List_Init+0x202>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a31      	ldr	r2, [pc, #196]	@ (8006d10 <DMA_List_Init+0x29c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <DMA_List_Init+0x202>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <DMA_List_Init+0x2a0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00e      	beq.n	8006c76 <DMA_List_Init+0x202>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006d18 <DMA_List_Init+0x2a4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <DMA_List_Init+0x202>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2d      	ldr	r2, [pc, #180]	@ (8006d1c <DMA_List_Init+0x2a8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <DMA_List_Init+0x202>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2b      	ldr	r2, [pc, #172]	@ (8006d20 <DMA_List_Init+0x2ac>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d101      	bne.n	8006c7a <DMA_List_Init+0x206>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <DMA_List_Init+0x208>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2200      	movs	r2, #0
 8006c86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2200      	movs	r2, #0
 8006c96:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40020050 	.word	0x40020050
 8006ca8:	50020050 	.word	0x50020050
 8006cac:	400200d0 	.word	0x400200d0
 8006cb0:	500200d0 	.word	0x500200d0
 8006cb4:	40020150 	.word	0x40020150
 8006cb8:	50020150 	.word	0x50020150
 8006cbc:	400201d0 	.word	0x400201d0
 8006cc0:	500201d0 	.word	0x500201d0
 8006cc4:	40020250 	.word	0x40020250
 8006cc8:	50020250 	.word	0x50020250
 8006ccc:	400202d0 	.word	0x400202d0
 8006cd0:	500202d0 	.word	0x500202d0
 8006cd4:	40020350 	.word	0x40020350
 8006cd8:	50020350 	.word	0x50020350
 8006cdc:	400203d0 	.word	0x400203d0
 8006ce0:	500203d0 	.word	0x500203d0
 8006ce4:	40020450 	.word	0x40020450
 8006ce8:	50020450 	.word	0x50020450
 8006cec:	400204d0 	.word	0x400204d0
 8006cf0:	500204d0 	.word	0x500204d0
 8006cf4:	40020550 	.word	0x40020550
 8006cf8:	50020550 	.word	0x50020550
 8006cfc:	400205d0 	.word	0x400205d0
 8006d00:	500205d0 	.word	0x500205d0
 8006d04:	40020650 	.word	0x40020650
 8006d08:	50020650 	.word	0x50020650
 8006d0c:	400206d0 	.word	0x400206d0
 8006d10:	500206d0 	.word	0x500206d0
 8006d14:	40020750 	.word	0x40020750
 8006d18:	50020750 	.word	0x50020750
 8006d1c:	400207d0 	.word	0x400207d0
 8006d20:	500207d0 	.word	0x500207d0

08006d24 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d36:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d3c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d42:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006d48:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d017      	beq.n	8006d8a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d66:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	051b      	lsls	r3, r3, #20
 8006d70:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d74:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d82:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d84:	431a      	orrs	r2, r3
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6859      	ldr	r1, [r3, #4]
 8006d92:	f240 237f 	movw	r3, #639	@ 0x27f
 8006d96:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da6:	d10c      	bne.n	8006dc2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d011      	beq.n	8006dd8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
 8006dc0:	e00a      	b.n	8006dd8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dca:	d105      	bne.n	8006dd8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00f      	beq.n	8006e00 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dec:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006df8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d04e      	beq.n	8006eb4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	0419      	lsls	r1, r3, #16
 8006e22:	4b67      	ldr	r3, [pc, #412]	@ (8006fc0 <DMA_List_BuildNode+0x29c>)
 8006e24:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e26:	431a      	orrs	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da06      	bge.n	8006e42 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	609a      	str	r2, [r3, #8]
 8006e40:	e005      	b.n	8006e4e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	da06      	bge.n	8006e64 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	609a      	str	r2, [r3, #8]
 8006e62:	e005      	b.n	8006e70 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da06      	bge.n	8006e86 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	609a      	str	r2, [r3, #8]
 8006e84:	e005      	b.n	8006e92 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da06      	bge.n	8006ea8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	609a      	str	r2, [r3, #8]
 8006ea6:	e005      	b.n	8006eb4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d059      	beq.n	8006f84 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da09      	bge.n	8006eec <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006edc:	425b      	negs	r3, r3
 8006ede:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	615a      	str	r2, [r3, #20]
 8006eea:	e005      	b.n	8006ef8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da0d      	bge.n	8006f1c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f04:	425b      	negs	r3, r3
 8006f06:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	0419      	lsls	r1, r3, #16
 8006f10:	4b2c      	ldr	r3, [pc, #176]	@ (8006fc4 <DMA_List_BuildNode+0x2a0>)
 8006f12:	400b      	ands	r3, r1
 8006f14:	431a      	orrs	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	615a      	str	r2, [r3, #20]
 8006f1a:	e009      	b.n	8006f30 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f24:	0419      	lsls	r1, r3, #16
 8006f26:	4b27      	ldr	r3, [pc, #156]	@ (8006fc4 <DMA_List_BuildNode+0x2a0>)
 8006f28:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	da08      	bge.n	8006f4a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	619a      	str	r2, [r3, #24]
 8006f48:	e004      	b.n	8006f54 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da0b      	bge.n	8006f74 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f60:	425b      	negs	r3, r3
 8006f62:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	619a      	str	r2, [r3, #24]
 8006f72:	e007      	b.n	8006f84 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006fa4:	e005      	b.n	8006fb2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	07ff0000 	.word	0x07ff0000
 8006fc4:	1fff0000 	.word	0x1fff0000

08006fc8 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0208 	and.w	r2, r3, #8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0203 	and.w	r2, r3, #3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007010:	091b      	lsrs	r3, r3, #4
 8007012:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007016:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007020:	0d1b      	lsrs	r3, r3, #20
 8007022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007026:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b66      	ldr	r3, [pc, #408]	@ (80071d8 <DMA_List_GetNodeConfig+0x210>)
 800703e:	4013      	ands	r3, r2
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007058:	2b00      	cmp	r3, #0
 800705a:	d008      	beq.n	800706e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007062:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800706a:	60da      	str	r2, [r3, #12]
 800706c:	e013      	b.n	8007096 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	e002      	b.n	8007096 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	b29a      	uxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070f4:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80070fa:	e002      	b.n	8007102 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d04a      	beq.n	80071b4 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	b29b      	uxth	r3, r3
 8007124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007128:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800712a:	89fa      	ldrh	r2, [r7, #14]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	b29b      	uxth	r3, r3
 8007138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800713c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800713e:	89fa      	ldrh	r2, [r7, #14]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007154:	425a      	negs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800716a:	425a      	negs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007176:	89fa      	ldrh	r2, [r7, #14]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007184:	89fa      	ldrh	r2, [r7, #14]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719a:	425a      	negs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da11      	bge.n	80071cc <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ac:	425a      	negs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80071b2:	e00b      	b.n	80071cc <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80071cc:	bf00      	nop
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	0c002000 	.word	0x0c002000

080071dc <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	0c1b      	lsrs	r3, r3, #16
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e00a      	b.n	800721e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e004      	b.n	800721e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	429a      	cmp	r2, r3
 8007228:	d001      	beq.n	800722e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	e00e      	b.n	800727a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d004      	beq.n	800726c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	e006      	b.n	800727a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	429a      	cmp	r2, r3
 800728a:	d001      	beq.n	8007290 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800728c:	2302      	movs	r3, #2
 800728e:	e00b      	b.n	80072a8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d001      	beq.n	80072a6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e000      	b.n	80072a8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00c      	beq.n	80072e6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4a0d      	ldr	r2, [pc, #52]	@ (800730c <DMA_List_GetCLLRNodeInfo+0x58>)
 80072d6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00f      	beq.n	80072fe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80072e4:	e00b      	b.n	80072fe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4a08      	ldr	r2, [pc, #32]	@ (8007310 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80072f0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2205      	movs	r2, #5
 80072fc:	601a      	str	r2, [r3, #0]
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	fe010000 	.word	0xfe010000
 8007310:	f8010000 	.word	0xf8010000

08007314 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007314:	b480      	push	{r7}
 8007316:	b089      	sub	sp, #36	@ 0x24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d142      	bne.n	80073be <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007338:	e01d      	b.n	8007376 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d107      	bne.n	8007350 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800734a:	4013      	ands	r3, r2
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	e00f      	b.n	8007370 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	0c1b      	lsrs	r3, r3, #16
 800735a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	4413      	add	r3, r2
 8007360:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007368:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800736c:	4013      	ands	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	3301      	adds	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	429a      	cmp	r2, r3
 800737e:	d3dc      	bcc.n	800733a <DMA_List_FindNode+0x26>
 8007380:	e029      	b.n	80073d6 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d107      	bne.n	8007398 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007392:	4013      	ands	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	e00f      	b.n	80073b8 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	4413      	add	r3, r2
 80073a8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073b0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073b4:	4013      	ands	r3, r2
 80073b6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	3301      	adds	r3, #1
 80073bc:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d206      	bcs.n	80073d6 <DMA_List_FindNode+0xc2>
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073ce:	4013      	ands	r3, r2
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d1d5      	bne.n	8007382 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073e2:	4013      	ands	r3, r2
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d001      	beq.n	80073ee <DMA_List_FindNode+0xda>
    {
      return 1U;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e02b      	b.n	8007446 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	041b      	lsls	r3, r3, #16
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	461a      	mov	r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00f      	beq.n	8007444 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	461a      	mov	r2, r3
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007430:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007434:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	0c1b      	lsrs	r3, r3, #16
 800743c:	041b      	lsls	r3, r3, #16
 800743e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3724      	adds	r7, #36	@ 0x24
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007454:	b480      	push	{r7}
 8007456:	b089      	sub	sp, #36	@ 0x24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007466:	e1ba      	b.n	80077de <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	2101      	movs	r1, #1
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	4013      	ands	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 81aa 	beq.w	80077d8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a55      	ldr	r2, [pc, #340]	@ (80075dc <HAL_GPIO_Init+0x188>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d15d      	bne.n	8007548 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007492:	2201      	movs	r2, #1
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43db      	mvns	r3, r3
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	4013      	ands	r3, r2
 80074a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f003 0201 	and.w	r2, r3, #1
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	fa02 f303 	lsl.w	r3, r2, r3
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80074bc:	4a48      	ldr	r2, [pc, #288]	@ (80075e0 <HAL_GPIO_Init+0x18c>)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074c4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80074c6:	4a46      	ldr	r2, [pc, #280]	@ (80075e0 <HAL_GPIO_Init+0x18c>)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4413      	add	r3, r2
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	08da      	lsrs	r2, r3, #3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	3208      	adds	r2, #8
 80074da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074de:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	220f      	movs	r2, #15
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	43db      	mvns	r3, r3
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	4013      	ands	r3, r2
 80074f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	220b      	movs	r2, #11
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	4313      	orrs	r3, r2
 8007508:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	08da      	lsrs	r2, r3, #3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	3208      	adds	r2, #8
 8007512:	69f9      	ldr	r1, [r7, #28]
 8007514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	2203      	movs	r2, #3
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	43db      	mvns	r3, r3
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	4013      	ands	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	2202      	movs	r2, #2
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	4313      	orrs	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	e067      	b.n	8007618 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d003      	beq.n	8007558 <HAL_GPIO_Init+0x104>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b12      	cmp	r3, #18
 8007556:	d145      	bne.n	80075e4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	08da      	lsrs	r2, r3, #3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3208      	adds	r2, #8
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	220f      	movs	r2, #15
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	43db      	mvns	r3, r3
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	4013      	ands	r3, r2
 800757a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f003 020f 	and.w	r2, r3, #15
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	fa02 f303 	lsl.w	r3, r2, r3
 8007590:	69fa      	ldr	r2, [r7, #28]
 8007592:	4313      	orrs	r3, r2
 8007594:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	08da      	lsrs	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3208      	adds	r2, #8
 800759e:	69f9      	ldr	r1, [r7, #28]
 80075a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	2203      	movs	r2, #3
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	43db      	mvns	r3, r3
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	4013      	ands	r3, r2
 80075ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 0203 	and.w	r2, r3, #3
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e01e      	b.n	8007618 <HAL_GPIO_Init+0x1c4>
 80075da:	bf00      	nop
 80075dc:	46020000 	.word	0x46020000
 80075e0:	08011b9c 	.word	0x08011b9c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	2203      	movs	r2, #3
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	43db      	mvns	r3, r3
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	4013      	ands	r3, r2
 80075fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 0203 	and.w	r2, r3, #3
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	4313      	orrs	r3, r2
 8007610:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d00b      	beq.n	8007638 <HAL_GPIO_Init+0x1e4>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d007      	beq.n	8007638 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800762c:	2b11      	cmp	r3, #17
 800762e:	d003      	beq.n	8007638 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b12      	cmp	r3, #18
 8007636:	d130      	bne.n	800769a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	2203      	movs	r2, #3
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	43db      	mvns	r3, r3
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	4013      	ands	r3, r2
 800764e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	4313      	orrs	r3, r2
 8007660:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800766e:	2201      	movs	r2, #1
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	43db      	mvns	r3, r3
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	4013      	ands	r3, r2
 800767c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	f003 0201 	and.w	r2, r3, #1
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	4313      	orrs	r3, r2
 8007692:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d017      	beq.n	80076d2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	2203      	movs	r2, #3
 80076ae:	fa02 f303 	lsl.w	r3, r2, r3
 80076b2:	43db      	mvns	r3, r3
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	4013      	ands	r3, r2
 80076b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d07c      	beq.n	80077d8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80076de:	4a47      	ldr	r2, [pc, #284]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	089b      	lsrs	r3, r3, #2
 80076e4:	3318      	adds	r3, #24
 80076e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	220f      	movs	r2, #15
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	43db      	mvns	r3, r3
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	4013      	ands	r3, r2
 8007700:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	0a9a      	lsrs	r2, r3, #10
 8007706:	4b3e      	ldr	r3, [pc, #248]	@ (8007800 <HAL_GPIO_Init+0x3ac>)
 8007708:	4013      	ands	r3, r2
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	f002 0203 	and.w	r2, r2, #3
 8007710:	00d2      	lsls	r2, r2, #3
 8007712:	4093      	lsls	r3, r2
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	4313      	orrs	r3, r2
 8007718:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800771a:	4938      	ldr	r1, [pc, #224]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	089b      	lsrs	r3, r3, #2
 8007720:	3318      	adds	r3, #24
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007728:	4b34      	ldr	r3, [pc, #208]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	43db      	mvns	r3, r3
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	4013      	ands	r3, r2
 8007736:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800774c:	4a2b      	ldr	r2, [pc, #172]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007752:	4b2a      	ldr	r3, [pc, #168]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	43db      	mvns	r3, r3
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	4013      	ands	r3, r2
 8007760:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007776:	4a21      	ldr	r2, [pc, #132]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800777c:	4b1f      	ldr	r3, [pc, #124]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 800777e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007782:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	43db      	mvns	r3, r3
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	4013      	ands	r3, r2
 800778c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80077a2:	4a16      	ldr	r2, [pc, #88]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80077aa:	4b14      	ldr	r3, [pc, #80]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 80077ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80077d0:	4a0a      	ldr	r2, [pc, #40]	@ (80077fc <HAL_GPIO_Init+0x3a8>)
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	3301      	adds	r3, #1
 80077dc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f47f ae3d 	bne.w	8007468 <HAL_GPIO_Init+0x14>
  }
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	3724      	adds	r7, #36	@ 0x24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	46022000 	.word	0x46022000
 8007800:	002f7f7f 	.word	0x002f7f7f

08007804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
 8007810:	4613      	mov	r3, r2
 8007812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007814:	787b      	ldrb	r3, [r7, #1]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007820:	e002      	b.n	8007828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007822:	887a      	ldrh	r2, [r7, #2]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007846:	887a      	ldrh	r2, [r7, #2]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4013      	ands	r3, r2
 800784c:	041a      	lsls	r2, r3, #16
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	43d9      	mvns	r1, r3
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	400b      	ands	r3, r1
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]
}
 800785c:	bf00      	nop
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007872:	4b0f      	ldr	r3, [pc, #60]	@ (80078b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	4013      	ands	r3, r2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d006      	beq.n	800788c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800787e:	4a0c      	ldr	r2, [pc, #48]	@ (80078b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f814 	bl	80078b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800788c:	4b08      	ldr	r3, [pc, #32]	@ (80078b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	4013      	ands	r3, r2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d006      	beq.n	80078a6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007898:	4a05      	ldr	r2, [pc, #20]	@ (80078b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 f812 	bl	80078ca <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	46022000 	.word	0x46022000

080078b4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	4603      	mov	r3, r0
 80078d2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e08d      	b.n	8007a0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fa f9f0 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2224      	movs	r2, #36	@ 0x24
 8007910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0201 	bic.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007930:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007940:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d107      	bne.n	800795a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	e006      	b.n	8007968 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007966:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d108      	bne.n	8007982 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800797e:	605a      	str	r2, [r3, #4]
 8007980:	e007      	b.n	8007992 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691a      	ldr	r2, [r3, #16]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69d9      	ldr	r1, [r3, #28]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	461a      	mov	r2, r3
 8007a24:	460b      	mov	r3, r1
 8007a26:	817b      	strh	r3, [r7, #10]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	f040 80da 	bne.w	8007bee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_I2C_Master_Transmit+0x30>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e0d3      	b.n	8007bf0 <HAL_I2C_Master_Transmit+0x1d8>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a50:	f7fb f8e2 	bl	8002c18 <HAL_GetTick>
 8007a54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2319      	movs	r3, #25
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 fe7d 	bl	8008762 <I2C_WaitOnFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e0be      	b.n	8007bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2221      	movs	r2, #33	@ 0x21
 8007a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2210      	movs	r2, #16
 8007a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	893a      	ldrh	r2, [r7, #8]
 8007a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2bff      	cmp	r3, #255	@ 0xff
 8007aa2:	d90e      	bls.n	8007ac2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	22ff      	movs	r2, #255	@ 0xff
 8007aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	8979      	ldrh	r1, [r7, #10]
 8007ab2:	4b51      	ldr	r3, [pc, #324]	@ (8007bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f001 f814 	bl	8008ae8 <I2C_TransferConfig>
 8007ac0:	e06c      	b.n	8007b9c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	8979      	ldrh	r1, [r7, #10]
 8007ad4:	4b48      	ldr	r3, [pc, #288]	@ (8007bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f001 f803 	bl	8008ae8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ae2:	e05b      	b.n	8007b9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	6a39      	ldr	r1, [r7, #32]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fe93 	bl	8008814 <I2C_WaitOnTXISFlagUntilTimeout>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e07b      	b.n	8007bf0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d034      	beq.n	8007b9c <HAL_I2C_Master_Transmit+0x184>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d130      	bne.n	8007b9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	2200      	movs	r2, #0
 8007b42:	2180      	movs	r1, #128	@ 0x80
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fe0c 	bl	8008762 <I2C_WaitOnFlagUntilTimeout>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e04d      	b.n	8007bf0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2bff      	cmp	r3, #255	@ 0xff
 8007b5c:	d90e      	bls.n	8007b7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	22ff      	movs	r2, #255	@ 0xff
 8007b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	8979      	ldrh	r1, [r7, #10]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 ffb7 	bl	8008ae8 <I2C_TransferConfig>
 8007b7a:	e00f      	b.n	8007b9c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	8979      	ldrh	r1, [r7, #10]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 ffa6 	bl	8008ae8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d19e      	bne.n	8007ae4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	6a39      	ldr	r1, [r7, #32]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fe79 	bl	80088a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e01a      	b.n	8007bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6859      	ldr	r1, [r3, #4]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007bfc <HAL_I2C_Master_Transmit+0x1e4>)
 8007bce:	400b      	ands	r3, r1
 8007bd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
  }
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	80002000 	.word	0x80002000
 8007bfc:	fe00e800 	.word	0xfe00e800

08007c00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4798      	blx	r3
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00f      	beq.n	8007c76 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c64:	f043 0201 	orr.w	r2, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00f      	beq.n	8007ca0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c8e:	f043 0208 	orr.w	r2, r3, #8
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00f      	beq.n	8007cca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb8:	f043 0202 	orr.w	r2, r3, #2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cc8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 030b 	and.w	r3, r3, #11
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fbe7 	bl	80084b0 <I2C_ITError>
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <I2C_Slave_ISR_IT+0x24>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e0e2      	b.n	8007f54 <I2C_Slave_ISR_IT+0x1ea>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007daa:	6939      	ldr	r1, [r7, #16]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f9b5 	bl	800811c <I2C_ITSlaveCplt>
 8007db2:	e0ca      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d04b      	beq.n	8007e56 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d046      	beq.n	8007e56 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d128      	bne.n	8007e24 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b28      	cmp	r3, #40	@ 0x28
 8007ddc:	d108      	bne.n	8007df0 <I2C_Slave_ISR_IT+0x86>
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007de4:	d104      	bne.n	8007df0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007de6:	6939      	ldr	r1, [r7, #16]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 fb0d 	bl	8008408 <I2C_ITListenCplt>
 8007dee:	e031      	b.n	8007e54 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b29      	cmp	r3, #41	@ 0x29
 8007dfa:	d10e      	bne.n	8007e1a <I2C_Slave_ISR_IT+0xb0>
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e02:	d00a      	beq.n	8007e1a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2210      	movs	r2, #16
 8007e0a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fc66 	bl	80086de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f926 	bl	8008064 <I2C_ITSlaveSeqCplt>
 8007e18:	e01c      	b.n	8007e54 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2210      	movs	r2, #16
 8007e20:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e22:	e08f      	b.n	8007f44 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2210      	movs	r2, #16
 8007e2a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e30:	f043 0204 	orr.w	r2, r3, #4
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <I2C_Slave_ISR_IT+0xdc>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e44:	d17e      	bne.n	8007f44 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fb2f 	bl	80084b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007e52:	e077      	b.n	8007f44 <I2C_Slave_ISR_IT+0x1da>
 8007e54:	e076      	b.n	8007f44 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02f      	beq.n	8007ec0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d02a      	beq.n	8007ec0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d018      	beq.n	8007ea6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	b2d2      	uxtb	r2, r2
 8007e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d14b      	bne.n	8007f48 <I2C_Slave_ISR_IT+0x1de>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007eb6:	d047      	beq.n	8007f48 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f8d3 	bl	8008064 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ebe:	e043      	b.n	8007f48 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007ed4:	6939      	ldr	r1, [r7, #16]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f840 	bl	8007f5c <I2C_ITAddrCplt>
 8007edc:	e035      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d030      	beq.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d02b      	beq.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d018      	beq.n	8007f2e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f2c:	e00d      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f34:	d002      	beq.n	8007f3c <I2C_Slave_ISR_IT+0x1d2>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f891 	bl	8008064 <I2C_ITSlaveSeqCplt>
 8007f42:	e002      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007f44:	bf00      	nop
 8007f46:	e000      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007f48:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f72:	2b28      	cmp	r3, #40	@ 0x28
 8007f74:	d16a      	bne.n	800804c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	0c1b      	lsrs	r3, r3, #16
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	0c1b      	lsrs	r3, r3, #16
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007f94:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007fb0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d138      	bne.n	800802c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007fba:	897b      	ldrh	r3, [r7, #10]
 8007fbc:	09db      	lsrs	r3, r3, #7
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	89bb      	ldrh	r3, [r7, #12]
 8007fc2:	4053      	eors	r3, r2
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f003 0306 	and.w	r3, r3, #6
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d11c      	bne.n	8008008 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007fce:	897b      	ldrh	r3, [r7, #10]
 8007fd0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d13b      	bne.n	800805c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2208      	movs	r2, #8
 8007ff0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ffa:	89ba      	ldrh	r2, [r7, #12]
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fe86 	bl	8007d12 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008006:	e029      	b.n	800805c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008008:	893b      	ldrh	r3, [r7, #8]
 800800a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800800c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fd9b 	bl	8008b4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800801e:	89ba      	ldrh	r2, [r7, #12]
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff fe74 	bl	8007d12 <HAL_I2C_AddrCallback>
}
 800802a:	e017      	b.n	800805c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800802c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fd8b 	bl	8008b4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800803e:	89ba      	ldrh	r2, [r7, #12]
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff fe64 	bl	8007d12 <HAL_I2C_AddrCallback>
}
 800804a:	e007      	b.n	800805c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2208      	movs	r2, #8
 8008052:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d008      	beq.n	8008098 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	e00c      	b.n	80080b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080b0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b29      	cmp	r3, #41	@ 0x29
 80080bc:	d112      	bne.n	80080e4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2228      	movs	r2, #40	@ 0x28
 80080c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2221      	movs	r2, #33	@ 0x21
 80080ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80080cc:	2101      	movs	r1, #1
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fd3c 	bl	8008b4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff fe04 	bl	8007cea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80080e2:	e017      	b.n	8008114 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ee:	d111      	bne.n	8008114 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2228      	movs	r2, #40	@ 0x28
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2222      	movs	r2, #34	@ 0x22
 80080fc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80080fe:	2102      	movs	r1, #2
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fd23 	bl	8008b4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff fdf5 	bl	8007cfe <HAL_I2C_SlaveRxCpltCallback>
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800813e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2220      	movs	r2, #32
 8008146:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	2b21      	cmp	r3, #33	@ 0x21
 800814c:	d002      	beq.n	8008154 <I2C_ITSlaveCplt+0x38>
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	2b29      	cmp	r3, #41	@ 0x29
 8008152:	d108      	bne.n	8008166 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008154:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fcf7 	bl	8008b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2221      	movs	r2, #33	@ 0x21
 8008162:	631a      	str	r2, [r3, #48]	@ 0x30
 8008164:	e019      	b.n	800819a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b22      	cmp	r3, #34	@ 0x22
 800816a:	d002      	beq.n	8008172 <I2C_ITSlaveCplt+0x56>
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008170:	d108      	bne.n	8008184 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008172:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fce8 	bl	8008b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2222      	movs	r2, #34	@ 0x22
 8008180:	631a      	str	r2, [r3, #48]	@ 0x30
 8008182:	e00a      	b.n	800819a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	2b28      	cmp	r3, #40	@ 0x28
 8008188:	d107      	bne.n	800819a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800818a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fcdc 	bl	8008b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081a8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6859      	ldr	r1, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	4b92      	ldr	r3, [pc, #584]	@ (8008400 <I2C_ITSlaveCplt+0x2e4>)
 80081b6:	400b      	ands	r3, r1
 80081b8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa8f 	bl	80086de <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01c      	beq.n	8008204 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d031      	beq.n	8008246 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ea:	b29c      	uxth	r4, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe fc2f 	bl	8006a54 <HAL_DMAEx_GetFifoLevel>
 80081f6:	4603      	mov	r3, r0
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	4423      	add	r3, r4
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008202:	e020      	b.n	8008246 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d01b      	beq.n	8008246 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800821c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00f      	beq.n	8008246 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800822e:	b29c      	uxth	r4, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fc0d 	bl	8006a54 <HAL_DMAEx_GetFifoLevel>
 800823a:	4603      	mov	r3, r0
 800823c:	b29b      	uxth	r3, r3
 800823e:	4423      	add	r3, r4
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d020      	beq.n	8008292 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f023 0304 	bic.w	r3, r3, #4
 8008256:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00c      	beq.n	8008292 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a0:	f043 0204 	orr.w	r2, r3, #4
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d049      	beq.n	8008346 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d044      	beq.n	8008346 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d128      	bne.n	8008318 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b28      	cmp	r3, #40	@ 0x28
 80082d0:	d108      	bne.n	80082e4 <I2C_ITSlaveCplt+0x1c8>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082d8:	d104      	bne.n	80082e4 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80082da:	6979      	ldr	r1, [r7, #20]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f893 	bl	8008408 <I2C_ITListenCplt>
 80082e2:	e030      	b.n	8008346 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b29      	cmp	r3, #41	@ 0x29
 80082ee:	d10e      	bne.n	800830e <I2C_ITSlaveCplt+0x1f2>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80082f6:	d00a      	beq.n	800830e <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2210      	movs	r2, #16
 80082fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f9ec 	bl	80086de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff feac 	bl	8008064 <I2C_ITSlaveSeqCplt>
 800830c:	e01b      	b.n	8008346 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2210      	movs	r2, #16
 8008314:	61da      	str	r2, [r3, #28]
 8008316:	e016      	b.n	8008346 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2210      	movs	r2, #16
 800831e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008324:	f043 0204 	orr.w	r2, r3, #4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <I2C_ITSlaveCplt+0x21e>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008338:	d105      	bne.n	8008346 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f8b5 	bl	80084b0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008358:	2b00      	cmp	r3, #0
 800835a:	d010      	beq.n	800837e <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f8a4 	bl	80084b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b28      	cmp	r3, #40	@ 0x28
 8008372:	d141      	bne.n	80083f8 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008374:	6979      	ldr	r1, [r7, #20]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f846 	bl	8008408 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800837c:	e03c      	b.n	80083f8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008382:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008386:	d014      	beq.n	80083b2 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff fe6b 	bl	8008064 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1c      	ldr	r2, [pc, #112]	@ (8008404 <I2C_ITSlaveCplt+0x2e8>)
 8008392:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fcbf 	bl	8007d2e <HAL_I2C_ListenCpltCallback>
}
 80083b0:	e022      	b.n	80083f8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b22      	cmp	r3, #34	@ 0x22
 80083bc:	d10e      	bne.n	80083dc <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fc92 	bl	8007cfe <HAL_I2C_SlaveRxCpltCallback>
}
 80083da:	e00d      	b.n	80083f8 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fc79 	bl	8007cea <HAL_I2C_SlaveTxCpltCallback>
}
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd90      	pop	{r4, r7, pc}
 8008400:	fe00e800 	.word	0xfe00e800
 8008404:	ffff0000 	.word	0xffff0000

08008408 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a25      	ldr	r2, [pc, #148]	@ (80084ac <I2C_ITListenCplt+0xa4>)
 8008416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2220      	movs	r2, #32
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	f003 0304 	and.w	r3, r3, #4
 800843a:	2b00      	cmp	r3, #0
 800843c:	d022      	beq.n	8008484 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d012      	beq.n	8008484 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008462:	3b01      	subs	r3, #1
 8008464:	b29a      	uxth	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847c:	f043 0204 	orr.w	r2, r3, #4
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008484:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fb5f 	bl	8008b4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2210      	movs	r2, #16
 8008494:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff fc45 	bl	8007d2e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	ffff0000 	.word	0xffff0000

080084b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084c0:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a6d      	ldr	r2, [pc, #436]	@ (8008684 <I2C_ITError+0x1d4>)
 80084ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b28      	cmp	r3, #40	@ 0x28
 80084e6:	d005      	beq.n	80084f4 <I2C_ITError+0x44>
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	2b29      	cmp	r3, #41	@ 0x29
 80084ec:	d002      	beq.n	80084f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80084f2:	d10b      	bne.n	800850c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80084f4:	2103      	movs	r1, #3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fb28 	bl	8008b4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2228      	movs	r2, #40	@ 0x28
 8008500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a60      	ldr	r2, [pc, #384]	@ (8008688 <I2C_ITError+0x1d8>)
 8008508:	635a      	str	r2, [r3, #52]	@ 0x34
 800850a:	e030      	b.n	800856e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800850c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb1b 	bl	8008b4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8e1 	bl	80086de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b60      	cmp	r3, #96	@ 0x60
 8008526:	d01f      	beq.n	8008568 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b20      	cmp	r3, #32
 800853c:	d114      	bne.n	8008568 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b10      	cmp	r3, #16
 800854a:	d109      	bne.n	8008560 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2210      	movs	r2, #16
 8008552:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008558:	f043 0204 	orr.w	r2, r3, #4
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2220      	movs	r2, #32
 8008566:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008572:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008578:	2b00      	cmp	r3, #0
 800857a:	d039      	beq.n	80085f0 <I2C_ITError+0x140>
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b11      	cmp	r3, #17
 8008580:	d002      	beq.n	8008588 <I2C_ITError+0xd8>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b21      	cmp	r3, #33	@ 0x21
 8008586:	d133      	bne.n	80085f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008596:	d107      	bne.n	80085a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fd faa5 	bl	8005afc <HAL_DMA_GetState>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d017      	beq.n	80085e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	4a33      	ldr	r2, [pc, #204]	@ (800868c <I2C_ITError+0x1dc>)
 80085be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fd f90b 	bl	80057e8 <HAL_DMA_Abort_IT>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d04d      	beq.n	8008674 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80085e2:	4610      	mov	r0, r2
 80085e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085e6:	e045      	b.n	8008674 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f851 	bl	8008690 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085ee:	e041      	b.n	8008674 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d039      	beq.n	800866c <I2C_ITError+0x1bc>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b12      	cmp	r3, #18
 80085fc:	d002      	beq.n	8008604 <I2C_ITError+0x154>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b22      	cmp	r3, #34	@ 0x22
 8008602:	d133      	bne.n	800866c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800860e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008612:	d107      	bne.n	8008624 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008622:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd fa67 	bl	8005afc <HAL_DMA_GetState>
 800862e:	4603      	mov	r3, r0
 8008630:	2b01      	cmp	r3, #1
 8008632:	d017      	beq.n	8008664 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008638:	4a14      	ldr	r2, [pc, #80]	@ (800868c <I2C_ITError+0x1dc>)
 800863a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008648:	4618      	mov	r0, r3
 800864a:	f7fd f8cd 	bl	80057e8 <HAL_DMA_Abort_IT>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d011      	beq.n	8008678 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800865e:	4610      	mov	r0, r2
 8008660:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008662:	e009      	b.n	8008678 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f813 	bl	8008690 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800866a:	e005      	b.n	8008678 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f80f 	bl	8008690 <I2C_TreatErrorCallback>
  }
}
 8008672:	e002      	b.n	800867a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008678:	bf00      	nop
}
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	ffff0000 	.word	0xffff0000
 8008688:	08007d6b 	.word	0x08007d6b
 800868c:	08008727 	.word	0x08008727

08008690 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b60      	cmp	r3, #96	@ 0x60
 80086a2:	d10e      	bne.n	80086c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff fb4b 	bl	8007d56 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086c0:	e009      	b.n	80086d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff fb36 	bl	8007d42 <HAL_I2C_ErrorCallback>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d103      	bne.n	80086fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2200      	movs	r2, #0
 80086fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b01      	cmp	r3, #1
 8008708:	d007      	beq.n	800871a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699a      	ldr	r2, [r3, #24]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	619a      	str	r2, [r3, #24]
  }
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008740:	2200      	movs	r2, #0
 8008742:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	2200      	movs	r2, #0
 8008752:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7ff ff9b 	bl	8008690 <I2C_TreatErrorCallback>
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008772:	e03b      	b.n	80087ec <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f8d5 	bl	8008928 <I2C_IsErrorOccurred>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e041      	b.n	800880c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878e:	d02d      	beq.n	80087ec <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008790:	f7fa fa42 	bl	8002c18 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d302      	bcc.n	80087a6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d122      	bne.n	80087ec <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4013      	ands	r3, r2
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	bf0c      	ite	eq
 80087b6:	2301      	moveq	r3, #1
 80087b8:	2300      	movne	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d113      	bne.n	80087ec <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c8:	f043 0220 	orr.w	r2, r3, #32
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e00f      	b.n	800880c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	4013      	ands	r3, r2
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	bf0c      	ite	eq
 80087fc:	2301      	moveq	r3, #1
 80087fe:	2300      	movne	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	429a      	cmp	r2, r3
 8008808:	d0b4      	beq.n	8008774 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008820:	e033      	b.n	800888a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 f87e 	bl	8008928 <I2C_IsErrorOccurred>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e031      	b.n	800889a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883c:	d025      	beq.n	800888a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883e:	f7fa f9eb 	bl	8002c18 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	429a      	cmp	r2, r3
 800884c:	d302      	bcc.n	8008854 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d11a      	bne.n	800888a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b02      	cmp	r3, #2
 8008860:	d013      	beq.n	800888a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008866:	f043 0220 	orr.w	r2, r3, #32
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e007      	b.n	800889a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b02      	cmp	r3, #2
 8008896:	d1c4      	bne.n	8008822 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088ae:	e02f      	b.n	8008910 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f837 	bl	8008928 <I2C_IsErrorOccurred>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e02d      	b.n	8008920 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c4:	f7fa f9a8 	bl	8002c18 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d302      	bcc.n	80088da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d11a      	bne.n	8008910 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	f003 0320 	and.w	r3, r3, #32
 80088e4:	2b20      	cmp	r3, #32
 80088e6:	d013      	beq.n	8008910 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e007      	b.n	8008920 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b20      	cmp	r3, #32
 800891c:	d1c8      	bne.n	80088b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	@ 0x28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b00      	cmp	r3, #0
 8008952:	d068      	beq.n	8008a26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2210      	movs	r2, #16
 800895a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800895c:	e049      	b.n	80089f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d045      	beq.n	80089f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008966:	f7fa f957 	bl	8002c18 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	429a      	cmp	r2, r3
 8008974:	d302      	bcc.n	800897c <I2C_IsErrorOccurred+0x54>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d13a      	bne.n	80089f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008986:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800898e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800899a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800899e:	d121      	bne.n	80089e4 <I2C_IsErrorOccurred+0xbc>
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089a6:	d01d      	beq.n	80089e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80089a8:	7cfb      	ldrb	r3, [r7, #19]
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d01a      	beq.n	80089e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80089be:	f7fa f92b 	bl	8002c18 <HAL_GetTick>
 80089c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089c4:	e00e      	b.n	80089e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80089c6:	f7fa f927 	bl	8002c18 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b19      	cmp	r3, #25
 80089d2:	d907      	bls.n	80089e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	f043 0320 	orr.w	r3, r3, #32
 80089da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80089e2:	e006      	b.n	80089f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d1e9      	bne.n	80089c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d003      	beq.n	8008a08 <I2C_IsErrorOccurred+0xe0>
 8008a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0aa      	beq.n	800895e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2220      	movs	r2, #32
 8008a16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	f043 0304 	orr.w	r3, r3, #4
 8008a1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	f043 0308 	orr.w	r3, r3, #8
 8008a60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008a6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	f043 0302 	orr.w	r3, r3, #2
 8008a82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01c      	beq.n	8008ad6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff fe1e 	bl	80086de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6859      	ldr	r1, [r3, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <I2C_IsErrorOccurred+0x1bc>)
 8008aae:	400b      	ands	r3, r1
 8008ab0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3728      	adds	r7, #40	@ 0x28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	fe00e800 	.word	0xfe00e800

08008ae8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	607b      	str	r3, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	817b      	strh	r3, [r7, #10]
 8008af6:	4613      	mov	r3, r2
 8008af8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008afa:	897b      	ldrh	r3, [r7, #10]
 8008afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b00:	7a7b      	ldrb	r3, [r7, #9]
 8008b02:	041b      	lsls	r3, r3, #16
 8008b04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	0d5b      	lsrs	r3, r3, #21
 8008b22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008b26:	4b08      	ldr	r3, [pc, #32]	@ (8008b48 <I2C_TransferConfig+0x60>)
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	43db      	mvns	r3, r3
 8008b2c:	ea02 0103 	and.w	r1, r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	03ff63ff 	.word	0x03ff63ff

08008b4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008b5c:	887b      	ldrh	r3, [r7, #2]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00f      	beq.n	8008b86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008b6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b7a:	2b28      	cmp	r3, #40	@ 0x28
 8008b7c:	d003      	beq.n	8008b86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008b84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b86:	887b      	ldrh	r3, [r7, #2]
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00f      	beq.n	8008bb0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008b96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008ba4:	2b28      	cmp	r3, #40	@ 0x28
 8008ba6:	d003      	beq.n	8008bb0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008bae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008bb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da03      	bge.n	8008bc0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008bbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008bc0:	887b      	ldrh	r3, [r7, #2]
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d103      	bne.n	8008bce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008bcc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	2b20      	cmp	r3, #32
 8008bd2:	d103      	bne.n	8008bdc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f043 0320 	orr.w	r3, r3, #32
 8008bda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	d103      	bne.n	8008bea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	43da      	mvns	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	400a      	ands	r2, r1
 8008bfa:	601a      	str	r2, [r3, #0]
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d138      	bne.n	8008c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e032      	b.n	8008c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2224      	movs	r2, #36	@ 0x24
 8008c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0201 	bic.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6819      	ldr	r1, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f042 0201 	orr.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	e000      	b.n	8008c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c90:	2302      	movs	r3, #2
  }
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d139      	bne.n	8008d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d101      	bne.n	8008cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	e033      	b.n	8008d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2224      	movs	r2, #36	@ 0x24
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0201 	bic.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	e000      	b.n	8008d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d28:	2302      	movs	r3, #2
  }
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
	...

08008d38 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008d44:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
 8008d54:	e007      	b.n	8008d66 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008d56:	4b07      	ldr	r3, [pc, #28]	@ (8008d74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f023 0204 	bic.w	r2, r3, #4
 8008d5e:	4905      	ldr	r1, [pc, #20]	@ (8008d74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	40030400 	.word	0x40030400

08008d78 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008d7c:	4b05      	ldr	r3, [pc, #20]	@ (8008d94 <HAL_ICACHE_Enable+0x1c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a04      	ldr	r2, [pc, #16]	@ (8008d94 <HAL_ICACHE_Enable+0x1c>)
 8008d82:	f043 0301 	orr.w	r3, r3, #1
 8008d86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	40030400 	.word	0x40030400

08008d98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e0bf      	b.n	8008f2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7f9 f882 	bl	8001ec8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699a      	ldr	r2, [r3, #24]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008dda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6999      	ldr	r1, [r3, #24]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008df0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6899      	ldr	r1, [r3, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8008f34 <HAL_LTDC_Init+0x19c>)
 8008e0c:	400b      	ands	r3, r1
 8008e0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	041b      	lsls	r3, r3, #16
 8008e16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6899      	ldr	r1, [r3, #8]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	431a      	orrs	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68d9      	ldr	r1, [r3, #12]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	4b3e      	ldr	r3, [pc, #248]	@ (8008f34 <HAL_LTDC_Init+0x19c>)
 8008e3a:	400b      	ands	r3, r1
 8008e3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68d9      	ldr	r1, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a1a      	ldr	r2, [r3, #32]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6919      	ldr	r1, [r3, #16]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4b33      	ldr	r3, [pc, #204]	@ (8008f34 <HAL_LTDC_Init+0x19c>)
 8008e68:	400b      	ands	r3, r1
 8008e6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6919      	ldr	r1, [r3, #16]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6959      	ldr	r1, [r3, #20]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	4b27      	ldr	r3, [pc, #156]	@ (8008f34 <HAL_LTDC_Init+0x19c>)
 8008e96:	400b      	ands	r3, r1
 8008e98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6959      	ldr	r1, [r3, #20]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008ec8:	041b      	lsls	r3, r3, #16
 8008eca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0206 	orr.w	r2, r2, #6
 8008f06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0201 	orr.w	r2, r2, #1
 8008f16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	f000f800 	.word	0xf000f800

08008f38 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d023      	beq.n	8008fa2 <HAL_LTDC_IRQHandler+0x6a>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01e      	beq.n	8008fa2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0204 	bic.w	r2, r2, #4
 8008f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2204      	movs	r2, #4
 8008f7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f82:	f043 0201 	orr.w	r2, r3, #1
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2204      	movs	r2, #4
 8008f90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f86f 	bl	8009080 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d023      	beq.n	8008ff4 <HAL_LTDC_IRQHandler+0xbc>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01e      	beq.n	8008ff4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0202 	bic.w	r2, r2, #2
 8008fc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fd4:	f043 0202 	orr.w	r2, r3, #2
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f846 	bl	8009080 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d01b      	beq.n	8009036 <HAL_LTDC_IRQHandler+0xfe>
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d016      	beq.n	8009036 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0201 	bic.w	r2, r2, #1
 8009016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2201      	movs	r2, #1
 800901e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f82f 	bl	8009094 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01b      	beq.n	8009078 <HAL_LTDC_IRQHandler+0x140>
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d016      	beq.n	8009078 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0208 	bic.w	r2, r2, #8
 8009058:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2208      	movs	r2, #8
 8009060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f818 	bl	80090a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80090bc:	b5b0      	push	{r4, r5, r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_LTDC_ConfigLayer+0x1a>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e02c      	b.n	8009130 <HAL_LTDC_ConfigLayer+0x74>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2202      	movs	r2, #2
 80090e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2134      	movs	r1, #52	@ 0x34
 80090ec:	fb01 f303 	mul.w	r3, r1, r3
 80090f0:	4413      	add	r3, r2
 80090f2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	4614      	mov	r4, r2
 80090fa:	461d      	mov	r5, r3
 80090fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 f811 	bl	8009138 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2201      	movs	r2, #1
 800911c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bdb0      	pop	{r4, r5, r7, pc}

08009138 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009138:	b480      	push	{r7}
 800913a:	b089      	sub	sp, #36	@ 0x24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009154:	4413      	add	r3, r2
 8009156:	041b      	lsls	r3, r3, #16
 8009158:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	01db      	lsls	r3, r3, #7
 8009164:	4413      	add	r3, r2
 8009166:	3384      	adds	r3, #132	@ 0x84
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	6812      	ldr	r2, [r2, #0]
 800916e:	4611      	mov	r1, r2
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	01d2      	lsls	r2, r2, #7
 8009174:	440a      	add	r2, r1
 8009176:	3284      	adds	r2, #132	@ 0x84
 8009178:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800917c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800918e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009190:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4619      	mov	r1, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	01db      	lsls	r3, r3, #7
 800919c:	440b      	add	r3, r1
 800919e:	3384      	adds	r3, #132	@ 0x84
 80091a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091b6:	4413      	add	r3, r2
 80091b8:	041b      	lsls	r3, r3, #16
 80091ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	01db      	lsls	r3, r3, #7
 80091c6:	4413      	add	r3, r2
 80091c8:	3384      	adds	r3, #132	@ 0x84
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	6812      	ldr	r2, [r2, #0]
 80091d0:	4611      	mov	r1, r2
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	01d2      	lsls	r2, r2, #7
 80091d6:	440a      	add	r2, r1
 80091d8:	3284      	adds	r2, #132	@ 0x84
 80091da:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80091de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091ee:	4413      	add	r3, r2
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4619      	mov	r1, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	01db      	lsls	r3, r3, #7
 80091fc:	440b      	add	r3, r1
 80091fe:	3384      	adds	r3, #132	@ 0x84
 8009200:	4619      	mov	r1, r3
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4313      	orrs	r3, r2
 8009206:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	01db      	lsls	r3, r3, #7
 8009212:	4413      	add	r3, r2
 8009214:	3384      	adds	r3, #132	@ 0x84
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	6812      	ldr	r2, [r2, #0]
 800921c:	4611      	mov	r1, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	01d2      	lsls	r2, r2, #7
 8009222:	440a      	add	r2, r1
 8009224:	3284      	adds	r2, #132	@ 0x84
 8009226:	f023 0307 	bic.w	r3, r3, #7
 800922a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	01db      	lsls	r3, r3, #7
 8009236:	4413      	add	r3, r2
 8009238:	3384      	adds	r3, #132	@ 0x84
 800923a:	461a      	mov	r2, r3
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009252:	041b      	lsls	r3, r3, #16
 8009254:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	061b      	lsls	r3, r3, #24
 800925c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009264:	461a      	mov	r2, r3
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	431a      	orrs	r2, r3
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	431a      	orrs	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4619      	mov	r1, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	01db      	lsls	r3, r3, #7
 8009278:	440b      	add	r3, r1
 800927a:	3384      	adds	r3, #132	@ 0x84
 800927c:	4619      	mov	r1, r3
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	4313      	orrs	r3, r2
 8009282:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	01db      	lsls	r3, r3, #7
 800928e:	4413      	add	r3, r2
 8009290:	3384      	adds	r3, #132	@ 0x84
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	6812      	ldr	r2, [r2, #0]
 8009298:	4611      	mov	r1, r2
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	01d2      	lsls	r2, r2, #7
 800929e:	440a      	add	r2, r1
 80092a0:	3284      	adds	r2, #132	@ 0x84
 80092a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80092a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	01db      	lsls	r3, r3, #7
 80092b2:	4413      	add	r3, r2
 80092b4:	3384      	adds	r3, #132	@ 0x84
 80092b6:	461a      	mov	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	01db      	lsls	r3, r3, #7
 80092c8:	4413      	add	r3, r2
 80092ca:	3384      	adds	r3, #132	@ 0x84
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	4611      	mov	r1, r2
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	01d2      	lsls	r2, r2, #7
 80092d8:	440a      	add	r2, r1
 80092da:	3284      	adds	r2, #132	@ 0x84
 80092dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80092e0:	f023 0307 	bic.w	r3, r3, #7
 80092e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	69da      	ldr	r2, [r3, #28]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	6809      	ldr	r1, [r1, #0]
 80092f2:	4608      	mov	r0, r1
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	01c9      	lsls	r1, r1, #7
 80092f8:	4401      	add	r1, r0
 80092fa:	3184      	adds	r1, #132	@ 0x84
 80092fc:	4313      	orrs	r3, r2
 80092fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	01db      	lsls	r3, r3, #7
 800930a:	4413      	add	r3, r2
 800930c:	3384      	adds	r3, #132	@ 0x84
 800930e:	461a      	mov	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d102      	bne.n	8009324 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800931e:	2304      	movs	r3, #4
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	e01b      	b.n	800935c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d102      	bne.n	8009332 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800932c:	2303      	movs	r3, #3
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	e014      	b.n	800935c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	2b04      	cmp	r3, #4
 8009338:	d00b      	beq.n	8009352 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800933e:	2b02      	cmp	r3, #2
 8009340:	d007      	beq.n	8009352 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009346:	2b03      	cmp	r3, #3
 8009348:	d003      	beq.n	8009352 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800934e:	2b07      	cmp	r3, #7
 8009350:	d102      	bne.n	8009358 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009352:	2302      	movs	r3, #2
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	e001      	b.n	800935c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009358:	2301      	movs	r3, #1
 800935a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	01db      	lsls	r3, r3, #7
 8009366:	4413      	add	r3, r2
 8009368:	3384      	adds	r3, #132	@ 0x84
 800936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	6812      	ldr	r2, [r2, #0]
 8009370:	4611      	mov	r1, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	01d2      	lsls	r2, r2, #7
 8009376:	440a      	add	r2, r1
 8009378:	3284      	adds	r2, #132	@ 0x84
 800937a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800937e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6859      	ldr	r1, [r3, #4]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	1acb      	subs	r3, r1, r3
 8009396:	69f9      	ldr	r1, [r7, #28]
 8009398:	fb01 f303 	mul.w	r3, r1, r3
 800939c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	6809      	ldr	r1, [r1, #0]
 80093a2:	4608      	mov	r0, r1
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	01c9      	lsls	r1, r1, #7
 80093a8:	4401      	add	r1, r0
 80093aa:	3184      	adds	r1, #132	@ 0x84
 80093ac:	4313      	orrs	r3, r2
 80093ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	01db      	lsls	r3, r3, #7
 80093ba:	4413      	add	r3, r2
 80093bc:	3384      	adds	r3, #132	@ 0x84
 80093be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	6812      	ldr	r2, [r2, #0]
 80093c4:	4611      	mov	r1, r2
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	01d2      	lsls	r2, r2, #7
 80093ca:	440a      	add	r2, r1
 80093cc:	3284      	adds	r2, #132	@ 0x84
 80093ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80093d2:	f023 0307 	bic.w	r3, r3, #7
 80093d6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	01db      	lsls	r3, r3, #7
 80093e2:	4413      	add	r3, r2
 80093e4:	3384      	adds	r3, #132	@ 0x84
 80093e6:	461a      	mov	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	01db      	lsls	r3, r3, #7
 80093f8:	4413      	add	r3, r2
 80093fa:	3384      	adds	r3, #132	@ 0x84
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	6812      	ldr	r2, [r2, #0]
 8009402:	4611      	mov	r1, r2
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	01d2      	lsls	r2, r2, #7
 8009408:	440a      	add	r2, r1
 800940a:	3284      	adds	r2, #132	@ 0x84
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	6013      	str	r3, [r2, #0]
}
 8009412:	bf00      	nop
 8009414:	3724      	adds	r7, #36	@ 0x24
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b086      	sub	sp, #24
 8009422:	af02      	add	r7, sp, #8
 8009424:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e0fe      	b.n	800962e <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7f8 ffd9 	bl	80023fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2203      	movs	r2, #3
 800944e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f008 f895 	bl	8011586 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	7c1a      	ldrb	r2, [r3, #16]
 8009464:	f88d 2000 	strb.w	r2, [sp]
 8009468:	3304      	adds	r3, #4
 800946a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800946c:	f008 f85c 	bl	8011528 <USB_CoreInit>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2202      	movs	r2, #2
 800947a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e0d5      	b.n	800962e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2100      	movs	r1, #0
 8009488:	4618      	mov	r0, r3
 800948a:	f008 f88d 	bl	80115a8 <USB_SetCurrentMode>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e0c6      	b.n	800962e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
 80094a4:	e04a      	b.n	800953c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094a6:	7bfa      	ldrb	r2, [r7, #15]
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	3315      	adds	r3, #21
 80094b6:	2201      	movs	r2, #1
 80094b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80094ba:	7bfa      	ldrb	r2, [r7, #15]
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3314      	adds	r3, #20
 80094ca:	7bfa      	ldrb	r2, [r7, #15]
 80094cc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80094ce:	7bfa      	ldrb	r2, [r7, #15]
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	b298      	uxth	r0, r3
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	4613      	mov	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	440b      	add	r3, r1
 80094e0:	332e      	adds	r3, #46	@ 0x2e
 80094e2:	4602      	mov	r2, r0
 80094e4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80094e6:	7bfa      	ldrb	r2, [r7, #15]
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	3318      	adds	r3, #24
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80094fa:	7bfa      	ldrb	r2, [r7, #15]
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	4613      	mov	r3, r2
 8009500:	00db      	lsls	r3, r3, #3
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	440b      	add	r3, r1
 8009508:	331c      	adds	r3, #28
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800950e:	7bfa      	ldrb	r2, [r7, #15]
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	3320      	adds	r3, #32
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009522:	7bfa      	ldrb	r2, [r7, #15]
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	4613      	mov	r3, r2
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	3324      	adds	r3, #36	@ 0x24
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	3301      	adds	r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	791b      	ldrb	r3, [r3, #4]
 8009540:	7bfa      	ldrb	r2, [r7, #15]
 8009542:	429a      	cmp	r2, r3
 8009544:	d3af      	bcc.n	80094a6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
 800954a:	e044      	b.n	80095d6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800954c:	7bfa      	ldrb	r2, [r7, #15]
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4613      	mov	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009562:	7bfa      	ldrb	r2, [r7, #15]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009574:	7bfa      	ldrb	r2, [r7, #15]
 8009576:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009578:	7bfa      	ldrb	r2, [r7, #15]
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800958e:	7bfa      	ldrb	r2, [r7, #15]
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095a4:	7bfa      	ldrb	r2, [r7, #15]
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	4413      	add	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095ba:	7bfa      	ldrb	r2, [r7, #15]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	3301      	adds	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	791b      	ldrb	r3, [r3, #4]
 80095da:	7bfa      	ldrb	r2, [r7, #15]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d3b5      	bcc.n	800954c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7c1a      	ldrb	r2, [r3, #16]
 80095e8:	f88d 2000 	strb.w	r2, [sp]
 80095ec:	3304      	adds	r3, #4
 80095ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095f0:	f008 f826 	bl	8011640 <USB_DevInit>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d005      	beq.n	8009606 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2202      	movs	r2, #2
 80095fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e013      	b.n	800962e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7b1b      	ldrb	r3, [r3, #12]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d102      	bne.n	8009622 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f80a 	bl	8009636 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f008 f9f3 	bl	8011a12 <USB_DevDisconnect>

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009668:	f043 0303 	orr.w	r3, r3, #3
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
	...

08009680 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009680:	b480      	push	{r7}
 8009682:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009684:	4b05      	ldr	r3, [pc, #20]	@ (800969c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009688:	4a04      	ldr	r2, [pc, #16]	@ (800969c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009690:	bf00      	nop
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	46020800 	.word	0x46020800

080096a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80096a8:	4b39      	ldr	r3, [pc, #228]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096b0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d10b      	bne.n	80096d2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096c0:	d905      	bls.n	80096ce <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80096c2:	4b33      	ldr	r3, [pc, #204]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	4a32      	ldr	r2, [pc, #200]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096cc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e057      	b.n	8009782 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d8:	d90a      	bls.n	80096f0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80096da:	4b2d      	ldr	r3, [pc, #180]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096ec:	60d3      	str	r3, [r2, #12]
 80096ee:	e007      	b.n	8009700 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80096f0:	4b27      	ldr	r3, [pc, #156]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80096f8:	4925      	ldr	r1, [pc, #148]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009700:	4b24      	ldr	r3, [pc, #144]	@ (8009794 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a24      	ldr	r2, [pc, #144]	@ (8009798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009706:	fba2 2303 	umull	r2, r3, r2, r3
 800970a:	099b      	lsrs	r3, r3, #6
 800970c:	2232      	movs	r2, #50	@ 0x32
 800970e:	fb02 f303 	mul.w	r3, r2, r3
 8009712:	4a21      	ldr	r2, [pc, #132]	@ (8009798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009714:	fba2 2303 	umull	r2, r3, r2, r3
 8009718:	099b      	lsrs	r3, r3, #6
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800971e:	e002      	b.n	8009726 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	3b01      	subs	r3, #1
 8009724:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009726:	4b1a      	ldr	r3, [pc, #104]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1f3      	bne.n	8009720 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01b      	beq.n	8009776 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800973e:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a15      	ldr	r2, [pc, #84]	@ (8009798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009744:	fba2 2303 	umull	r2, r3, r2, r3
 8009748:	099b      	lsrs	r3, r3, #6
 800974a:	2232      	movs	r2, #50	@ 0x32
 800974c:	fb02 f303 	mul.w	r3, r2, r3
 8009750:	4a11      	ldr	r2, [pc, #68]	@ (8009798 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009752:	fba2 2303 	umull	r2, r3, r2, r3
 8009756:	099b      	lsrs	r3, r3, #6
 8009758:	3301      	adds	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800975c:	e002      	b.n	8009764 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3b01      	subs	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009764:	4b0a      	ldr	r3, [pc, #40]	@ (8009790 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1f3      	bne.n	800975e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e000      	b.n	8009782 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	46020800 	.word	0x46020800
 8009794:	20000020 	.word	0x20000020
 8009798:	10624dd3 	.word	0x10624dd3

0800979c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80097a0:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80097a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	46020800 	.word	0x46020800

080097b8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80097c0:	4b22      	ldr	r3, [pc, #136]	@ (800984c <HAL_PWREx_ConfigSupply+0x94>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a22      	ldr	r2, [pc, #136]	@ (8009850 <HAL_PWREx_ConfigSupply+0x98>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	099b      	lsrs	r3, r3, #6
 80097cc:	2232      	movs	r2, #50	@ 0x32
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009850 <HAL_PWREx_ConfigSupply+0x98>)
 80097d4:	fba2 2303 	umull	r2, r3, r2, r3
 80097d8:	099b      	lsrs	r3, r3, #6
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d113      	bne.n	800980c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80097e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009854 <HAL_PWREx_ConfigSupply+0x9c>)
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009854 <HAL_PWREx_ConfigSupply+0x9c>)
 80097ea:	f023 0302 	bic.w	r3, r3, #2
 80097ee:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097f0:	e002      	b.n	80097f8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097f8:	4b16      	ldr	r3, [pc, #88]	@ (8009854 <HAL_PWREx_ConfigSupply+0x9c>)
 80097fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b02      	cmp	r3, #2
 8009802:	d116      	bne.n	8009832 <HAL_PWREx_ConfigSupply+0x7a>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1f3      	bne.n	80097f2 <HAL_PWREx_ConfigSupply+0x3a>
 800980a:	e012      	b.n	8009832 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800980c:	4b11      	ldr	r3, [pc, #68]	@ (8009854 <HAL_PWREx_ConfigSupply+0x9c>)
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	4a10      	ldr	r2, [pc, #64]	@ (8009854 <HAL_PWREx_ConfigSupply+0x9c>)
 8009812:	f043 0302 	orr.w	r3, r3, #2
 8009816:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009818:	e002      	b.n	8009820 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3b01      	subs	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009820:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <HAL_PWREx_ConfigSupply+0x9c>)
 8009822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <HAL_PWREx_ConfigSupply+0x7a>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1f3      	bne.n	800981a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e000      	b.n	800983e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20000020 	.word	0x20000020
 8009850:	10624dd3 	.word	0x10624dd3
 8009854:	46020800 	.word	0x46020800

08009858 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800985c:	4b05      	ldr	r3, [pc, #20]	@ (8009874 <HAL_PWREx_EnableVddUSB+0x1c>)
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	4a04      	ldr	r2, [pc, #16]	@ (8009874 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009866:	6113      	str	r3, [r2, #16]
}
 8009868:	bf00      	nop
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	46020800 	.word	0x46020800

08009878 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800987c:	4b05      	ldr	r3, [pc, #20]	@ (8009894 <HAL_PWREx_EnableVddIO2+0x1c>)
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	4a04      	ldr	r2, [pc, #16]	@ (8009894 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009882:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009886:	6113      	str	r3, [r2, #16]
}
 8009888:	bf00      	nop
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	46020800 	.word	0x46020800

08009898 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800989c:	4b05      	ldr	r3, [pc, #20]	@ (80098b4 <HAL_PWREx_EnableVddA+0x1c>)
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	4a04      	ldr	r2, [pc, #16]	@ (80098b4 <HAL_PWREx_EnableVddA+0x1c>)
 80098a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098a6:	6113      	str	r3, [r2, #16]
}
 80098a8:	bf00      	nop
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	46020800 	.word	0x46020800

080098b8 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80098be:	f7ff ff6d 	bl	800979c <HAL_PWREx_GetVoltageRange>
 80098c2:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098ca:	d003      	beq.n	80098d4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d2:	d107      	bne.n	80098e4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80098d4:	4b06      	ldr	r3, [pc, #24]	@ (80098f0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	4a05      	ldr	r2, [pc, #20]	@ (80098f0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80098da:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80098de:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	e000      	b.n	80098e6 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	46020800 	.word	0x46020800

080098f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08e      	sub	sp, #56	@ 0x38
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80098fc:	2300      	movs	r3, #0
 80098fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d102      	bne.n	800990e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f000 bec8 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800990e:	4b99      	ldr	r3, [pc, #612]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f003 030c 	and.w	r3, r3, #12
 8009916:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009918:	4b96      	ldr	r3, [pc, #600]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 800991a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991c:	f003 0303 	and.w	r3, r3, #3
 8009920:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0310 	and.w	r3, r3, #16
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 816c 	beq.w	8009c08 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <HAL_RCC_OscConfig+0x52>
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	2b0c      	cmp	r3, #12
 800993a:	f040 80de 	bne.w	8009afa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800993e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009940:	2b01      	cmp	r3, #1
 8009942:	f040 80da 	bne.w	8009afa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	f000 bea5 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009958:	4b86      	ldr	r3, [pc, #536]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <HAL_RCC_OscConfig+0x7a>
 8009964:	4b83      	ldr	r3, [pc, #524]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800996c:	e005      	b.n	800997a <HAL_RCC_OscConfig+0x86>
 800996e:	4b81      	ldr	r3, [pc, #516]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009974:	041b      	lsls	r3, r3, #16
 8009976:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800997a:	4293      	cmp	r3, r2
 800997c:	d255      	bcs.n	8009a2a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10a      	bne.n	800999a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009988:	4618      	mov	r0, r3
 800998a:	f001 f9d9 	bl	800ad40 <RCC_SetFlashLatencyFromMSIRange>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	f000 be82 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800999a:	4b76      	ldr	r3, [pc, #472]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	4a75      	ldr	r2, [pc, #468]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 80099a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099a4:	6093      	str	r3, [r2, #8]
 80099a6:	4b73      	ldr	r3, [pc, #460]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b2:	4970      	ldr	r1, [pc, #448]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80099c0:	d309      	bcc.n	80099d6 <HAL_RCC_OscConfig+0xe2>
 80099c2:	4b6c      	ldr	r3, [pc, #432]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f023 021f 	bic.w	r2, r3, #31
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	4969      	ldr	r1, [pc, #420]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60cb      	str	r3, [r1, #12]
 80099d4:	e07e      	b.n	8009ad4 <HAL_RCC_OscConfig+0x1e0>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099da:	2b00      	cmp	r3, #0
 80099dc:	da0a      	bge.n	80099f4 <HAL_RCC_OscConfig+0x100>
 80099de:	4b65      	ldr	r3, [pc, #404]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	015b      	lsls	r3, r3, #5
 80099ec:	4961      	ldr	r1, [pc, #388]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60cb      	str	r3, [r1, #12]
 80099f2:	e06f      	b.n	8009ad4 <HAL_RCC_OscConfig+0x1e0>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099fc:	d30a      	bcc.n	8009a14 <HAL_RCC_OscConfig+0x120>
 80099fe:	4b5d      	ldr	r3, [pc, #372]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	029b      	lsls	r3, r3, #10
 8009a0c:	4959      	ldr	r1, [pc, #356]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60cb      	str	r3, [r1, #12]
 8009a12:	e05f      	b.n	8009ad4 <HAL_RCC_OscConfig+0x1e0>
 8009a14:	4b57      	ldr	r3, [pc, #348]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	03db      	lsls	r3, r3, #15
 8009a22:	4954      	ldr	r1, [pc, #336]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	60cb      	str	r3, [r1, #12]
 8009a28:	e054      	b.n	8009ad4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009a2a:	4b52      	ldr	r3, [pc, #328]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	4a51      	ldr	r2, [pc, #324]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a34:	6093      	str	r3, [r2, #8]
 8009a36:	4b4f      	ldr	r3, [pc, #316]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a42:	494c      	ldr	r1, [pc, #304]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a50:	d309      	bcc.n	8009a66 <HAL_RCC_OscConfig+0x172>
 8009a52:	4b48      	ldr	r3, [pc, #288]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f023 021f 	bic.w	r2, r3, #31
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	4945      	ldr	r1, [pc, #276]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60cb      	str	r3, [r1, #12]
 8009a64:	e028      	b.n	8009ab8 <HAL_RCC_OscConfig+0x1c4>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	da0a      	bge.n	8009a84 <HAL_RCC_OscConfig+0x190>
 8009a6e:	4b41      	ldr	r3, [pc, #260]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	015b      	lsls	r3, r3, #5
 8009a7c:	493d      	ldr	r1, [pc, #244]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60cb      	str	r3, [r1, #12]
 8009a82:	e019      	b.n	8009ab8 <HAL_RCC_OscConfig+0x1c4>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8c:	d30a      	bcc.n	8009aa4 <HAL_RCC_OscConfig+0x1b0>
 8009a8e:	4b39      	ldr	r3, [pc, #228]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	029b      	lsls	r3, r3, #10
 8009a9c:	4935      	ldr	r1, [pc, #212]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60cb      	str	r3, [r1, #12]
 8009aa2:	e009      	b.n	8009ab8 <HAL_RCC_OscConfig+0x1c4>
 8009aa4:	4b33      	ldr	r3, [pc, #204]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
 8009ab0:	03db      	lsls	r3, r3, #15
 8009ab2:	4930      	ldr	r1, [pc, #192]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 f93c 	bl	800ad40 <RCC_SetFlashLatencyFromMSIRange>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f000 bde5 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009ad4:	f001 f8de 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009ad8:	4b27      	ldr	r3, [pc, #156]	@ (8009b78 <HAL_RCC_OscConfig+0x284>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7f9 f811 	bl	8002b04 <HAL_InitTick>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 808a 	beq.w	8009c06 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009af2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009af6:	f000 bdd2 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d066      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009b02:	4b1c      	ldr	r3, [pc, #112]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a1b      	ldr	r2, [pc, #108]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b08:	f043 0301 	orr.w	r3, r3, #1
 8009b0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009b0e:	f7f9 f883 	bl	8002c18 <HAL_GetTick>
 8009b12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b14:	e009      	b.n	8009b2a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b16:	f7f9 f87f 	bl	8002c18 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d902      	bls.n	8009b2a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	f000 bdba 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b2a:	4b12      	ldr	r3, [pc, #72]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d0ef      	beq.n	8009b16 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009b36:	4b0f      	ldr	r3, [pc, #60]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b40:	6093      	str	r3, [r2, #8]
 8009b42:	4b0c      	ldr	r3, [pc, #48]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4e:	4909      	ldr	r1, [pc, #36]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009b5c:	d30e      	bcc.n	8009b7c <HAL_RCC_OscConfig+0x288>
 8009b5e:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	f023 021f 	bic.w	r2, r3, #31
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	4902      	ldr	r1, [pc, #8]	@ (8009b74 <HAL_RCC_OscConfig+0x280>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	60cb      	str	r3, [r1, #12]
 8009b70:	e04a      	b.n	8009c08 <HAL_RCC_OscConfig+0x314>
 8009b72:	bf00      	nop
 8009b74:	46020c00 	.word	0x46020c00
 8009b78:	20000024 	.word	0x20000024
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da0a      	bge.n	8009b9a <HAL_RCC_OscConfig+0x2a6>
 8009b84:	4b98      	ldr	r3, [pc, #608]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	015b      	lsls	r3, r3, #5
 8009b92:	4995      	ldr	r1, [pc, #596]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60cb      	str	r3, [r1, #12]
 8009b98:	e036      	b.n	8009c08 <HAL_RCC_OscConfig+0x314>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ba2:	d30a      	bcc.n	8009bba <HAL_RCC_OscConfig+0x2c6>
 8009ba4:	4b90      	ldr	r3, [pc, #576]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	029b      	lsls	r3, r3, #10
 8009bb2:	498d      	ldr	r1, [pc, #564]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60cb      	str	r3, [r1, #12]
 8009bb8:	e026      	b.n	8009c08 <HAL_RCC_OscConfig+0x314>
 8009bba:	4b8b      	ldr	r3, [pc, #556]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	03db      	lsls	r3, r3, #15
 8009bc8:	4987      	ldr	r1, [pc, #540]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60cb      	str	r3, [r1, #12]
 8009bce:	e01b      	b.n	8009c08 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009bd0:	4b85      	ldr	r3, [pc, #532]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a84      	ldr	r2, [pc, #528]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009bdc:	f7f9 f81c 	bl	8002c18 <HAL_GetTick>
 8009be0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009be2:	e009      	b.n	8009bf8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009be4:	f7f9 f818 	bl	8002c18 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d902      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	f000 bd53 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009bf8:	4b7b      	ldr	r3, [pc, #492]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0304 	and.w	r3, r3, #4
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1ef      	bne.n	8009be4 <HAL_RCC_OscConfig+0x2f0>
 8009c04:	e000      	b.n	8009c08 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009c06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 808b 	beq.w	8009d2c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d005      	beq.n	8009c28 <HAL_RCC_OscConfig+0x334>
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	2b0c      	cmp	r3, #12
 8009c20:	d109      	bne.n	8009c36 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d106      	bne.n	8009c36 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d17d      	bne.n	8009d2c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	f000 bd34 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c3e:	d106      	bne.n	8009c4e <HAL_RCC_OscConfig+0x35a>
 8009c40:	4b69      	ldr	r3, [pc, #420]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a68      	ldr	r2, [pc, #416]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	e041      	b.n	8009cd2 <HAL_RCC_OscConfig+0x3de>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c56:	d112      	bne.n	8009c7e <HAL_RCC_OscConfig+0x38a>
 8009c58:	4b63      	ldr	r3, [pc, #396]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a62      	ldr	r2, [pc, #392]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	4b60      	ldr	r3, [pc, #384]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a5f      	ldr	r2, [pc, #380]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c6a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	4b5d      	ldr	r3, [pc, #372]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a5c      	ldr	r2, [pc, #368]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	e029      	b.n	8009cd2 <HAL_RCC_OscConfig+0x3de>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009c86:	d112      	bne.n	8009cae <HAL_RCC_OscConfig+0x3ba>
 8009c88:	4b57      	ldr	r3, [pc, #348]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a56      	ldr	r2, [pc, #344]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	4b54      	ldr	r3, [pc, #336]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a53      	ldr	r2, [pc, #332]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	4b51      	ldr	r3, [pc, #324]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a50      	ldr	r2, [pc, #320]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	e011      	b.n	8009cd2 <HAL_RCC_OscConfig+0x3de>
 8009cae:	4b4e      	ldr	r3, [pc, #312]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	4b4b      	ldr	r3, [pc, #300]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a4a      	ldr	r2, [pc, #296]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	4b48      	ldr	r3, [pc, #288]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a47      	ldr	r2, [pc, #284]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009ccc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009cd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d014      	beq.n	8009d04 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009cda:	f7f8 ff9d 	bl	8002c18 <HAL_GetTick>
 8009cde:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ce0:	e009      	b.n	8009cf6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ce2:	f7f8 ff99 	bl	8002c18 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	2b64      	cmp	r3, #100	@ 0x64
 8009cee:	d902      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	f000 bcd4 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0ef      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x3ee>
 8009d02:	e013      	b.n	8009d2c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009d04:	f7f8 ff88 	bl	8002c18 <HAL_GetTick>
 8009d08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d0a:	e009      	b.n	8009d20 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d0c:	f7f8 ff84 	bl	8002c18 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	2b64      	cmp	r3, #100	@ 0x64
 8009d18:	d902      	bls.n	8009d20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	f000 bcbf 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d20:	4b31      	ldr	r3, [pc, #196]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1ef      	bne.n	8009d0c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d05f      	beq.n	8009df8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	d005      	beq.n	8009d4a <HAL_RCC_OscConfig+0x456>
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	2b0c      	cmp	r3, #12
 8009d42:	d114      	bne.n	8009d6e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d111      	bne.n	8009d6e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	f000 bca3 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009d58:	4b23      	ldr	r3, [pc, #140]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	041b      	lsls	r3, r3, #16
 8009d66:	4920      	ldr	r1, [pc, #128]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009d6c:	e044      	b.n	8009df8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d024      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009d76:	4b1c      	ldr	r3, [pc, #112]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d80:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d82:	f7f8 ff49 	bl	8002c18 <HAL_GetTick>
 8009d86:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d88:	e009      	b.n	8009d9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d8a:	f7f8 ff45 	bl	8002c18 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d902      	bls.n	8009d9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	f000 bc80 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d9e:	4b12      	ldr	r3, [pc, #72]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0ef      	beq.n	8009d8a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009daa:	4b0f      	ldr	r3, [pc, #60]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	490b      	ldr	r1, [pc, #44]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	610b      	str	r3, [r1, #16]
 8009dbe:	e01b      	b.n	8009df8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009dc0:	4b09      	ldr	r3, [pc, #36]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a08      	ldr	r2, [pc, #32]	@ (8009de8 <HAL_RCC_OscConfig+0x4f4>)
 8009dc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009dcc:	f7f8 ff24 	bl	8002c18 <HAL_GetTick>
 8009dd0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009dd2:	e00b      	b.n	8009dec <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dd4:	f7f8 ff20 	bl	8002c18 <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d904      	bls.n	8009dec <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	f000 bc5b 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
 8009de8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009dec:	4baf      	ldr	r3, [pc, #700]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1ed      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0308 	and.w	r3, r3, #8
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 80c8 	beq.w	8009f96 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009e06:	2300      	movs	r3, #0
 8009e08:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e0c:	4ba7      	ldr	r3, [pc, #668]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d111      	bne.n	8009e3e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e1a:	4ba4      	ldr	r3, [pc, #656]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e20:	4aa2      	ldr	r2, [pc, #648]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009e22:	f043 0304 	orr.w	r3, r3, #4
 8009e26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e2a:	4ba0      	ldr	r3, [pc, #640]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	617b      	str	r3, [r7, #20]
 8009e36:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e3e:	4b9c      	ldr	r3, [pc, #624]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d119      	bne.n	8009e7e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009e4a:	4b99      	ldr	r3, [pc, #612]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4e:	4a98      	ldr	r2, [pc, #608]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e56:	f7f8 fedf 	bl	8002c18 <HAL_GetTick>
 8009e5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e5c:	e009      	b.n	8009e72 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e5e:	f7f8 fedb 	bl	8002c18 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d902      	bls.n	8009e72 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	f000 bc16 	b.w	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e72:	4b8f      	ldr	r3, [pc, #572]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 8009e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0ef      	beq.n	8009e5e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d05f      	beq.n	8009f46 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009e86:	4b89      	ldr	r3, [pc, #548]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e8c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	699a      	ldr	r2, [r3, #24]
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d037      	beq.n	8009f0c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d006      	beq.n	8009eb4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e3f4      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01b      	beq.n	8009ef6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009ebe:	4b7b      	ldr	r3, [pc, #492]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ec4:	4a79      	ldr	r2, [pc, #484]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009ec6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009eca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009ece:	f7f8 fea3 	bl	8002c18 <HAL_GetTick>
 8009ed2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009ed4:	e008      	b.n	8009ee8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ed6:	f7f8 fe9f 	bl	8002c18 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	2b05      	cmp	r3, #5
 8009ee2:	d901      	bls.n	8009ee8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e3da      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009ee8:	4b70      	ldr	r3, [pc, #448]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1ef      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009ef6:	4b6d      	ldr	r3, [pc, #436]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009efc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	4969      	ldr	r1, [pc, #420]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009f0c:	4b67      	ldr	r3, [pc, #412]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f12:	4a66      	ldr	r2, [pc, #408]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f1c:	f7f8 fe7c 	bl	8002c18 <HAL_GetTick>
 8009f20:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f22:	e008      	b.n	8009f36 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f24:	f7f8 fe78 	bl	8002c18 <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b05      	cmp	r3, #5
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e3b3      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f36:	4b5d      	ldr	r3, [pc, #372]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0ef      	beq.n	8009f24 <HAL_RCC_OscConfig+0x630>
 8009f44:	e01b      	b.n	8009f7e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009f46:	4b59      	ldr	r3, [pc, #356]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f4c:	4a57      	ldr	r2, [pc, #348]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f4e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009f52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f56:	f7f8 fe5f 	bl	8002c18 <HAL_GetTick>
 8009f5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f5c:	e008      	b.n	8009f70 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f5e:	f7f8 fe5b 	bl	8002c18 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b05      	cmp	r3, #5
 8009f6a:	d901      	bls.n	8009f70 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e396      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f70:	4b4e      	ldr	r3, [pc, #312]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1ef      	bne.n	8009f5e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f7e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d107      	bne.n	8009f96 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f86:	4b49      	ldr	r3, [pc, #292]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f8c:	4a47      	ldr	r2, [pc, #284]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009f8e:	f023 0304 	bic.w	r3, r3, #4
 8009f92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 8111 	beq.w	800a1c6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009faa:	4b40      	ldr	r3, [pc, #256]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d111      	bne.n	8009fdc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fb8:	4b3c      	ldr	r3, [pc, #240]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fbe:	4a3b      	ldr	r2, [pc, #236]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009fc0:	f043 0304 	orr.w	r3, r3, #4
 8009fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009fc8:	4b38      	ldr	r3, [pc, #224]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 8009fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	613b      	str	r3, [r7, #16]
 8009fd4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fdc:	4b34      	ldr	r3, [pc, #208]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 8009fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d118      	bne.n	800a01a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009fe8:	4b31      	ldr	r3, [pc, #196]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 8009fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fec:	4a30      	ldr	r2, [pc, #192]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ff4:	f7f8 fe10 	bl	8002c18 <HAL_GetTick>
 8009ff8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ffa:	e008      	b.n	800a00e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ffc:	f7f8 fe0c 	bl	8002c18 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	2b02      	cmp	r3, #2
 800a008:	d901      	bls.n	800a00e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e347      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a00e:	4b28      	ldr	r3, [pc, #160]	@ (800a0b0 <HAL_RCC_OscConfig+0x7bc>)
 800a010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0f0      	beq.n	8009ffc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d01f      	beq.n	800a066 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d010      	beq.n	800a054 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a032:	4b1e      	ldr	r3, [pc, #120]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a038:	4a1c      	ldr	r2, [pc, #112]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a03a:	f043 0304 	orr.w	r3, r3, #4
 800a03e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a042:	4b1a      	ldr	r3, [pc, #104]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a048:	4a18      	ldr	r2, [pc, #96]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a052:	e018      	b.n	800a086 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a054:	4b15      	ldr	r3, [pc, #84]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a05a:	4a14      	ldr	r2, [pc, #80]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a05c:	f043 0301 	orr.w	r3, r3, #1
 800a060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a064:	e00f      	b.n	800a086 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a066:	4b11      	ldr	r3, [pc, #68]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a06c:	4a0f      	ldr	r2, [pc, #60]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a06e:	f023 0301 	bic.w	r3, r3, #1
 800a072:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a076:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a07c:	4a0b      	ldr	r2, [pc, #44]	@ (800a0ac <HAL_RCC_OscConfig+0x7b8>)
 800a07e:	f023 0304 	bic.w	r3, r3, #4
 800a082:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d057      	beq.n	800a13e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a08e:	f7f8 fdc3 	bl	8002c18 <HAL_GetTick>
 800a092:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a094:	e00e      	b.n	800a0b4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a096:	f7f8 fdbf 	bl	8002c18 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d905      	bls.n	800a0b4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e2f8      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
 800a0ac:	46020c00 	.word	0x46020c00
 800a0b0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0b4:	4b9c      	ldr	r3, [pc, #624]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a0b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0e9      	beq.n	800a096 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01b      	beq.n	800a106 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a0ce:	4b96      	ldr	r3, [pc, #600]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a0d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0d4:	4a94      	ldr	r2, [pc, #592]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a0d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a0de:	e00a      	b.n	800a0f6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0e0:	f7f8 fd9a 	bl	8002c18 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d901      	bls.n	800a0f6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e2d3      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a0f6:	4b8c      	ldr	r3, [pc, #560]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a0f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0ed      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x7ec>
 800a104:	e053      	b.n	800a1ae <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a106:	4b88      	ldr	r3, [pc, #544]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a10c:	4a86      	ldr	r2, [pc, #536]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a10e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a112:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a116:	e00a      	b.n	800a12e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a118:	f7f8 fd7e 	bl	8002c18 <HAL_GetTick>
 800a11c:	4602      	mov	r2, r0
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a126:	4293      	cmp	r3, r2
 800a128:	d901      	bls.n	800a12e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e2b7      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a12e:	4b7e      	ldr	r3, [pc, #504]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1ed      	bne.n	800a118 <HAL_RCC_OscConfig+0x824>
 800a13c:	e037      	b.n	800a1ae <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a13e:	f7f8 fd6b 	bl	8002c18 <HAL_GetTick>
 800a142:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a144:	e00a      	b.n	800a15c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a146:	f7f8 fd67 	bl	8002c18 <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a154:	4293      	cmp	r3, r2
 800a156:	d901      	bls.n	800a15c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e2a0      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a15c:	4b72      	ldr	r3, [pc, #456]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a15e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1ed      	bne.n	800a146 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a16a:	4b6f      	ldr	r3, [pc, #444]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a16c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01a      	beq.n	800a1ae <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a178:	4b6b      	ldr	r3, [pc, #428]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a17a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a17e:	4a6a      	ldr	r2, [pc, #424]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a180:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a184:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a188:	e00a      	b.n	800a1a0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a18a:	f7f8 fd45 	bl	8002c18 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a198:	4293      	cmp	r3, r2
 800a19a:	d901      	bls.n	800a1a0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e27e      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1a0:	4b61      	ldr	r3, [pc, #388]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a1a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1ed      	bne.n	800a18a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a1ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d107      	bne.n	800a1c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1b6:	4b5c      	ldr	r3, [pc, #368]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a1b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1bc:	4a5a      	ldr	r2, [pc, #360]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a1be:	f023 0304 	bic.w	r3, r3, #4
 800a1c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0320 	and.w	r3, r3, #32
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d036      	beq.n	800a240 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d019      	beq.n	800a20e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a1da:	4b53      	ldr	r3, [pc, #332]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a52      	ldr	r2, [pc, #328]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a1e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a1e4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a1e6:	f7f8 fd17 	bl	8002c18 <HAL_GetTick>
 800a1ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a1ec:	e008      	b.n	800a200 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1ee:	f7f8 fd13 	bl	8002c18 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e24e      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a200:	4b49      	ldr	r3, [pc, #292]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0f0      	beq.n	800a1ee <HAL_RCC_OscConfig+0x8fa>
 800a20c:	e018      	b.n	800a240 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a20e:	4b46      	ldr	r3, [pc, #280]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a45      	ldr	r2, [pc, #276]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a218:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a21a:	f7f8 fcfd 	bl	8002c18 <HAL_GetTick>
 800a21e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a220:	e008      	b.n	800a234 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a222:	f7f8 fcf9 	bl	8002c18 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d901      	bls.n	800a234 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e234      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a234:	4b3c      	ldr	r3, [pc, #240]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1f0      	bne.n	800a222 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d036      	beq.n	800a2ba <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a250:	2b00      	cmp	r3, #0
 800a252:	d019      	beq.n	800a288 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a254:	4b34      	ldr	r3, [pc, #208]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a33      	ldr	r2, [pc, #204]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a25a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a25e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a260:	f7f8 fcda 	bl	8002c18 <HAL_GetTick>
 800a264:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a266:	e008      	b.n	800a27a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a268:	f7f8 fcd6 	bl	8002c18 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	2b02      	cmp	r3, #2
 800a274:	d901      	bls.n	800a27a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e211      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a27a:	4b2b      	ldr	r3, [pc, #172]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0f0      	beq.n	800a268 <HAL_RCC_OscConfig+0x974>
 800a286:	e018      	b.n	800a2ba <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a288:	4b27      	ldr	r3, [pc, #156]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a26      	ldr	r2, [pc, #152]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a28e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a292:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a294:	f7f8 fcc0 	bl	8002c18 <HAL_GetTick>
 800a298:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a29c:	f7f8 fcbc 	bl	8002c18 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e1f7      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a2ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f0      	bne.n	800a29c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d07f      	beq.n	800a3c6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d062      	beq.n	800a394 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a2ce:	4b16      	ldr	r3, [pc, #88]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	4a15      	ldr	r2, [pc, #84]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a2d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2d8:	6093      	str	r3, [r2, #8]
 800a2da:	4b13      	ldr	r3, [pc, #76]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e6:	4910      	ldr	r1, [pc, #64]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a2f4:	d309      	bcc.n	800a30a <HAL_RCC_OscConfig+0xa16>
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f023 021f 	bic.w	r2, r3, #31
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	4909      	ldr	r1, [pc, #36]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a304:	4313      	orrs	r3, r2
 800a306:	60cb      	str	r3, [r1, #12]
 800a308:	e02a      	b.n	800a360 <HAL_RCC_OscConfig+0xa6c>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30e:	2b00      	cmp	r3, #0
 800a310:	da0c      	bge.n	800a32c <HAL_RCC_OscConfig+0xa38>
 800a312:	4b05      	ldr	r3, [pc, #20]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	015b      	lsls	r3, r3, #5
 800a320:	4901      	ldr	r1, [pc, #4]	@ (800a328 <HAL_RCC_OscConfig+0xa34>)
 800a322:	4313      	orrs	r3, r2
 800a324:	60cb      	str	r3, [r1, #12]
 800a326:	e01b      	b.n	800a360 <HAL_RCC_OscConfig+0xa6c>
 800a328:	46020c00 	.word	0x46020c00
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a334:	d30a      	bcc.n	800a34c <HAL_RCC_OscConfig+0xa58>
 800a336:	4ba1      	ldr	r3, [pc, #644]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	029b      	lsls	r3, r3, #10
 800a344:	499d      	ldr	r1, [pc, #628]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a346:	4313      	orrs	r3, r2
 800a348:	60cb      	str	r3, [r1, #12]
 800a34a:	e009      	b.n	800a360 <HAL_RCC_OscConfig+0xa6c>
 800a34c:	4b9b      	ldr	r3, [pc, #620]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	03db      	lsls	r3, r3, #15
 800a35a:	4998      	ldr	r1, [pc, #608]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a360:	4b96      	ldr	r3, [pc, #600]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a95      	ldr	r2, [pc, #596]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a366:	f043 0310 	orr.w	r3, r3, #16
 800a36a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a36c:	f7f8 fc54 	bl	8002c18 <HAL_GetTick>
 800a370:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a372:	e008      	b.n	800a386 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a374:	f7f8 fc50 	bl	8002c18 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d901      	bls.n	800a386 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e18b      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a386:	4b8d      	ldr	r3, [pc, #564]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0f0      	beq.n	800a374 <HAL_RCC_OscConfig+0xa80>
 800a392:	e018      	b.n	800a3c6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a394:	4b89      	ldr	r3, [pc, #548]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a88      	ldr	r2, [pc, #544]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a39a:	f023 0310 	bic.w	r3, r3, #16
 800a39e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3a0:	f7f8 fc3a 	bl	8002c18 <HAL_GetTick>
 800a3a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a3a6:	e008      	b.n	800a3ba <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a3a8:	f7f8 fc36 	bl	8002c18 <HAL_GetTick>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d901      	bls.n	800a3ba <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e171      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a3ba:	4b80      	ldr	r3, [pc, #512]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0320 	and.w	r3, r3, #32
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1f0      	bne.n	800a3a8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 8166 	beq.w	800a69c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a3d6:	4b79      	ldr	r3, [pc, #484]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	f003 030c 	and.w	r3, r3, #12
 800a3de:	2b0c      	cmp	r3, #12
 800a3e0:	f000 80f2 	beq.w	800a5c8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	f040 80c5 	bne.w	800a578 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a3ee:	4b73      	ldr	r3, [pc, #460]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a72      	ldr	r2, [pc, #456]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a3f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a3fa:	f7f8 fc0d 	bl	8002c18 <HAL_GetTick>
 800a3fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a400:	e008      	b.n	800a414 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a402:	f7f8 fc09 	bl	8002c18 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d901      	bls.n	800a414 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	e144      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a414:	4b69      	ldr	r3, [pc, #420]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1f0      	bne.n	800a402 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a420:	4b66      	ldr	r3, [pc, #408]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d111      	bne.n	800a452 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a42e:	4b63      	ldr	r3, [pc, #396]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a434:	4a61      	ldr	r2, [pc, #388]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a436:	f043 0304 	orr.w	r3, r3, #4
 800a43a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a43e:	4b5f      	ldr	r3, [pc, #380]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a452:	4b5b      	ldr	r3, [pc, #364]	@ (800a5c0 <HAL_RCC_OscConfig+0xccc>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a45a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a45e:	d102      	bne.n	800a466 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a460:	2301      	movs	r3, #1
 800a462:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a466:	4b56      	ldr	r3, [pc, #344]	@ (800a5c0 <HAL_RCC_OscConfig+0xccc>)
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	4a55      	ldr	r2, [pc, #340]	@ (800a5c0 <HAL_RCC_OscConfig+0xccc>)
 800a46c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a470:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a472:	4b52      	ldr	r3, [pc, #328]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a486:	3a01      	subs	r2, #1
 800a488:	0212      	lsls	r2, r2, #8
 800a48a:	4311      	orrs	r1, r2
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a490:	430a      	orrs	r2, r1
 800a492:	494a      	ldr	r1, [pc, #296]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a494:	4313      	orrs	r3, r2
 800a496:	628b      	str	r3, [r1, #40]	@ 0x28
 800a498:	4b48      	ldr	r3, [pc, #288]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a49a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a49c:	4b49      	ldr	r3, [pc, #292]	@ (800a5c4 <HAL_RCC_OscConfig+0xcd0>)
 800a49e:	4013      	ands	r3, r2
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a4a4:	3a01      	subs	r2, #1
 800a4a6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a4ae:	3a01      	subs	r2, #1
 800a4b0:	0252      	lsls	r2, r2, #9
 800a4b2:	b292      	uxth	r2, r2
 800a4b4:	4311      	orrs	r1, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a4ba:	3a01      	subs	r2, #1
 800a4bc:	0412      	lsls	r2, r2, #16
 800a4be:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a4c2:	4311      	orrs	r1, r2
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a4c8:	3a01      	subs	r2, #1
 800a4ca:	0612      	lsls	r2, r2, #24
 800a4cc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	493a      	ldr	r1, [pc, #232]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a4d8:	4b38      	ldr	r3, [pc, #224]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4dc:	4a37      	ldr	r2, [pc, #220]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a4de:	f023 0310 	bic.w	r3, r3, #16
 800a4e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4e8:	4a34      	ldr	r2, [pc, #208]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a4ee:	4b33      	ldr	r3, [pc, #204]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f2:	4a32      	ldr	r2, [pc, #200]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a4f4:	f043 0310 	orr.w	r3, r3, #16
 800a4f8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a4fa:	4b30      	ldr	r3, [pc, #192]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fe:	f023 020c 	bic.w	r2, r3, #12
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a506:	492d      	ldr	r1, [pc, #180]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a50c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a510:	2b01      	cmp	r3, #1
 800a512:	d105      	bne.n	800a520 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a514:	4b2a      	ldr	r3, [pc, #168]	@ (800a5c0 <HAL_RCC_OscConfig+0xccc>)
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	4a29      	ldr	r2, [pc, #164]	@ (800a5c0 <HAL_RCC_OscConfig+0xccc>)
 800a51a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a51e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a520:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a524:	2b01      	cmp	r3, #1
 800a526:	d107      	bne.n	800a538 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a528:	4b24      	ldr	r3, [pc, #144]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a52a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a52e:	4a23      	ldr	r2, [pc, #140]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a530:	f023 0304 	bic.w	r3, r3, #4
 800a534:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a538:	4b20      	ldr	r3, [pc, #128]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a1f      	ldr	r2, [pc, #124]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a53e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a542:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a544:	f7f8 fb68 	bl	8002c18 <HAL_GetTick>
 800a548:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a54a:	e008      	b.n	800a55e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a54c:	f7f8 fb64 	bl	8002c18 <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	2b02      	cmp	r3, #2
 800a558:	d901      	bls.n	800a55e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e09f      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a55e:	4b17      	ldr	r3, [pc, #92]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0f0      	beq.n	800a54c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a56a:	4b14      	ldr	r3, [pc, #80]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56e:	4a13      	ldr	r2, [pc, #76]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a574:	6293      	str	r3, [r2, #40]	@ 0x28
 800a576:	e091      	b.n	800a69c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a578:	4b10      	ldr	r3, [pc, #64]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a0f      	ldr	r2, [pc, #60]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a57e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a582:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a584:	f7f8 fb48 	bl	8002c18 <HAL_GetTick>
 800a588:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a58a:	e008      	b.n	800a59e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a58c:	f7f8 fb44 	bl	8002c18 <HAL_GetTick>
 800a590:	4602      	mov	r2, r0
 800a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	2b02      	cmp	r3, #2
 800a598:	d901      	bls.n	800a59e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e07f      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a59e:	4b07      	ldr	r3, [pc, #28]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1f0      	bne.n	800a58c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a5aa:	4b04      	ldr	r3, [pc, #16]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ae:	4a03      	ldr	r2, [pc, #12]	@ (800a5bc <HAL_RCC_OscConfig+0xcc8>)
 800a5b0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a5b4:	f023 0303 	bic.w	r3, r3, #3
 800a5b8:	6293      	str	r3, [r2, #40]	@ 0x28
 800a5ba:	e06f      	b.n	800a69c <HAL_RCC_OscConfig+0xda8>
 800a5bc:	46020c00 	.word	0x46020c00
 800a5c0:	46020800 	.word	0x46020800
 800a5c4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a5c8:	4b37      	ldr	r3, [pc, #220]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5cc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5ce:	4b36      	ldr	r3, [pc, #216]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a5d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d039      	beq.n	800a650 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	f003 0203 	and.w	r2, r3, #3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d132      	bne.n	800a650 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d129      	bne.n	800a650 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a606:	429a      	cmp	r2, r3
 800a608:	d122      	bne.n	800a650 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a614:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a616:	429a      	cmp	r2, r3
 800a618:	d11a      	bne.n	800a650 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	0a5b      	lsrs	r3, r3, #9
 800a61e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a626:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a628:	429a      	cmp	r2, r3
 800a62a:	d111      	bne.n	800a650 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	0c1b      	lsrs	r3, r3, #16
 800a630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a638:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d108      	bne.n	800a650 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	0e1b      	lsrs	r3, r3, #24
 800a642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a64a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d001      	beq.n	800a654 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e024      	b.n	800a69e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a654:	4b14      	ldr	r3, [pc, #80]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a658:	08db      	lsrs	r3, r3, #3
 800a65a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a662:	429a      	cmp	r2, r3
 800a664:	d01a      	beq.n	800a69c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a666:	4b10      	ldr	r3, [pc, #64]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66a:	4a0f      	ldr	r2, [pc, #60]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a66c:	f023 0310 	bic.w	r3, r3, #16
 800a670:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a672:	f7f8 fad1 	bl	8002c18 <HAL_GetTick>
 800a676:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a678:	bf00      	nop
 800a67a:	f7f8 facd 	bl	8002c18 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a682:	4293      	cmp	r3, r2
 800a684:	d0f9      	beq.n	800a67a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a68a:	4a07      	ldr	r2, [pc, #28]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a690:	4b05      	ldr	r3, [pc, #20]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a694:	4a04      	ldr	r2, [pc, #16]	@ (800a6a8 <HAL_RCC_OscConfig+0xdb4>)
 800a696:	f043 0310 	orr.w	r3, r3, #16
 800a69a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3738      	adds	r7, #56	@ 0x38
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	46020c00 	.word	0x46020c00

0800a6ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e1d9      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6c0:	4b9b      	ldr	r3, [pc, #620]	@ (800a930 <HAL_RCC_ClockConfig+0x284>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d910      	bls.n	800a6f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ce:	4b98      	ldr	r3, [pc, #608]	@ (800a930 <HAL_RCC_ClockConfig+0x284>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f023 020f 	bic.w	r2, r3, #15
 800a6d6:	4996      	ldr	r1, [pc, #600]	@ (800a930 <HAL_RCC_ClockConfig+0x284>)
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6de:	4b94      	ldr	r3, [pc, #592]	@ (800a930 <HAL_RCC_ClockConfig+0x284>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d001      	beq.n	800a6f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e1c1      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0310 	and.w	r3, r3, #16
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d010      	beq.n	800a71e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	695a      	ldr	r2, [r3, #20]
 800a700:	4b8c      	ldr	r3, [pc, #560]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a704:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a708:	429a      	cmp	r2, r3
 800a70a:	d908      	bls.n	800a71e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a70c:	4b89      	ldr	r3, [pc, #548]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	4986      	ldr	r1, [pc, #536]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a71a:	4313      	orrs	r3, r2
 800a71c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0308 	and.w	r3, r3, #8
 800a726:	2b00      	cmp	r3, #0
 800a728:	d012      	beq.n	800a750 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	691a      	ldr	r2, [r3, #16]
 800a72e:	4b81      	ldr	r3, [pc, #516]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	091b      	lsrs	r3, r3, #4
 800a734:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a738:	429a      	cmp	r2, r3
 800a73a:	d909      	bls.n	800a750 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a73c:	4b7d      	ldr	r3, [pc, #500]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a73e:	6a1b      	ldr	r3, [r3, #32]
 800a740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	011b      	lsls	r3, r3, #4
 800a74a:	497a      	ldr	r1, [pc, #488]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d010      	beq.n	800a77e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68da      	ldr	r2, [r3, #12]
 800a760:	4b74      	ldr	r3, [pc, #464]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a768:	429a      	cmp	r2, r3
 800a76a:	d908      	bls.n	800a77e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a76c:	4b71      	ldr	r3, [pc, #452]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	496e      	ldr	r1, [pc, #440]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0302 	and.w	r3, r3, #2
 800a786:	2b00      	cmp	r3, #0
 800a788:	d010      	beq.n	800a7ac <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	4b69      	ldr	r3, [pc, #420]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	429a      	cmp	r2, r3
 800a798:	d908      	bls.n	800a7ac <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a79a:	4b66      	ldr	r3, [pc, #408]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	f023 020f 	bic.w	r2, r3, #15
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	4963      	ldr	r1, [pc, #396]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 80d2 	beq.w	800a95e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d143      	bne.n	800a84e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7c6:	4b5b      	ldr	r3, [pc, #364]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a7c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d110      	bne.n	800a7f6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a7d4:	4b57      	ldr	r3, [pc, #348]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a7d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7da:	4a56      	ldr	r2, [pc, #344]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a7dc:	f043 0304 	orr.w	r3, r3, #4
 800a7e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a7e4:	4b53      	ldr	r3, [pc, #332]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a7e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7ea:	f003 0304 	and.w	r3, r3, #4
 800a7ee:	60bb      	str	r3, [r7, #8]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a7f6:	f7f8 fa0f 	bl	8002c18 <HAL_GetTick>
 800a7fa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a7fc:	4b4e      	ldr	r3, [pc, #312]	@ (800a938 <HAL_RCC_ClockConfig+0x28c>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00f      	beq.n	800a828 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a808:	e008      	b.n	800a81c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a80a:	f7f8 fa05 	bl	8002c18 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d901      	bls.n	800a81c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e12b      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a81c:	4b46      	ldr	r3, [pc, #280]	@ (800a938 <HAL_RCC_ClockConfig+0x28c>)
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0f0      	beq.n	800a80a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d107      	bne.n	800a83e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a82e:	4b41      	ldr	r3, [pc, #260]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a834:	4a3f      	ldr	r2, [pc, #252]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a836:	f023 0304 	bic.w	r3, r3, #4
 800a83a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a83e:	4b3d      	ldr	r3, [pc, #244]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d121      	bne.n	800a88e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e112      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d107      	bne.n	800a866 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a856:	4b37      	ldr	r3, [pc, #220]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d115      	bne.n	800a88e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e106      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d107      	bne.n	800a87e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a86e:	4b31      	ldr	r3, [pc, #196]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0304 	and.w	r3, r3, #4
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e0fa      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a87e:	4b2d      	ldr	r3, [pc, #180]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e0f2      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a88e:	4b29      	ldr	r3, [pc, #164]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	f023 0203 	bic.w	r2, r3, #3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	4926      	ldr	r1, [pc, #152]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a8a0:	f7f8 f9ba 	bl	8002c18 <HAL_GetTick>
 800a8a4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d112      	bne.n	800a8d4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8ae:	e00a      	b.n	800a8c6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8b0:	f7f8 f9b2 	bl	8002c18 <HAL_GetTick>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d901      	bls.n	800a8c6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e0d6      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8c6:	4b1b      	ldr	r3, [pc, #108]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f003 030c 	and.w	r3, r3, #12
 800a8ce:	2b0c      	cmp	r3, #12
 800a8d0:	d1ee      	bne.n	800a8b0 <HAL_RCC_ClockConfig+0x204>
 800a8d2:	e044      	b.n	800a95e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d112      	bne.n	800a902 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8dc:	e00a      	b.n	800a8f4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8de:	f7f8 f99b 	bl	8002c18 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d901      	bls.n	800a8f4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e0bf      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	f003 030c 	and.w	r3, r3, #12
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d1ee      	bne.n	800a8de <HAL_RCC_ClockConfig+0x232>
 800a900:	e02d      	b.n	800a95e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d123      	bne.n	800a952 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a90a:	e00a      	b.n	800a922 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a90c:	f7f8 f984 	bl	8002c18 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d901      	bls.n	800a922 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e0a8      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a922:	4b04      	ldr	r3, [pc, #16]	@ (800a934 <HAL_RCC_ClockConfig+0x288>)
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f003 030c 	and.w	r3, r3, #12
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1ee      	bne.n	800a90c <HAL_RCC_ClockConfig+0x260>
 800a92e:	e016      	b.n	800a95e <HAL_RCC_ClockConfig+0x2b2>
 800a930:	40022000 	.word	0x40022000
 800a934:	46020c00 	.word	0x46020c00
 800a938:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a93c:	f7f8 f96c 	bl	8002c18 <HAL_GetTick>
 800a940:	4602      	mov	r2, r0
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d901      	bls.n	800a952 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e090      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a952:	4b4a      	ldr	r3, [pc, #296]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	f003 030c 	and.w	r3, r3, #12
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d1ee      	bne.n	800a93c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0302 	and.w	r3, r3, #2
 800a966:	2b00      	cmp	r3, #0
 800a968:	d010      	beq.n	800a98c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	4b43      	ldr	r3, [pc, #268]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	429a      	cmp	r2, r3
 800a978:	d208      	bcs.n	800a98c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a97a:	4b40      	ldr	r3, [pc, #256]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	f023 020f 	bic.w	r2, r3, #15
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	493d      	ldr	r1, [pc, #244]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a98c:	4b3c      	ldr	r3, [pc, #240]	@ (800aa80 <HAL_RCC_ClockConfig+0x3d4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d210      	bcs.n	800a9bc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a99a:	4b39      	ldr	r3, [pc, #228]	@ (800aa80 <HAL_RCC_ClockConfig+0x3d4>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f023 020f 	bic.w	r2, r3, #15
 800a9a2:	4937      	ldr	r1, [pc, #220]	@ (800aa80 <HAL_RCC_ClockConfig+0x3d4>)
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9aa:	4b35      	ldr	r3, [pc, #212]	@ (800aa80 <HAL_RCC_ClockConfig+0x3d4>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d001      	beq.n	800a9bc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e05b      	b.n	800aa74 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d010      	beq.n	800a9ea <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	4b2b      	ldr	r3, [pc, #172]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d208      	bcs.n	800a9ea <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a9d8:	4b28      	ldr	r3, [pc, #160]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	4925      	ldr	r1, [pc, #148]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d012      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	691a      	ldr	r2, [r3, #16]
 800a9fa:	4b20      	ldr	r3, [pc, #128]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	091b      	lsrs	r3, r3, #4
 800aa00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d209      	bcs.n	800aa1c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aa08:	4b1c      	ldr	r3, [pc, #112]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	011b      	lsls	r3, r3, #4
 800aa16:	4919      	ldr	r1, [pc, #100]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0310 	and.w	r3, r3, #16
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d010      	beq.n	800aa4a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	695a      	ldr	r2, [r3, #20]
 800aa2c:	4b13      	ldr	r3, [pc, #76]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d208      	bcs.n	800aa4a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800aa38:	4b10      	ldr	r3, [pc, #64]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	490d      	ldr	r1, [pc, #52]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aa4a:	f000 f821 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <HAL_RCC_ClockConfig+0x3d0>)
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	f003 030f 	and.w	r3, r3, #15
 800aa58:	490a      	ldr	r1, [pc, #40]	@ (800aa84 <HAL_RCC_ClockConfig+0x3d8>)
 800aa5a:	5ccb      	ldrb	r3, [r1, r3]
 800aa5c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa60:	4a09      	ldr	r2, [pc, #36]	@ (800aa88 <HAL_RCC_ClockConfig+0x3dc>)
 800aa62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa64:	4b09      	ldr	r3, [pc, #36]	@ (800aa8c <HAL_RCC_ClockConfig+0x3e0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7f8 f84b 	bl	8002b04 <HAL_InitTick>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73fb      	strb	r3, [r7, #15]

  return status;
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	46020c00 	.word	0x46020c00
 800aa80:	40022000 	.word	0x40022000
 800aa84:	08011b44 	.word	0x08011b44
 800aa88:	20000020 	.word	0x20000020
 800aa8c:	20000024 	.word	0x20000024

0800aa90 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b08b      	sub	sp, #44	@ 0x2c
 800aa94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800aa96:	2300      	movs	r3, #0
 800aa98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa9e:	4b78      	ldr	r3, [pc, #480]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	f003 030c 	and.w	r3, r3, #12
 800aaa6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aaa8:	4b75      	ldr	r3, [pc, #468]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaac:	f003 0303 	and.w	r3, r3, #3
 800aab0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <HAL_RCC_GetSysClockFreq+0x34>
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2b0c      	cmp	r3, #12
 800aabc:	d121      	bne.n	800ab02 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d11e      	bne.n	800ab02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800aac4:	4b6e      	ldr	r3, [pc, #440]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d107      	bne.n	800aae0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800aad0:	4b6b      	ldr	r3, [pc, #428]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aad6:	0b1b      	lsrs	r3, r3, #12
 800aad8:	f003 030f 	and.w	r3, r3, #15
 800aadc:	627b      	str	r3, [r7, #36]	@ 0x24
 800aade:	e005      	b.n	800aaec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800aae0:	4b67      	ldr	r3, [pc, #412]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	0f1b      	lsrs	r3, r3, #28
 800aae6:	f003 030f 	and.w	r3, r3, #15
 800aaea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aaec:	4a65      	ldr	r2, [pc, #404]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800aaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaf4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d110      	bne.n	800ab1e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab00:	e00d      	b.n	800ab1e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab02:	4b5f      	ldr	r3, [pc, #380]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	f003 030c 	and.w	r3, r3, #12
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d102      	bne.n	800ab14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab0e:	4b5e      	ldr	r3, [pc, #376]	@ (800ac88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab10:	623b      	str	r3, [r7, #32]
 800ab12:	e004      	b.n	800ab1e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2b08      	cmp	r3, #8
 800ab18:	d101      	bne.n	800ab1e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab1a:	4b5b      	ldr	r3, [pc, #364]	@ (800ac88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab1c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2b0c      	cmp	r3, #12
 800ab22:	f040 80a5 	bne.w	800ac70 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ab26:	4b56      	ldr	r3, [pc, #344]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2a:	f003 0303 	and.w	r3, r3, #3
 800ab2e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ab30:	4b53      	ldr	r3, [pc, #332]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab34:	0a1b      	lsrs	r3, r3, #8
 800ab36:	f003 030f 	and.w	r3, r3, #15
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ab3e:	4b50      	ldr	r3, [pc, #320]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab42:	091b      	lsrs	r3, r3, #4
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ab4a:	4b4d      	ldr	r3, [pc, #308]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4e:	08db      	lsrs	r3, r3, #3
 800ab50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	fb02 f303 	mul.w	r3, r2, r3
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d003      	beq.n	800ab74 <HAL_RCC_GetSysClockFreq+0xe4>
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d022      	beq.n	800abb8 <HAL_RCC_GetSysClockFreq+0x128>
 800ab72:	e043      	b.n	800abfc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800ac8c <HAL_RCC_GetSysClockFreq+0x1fc>
 800ab82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab86:	4b3e      	ldr	r3, [pc, #248]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ab96:	ed97 6a01 	vldr	s12, [r7, #4]
 800ab9a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800ac90 <HAL_RCC_GetSysClockFreq+0x200>
 800ab9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800aba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abb6:	e046      	b.n	800ac46 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800ac8c <HAL_RCC_GetSysClockFreq+0x1fc>
 800abc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abca:	4b2d      	ldr	r3, [pc, #180]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abda:	ed97 6a01 	vldr	s12, [r7, #4]
 800abde:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ac90 <HAL_RCC_GetSysClockFreq+0x200>
 800abe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abfa:	e024      	b.n	800ac46 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac14:	4b1a      	ldr	r3, [pc, #104]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac24:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac28:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800ac90 <HAL_RCC_GetSysClockFreq+0x200>
 800ac2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac38:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac44:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800ac46:	4b0e      	ldr	r3, [pc, #56]	@ (800ac80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac4a:	0e1b      	lsrs	r3, r3, #24
 800ac4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac50:	3301      	adds	r3, #1
 800ac52:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac6a:	ee17 3a90 	vmov	r3, s15
 800ac6e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800ac70:	6a3b      	ldr	r3, [r7, #32]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	372c      	adds	r7, #44	@ 0x2c
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	46020c00 	.word	0x46020c00
 800ac84:	08011b5c 	.word	0x08011b5c
 800ac88:	00f42400 	.word	0x00f42400
 800ac8c:	4b742400 	.word	0x4b742400
 800ac90:	46000000 	.word	0x46000000

0800ac94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ac98:	f7ff fefa 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	4b07      	ldr	r3, [pc, #28]	@ (800acbc <HAL_RCC_GetHCLKFreq+0x28>)
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	4906      	ldr	r1, [pc, #24]	@ (800acc0 <HAL_RCC_GetHCLKFreq+0x2c>)
 800aca8:	5ccb      	ldrb	r3, [r1, r3]
 800acaa:	fa22 f303 	lsr.w	r3, r2, r3
 800acae:	4a05      	ldr	r2, [pc, #20]	@ (800acc4 <HAL_RCC_GetHCLKFreq+0x30>)
 800acb0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800acb2:	4b04      	ldr	r3, [pc, #16]	@ (800acc4 <HAL_RCC_GetHCLKFreq+0x30>)
 800acb4:	681b      	ldr	r3, [r3, #0]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	46020c00 	.word	0x46020c00
 800acc0:	08011b44 	.word	0x08011b44
 800acc4:	20000020 	.word	0x20000020

0800acc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800accc:	f7ff ffe2 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800acd0:	4602      	mov	r2, r0
 800acd2:	4b05      	ldr	r3, [pc, #20]	@ (800ace8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	091b      	lsrs	r3, r3, #4
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	4903      	ldr	r1, [pc, #12]	@ (800acec <HAL_RCC_GetPCLK1Freq+0x24>)
 800acde:	5ccb      	ldrb	r3, [r1, r3]
 800ace0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	46020c00 	.word	0x46020c00
 800acec:	08011b54 	.word	0x08011b54

0800acf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800acf4:	f7ff ffce 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800acf8:	4602      	mov	r2, r0
 800acfa:	4b05      	ldr	r3, [pc, #20]	@ (800ad10 <HAL_RCC_GetPCLK2Freq+0x20>)
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	0a1b      	lsrs	r3, r3, #8
 800ad00:	f003 0307 	and.w	r3, r3, #7
 800ad04:	4903      	ldr	r1, [pc, #12]	@ (800ad14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad06:	5ccb      	ldrb	r3, [r1, r3]
 800ad08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	46020c00 	.word	0x46020c00
 800ad14:	08011b54 	.word	0x08011b54

0800ad18 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ad1c:	f7ff ffba 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800ad20:	4602      	mov	r2, r0
 800ad22:	4b05      	ldr	r3, [pc, #20]	@ (800ad38 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ad24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad26:	091b      	lsrs	r3, r3, #4
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	4903      	ldr	r1, [pc, #12]	@ (800ad3c <HAL_RCC_GetPCLK3Freq+0x24>)
 800ad2e:	5ccb      	ldrb	r3, [r1, r3]
 800ad30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	46020c00 	.word	0x46020c00
 800ad3c:	08011b54 	.word	0x08011b54

0800ad40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ad48:	4b3e      	ldr	r3, [pc, #248]	@ (800ae44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad4e:	f003 0304 	and.w	r3, r3, #4
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ad56:	f7fe fd21 	bl	800979c <HAL_PWREx_GetVoltageRange>
 800ad5a:	6178      	str	r0, [r7, #20]
 800ad5c:	e019      	b.n	800ad92 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad5e:	4b39      	ldr	r3, [pc, #228]	@ (800ae44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad64:	4a37      	ldr	r2, [pc, #220]	@ (800ae44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad66:	f043 0304 	orr.w	r3, r3, #4
 800ad6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ad6e:	4b35      	ldr	r3, [pc, #212]	@ (800ae44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ad7c:	f7fe fd0e 	bl	800979c <HAL_PWREx_GetVoltageRange>
 800ad80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ad82:	4b30      	ldr	r3, [pc, #192]	@ (800ae44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad88:	4a2e      	ldr	r2, [pc, #184]	@ (800ae44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad8a:	f023 0304 	bic.w	r3, r3, #4
 800ad8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad98:	d003      	beq.n	800ada2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ada0:	d109      	bne.n	800adb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ada8:	d202      	bcs.n	800adb0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800adaa:	2301      	movs	r3, #1
 800adac:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800adae:	e033      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800adb0:	2300      	movs	r3, #0
 800adb2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800adb4:	e030      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adbc:	d208      	bcs.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc4:	d102      	bne.n	800adcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800adc6:	2303      	movs	r3, #3
 800adc8:	613b      	str	r3, [r7, #16]
 800adca:	e025      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e035      	b.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800add6:	d90f      	bls.n	800adf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ade4:	d902      	bls.n	800adec <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ade6:	2300      	movs	r3, #0
 800ade8:	613b      	str	r3, [r7, #16]
 800adea:	e015      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800adec:	2301      	movs	r3, #1
 800adee:	613b      	str	r3, [r7, #16]
 800adf0:	e012      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800adf2:	2300      	movs	r3, #0
 800adf4:	613b      	str	r3, [r7, #16]
 800adf6:	e00f      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adfe:	d109      	bne.n	800ae14 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae06:	d102      	bne.n	800ae0e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800ae08:	2301      	movs	r3, #1
 800ae0a:	613b      	str	r3, [r7, #16]
 800ae0c:	e004      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800ae0e:	2302      	movs	r3, #2
 800ae10:	613b      	str	r3, [r7, #16]
 800ae12:	e001      	b.n	800ae18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800ae14:	2301      	movs	r3, #1
 800ae16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ae18:	4b0b      	ldr	r3, [pc, #44]	@ (800ae48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f023 020f 	bic.w	r2, r3, #15
 800ae20:	4909      	ldr	r1, [pc, #36]	@ (800ae48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ae28:	4b07      	ldr	r3, [pc, #28]	@ (800ae48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d001      	beq.n	800ae3a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	46020c00 	.word	0x46020c00
 800ae48:	40022000 	.word	0x40022000

0800ae4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ae4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae50:	b0c8      	sub	sp, #288	@ 0x120
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f002 0401 	and.w	r4, r2, #1
 800ae70:	2500      	movs	r5, #0
 800ae72:	ea54 0305 	orrs.w	r3, r4, r5
 800ae76:	d00b      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ae78:	4bd5      	ldr	r3, [pc, #852]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae7e:	f023 0103 	bic.w	r1, r3, #3
 800ae82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae88:	4ad1      	ldr	r2, [pc, #836]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f002 0802 	and.w	r8, r2, #2
 800ae9c:	f04f 0900 	mov.w	r9, #0
 800aea0:	ea58 0309 	orrs.w	r3, r8, r9
 800aea4:	d00b      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800aea6:	4bca      	ldr	r3, [pc, #808]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aeac:	f023 010c 	bic.w	r1, r3, #12
 800aeb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb6:	4ac6      	ldr	r2, [pc, #792]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	f002 0a04 	and.w	sl, r2, #4
 800aeca:	f04f 0b00 	mov.w	fp, #0
 800aece:	ea5a 030b 	orrs.w	r3, sl, fp
 800aed2:	d00b      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800aed4:	4bbe      	ldr	r3, [pc, #760]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aeda:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800aede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee4:	4aba      	ldr	r2, [pc, #744]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aee6:	430b      	orrs	r3, r1
 800aee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aeec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f002 0308 	and.w	r3, r2, #8
 800aef8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aefc:	2300      	movs	r3, #0
 800aefe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800af02:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800af06:	460b      	mov	r3, r1
 800af08:	4313      	orrs	r3, r2
 800af0a:	d00b      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800af0c:	4bb0      	ldr	r3, [pc, #704]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800af16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af1c:	4aac      	ldr	r2, [pc, #688]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af1e:	430b      	orrs	r3, r1
 800af20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f002 0310 	and.w	r3, r2, #16
 800af30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af34:	2300      	movs	r3, #0
 800af36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800af3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800af3e:	460b      	mov	r3, r1
 800af40:	4313      	orrs	r3, r2
 800af42:	d00b      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800af44:	4ba2      	ldr	r3, [pc, #648]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800af4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af54:	4a9e      	ldr	r2, [pc, #632]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af56:	430b      	orrs	r3, r1
 800af58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800af5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800af68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800af6c:	2300      	movs	r3, #0
 800af6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800af72:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800af76:	460b      	mov	r3, r1
 800af78:	4313      	orrs	r3, r2
 800af7a:	d00b      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800af7c:	4b94      	ldr	r3, [pc, #592]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800af86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af8c:	4a90      	ldr	r2, [pc, #576]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af8e:	430b      	orrs	r3, r1
 800af90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f002 0320 	and.w	r3, r2, #32
 800afa0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800afa4:	2300      	movs	r3, #0
 800afa6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800afaa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800afae:	460b      	mov	r3, r1
 800afb0:	4313      	orrs	r3, r2
 800afb2:	d00b      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800afb4:	4b86      	ldr	r3, [pc, #536]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800afba:	f023 0107 	bic.w	r1, r3, #7
 800afbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afc4:	4a82      	ldr	r2, [pc, #520]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afc6:	430b      	orrs	r3, r1
 800afc8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800afcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800afd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afdc:	2300      	movs	r3, #0
 800afde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800afe2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4313      	orrs	r3, r2
 800afea:	d00b      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800afec:	4b78      	ldr	r3, [pc, #480]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aff2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800aff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800affa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800affc:	4a74      	ldr	r2, [pc, #464]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800affe:	430b      	orrs	r3, r1
 800b000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b014:	2300      	movs	r3, #0
 800b016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b01a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b01e:	460b      	mov	r3, r1
 800b020:	4313      	orrs	r3, r2
 800b022:	d00b      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b024:	4b6a      	ldr	r3, [pc, #424]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b02a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b034:	4a66      	ldr	r2, [pc, #408]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b036:	430b      	orrs	r3, r1
 800b038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b048:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b052:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b056:	460b      	mov	r3, r1
 800b058:	4313      	orrs	r3, r2
 800b05a:	d00b      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b05c:	4b5c      	ldr	r3, [pc, #368]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b05e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b062:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b06a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b06c:	4a58      	ldr	r2, [pc, #352]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b06e:	430b      	orrs	r3, r1
 800b070:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b080:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b084:	2300      	movs	r3, #0
 800b086:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b08a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b08e:	460b      	mov	r3, r1
 800b090:	4313      	orrs	r3, r2
 800b092:	d00b      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b094:	4b4e      	ldr	r3, [pc, #312]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b09a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b09e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0a4:	4a4a      	ldr	r2, [pc, #296]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b0b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	d00b      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b0cc:	4b40      	ldr	r3, [pc, #256]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0d2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0dc:	4a3c      	ldr	r2, [pc, #240]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b0f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b0fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b0fe:	460b      	mov	r3, r1
 800b100:	4313      	orrs	r3, r2
 800b102:	d00c      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b104:	4b32      	ldr	r3, [pc, #200]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b106:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b10a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b10e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b116:	4a2e      	ldr	r2, [pc, #184]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b118:	430b      	orrs	r3, r1
 800b11a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b12a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b12e:	2300      	movs	r3, #0
 800b130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b134:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b138:	460b      	mov	r3, r1
 800b13a:	4313      	orrs	r3, r2
 800b13c:	d00c      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b13e:	4b24      	ldr	r3, [pc, #144]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b144:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b150:	4a1f      	ldr	r2, [pc, #124]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b152:	430b      	orrs	r3, r1
 800b154:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b168:	2300      	movs	r3, #0
 800b16a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b16e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b172:	460b      	mov	r3, r1
 800b174:	4313      	orrs	r3, r2
 800b176:	d00c      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b178:	4b15      	ldr	r3, [pc, #84]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b17a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b17e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b18a:	4a11      	ldr	r2, [pc, #68]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b18c:	430b      	orrs	r3, r1
 800b18e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b19e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b1a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	d010      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b1b2:	4b07      	ldr	r3, [pc, #28]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b1bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1c4:	4a02      	ldr	r2, [pc, #8]	@ (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b1cc:	e002      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b1ce:	bf00      	nop
 800b1d0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b1d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b1e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	d04c      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b1f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1fc:	2b80      	cmp	r3, #128	@ 0x80
 800b1fe:	d02d      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b200:	2b80      	cmp	r3, #128	@ 0x80
 800b202:	d827      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b204:	2b60      	cmp	r3, #96	@ 0x60
 800b206:	d02b      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b208:	2b60      	cmp	r3, #96	@ 0x60
 800b20a:	d823      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b20c:	2b40      	cmp	r3, #64	@ 0x40
 800b20e:	d006      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b210:	2b40      	cmp	r3, #64	@ 0x40
 800b212:	d81f      	bhi.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b218:	2b20      	cmp	r3, #32
 800b21a:	d011      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b21c:	e01a      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b21e:	4bc0      	ldr	r3, [pc, #768]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b222:	4abf      	ldr	r2, [pc, #764]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b228:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b22a:	e01a      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b230:	3308      	adds	r3, #8
 800b232:	4618      	mov	r0, r3
 800b234:	f002 fcd6 	bl	800dbe4 <RCCEx_PLL2_Config>
 800b238:	4603      	mov	r3, r0
 800b23a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b23e:	e010      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b244:	332c      	adds	r3, #44	@ 0x2c
 800b246:	4618      	mov	r0, r3
 800b248:	f002 fd64 	bl	800dd14 <RCCEx_PLL3_Config>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b252:	e006      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b25a:	e002      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b25c:	bf00      	nop
 800b25e:	e000      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b262:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10d      	bne.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b26a:	4bad      	ldr	r3, [pc, #692]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b26c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b270:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b27c:	4aa8      	ldr	r2, [pc, #672]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b27e:	430b      	orrs	r3, r1
 800b280:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b284:	e003      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b286:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b28a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b29a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2a4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	d053      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b2ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ba:	d033      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2c0:	d82c      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b2c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2c6:	d02f      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b2c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2cc:	d826      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b2ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2d2:	d008      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2d8:	d820      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b2de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2e2:	d011      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b2e4:	e01a      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2e6:	4b8e      	ldr	r3, [pc, #568]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ea:	4a8d      	ldr	r2, [pc, #564]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b2f2:	e01a      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f002 fc72 	bl	800dbe4 <RCCEx_PLL2_Config>
 800b300:	4603      	mov	r3, r0
 800b302:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b306:	e010      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b30c:	332c      	adds	r3, #44	@ 0x2c
 800b30e:	4618      	mov	r0, r3
 800b310:	f002 fd00 	bl	800dd14 <RCCEx_PLL3_Config>
 800b314:	4603      	mov	r3, r0
 800b316:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b31a:	e006      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b322:	e002      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b324:	bf00      	nop
 800b326:	e000      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b32a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10d      	bne.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b332:	4b7b      	ldr	r3, [pc, #492]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b338:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b340:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b344:	4a76      	ldr	r2, [pc, #472]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b346:	430b      	orrs	r3, r1
 800b348:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b34c:	e003      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b352:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b362:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b366:	2300      	movs	r3, #0
 800b368:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b36c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b370:	460b      	mov	r3, r1
 800b372:	4313      	orrs	r3, r2
 800b374:	d046      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b37a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b37e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b382:	d028      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b384:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b388:	d821      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b38a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b38e:	d022      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b394:	d81b      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b396:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b39a:	d01c      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b39c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3a0:	d815      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3a6:	d008      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b3a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3ac:	d80f      	bhi.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d011      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3b6:	d00e      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3b8:	e009      	b.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3be:	3308      	adds	r3, #8
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f002 fc0f 	bl	800dbe4 <RCCEx_PLL2_Config>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b3cc:	e004      	b.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b3d4:	e000      	b.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b3d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10d      	bne.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b3e0:	4b4f      	ldr	r3, [pc, #316]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3e6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3f2:	4a4b      	ldr	r2, [pc, #300]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b3fa:	e003      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b400:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b414:	2300      	movs	r3, #0
 800b416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b41a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b41e:	460b      	mov	r3, r1
 800b420:	4313      	orrs	r3, r2
 800b422:	d03f      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	d81e      	bhi.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b430:	a201      	add	r2, pc, #4	@ (adr r2, 800b438 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b436:	bf00      	nop
 800b438:	0800b477 	.word	0x0800b477
 800b43c:	0800b44d 	.word	0x0800b44d
 800b440:	0800b45b 	.word	0x0800b45b
 800b444:	0800b477 	.word	0x0800b477
 800b448:	0800b477 	.word	0x0800b477
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b44c:	4b34      	ldr	r3, [pc, #208]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b450:	4a33      	ldr	r2, [pc, #204]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b456:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b458:	e00e      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b45a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45e:	332c      	adds	r3, #44	@ 0x2c
 800b460:	4618      	mov	r0, r3
 800b462:	f002 fc57 	bl	800dd14 <RCCEx_PLL3_Config>
 800b466:	4603      	mov	r3, r0
 800b468:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b46c:	e004      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b474:	e000      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b476:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b478:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10d      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b480:	4b27      	ldr	r3, [pc, #156]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b486:	f023 0107 	bic.w	r1, r3, #7
 800b48a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b48e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b492:	4a23      	ldr	r2, [pc, #140]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b494:	430b      	orrs	r3, r1
 800b496:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b49a:	e003      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4a0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b4b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b4b6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	d04c      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4cc:	d02a      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b4ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4d2:	d821      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b4d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b4d8:	d026      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b4da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b4de:	d81b      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b4e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4e4:	d00e      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b4e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4ea:	d815      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01d      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4f4:	d110      	bne.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fa:	4a09      	ldr	r2, [pc, #36]	@ (800b520 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b500:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b502:	e014      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b508:	332c      	adds	r3, #44	@ 0x2c
 800b50a:	4618      	mov	r0, r3
 800b50c:	f002 fc02 	bl	800dd14 <RCCEx_PLL3_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b516:	e00a      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b51e:	e006      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b520:	46020c00 	.word	0x46020c00
        break;
 800b524:	bf00      	nop
 800b526:	e002      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b528:	bf00      	nop
 800b52a:	e000      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b52c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b52e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10d      	bne.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b536:	4baf      	ldr	r3, [pc, #700]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b53c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b544:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b548:	4aaa      	ldr	r2, [pc, #680]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b54a:	430b      	orrs	r3, r1
 800b54c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b550:	e003      	b.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b552:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b556:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b566:	673b      	str	r3, [r7, #112]	@ 0x70
 800b568:	2300      	movs	r3, #0
 800b56a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b56c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b570:	460b      	mov	r3, r1
 800b572:	4313      	orrs	r3, r2
 800b574:	f000 80b5 	beq.w	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b57e:	4b9d      	ldr	r3, [pc, #628]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d113      	bne.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b58c:	4b99      	ldr	r3, [pc, #612]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b58e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b592:	4a98      	ldr	r2, [pc, #608]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b594:	f043 0304 	orr.w	r3, r3, #4
 800b598:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b59c:	4b95      	ldr	r3, [pc, #596]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b59e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5a2:	f003 0304 	and.w	r3, r3, #4
 800b5a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b5aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b5b4:	4b90      	ldr	r3, [pc, #576]	@ (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b8:	4a8f      	ldr	r2, [pc, #572]	@ (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b5ba:	f043 0301 	orr.w	r3, r3, #1
 800b5be:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5c0:	f7f7 fb2a 	bl	8002c18 <HAL_GetTick>
 800b5c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b5c8:	e00b      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5ca:	f7f7 fb25 	bl	8002c18 <HAL_GetTick>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d903      	bls.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5e0:	e005      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b5e2:	4b85      	ldr	r3, [pc, #532]	@ (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0ed      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b5ee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d165      	bne.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b5f6:	4b7f      	ldr	r3, [pc, #508]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b600:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d023      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b610:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b618:	4293      	cmp	r3, r2
 800b61a:	d01b      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b61c:	4b75      	ldr	r3, [pc, #468]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b61e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b626:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b62a:	4b72      	ldr	r3, [pc, #456]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b62c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b630:	4a70      	ldr	r2, [pc, #448]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b636:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b63a:	4b6e      	ldr	r3, [pc, #440]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b63c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b640:	4a6c      	ldr	r2, [pc, #432]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b64a:	4a6a      	ldr	r2, [pc, #424]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b64c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d019      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b660:	f7f7 fada 	bl	8002c18 <HAL_GetTick>
 800b664:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b668:	e00d      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b66a:	f7f7 fad5 	bl	8002c18 <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b674:	1ad2      	subs	r2, r2, r3
 800b676:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d903      	bls.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b684:	e006      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b686:	4b5b      	ldr	r3, [pc, #364]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b68c:	f003 0302 	and.w	r3, r3, #2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0ea      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b694:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10d      	bne.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b69c:	4b55      	ldr	r3, [pc, #340]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b69e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b6ae:	4a51      	ldr	r2, [pc, #324]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b6b6:	e008      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6bc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b6c0:	e003      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6c6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b6ca:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d107      	bne.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6d2:	4b48      	ldr	r3, [pc, #288]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6d8:	4a46      	ldr	r2, [pc, #280]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6da:	f023 0304 	bic.w	r3, r3, #4
 800b6de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b6ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b6f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	d042      	beq.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b6fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b706:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b70a:	d022      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b70c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b710:	d81b      	bhi.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b716:	d011      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b71c:	d815      	bhi.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d019      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b722:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b726:	d110      	bne.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b72c:	3308      	adds	r3, #8
 800b72e:	4618      	mov	r0, r3
 800b730:	f002 fa58 	bl	800dbe4 <RCCEx_PLL2_Config>
 800b734:	4603      	mov	r3, r0
 800b736:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b73a:	e00d      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b73c:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b740:	4a2c      	ldr	r2, [pc, #176]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b746:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b748:	e006      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b750:	e002      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b752:	bf00      	nop
 800b754:	e000      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b756:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b758:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10d      	bne.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b760:	4b24      	ldr	r3, [pc, #144]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b766:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b76e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b772:	4a20      	ldr	r2, [pc, #128]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b774:	430b      	orrs	r3, r1
 800b776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b77a:	e003      	b.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b780:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b790:	663b      	str	r3, [r7, #96]	@ 0x60
 800b792:	2300      	movs	r3, #0
 800b794:	667b      	str	r3, [r7, #100]	@ 0x64
 800b796:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b79a:	460b      	mov	r3, r1
 800b79c:	4313      	orrs	r3, r2
 800b79e:	d031      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7ac:	d00b      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b7ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7b2:	d804      	bhi.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d008      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b7b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7bc:	d007      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7c4:	e004      	b.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b7c6:	bf00      	nop
 800b7c8:	e002      	b.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b7ca:	bf00      	nop
 800b7cc:	e000      	b.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b7ce:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b7d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d111      	bne.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b7d8:	4b06      	ldr	r3, [pc, #24]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b7e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7ea:	4a02      	ldr	r2, [pc, #8]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b7f2:	e007      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b7f4:	46020c00 	.word	0x46020c00
 800b7f8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b800:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b810:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b812:	2300      	movs	r3, #0
 800b814:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b816:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b81a:	460b      	mov	r3, r1
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d00c      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b820:	4bb2      	ldr	r3, [pc, #712]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b826:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b82e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b832:	4aae      	ldr	r2, [pc, #696]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b834:	430b      	orrs	r3, r1
 800b836:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b846:	653b      	str	r3, [r7, #80]	@ 0x50
 800b848:	2300      	movs	r3, #0
 800b84a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b84c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b850:	460b      	mov	r3, r1
 800b852:	4313      	orrs	r3, r2
 800b854:	d019      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b85a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b85e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b862:	d105      	bne.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b864:	4ba1      	ldr	r3, [pc, #644]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b868:	4aa0      	ldr	r2, [pc, #640]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b86a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b86e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b870:	4b9e      	ldr	r3, [pc, #632]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b876:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b87e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b882:	4a9a      	ldr	r2, [pc, #616]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b884:	430b      	orrs	r3, r1
 800b886:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b896:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b898:	2300      	movs	r3, #0
 800b89a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b89c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	d00c      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b8a6:	4b91      	ldr	r3, [pc, #580]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b8b8:	4a8c      	ldr	r2, [pc, #560]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8ba:	430b      	orrs	r3, r1
 800b8bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b8cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	d00c      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b8dc:	4b83      	ldr	r3, [pc, #524]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b8e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b8ee:	4a7f      	ldr	r2, [pc, #508]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b902:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b904:	2300      	movs	r3, #0
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b908:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b90c:	460b      	mov	r3, r1
 800b90e:	4313      	orrs	r3, r2
 800b910:	d00c      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b912:	4b76      	ldr	r3, [pc, #472]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b918:	f023 0118 	bic.w	r1, r3, #24
 800b91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b920:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b924:	4a71      	ldr	r2, [pc, #452]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b926:	430b      	orrs	r3, r1
 800b928:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b92c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b938:	633b      	str	r3, [r7, #48]	@ 0x30
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b93e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b942:	460b      	mov	r3, r1
 800b944:	4313      	orrs	r3, r2
 800b946:	d032      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b94c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b950:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b954:	d105      	bne.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b956:	4b65      	ldr	r3, [pc, #404]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b95a:	4a64      	ldr	r2, [pc, #400]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b95c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b960:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b966:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b96a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b96e:	d108      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b974:	3308      	adds	r3, #8
 800b976:	4618      	mov	r0, r3
 800b978:	f002 f934 	bl	800dbe4 <RCCEx_PLL2_Config>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b982:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10d      	bne.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b98a:	4b58      	ldr	r3, [pc, #352]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b98c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b990:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b998:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b99c:	4a53      	ldr	r2, [pc, #332]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b99e:	430b      	orrs	r3, r1
 800b9a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b9a4:	e003      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9aa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b9ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	d04a      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b9ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b9d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b9d6:	d01e      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b9d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b9dc:	d825      	bhi.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b9de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9e2:	d00e      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b9e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9e8:	d81f      	bhi.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d021      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b9ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9f2:	d11a      	bne.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9f4:	4b3d      	ldr	r3, [pc, #244]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f8:	4a3c      	ldr	r2, [pc, #240]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba00:	e018      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba06:	3308      	adds	r3, #8
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f002 f8eb 	bl	800dbe4 <RCCEx_PLL2_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba14:	e00e      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba1a:	332c      	adds	r3, #44	@ 0x2c
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f002 f979 	bl	800dd14 <RCCEx_PLL3_Config>
 800ba22:	4603      	mov	r3, r0
 800ba24:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba28:	e004      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba30:	e000      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800ba32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba34:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10d      	bne.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800ba3c:	4b2b      	ldr	r3, [pc, #172]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ba46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba4e:	4927      	ldr	r1, [pc, #156]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800ba56:	e003      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba58:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba5c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800ba60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800ba6c:	623b      	str	r3, [r7, #32]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba76:	460b      	mov	r3, r1
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	d03d      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800ba7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba88:	d00e      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800ba8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba8e:	d815      	bhi.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d017      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ba94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba98:	d110      	bne.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba9a:	4b14      	ldr	r3, [pc, #80]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba9e:	4a13      	ldr	r2, [pc, #76]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800baa4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800baa6:	e00e      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800baa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baac:	3308      	adds	r3, #8
 800baae:	4618      	mov	r0, r3
 800bab0:	f002 f898 	bl	800dbe4 <RCCEx_PLL2_Config>
 800bab4:	4603      	mov	r3, r0
 800bab6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800baba:	e004      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bac2:	e000      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bac4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bac6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d110      	bne.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bace:	4b07      	ldr	r3, [pc, #28]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bad4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800badc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae0:	4902      	ldr	r1, [pc, #8]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bae8:	e006      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800baea:	bf00      	nop
 800baec:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800baf4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800baf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bb04:	61bb      	str	r3, [r7, #24]
 800bb06:	2300      	movs	r3, #0
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4313      	orrs	r3, r2
 800bb12:	d00c      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bb14:	4b68      	ldr	r3, [pc, #416]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb1a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bb26:	4964      	ldr	r1, [pc, #400]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	2100      	movs	r1, #0
 800bb38:	6139      	str	r1, [r7, #16]
 800bb3a:	f003 0302 	and.w	r3, r3, #2
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb44:	460b      	mov	r3, r1
 800bb46:	4313      	orrs	r3, r2
 800bb48:	d036      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bb4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00c      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bb56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb5a:	d113      	bne.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb60:	3308      	adds	r3, #8
 800bb62:	4618      	mov	r0, r3
 800bb64:	f002 f83e 	bl	800dbe4 <RCCEx_PLL2_Config>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bb6e:	e00d      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb74:	332c      	adds	r3, #44	@ 0x2c
 800bb76:	4618      	mov	r0, r3
 800bb78:	f002 f8cc 	bl	800dd14 <RCCEx_PLL3_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bb82:	e003      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10d      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bb94:	4b48      	ldr	r3, [pc, #288]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb9a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bb9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bba6:	4944      	ldr	r1, [pc, #272]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bbae:	e003      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbb4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bbb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	d024      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bbd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d108      	bne.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bbe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbe4:	332c      	adds	r3, #44	@ 0x2c
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f002 f894 	bl	800dd14 <RCCEx_PLL3_Config>
 800bbec:	4603      	mov	r3, r0
 800bbee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bbf2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10d      	bne.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bbfa:	4b2f      	ldr	r3, [pc, #188]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc00:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bc04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc0c:	492a      	ldr	r1, [pc, #168]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc14:	e003      	b.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc16:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc1a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bc1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	2100      	movs	r1, #0
 800bc28:	6039      	str	r1, [r7, #0]
 800bc2a:	f003 0308 	and.w	r3, r3, #8
 800bc2e:	607b      	str	r3, [r7, #4]
 800bc30:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc34:	460b      	mov	r3, r1
 800bc36:	4313      	orrs	r3, r2
 800bc38:	d036      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bc3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc42:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bc46:	d00d      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bc48:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bc4c:	d811      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bc4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc52:	d012      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bc54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc58:	d80b      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00d      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc62:	d106      	bne.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc64:	4b14      	ldr	r3, [pc, #80]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc68:	4a13      	ldr	r2, [pc, #76]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc6e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bc70:	e004      	b.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc78:	e000      	b.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bc7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10d      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bc84:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc8a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bc8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc96:	4908      	ldr	r1, [pc, #32]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc9e:	e003      	b.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bca4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bca8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcb8:	46020c00 	.word	0x46020c00

0800bcbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b089      	sub	sp, #36	@ 0x24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bcc4:	4ba6      	ldr	r3, [pc, #664]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bccc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bcce:	4ba4      	ldr	r3, [pc, #656]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bcd8:	4ba1      	ldr	r3, [pc, #644]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcdc:	0a1b      	lsrs	r3, r3, #8
 800bcde:	f003 030f 	and.w	r3, r3, #15
 800bce2:	3301      	adds	r3, #1
 800bce4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bce6:	4b9e      	ldr	r3, [pc, #632]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcea:	091b      	lsrs	r3, r3, #4
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bcf2:	4b9b      	ldr	r3, [pc, #620]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf6:	08db      	lsrs	r3, r3, #3
 800bcf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	fb02 f303 	mul.w	r3, r2, r3
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d062      	beq.n	800bdda <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	f200 8081 	bhi.w	800be1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d024      	beq.n	800bd6c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d17a      	bne.n	800be1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	ee07 3a90 	vmov	s15, r3
 800bd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd32:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bf64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3a:	4b89      	ldr	r3, [pc, #548]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd4e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bf68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd6a:	e08f      	b.n	800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bd6c:	4b7c      	ldr	r3, [pc, #496]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d005      	beq.n	800bd84 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bd78:	4b79      	ldr	r3, [pc, #484]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	0f1b      	lsrs	r3, r3, #28
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	e006      	b.n	800bd92 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bd84:	4b76      	ldr	r3, [pc, #472]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd8a:	041b      	lsls	r3, r3, #16
 800bd8c:	0f1b      	lsrs	r3, r3, #28
 800bd8e:	f003 030f 	and.w	r3, r3, #15
 800bd92:	4a76      	ldr	r2, [pc, #472]	@ (800bf6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bd94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd98:	ee07 3a90 	vmov	s15, r3
 800bd9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb8:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdbc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bf68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bdc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bdd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd8:	e058      	b.n	800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	ee07 3a90 	vmov	s15, r3
 800bde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bde8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdec:	4b5c      	ldr	r3, [pc, #368]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdfc:	ed97 6a02 	vldr	s12, [r7, #8]
 800be00:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bf68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be1c:	e036      	b.n	800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be1e:	4b50      	ldr	r3, [pc, #320]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d005      	beq.n	800be36 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800be2a:	4b4d      	ldr	r3, [pc, #308]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	0f1b      	lsrs	r3, r3, #28
 800be30:	f003 030f 	and.w	r3, r3, #15
 800be34:	e006      	b.n	800be44 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800be36:	4b4a      	ldr	r3, [pc, #296]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be3c:	041b      	lsls	r3, r3, #16
 800be3e:	0f1b      	lsrs	r3, r3, #28
 800be40:	f003 030f 	and.w	r3, r3, #15
 800be44:	4a49      	ldr	r2, [pc, #292]	@ (800bf6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800be46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be4a:	ee07 3a90 	vmov	s15, r3
 800be4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	ee07 3a90 	vmov	s15, r3
 800be58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	ee07 3a90 	vmov	s15, r3
 800be66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800be6e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bf68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800be8c:	4b34      	ldr	r3, [pc, #208]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be94:	2b00      	cmp	r3, #0
 800be96:	d017      	beq.n	800bec8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800be98:	4b31      	ldr	r3, [pc, #196]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be9c:	0a5b      	lsrs	r3, r3, #9
 800be9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800beaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800beae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800beb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bebe:	ee17 2a90 	vmov	r2, s15
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	e002      	b.n	800bece <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bece:	4b24      	ldr	r3, [pc, #144]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d017      	beq.n	800bf0a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800beda:	4b21      	ldr	r3, [pc, #132]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bedc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bede:	0c1b      	lsrs	r3, r3, #16
 800bee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bee4:	ee07 3a90 	vmov	s15, r3
 800bee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800beec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bef0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bef4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800befc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf00:	ee17 2a90 	vmov	r2, s15
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	605a      	str	r2, [r3, #4]
 800bf08:	e002      	b.n	800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bf10:	4b13      	ldr	r3, [pc, #76]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d017      	beq.n	800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf1c:	4b10      	ldr	r3, [pc, #64]	@ (800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf20:	0e1b      	lsrs	r3, r3, #24
 800bf22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf26:	ee07 3a90 	vmov	s15, r3
 800bf2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bf2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf36:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf42:	ee17 2a90 	vmov	r2, s15
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bf4a:	e002      	b.n	800bf52 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	609a      	str	r2, [r3, #8]
}
 800bf52:	bf00      	nop
 800bf54:	3724      	adds	r7, #36	@ 0x24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	46020c00 	.word	0x46020c00
 800bf64:	4b742400 	.word	0x4b742400
 800bf68:	46000000 	.word	0x46000000
 800bf6c:	08011b5c 	.word	0x08011b5c

0800bf70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b089      	sub	sp, #36	@ 0x24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bf78:	4ba6      	ldr	r3, [pc, #664]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf80:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bf82:	4ba4      	ldr	r3, [pc, #656]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf86:	f003 0303 	and.w	r3, r3, #3
 800bf8a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bf8c:	4ba1      	ldr	r3, [pc, #644]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf90:	0a1b      	lsrs	r3, r3, #8
 800bf92:	f003 030f 	and.w	r3, r3, #15
 800bf96:	3301      	adds	r3, #1
 800bf98:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bf9a:	4b9e      	ldr	r3, [pc, #632]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9e:	091b      	lsrs	r3, r3, #4
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800bfa6:	4b9b      	ldr	r3, [pc, #620]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfaa:	08db      	lsrs	r3, r3, #3
 800bfac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	fb02 f303 	mul.w	r3, r2, r3
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfbe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d062      	beq.n	800c08e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	f200 8081 	bhi.w	800c0d2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d024      	beq.n	800c020 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d17a      	bne.n	800c0d2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	ee07 3a90 	vmov	s15, r3
 800bfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bfea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfee:	4b89      	ldr	r3, [pc, #548]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bffe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c002:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c006:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c00e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c012:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c01e:	e08f      	b.n	800c140 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c020:	4b7c      	ldr	r3, [pc, #496]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c02c:	4b79      	ldr	r3, [pc, #484]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	0f1b      	lsrs	r3, r3, #28
 800c032:	f003 030f 	and.w	r3, r3, #15
 800c036:	e006      	b.n	800c046 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c038:	4b76      	ldr	r3, [pc, #472]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c03a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c03e:	041b      	lsls	r3, r3, #16
 800c040:	0f1b      	lsrs	r3, r3, #28
 800c042:	f003 030f 	and.w	r3, r3, #15
 800c046:	4a76      	ldr	r2, [pc, #472]	@ (800c220 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c070:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c07c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c080:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c088:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c08c:	e058      	b.n	800c140 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	ee07 3a90 	vmov	s15, r3
 800c094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c098:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0a0:	4b5c      	ldr	r3, [pc, #368]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0b0:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0b4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0d0:	e036      	b.n	800c140 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c0d2:	4b50      	ldr	r3, [pc, #320]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d005      	beq.n	800c0ea <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c0de:	4b4d      	ldr	r3, [pc, #308]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	0f1b      	lsrs	r3, r3, #28
 800c0e4:	f003 030f 	and.w	r3, r3, #15
 800c0e8:	e006      	b.n	800c0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c0ea:	4b4a      	ldr	r3, [pc, #296]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0f0:	041b      	lsls	r3, r3, #16
 800c0f2:	0f1b      	lsrs	r3, r3, #28
 800c0f4:	f003 030f 	and.w	r3, r3, #15
 800c0f8:	4a49      	ldr	r2, [pc, #292]	@ (800c220 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0fe:	ee07 3a90 	vmov	s15, r3
 800c102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	ee07 3a90 	vmov	s15, r3
 800c10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	ee07 3a90 	vmov	s15, r3
 800c11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c11e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c122:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c132:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c13e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c140:	4b34      	ldr	r3, [pc, #208]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d017      	beq.n	800c17c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c14c:	4b31      	ldr	r3, [pc, #196]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c150:	0a5b      	lsrs	r3, r3, #9
 800c152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c15e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c162:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c166:	edd7 6a07 	vldr	s13, [r7, #28]
 800c16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c172:	ee17 2a90 	vmov	r2, s15
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	e002      	b.n	800c182 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c182:	4b24      	ldr	r3, [pc, #144]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d017      	beq.n	800c1be <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c18e:	4b21      	ldr	r3, [pc, #132]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c192:	0c1b      	lsrs	r3, r3, #16
 800c194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c198:	ee07 3a90 	vmov	s15, r3
 800c19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c1a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1a4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1b4:	ee17 2a90 	vmov	r2, s15
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	605a      	str	r2, [r3, #4]
 800c1bc:	e002      	b.n	800c1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c1c4:	4b13      	ldr	r3, [pc, #76]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d017      	beq.n	800c200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1d0:	4b10      	ldr	r3, [pc, #64]	@ (800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d4:	0e1b      	lsrs	r3, r3, #24
 800c1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1da:	ee07 3a90 	vmov	s15, r3
 800c1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c1e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1f6:	ee17 2a90 	vmov	r2, s15
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c1fe:	e002      	b.n	800c206 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	609a      	str	r2, [r3, #8]
}
 800c206:	bf00      	nop
 800c208:	3724      	adds	r7, #36	@ 0x24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	46020c00 	.word	0x46020c00
 800c218:	4b742400 	.word	0x4b742400
 800c21c:	46000000 	.word	0x46000000
 800c220:	08011b5c 	.word	0x08011b5c

0800c224 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c224:	b480      	push	{r7}
 800c226:	b089      	sub	sp, #36	@ 0x24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c22c:	4ba6      	ldr	r3, [pc, #664]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c234:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c236:	4ba4      	ldr	r3, [pc, #656]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c23a:	f003 0303 	and.w	r3, r3, #3
 800c23e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c240:	4ba1      	ldr	r3, [pc, #644]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c244:	0a1b      	lsrs	r3, r3, #8
 800c246:	f003 030f 	and.w	r3, r3, #15
 800c24a:	3301      	adds	r3, #1
 800c24c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c24e:	4b9e      	ldr	r3, [pc, #632]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c252:	091b      	lsrs	r3, r3, #4
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c25a:	4b9b      	ldr	r3, [pc, #620]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c25c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c25e:	08db      	lsrs	r3, r3, #3
 800c260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	fb02 f303 	mul.w	r3, r2, r3
 800c26a:	ee07 3a90 	vmov	s15, r3
 800c26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c272:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d062      	beq.n	800c342 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b03      	cmp	r3, #3
 800c280:	f200 8081 	bhi.w	800c386 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d024      	beq.n	800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d17a      	bne.n	800c386 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c4cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a2:	4b89      	ldr	r3, [pc, #548]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2b6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ce:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c2d2:	e08f      	b.n	800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c2d4:	4b7c      	ldr	r3, [pc, #496]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d005      	beq.n	800c2ec <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c2e0:	4b79      	ldr	r3, [pc, #484]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	0f1b      	lsrs	r3, r3, #28
 800c2e6:	f003 030f 	and.w	r3, r3, #15
 800c2ea:	e006      	b.n	800c2fa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c2ec:	4b76      	ldr	r3, [pc, #472]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c2f2:	041b      	lsls	r3, r3, #16
 800c2f4:	0f1b      	lsrs	r3, r3, #28
 800c2f6:	f003 030f 	and.w	r3, r3, #15
 800c2fa:	4a76      	ldr	r2, [pc, #472]	@ (800c4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c300:	ee07 3a90 	vmov	s15, r3
 800c304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	ee07 3a90 	vmov	s15, r3
 800c30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	ee07 3a90 	vmov	s15, r3
 800c31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c320:	ed97 6a02 	vldr	s12, [r7, #8]
 800c324:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c330:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c334:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c340:	e058      	b.n	800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	ee07 3a90 	vmov	s15, r3
 800c348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c4cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c354:	4b5c      	ldr	r3, [pc, #368]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35c:	ee07 3a90 	vmov	s15, r3
 800c360:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c364:	ed97 6a02 	vldr	s12, [r7, #8]
 800c368:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c370:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c374:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c378:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c380:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c384:	e036      	b.n	800c3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c386:	4b50      	ldr	r3, [pc, #320]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d005      	beq.n	800c39e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c392:	4b4d      	ldr	r3, [pc, #308]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	0f1b      	lsrs	r3, r3, #28
 800c398:	f003 030f 	and.w	r3, r3, #15
 800c39c:	e006      	b.n	800c3ac <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c39e:	4b4a      	ldr	r3, [pc, #296]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3a4:	041b      	lsls	r3, r3, #16
 800c3a6:	0f1b      	lsrs	r3, r3, #28
 800c3a8:	f003 030f 	and.w	r3, r3, #15
 800c3ac:	4a49      	ldr	r2, [pc, #292]	@ (800c4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b2:	ee07 3a90 	vmov	s15, r3
 800c3b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	ee07 3a90 	vmov	s15, r3
 800c3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3d6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3f2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c3f4:	4b34      	ldr	r3, [pc, #208]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d017      	beq.n	800c430 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c400:	4b31      	ldr	r3, [pc, #196]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c404:	0a5b      	lsrs	r3, r3, #9
 800c406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c40a:	ee07 3a90 	vmov	s15, r3
 800c40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c416:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c426:	ee17 2a90 	vmov	r2, s15
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	e002      	b.n	800c436 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c436:	4b24      	ldr	r3, [pc, #144]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c43a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d017      	beq.n	800c472 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c442:	4b21      	ldr	r3, [pc, #132]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c446:	0c1b      	lsrs	r3, r3, #16
 800c448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c44c:	ee07 3a90 	vmov	s15, r3
 800c450:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c458:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c45c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c468:	ee17 2a90 	vmov	r2, s15
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	605a      	str	r2, [r3, #4]
 800c470:	e002      	b.n	800c478 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c478:	4b13      	ldr	r3, [pc, #76]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c47c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c480:	2b00      	cmp	r3, #0
 800c482:	d017      	beq.n	800c4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c484:	4b10      	ldr	r3, [pc, #64]	@ (800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c488:	0e1b      	lsrs	r3, r3, #24
 800c48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c48e:	ee07 3a90 	vmov	s15, r3
 800c492:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c49a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c49e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4aa:	ee17 2a90 	vmov	r2, s15
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c4b2:	e002      	b.n	800c4ba <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	609a      	str	r2, [r3, #8]
}
 800c4ba:	bf00      	nop
 800c4bc:	3724      	adds	r7, #36	@ 0x24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	46020c00 	.word	0x46020c00
 800c4cc:	4b742400 	.word	0x4b742400
 800c4d0:	46000000 	.word	0x46000000
 800c4d4:	08011b5c 	.word	0x08011b5c

0800c4d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08e      	sub	sp, #56	@ 0x38
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c4e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c4ea:	430b      	orrs	r3, r1
 800c4ec:	d145      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c4ee:	4ba7      	ldr	r3, [pc, #668]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c4fa:	4ba4      	ldr	r3, [pc, #656]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c500:	f003 0302 	and.w	r3, r3, #2
 800c504:	2b02      	cmp	r3, #2
 800c506:	d108      	bne.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c50e:	d104      	bne.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c514:	637b      	str	r3, [r7, #52]	@ 0x34
 800c516:	f001 bb5a 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c51a:	4b9c      	ldr	r3, [pc, #624]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c51c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c528:	d114      	bne.n	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c530:	d110      	bne.n	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c532:	4b96      	ldr	r3, [pc, #600]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c53c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c540:	d103      	bne.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c542:	23fa      	movs	r3, #250	@ 0xfa
 800c544:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c546:	f001 bb42 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c54a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c54e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c550:	f001 bb3d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c554:	4b8d      	ldr	r3, [pc, #564]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c55c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c560:	d107      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c568:	d103      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c56a:	4b89      	ldr	r3, [pc, #548]	@ (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c56c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c56e:	f001 bb2e 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c572:	2300      	movs	r3, #0
 800c574:	637b      	str	r3, [r7, #52]	@ 0x34
 800c576:	f001 bb2a 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c57a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c57e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c582:	430b      	orrs	r3, r1
 800c584:	d151      	bne.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c586:	4b81      	ldr	r3, [pc, #516]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c588:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c58c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c590:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c594:	2b80      	cmp	r3, #128	@ 0x80
 800c596:	d035      	beq.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59a:	2b80      	cmp	r3, #128	@ 0x80
 800c59c:	d841      	bhi.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a0:	2b60      	cmp	r3, #96	@ 0x60
 800c5a2:	d02a      	beq.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a6:	2b60      	cmp	r3, #96	@ 0x60
 800c5a8:	d83b      	bhi.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ac:	2b40      	cmp	r3, #64	@ 0x40
 800c5ae:	d009      	beq.n	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b2:	2b40      	cmp	r3, #64	@ 0x40
 800c5b4:	d835      	bhi.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00c      	beq.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5be:	2b20      	cmp	r3, #32
 800c5c0:	d012      	beq.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c5c2:	e02e      	b.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff fb77 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5d2:	f001 bafc 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5d6:	f107 0318 	add.w	r3, r7, #24
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff fcc8 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5e4:	f001 baf3 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5e8:	f107 030c 	add.w	r3, r7, #12
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff fe19 	bl	800c224 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5f6:	f001 baea 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c5fa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c5fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c600:	f001 bae5 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c604:	4b61      	ldr	r3, [pc, #388]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c60c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c610:	d103      	bne.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c612:	4b60      	ldr	r3, [pc, #384]	@ (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c614:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c616:	f001 bada 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c61a:	2300      	movs	r3, #0
 800c61c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c61e:	f001 bad6 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c626:	f001 bad2 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c62e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c632:	430b      	orrs	r3, r1
 800c634:	d158      	bne.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c636:	4b55      	ldr	r3, [pc, #340]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c638:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c63c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c640:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c648:	d03b      	beq.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c650:	d846      	bhi.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c658:	d02e      	beq.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c660:	d83e      	bhi.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c668:	d00b      	beq.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c66c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c670:	d836      	bhi.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00d      	beq.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c67e:	d012      	beq.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c680:	e02e      	b.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff fb18 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c690:	f001 ba9d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c694:	f107 0318 	add.w	r3, r7, #24
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff fc69 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6a2:	f001 ba94 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6a6:	f107 030c 	add.w	r3, r7, #12
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff fdba 	bl	800c224 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6b4:	f001 ba8b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c6b8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c6bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6be:	f001 ba86 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6c2:	4b32      	ldr	r3, [pc, #200]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6ce:	d103      	bne.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c6d0:	4b30      	ldr	r3, [pc, #192]	@ (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c6d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c6d4:	f001 ba7b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6dc:	f001 ba77 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6e4:	f001 ba73 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ec:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c6f0:	430b      	orrs	r3, r1
 800c6f2:	d126      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c6f4:	4b25      	ldr	r3, [pc, #148]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c700:	4b22      	ldr	r3, [pc, #136]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c70c:	d106      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c710:	2b00      	cmp	r3, #0
 800c712:	d103      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c714:	4b1f      	ldr	r3, [pc, #124]	@ (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c716:	637b      	str	r3, [r7, #52]	@ 0x34
 800c718:	f001 ba59 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c71c:	4b1b      	ldr	r3, [pc, #108]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c728:	d107      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c730:	d103      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c732:	4b19      	ldr	r3, [pc, #100]	@ (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c734:	637b      	str	r3, [r7, #52]	@ 0x34
 800c736:	f001 ba4a 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c73e:	f001 ba46 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c746:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c74a:	430b      	orrs	r3, r1
 800c74c:	d16e      	bne.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c74e:	4b0f      	ldr	r3, [pc, #60]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c754:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c758:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c760:	d03d      	beq.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c764:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c768:	d85c      	bhi.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c770:	d014      	beq.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c778:	d854      	bhi.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d01f      	beq.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c786:	d012      	beq.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c788:	e04c      	b.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c78a:	bf00      	nop
 800c78c:	46020c00 	.word	0x46020c00
 800c790:	0007a120 	.word	0x0007a120
 800c794:	00f42400 	.word	0x00f42400
 800c798:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c79c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff fa8b 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7aa:	f001 ba10 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7ae:	f107 0318 	add.w	r3, r7, #24
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7ff fbdc 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7bc:	f001 ba07 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c7c0:	4ba7      	ldr	r3, [pc, #668]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7cc:	d103      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c7ce:	4ba5      	ldr	r3, [pc, #660]	@ (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c7d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c7d2:	f001 b9fc 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7da:	f001 b9f8 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c7de:	4ba0      	ldr	r3, [pc, #640]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0320 	and.w	r3, r3, #32
 800c7e6:	2b20      	cmp	r3, #32
 800c7e8:	d118      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c7ea:	4b9d      	ldr	r3, [pc, #628]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d005      	beq.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7f6:	4b9a      	ldr	r3, [pc, #616]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	0e1b      	lsrs	r3, r3, #24
 800c7fc:	f003 030f 	and.w	r3, r3, #15
 800c800:	e006      	b.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c802:	4b97      	ldr	r3, [pc, #604]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c804:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c808:	041b      	lsls	r3, r3, #16
 800c80a:	0e1b      	lsrs	r3, r3, #24
 800c80c:	f003 030f 	and.w	r3, r3, #15
 800c810:	4a95      	ldr	r2, [pc, #596]	@ (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c816:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c818:	f001 b9d9 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c81c:	2300      	movs	r3, #0
 800c81e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c820:	f001 b9d5 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c824:	2300      	movs	r3, #0
 800c826:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c828:	f001 b9d1 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c82c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c830:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c834:	430b      	orrs	r3, r1
 800c836:	d17f      	bne.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c838:	4b89      	ldr	r3, [pc, #548]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c83a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c83e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c842:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c846:	2b00      	cmp	r3, #0
 800c848:	d165      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c84a:	4b85      	ldr	r3, [pc, #532]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c84c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c850:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c854:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c85c:	d034      	beq.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c860:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c864:	d853      	bhi.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c86c:	d00b      	beq.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c874:	d84b      	bhi.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d016      	beq.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c882:	d009      	beq.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c884:	e043      	b.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff fa16 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c892:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c894:	f001 b99b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c898:	f107 0318 	add.w	r3, r7, #24
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff fb67 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8a6:	f001 b992 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c8aa:	4b6d      	ldr	r3, [pc, #436]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c8b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8b6:	d103      	bne.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c8b8:	4b6a      	ldr	r3, [pc, #424]	@ (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c8ba:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c8bc:	f001 b987 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8c4:	f001 b983 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c8c8:	4b65      	ldr	r3, [pc, #404]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f003 0320 	and.w	r3, r3, #32
 800c8d0:	2b20      	cmp	r3, #32
 800c8d2:	d118      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c8d4:	4b62      	ldr	r3, [pc, #392]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d005      	beq.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c8e0:	4b5f      	ldr	r3, [pc, #380]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	0e1b      	lsrs	r3, r3, #24
 800c8e6:	f003 030f 	and.w	r3, r3, #15
 800c8ea:	e006      	b.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c8ec:	4b5c      	ldr	r3, [pc, #368]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8f2:	041b      	lsls	r3, r3, #16
 800c8f4:	0e1b      	lsrs	r3, r3, #24
 800c8f6:	f003 030f 	and.w	r3, r3, #15
 800c8fa:	4a5b      	ldr	r2, [pc, #364]	@ (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c900:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c902:	f001 b964 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c906:	2300      	movs	r3, #0
 800c908:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c90a:	f001 b960 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c912:	f001 b95c 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c91c:	d108      	bne.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c91e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff f9ca 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c92c:	f001 b94f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	637b      	str	r3, [r7, #52]	@ 0x34
 800c934:	f001 b94b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c93c:	1e51      	subs	r1, r2, #1
 800c93e:	430b      	orrs	r3, r1
 800c940:	d136      	bne.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c942:	4b47      	ldr	r3, [pc, #284]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c948:	f003 0303 	and.w	r3, r3, #3
 800c94c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c950:	2b00      	cmp	r3, #0
 800c952:	d104      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c954:	f7fe f9cc 	bl	800acf0 <HAL_RCC_GetPCLK2Freq>
 800c958:	6378      	str	r0, [r7, #52]	@ 0x34
 800c95a:	f001 b938 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c960:	2b01      	cmp	r3, #1
 800c962:	d104      	bne.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c964:	f7fe f894 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800c968:	6378      	str	r0, [r7, #52]	@ 0x34
 800c96a:	f001 b930 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c96e:	4b3c      	ldr	r3, [pc, #240]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c97a:	d106      	bne.n	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d103      	bne.n	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c982:	4b3a      	ldr	r3, [pc, #232]	@ (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c984:	637b      	str	r3, [r7, #52]	@ 0x34
 800c986:	f001 b922 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c98a:	4b35      	ldr	r3, [pc, #212]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c98c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c990:	f003 0302 	and.w	r3, r3, #2
 800c994:	2b02      	cmp	r3, #2
 800c996:	d107      	bne.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c99a:	2b03      	cmp	r3, #3
 800c99c:	d104      	bne.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c99e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9a4:	f001 b913 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ac:	f001 b90f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c9b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9b4:	1e91      	subs	r1, r2, #2
 800c9b6:	430b      	orrs	r3, r1
 800c9b8:	d136      	bne.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c9ba:	4b29      	ldr	r3, [pc, #164]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9c0:	f003 030c 	and.w	r3, r3, #12
 800c9c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d104      	bne.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c9cc:	f7fe f97c 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800c9d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9d2:	f001 b8fc 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d8:	2b04      	cmp	r3, #4
 800c9da:	d104      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9dc:	f7fe f858 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800c9e0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9e2:	f001 b8f4 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c9e6:	4b1e      	ldr	r3, [pc, #120]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9f2:	d106      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f6:	2b08      	cmp	r3, #8
 800c9f8:	d103      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c9fa:	4b1c      	ldr	r3, [pc, #112]	@ (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9fe:	f001 b8e6 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ca02:	4b17      	ldr	r3, [pc, #92]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca08:	f003 0302 	and.w	r3, r3, #2
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d107      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ca10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca12:	2b0c      	cmp	r3, #12
 800ca14:	d104      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ca16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca1c:	f001 b8d7 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca24:	f001 b8d3 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ca28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca2c:	1f11      	subs	r1, r2, #4
 800ca2e:	430b      	orrs	r3, r1
 800ca30:	d13f      	bne.n	800cab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ca32:	4b0b      	ldr	r3, [pc, #44]	@ (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d104      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca44:	f7fe f940 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800ca48:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca4a:	f001 b8c0 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca50:	2b10      	cmp	r3, #16
 800ca52:	d10d      	bne.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca54:	f7fe f81c 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800ca58:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca5a:	f001 b8b8 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ca5e:	bf00      	nop
 800ca60:	46020c00 	.word	0x46020c00
 800ca64:	02dc6c00 	.word	0x02dc6c00
 800ca68:	08011b5c 	.word	0x08011b5c
 800ca6c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ca70:	4ba8      	ldr	r3, [pc, #672]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca7c:	d106      	bne.n	800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d103      	bne.n	800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ca84:	4ba4      	ldr	r3, [pc, #656]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ca86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca88:	f001 b8a1 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ca8c:	4ba1      	ldr	r3, [pc, #644]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca92:	f003 0302 	and.w	r3, r3, #2
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	d107      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9c:	2b30      	cmp	r3, #48	@ 0x30
 800ca9e:	d104      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800caa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800caa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800caa6:	f001 b892 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800caaa:	2300      	movs	r3, #0
 800caac:	637b      	str	r3, [r7, #52]	@ 0x34
 800caae:	f001 b88e 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800cab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab6:	f1a2 0108 	sub.w	r1, r2, #8
 800caba:	430b      	orrs	r3, r1
 800cabc:	d136      	bne.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cabe:	4b95      	ldr	r3, [pc, #596]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cac4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cac8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800caca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d104      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cad0:	f7fe f8fa 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800cad4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cad6:	f001 b87a 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cadc:	2b40      	cmp	r3, #64	@ 0x40
 800cade:	d104      	bne.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cae0:	f7fd ffd6 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800cae4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cae6:	f001 b872 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800caea:	4b8a      	ldr	r3, [pc, #552]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caf6:	d106      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800caf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafa:	2b80      	cmp	r3, #128	@ 0x80
 800cafc:	d103      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cafe:	4b86      	ldr	r3, [pc, #536]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb02:	f001 b864 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cb06:	4b83      	ldr	r3, [pc, #524]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb0c:	f003 0302 	and.w	r3, r3, #2
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d107      	bne.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb16:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb18:	d104      	bne.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cb1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb20:	f001 b855 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cb24:	2300      	movs	r3, #0
 800cb26:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb28:	f001 b851 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cb2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb30:	f1a2 0110 	sub.w	r1, r2, #16
 800cb34:	430b      	orrs	r3, r1
 800cb36:	d139      	bne.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cb38:	4b76      	ldr	r3, [pc, #472]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d104      	bne.n	800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb4a:	f7fe f8bd 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800cb4e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb50:	f001 b83d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb5a:	d104      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb5c:	f7fd ff98 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800cb60:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb62:	f001 b834 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cb66:	4b6b      	ldr	r3, [pc, #428]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb72:	d107      	bne.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb7a:	d103      	bne.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cb7c:	4b66      	ldr	r3, [pc, #408]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb80:	f001 b825 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cb84:	4b63      	ldr	r3, [pc, #396]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb8a:	f003 0302 	and.w	r3, r3, #2
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d108      	bne.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb98:	d104      	bne.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cb9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba0:	f001 b815 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cba4:	2300      	movs	r3, #0
 800cba6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba8:	f001 b811 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cbac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbb0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cbb4:	430b      	orrs	r3, r1
 800cbb6:	d139      	bne.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cbb8:	4b56      	ldr	r3, [pc, #344]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cbbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cbc2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d104      	bne.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbca:	f7fe f87d 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800cbce:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbd0:	f000 bffd 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbda:	d104      	bne.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbdc:	f7fd ff58 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800cbe0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbe2:	f000 bff4 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cbe6:	4b4b      	ldr	r3, [pc, #300]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbf2:	d107      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbfa:	d103      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cbfc:	4b46      	ldr	r3, [pc, #280]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc00:	f000 bfe5 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cc04:	4b43      	ldr	r3, [pc, #268]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc0a:	f003 0302 	and.w	r3, r3, #2
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d108      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cc18:	d104      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cc1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc20:	f000 bfd5 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc24:	2300      	movs	r3, #0
 800cc26:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc28:	f000 bfd1 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc30:	f1a2 0120 	sub.w	r1, r2, #32
 800cc34:	430b      	orrs	r3, r1
 800cc36:	d158      	bne.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cc38:	4b36      	ldr	r3, [pc, #216]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc3e:	f003 0307 	and.w	r3, r3, #7
 800cc42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d104      	bne.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cc4a:	f7fe f865 	bl	800ad18 <HAL_RCC_GetPCLK3Freq>
 800cc4e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc50:	f000 bfbd 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d104      	bne.n	800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc5a:	f7fd ff19 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800cc5e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc60:	f000 bfb5 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800cc64:	4b2b      	ldr	r3, [pc, #172]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc70:	d106      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800cc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d103      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800cc78:	4b27      	ldr	r3, [pc, #156]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc7c:	f000 bfa7 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800cc80:	4b24      	ldr	r3, [pc, #144]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d107      	bne.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d104      	bne.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cc94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc98:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc9a:	f000 bf98 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800cc9e:	4b1d      	ldr	r3, [pc, #116]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 0320 	and.w	r3, r3, #32
 800cca6:	2b20      	cmp	r3, #32
 800cca8:	d11b      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	2b04      	cmp	r3, #4
 800ccae:	d118      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ccb0:	4b18      	ldr	r3, [pc, #96]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d005      	beq.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ccbc:	4b15      	ldr	r3, [pc, #84]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	0e1b      	lsrs	r3, r3, #24
 800ccc2:	f003 030f 	and.w	r3, r3, #15
 800ccc6:	e006      	b.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ccc8:	4b12      	ldr	r3, [pc, #72]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccce:	041b      	lsls	r3, r3, #16
 800ccd0:	0e1b      	lsrs	r3, r3, #24
 800ccd2:	f003 030f 	and.w	r3, r3, #15
 800ccd6:	4a11      	ldr	r2, [pc, #68]	@ (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ccd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccde:	f000 bf76 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cce2:	2300      	movs	r3, #0
 800cce4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cce6:	f000 bf72 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ccea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccee:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ccf2:	430b      	orrs	r3, r1
 800ccf4:	d172      	bne.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ccf6:	4b07      	ldr	r3, [pc, #28]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ccfc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd00:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd08:	d10a      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd0a:	f7fd fec1 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800cd0e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd10:	f000 bf5d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd14:	46020c00 	.word	0x46020c00
 800cd18:	00f42400 	.word	0x00f42400
 800cd1c:	08011b5c 	.word	0x08011b5c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd26:	d108      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd28:	f107 0318 	add.w	r3, r7, #24
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff f91f 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd36:	f000 bf4a 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d104      	bne.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cd40:	f7fd ffa8 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800cd44:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd46:	f000 bf42 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cd50:	d122      	bne.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cd52:	4bb0      	ldr	r3, [pc, #704]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	d118      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd5e:	4bad      	ldr	r3, [pc, #692]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800cd6a:	4baa      	ldr	r3, [pc, #680]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	0e1b      	lsrs	r3, r3, #24
 800cd70:	f003 030f 	and.w	r3, r3, #15
 800cd74:	e006      	b.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cd76:	4ba7      	ldr	r3, [pc, #668]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd7c:	041b      	lsls	r3, r3, #16
 800cd7e:	0e1b      	lsrs	r3, r3, #24
 800cd80:	f003 030f 	and.w	r3, r3, #15
 800cd84:	4aa4      	ldr	r2, [pc, #656]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd8c:	f000 bf1f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd94:	f000 bf1b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cd98:	4b9e      	ldr	r3, [pc, #632]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cda0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cda4:	d107      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cdac:	d103      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800cdae:	4b9b      	ldr	r3, [pc, #620]	@ (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cdb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdb2:	f000 bf0c 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800cdb6:	4b97      	ldr	r3, [pc, #604]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdc2:	d107      	bne.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdca:	d103      	bne.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800cdcc:	4b93      	ldr	r3, [pc, #588]	@ (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cdce:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd0:	f000 befd 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd8:	f000 bef9 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800cddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cde4:	430b      	orrs	r3, r1
 800cde6:	d158      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cde8:	4b8a      	ldr	r3, [pc, #552]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cdee:	f003 0307 	and.w	r3, r3, #7
 800cdf2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d84b      	bhi.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800cdfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce00:	0800ce39 	.word	0x0800ce39
 800ce04:	0800ce15 	.word	0x0800ce15
 800ce08:	0800ce27 	.word	0x0800ce27
 800ce0c:	0800ce43 	.word	0x0800ce43
 800ce10:	0800ce4d 	.word	0x0800ce4d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe ff4f 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce22:	f000 bed4 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce26:	f107 030c 	add.w	r3, r7, #12
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff f9fa 	bl	800c224 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce34:	f000 becb 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ce38:	f7fd ff2c 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800ce3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce3e:	f000 bec6 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ce42:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ce46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce48:	f000 bec1 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce4c:	4b71      	ldr	r3, [pc, #452]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0320 	and.w	r3, r3, #32
 800ce54:	2b20      	cmp	r3, #32
 800ce56:	d118      	bne.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce58:	4b6e      	ldr	r3, [pc, #440]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d005      	beq.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800ce64:	4b6b      	ldr	r3, [pc, #428]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	0e1b      	lsrs	r3, r3, #24
 800ce6a:	f003 030f 	and.w	r3, r3, #15
 800ce6e:	e006      	b.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800ce70:	4b68      	ldr	r3, [pc, #416]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce76:	041b      	lsls	r3, r3, #16
 800ce78:	0e1b      	lsrs	r3, r3, #24
 800ce7a:	f003 030f 	and.w	r3, r3, #15
 800ce7e:	4a66      	ldr	r2, [pc, #408]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ce80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce86:	f000 bea2 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce8e:	f000 be9e 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ce92:	2300      	movs	r3, #0
 800ce94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce96:	f000 be9a 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ce9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce9e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cea2:	430b      	orrs	r3, r1
 800cea4:	d167      	bne.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cea6:	4b5b      	ldr	r3, [pc, #364]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ceac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ceb0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ceb8:	d036      	beq.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ceba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cebc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cec0:	d855      	bhi.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cec8:	d029      	beq.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ceca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cecc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ced0:	d84d      	bhi.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ced8:	d013      	beq.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ceda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cedc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cee0:	d845      	bhi.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d015      	beq.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ceee:	d13e      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fe fee1 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cefe:	f000 be66 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf02:	f107 030c 	add.w	r3, r7, #12
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff f98c 	bl	800c224 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf10:	f000 be5d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cf14:	f7fd febe 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800cf18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf1a:	f000 be58 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf1e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cf22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf24:	f000 be53 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf28:	4b3a      	ldr	r3, [pc, #232]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0320 	and.w	r3, r3, #32
 800cf30:	2b20      	cmp	r3, #32
 800cf32:	d118      	bne.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf34:	4b37      	ldr	r3, [pc, #220]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d005      	beq.n	800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cf40:	4b34      	ldr	r3, [pc, #208]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	0e1b      	lsrs	r3, r3, #24
 800cf46:	f003 030f 	and.w	r3, r3, #15
 800cf4a:	e006      	b.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf4c:	4b31      	ldr	r3, [pc, #196]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf52:	041b      	lsls	r3, r3, #16
 800cf54:	0e1b      	lsrs	r3, r3, #24
 800cf56:	f003 030f 	and.w	r3, r3, #15
 800cf5a:	4a2f      	ldr	r2, [pc, #188]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cf5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf62:	f000 be34 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf66:	2300      	movs	r3, #0
 800cf68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf6a:	f000 be30 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf72:	f000 be2c 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cf76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf7a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cf7e:	430b      	orrs	r3, r1
 800cf80:	d152      	bne.n	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cf82:	4b24      	ldr	r3, [pc, #144]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cf8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d104      	bne.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf94:	f7fd fe98 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800cf98:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf9a:	f000 be18 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfa4:	d104      	bne.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cfa6:	f7fd fd73 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800cfaa:	6378      	str	r0, [r7, #52]	@ 0x34
 800cfac:	f000 be0f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800cfb0:	4b18      	ldr	r3, [pc, #96]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfbc:	d107      	bne.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfc4:	d103      	bne.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800cfc6:	4b15      	ldr	r3, [pc, #84]	@ (800d01c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cfc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfca:	f000 be00 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800cfce:	4b11      	ldr	r3, [pc, #68]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0320 	and.w	r3, r3, #32
 800cfd6:	2b20      	cmp	r3, #32
 800cfd8:	d122      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800cfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cfe0:	d11e      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cfe2:	4b0c      	ldr	r3, [pc, #48]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d005      	beq.n	800cffa <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800cfee:	4b09      	ldr	r3, [pc, #36]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	0e1b      	lsrs	r3, r3, #24
 800cff4:	f003 030f 	and.w	r3, r3, #15
 800cff8:	e006      	b.n	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800cffa:	4b06      	ldr	r3, [pc, #24]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d000:	041b      	lsls	r3, r3, #16
 800d002:	0e1b      	lsrs	r3, r3, #24
 800d004:	f003 030f 	and.w	r3, r3, #15
 800d008:	4a03      	ldr	r2, [pc, #12]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d00e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d010:	f000 bddd 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d014:	46020c00 	.word	0x46020c00
 800d018:	08011b5c 	.word	0x08011b5c
 800d01c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d020:	2300      	movs	r3, #0
 800d022:	637b      	str	r3, [r7, #52]	@ 0x34
 800d024:	f000 bdd3 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d02c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d030:	430b      	orrs	r3, r1
 800d032:	d14c      	bne.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d034:	4ba8      	ldr	r3, [pc, #672]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d03a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d03e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d042:	2b00      	cmp	r3, #0
 800d044:	d104      	bne.n	800d050 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d046:	f7fd fe3f 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800d04a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d04c:	f000 bdbf 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d056:	d104      	bne.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d058:	f7fd fd1a 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d05c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d05e:	f000 bdb6 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d062:	4b9d      	ldr	r3, [pc, #628]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d06a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d06e:	d107      	bne.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d076:	d103      	bne.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d078:	4b98      	ldr	r3, [pc, #608]	@ (800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d07a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d07c:	f000 bda7 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d080:	4b95      	ldr	r3, [pc, #596]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 0320 	and.w	r3, r3, #32
 800d088:	2b20      	cmp	r3, #32
 800d08a:	d11c      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d092:	d118      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d094:	4b90      	ldr	r3, [pc, #576]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d005      	beq.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d0a0:	4b8d      	ldr	r3, [pc, #564]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	0e1b      	lsrs	r3, r3, #24
 800d0a6:	f003 030f 	and.w	r3, r3, #15
 800d0aa:	e006      	b.n	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d0ac:	4b8a      	ldr	r3, [pc, #552]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0b2:	041b      	lsls	r3, r3, #16
 800d0b4:	0e1b      	lsrs	r3, r3, #24
 800d0b6:	f003 030f 	and.w	r3, r3, #15
 800d0ba:	4a89      	ldr	r2, [pc, #548]	@ (800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0c2:	f000 bd84 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ca:	f000 bd80 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0d2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d0d6:	430b      	orrs	r3, r1
 800d0d8:	d158      	bne.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d0da:	4b7f      	ldr	r3, [pc, #508]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d0e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d0e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0ea:	d028      	beq.n	800d13e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0f0:	d848      	bhi.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	2b80      	cmp	r3, #128	@ 0x80
 800d0f6:	d00e      	beq.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fa:	2b80      	cmp	r3, #128	@ 0x80
 800d0fc:	d842      	bhi.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d100:	2b00      	cmp	r3, #0
 800d102:	d003      	beq.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d106:	2b40      	cmp	r3, #64	@ 0x40
 800d108:	d014      	beq.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d10a:	e03b      	b.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d10c:	f7fd fe04 	bl	800ad18 <HAL_RCC_GetPCLK3Freq>
 800d110:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d112:	f000 bd5c 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d116:	4b70      	ldr	r3, [pc, #448]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d11e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d122:	d103      	bne.n	800d12c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d124:	4b6d      	ldr	r3, [pc, #436]	@ (800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d126:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d128:	f000 bd51 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d130:	f000 bd4d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d134:	f7fd fcac 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d138:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d13a:	f000 bd48 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d13e:	4b66      	ldr	r3, [pc, #408]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 0320 	and.w	r3, r3, #32
 800d146:	2b20      	cmp	r3, #32
 800d148:	d118      	bne.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d14a:	4b63      	ldr	r3, [pc, #396]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d152:	2b00      	cmp	r3, #0
 800d154:	d005      	beq.n	800d162 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d156:	4b60      	ldr	r3, [pc, #384]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	0e1b      	lsrs	r3, r3, #24
 800d15c:	f003 030f 	and.w	r3, r3, #15
 800d160:	e006      	b.n	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d162:	4b5d      	ldr	r3, [pc, #372]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d168:	041b      	lsls	r3, r3, #16
 800d16a:	0e1b      	lsrs	r3, r3, #24
 800d16c:	f003 030f 	and.w	r3, r3, #15
 800d170:	4a5b      	ldr	r2, [pc, #364]	@ (800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d176:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d178:	f000 bd29 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d180:	f000 bd25 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d184:	2300      	movs	r3, #0
 800d186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d188:	f000 bd21 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d190:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d194:	430b      	orrs	r3, r1
 800d196:	d14c      	bne.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d198:	4b4f      	ldr	r3, [pc, #316]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d19a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d19e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d1a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d104      	bne.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d1aa:	f7fd fd8d 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800d1ae:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1b0:	f000 bd0d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1ba:	d104      	bne.n	800d1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d1bc:	f7fd fc68 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d1c0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1c2:	f000 bd04 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d1c6:	4b44      	ldr	r3, [pc, #272]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1d2:	d107      	bne.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1da:	d103      	bne.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d1dc:	4b3f      	ldr	r3, [pc, #252]	@ (800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d1de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1e0:	f000 bcf5 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d1e4:	4b3c      	ldr	r3, [pc, #240]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 0320 	and.w	r3, r3, #32
 800d1ec:	2b20      	cmp	r3, #32
 800d1ee:	d11c      	bne.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d1f6:	d118      	bne.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1f8:	4b37      	ldr	r3, [pc, #220]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d005      	beq.n	800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d204:	4b34      	ldr	r3, [pc, #208]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	0e1b      	lsrs	r3, r3, #24
 800d20a:	f003 030f 	and.w	r3, r3, #15
 800d20e:	e006      	b.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d210:	4b31      	ldr	r3, [pc, #196]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d216:	041b      	lsls	r3, r3, #16
 800d218:	0e1b      	lsrs	r3, r3, #24
 800d21a:	f003 030f 	and.w	r3, r3, #15
 800d21e:	4a30      	ldr	r2, [pc, #192]	@ (800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d224:	637b      	str	r3, [r7, #52]	@ 0x34
 800d226:	f000 bcd2 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d22a:	2300      	movs	r3, #0
 800d22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d22e:	f000 bcce 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d232:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d236:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d23a:	430b      	orrs	r3, r1
 800d23c:	d152      	bne.n	800d2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d23e:	4b26      	ldr	r3, [pc, #152]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d240:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d244:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d248:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d104      	bne.n	800d25a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d250:	f7fd fd3a 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800d254:	6378      	str	r0, [r7, #52]	@ 0x34
 800d256:	f000 bcba 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d260:	d104      	bne.n	800d26c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d262:	f7fd fc15 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d266:	6378      	str	r0, [r7, #52]	@ 0x34
 800d268:	f000 bcb1 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d26c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d278:	d107      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d280:	d103      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d282:	4b16      	ldr	r3, [pc, #88]	@ (800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d284:	637b      	str	r3, [r7, #52]	@ 0x34
 800d286:	f000 bca2 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d28a:	4b13      	ldr	r3, [pc, #76]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b20      	cmp	r3, #32
 800d294:	d11c      	bne.n	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d29c:	d118      	bne.n	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d29e:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d005      	beq.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d2aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	0e1b      	lsrs	r3, r3, #24
 800d2b0:	f003 030f 	and.w	r3, r3, #15
 800d2b4:	e006      	b.n	800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d2b6:	4b08      	ldr	r3, [pc, #32]	@ (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2bc:	041b      	lsls	r3, r3, #16
 800d2be:	0e1b      	lsrs	r3, r3, #24
 800d2c0:	f003 030f 	and.w	r3, r3, #15
 800d2c4:	4a06      	ldr	r2, [pc, #24]	@ (800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2cc:	f000 bc7f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d4:	f000 bc7b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d2d8:	46020c00 	.word	0x46020c00
 800d2dc:	00f42400 	.word	0x00f42400
 800d2e0:	08011b5c 	.word	0x08011b5c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d2e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2e8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d2ec:	430b      	orrs	r3, r1
 800d2ee:	d14c      	bne.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d2f0:	4ba6      	ldr	r3, [pc, #664]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d2f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2f6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d2fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d104      	bne.n	800d30c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d302:	f7fd fce1 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800d306:	6378      	str	r0, [r7, #52]	@ 0x34
 800d308:	f000 bc61 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d312:	d104      	bne.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d314:	f7fd fbbc 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d318:	6378      	str	r0, [r7, #52]	@ 0x34
 800d31a:	f000 bc58 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d31e:	4b9b      	ldr	r3, [pc, #620]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d32a:	d107      	bne.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d332:	d103      	bne.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d334:	4b96      	ldr	r3, [pc, #600]	@ (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d336:	637b      	str	r3, [r7, #52]	@ 0x34
 800d338:	f000 bc49 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d33c:	4b93      	ldr	r3, [pc, #588]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 0320 	and.w	r3, r3, #32
 800d344:	2b20      	cmp	r3, #32
 800d346:	d11c      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d34e:	d118      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d350:	4b8e      	ldr	r3, [pc, #568]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d005      	beq.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d35c:	4b8b      	ldr	r3, [pc, #556]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	0e1b      	lsrs	r3, r3, #24
 800d362:	f003 030f 	and.w	r3, r3, #15
 800d366:	e006      	b.n	800d376 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d368:	4b88      	ldr	r3, [pc, #544]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d36a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d36e:	041b      	lsls	r3, r3, #16
 800d370:	0e1b      	lsrs	r3, r3, #24
 800d372:	f003 030f 	and.w	r3, r3, #15
 800d376:	4a87      	ldr	r2, [pc, #540]	@ (800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d37e:	f000 bc26 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d382:	2300      	movs	r3, #0
 800d384:	637b      	str	r3, [r7, #52]	@ 0x34
 800d386:	f000 bc22 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d38a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d38e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d392:	430b      	orrs	r3, r1
 800d394:	d164      	bne.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d396:	4b7d      	ldr	r3, [pc, #500]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d39c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d120      	bne.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d3a8:	4b78      	ldr	r3, [pc, #480]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 0320 	and.w	r3, r3, #32
 800d3b0:	2b20      	cmp	r3, #32
 800d3b2:	d117      	bne.n	800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3b4:	4b75      	ldr	r3, [pc, #468]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d005      	beq.n	800d3cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d3c0:	4b72      	ldr	r3, [pc, #456]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	0e1b      	lsrs	r3, r3, #24
 800d3c6:	f003 030f 	and.w	r3, r3, #15
 800d3ca:	e006      	b.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d3cc:	4b6f      	ldr	r3, [pc, #444]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3d2:	041b      	lsls	r3, r3, #16
 800d3d4:	0e1b      	lsrs	r3, r3, #24
 800d3d6:	f003 030f 	and.w	r3, r3, #15
 800d3da:	4a6e      	ldr	r2, [pc, #440]	@ (800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3e2:	e3f4      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3e8:	e3f1      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d3ea:	4b68      	ldr	r3, [pc, #416]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3f8:	d112      	bne.n	800d420 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d400:	d10e      	bne.n	800d420 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d402:	4b62      	ldr	r3, [pc, #392]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d40c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d410:	d102      	bne.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d412:	23fa      	movs	r3, #250	@ 0xfa
 800d414:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d416:	e3da      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d418:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d41c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d41e:	e3d6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d420:	4b5a      	ldr	r3, [pc, #360]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d42c:	d106      	bne.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d434:	d102      	bne.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d436:	4b56      	ldr	r3, [pc, #344]	@ (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d438:	637b      	str	r3, [r7, #52]	@ 0x34
 800d43a:	e3c8      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d43c:	4b53      	ldr	r3, [pc, #332]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d43e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d442:	f003 0302 	and.w	r3, r3, #2
 800d446:	2b02      	cmp	r3, #2
 800d448:	d107      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d450:	d103      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d456:	637b      	str	r3, [r7, #52]	@ 0x34
 800d458:	e3b9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d45a:	2300      	movs	r3, #0
 800d45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d45e:	e3b6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d464:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d468:	430b      	orrs	r3, r1
 800d46a:	d164      	bne.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d46c:	4b47      	ldr	r3, [pc, #284]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d46e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d472:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d476:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d120      	bne.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d47e:	4b43      	ldr	r3, [pc, #268]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f003 0320 	and.w	r3, r3, #32
 800d486:	2b20      	cmp	r3, #32
 800d488:	d117      	bne.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d48a:	4b40      	ldr	r3, [pc, #256]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d492:	2b00      	cmp	r3, #0
 800d494:	d005      	beq.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d496:	4b3d      	ldr	r3, [pc, #244]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	0e1b      	lsrs	r3, r3, #24
 800d49c:	f003 030f 	and.w	r3, r3, #15
 800d4a0:	e006      	b.n	800d4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d4a2:	4b3a      	ldr	r3, [pc, #232]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4a8:	041b      	lsls	r3, r3, #16
 800d4aa:	0e1b      	lsrs	r3, r3, #24
 800d4ac:	f003 030f 	and.w	r3, r3, #15
 800d4b0:	4a38      	ldr	r2, [pc, #224]	@ (800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b8:	e389      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4be:	e386      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d4c0:	4b32      	ldr	r3, [pc, #200]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4ce:	d112      	bne.n	800d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4d6:	d10e      	bne.n	800d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4d8:	4b2c      	ldr	r3, [pc, #176]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4e6:	d102      	bne.n	800d4ee <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d4e8:	23fa      	movs	r3, #250	@ 0xfa
 800d4ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4ec:	e36f      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d4ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d4f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4f4:	e36b      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d4f6:	4b25      	ldr	r3, [pc, #148]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d502:	d106      	bne.n	800d512 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d50a:	d102      	bne.n	800d512 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d50c:	4b20      	ldr	r3, [pc, #128]	@ (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d510:	e35d      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d512:	4b1e      	ldr	r3, [pc, #120]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d518:	f003 0302 	and.w	r3, r3, #2
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d107      	bne.n	800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d522:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d526:	d103      	bne.n	800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d52e:	e34e      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	637b      	str	r3, [r7, #52]	@ 0x34
 800d534:	e34b      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d53a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d53e:	430b      	orrs	r3, r1
 800d540:	d14e      	bne.n	800d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d542:	4b12      	ldr	r3, [pc, #72]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d548:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d54c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d550:	2b00      	cmp	r3, #0
 800d552:	d103      	bne.n	800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d554:	f7fd fbb8 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800d558:	6378      	str	r0, [r7, #52]	@ 0x34
 800d55a:	e338      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d55c:	4b0b      	ldr	r3, [pc, #44]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d55e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d56a:	d119      	bne.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d572:	d115      	bne.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d574:	4b05      	ldr	r3, [pc, #20]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d57a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d57e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d582:	d109      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d584:	23fa      	movs	r3, #250	@ 0xfa
 800d586:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d588:	e321      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d58a:	bf00      	nop
 800d58c:	46020c00 	.word	0x46020c00
 800d590:	00f42400 	.word	0x00f42400
 800d594:	08011b5c 	.word	0x08011b5c
      }
      else
      {
        frequency = LSI_VALUE;
 800d598:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d59c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d59e:	e316      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d5a0:	4ba8      	ldr	r3, [pc, #672]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5ac:	d106      	bne.n	800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d5b4:	d102      	bne.n	800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d5b6:	4ba4      	ldr	r3, [pc, #656]	@ (800d848 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d5b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ba:	e308      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d5bc:	4ba1      	ldr	r3, [pc, #644]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5c2:	f003 0302 	and.w	r3, r3, #2
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d107      	bne.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d5d0:	d103      	bne.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d5d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d8:	e2f9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5de:	e2f6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5e4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d5e8:	430b      	orrs	r3, r1
 800d5ea:	d12d      	bne.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d5ec:	4b95      	ldr	r3, [pc, #596]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5f2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d5f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d5f8:	4b92      	ldr	r3, [pc, #584]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d604:	d105      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d102      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d60c:	4b8e      	ldr	r3, [pc, #568]	@ (800d848 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d60e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d610:	e2dd      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d618:	d107      	bne.n	800d62a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d61a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe fb4c 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d626:	637b      	str	r3, [r7, #52]	@ 0x34
 800d628:	e2d1      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d630:	d107      	bne.n	800d642 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d632:	f107 0318 	add.w	r3, r7, #24
 800d636:	4618      	mov	r0, r3
 800d638:	f7fe fc9a 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d640:	e2c5      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d642:	2300      	movs	r3, #0
 800d644:	637b      	str	r3, [r7, #52]	@ 0x34
 800d646:	e2c2      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d64c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d650:	430b      	orrs	r3, r1
 800d652:	d156      	bne.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d654:	4b7b      	ldr	r3, [pc, #492]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d65a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d65e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d666:	d028      	beq.n	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d66e:	d845      	bhi.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d676:	d013      	beq.n	800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d67e:	d83d      	bhi.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d682:	2b00      	cmp	r3, #0
 800d684:	d004      	beq.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d68c:	d004      	beq.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d68e:	e035      	b.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d690:	f7fd fb2e 	bl	800acf0 <HAL_RCC_GetPCLK2Freq>
 800d694:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d696:	e29a      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d698:	f7fd f9fa 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d69c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d69e:	e296      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d6a0:	4b68      	ldr	r3, [pc, #416]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6ac:	d102      	bne.n	800d6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d6ae:	4b66      	ldr	r3, [pc, #408]	@ (800d848 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d6b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d6b2:	e28c      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6b8:	e289      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d6ba:	4b62      	ldr	r3, [pc, #392]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f003 0320 	and.w	r3, r3, #32
 800d6c2:	2b20      	cmp	r3, #32
 800d6c4:	d117      	bne.n	800d6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d6c6:	4b5f      	ldr	r3, [pc, #380]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d005      	beq.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d6d2:	4b5c      	ldr	r3, [pc, #368]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	0e1b      	lsrs	r3, r3, #24
 800d6d8:	f003 030f 	and.w	r3, r3, #15
 800d6dc:	e006      	b.n	800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d6de:	4b59      	ldr	r3, [pc, #356]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d6e4:	041b      	lsls	r3, r3, #16
 800d6e6:	0e1b      	lsrs	r3, r3, #24
 800d6e8:	f003 030f 	and.w	r3, r3, #15
 800d6ec:	4a57      	ldr	r2, [pc, #348]	@ (800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d6ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d6f4:	e26b      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6fa:	e268      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d700:	e265      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d702:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d706:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d70a:	430b      	orrs	r3, r1
 800d70c:	d156      	bne.n	800d7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d70e:	4b4d      	ldr	r3, [pc, #308]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d718:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d720:	d028      	beq.n	800d774 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d728:	d845      	bhi.n	800d7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d72c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d730:	d013      	beq.n	800d75a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d738:	d83d      	bhi.n	800d7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d004      	beq.n	800d74a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d746:	d004      	beq.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d748:	e035      	b.n	800d7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d74a:	f7fd fabd 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800d74e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d750:	e23d      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d752:	f7fd f99d 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d756:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d758:	e239      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d75a:	4b3a      	ldr	r3, [pc, #232]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d766:	d102      	bne.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d768:	4b37      	ldr	r3, [pc, #220]	@ (800d848 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d76a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d76c:	e22f      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d76e:	2300      	movs	r3, #0
 800d770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d772:	e22c      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d774:	4b33      	ldr	r3, [pc, #204]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f003 0320 	and.w	r3, r3, #32
 800d77c:	2b20      	cmp	r3, #32
 800d77e:	d117      	bne.n	800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d780:	4b30      	ldr	r3, [pc, #192]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d005      	beq.n	800d798 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d78c:	4b2d      	ldr	r3, [pc, #180]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	0e1b      	lsrs	r3, r3, #24
 800d792:	f003 030f 	and.w	r3, r3, #15
 800d796:	e006      	b.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d798:	4b2a      	ldr	r3, [pc, #168]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d79a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d79e:	041b      	lsls	r3, r3, #16
 800d7a0:	0e1b      	lsrs	r3, r3, #24
 800d7a2:	f003 030f 	and.w	r3, r3, #15
 800d7a6:	4a29      	ldr	r2, [pc, #164]	@ (800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d7ae:	e20e      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7b4:	e20b      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7ba:	e208      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7c0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d7c4:	430b      	orrs	r3, r1
 800d7c6:	d17c      	bne.n	800d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d7c8:	4b1e      	ldr	r3, [pc, #120]	@ (800d844 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d7ce:	f003 0318 	and.w	r3, r3, #24
 800d7d2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d6:	2b18      	cmp	r3, #24
 800d7d8:	d870      	bhi.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d7da:	a201      	add	r2, pc, #4	@ (adr r2, 800d7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d851 	.word	0x0800d851
 800d7e4:	0800d8bd 	.word	0x0800d8bd
 800d7e8:	0800d8bd 	.word	0x0800d8bd
 800d7ec:	0800d8bd 	.word	0x0800d8bd
 800d7f0:	0800d8bd 	.word	0x0800d8bd
 800d7f4:	0800d8bd 	.word	0x0800d8bd
 800d7f8:	0800d8bd 	.word	0x0800d8bd
 800d7fc:	0800d8bd 	.word	0x0800d8bd
 800d800:	0800d859 	.word	0x0800d859
 800d804:	0800d8bd 	.word	0x0800d8bd
 800d808:	0800d8bd 	.word	0x0800d8bd
 800d80c:	0800d8bd 	.word	0x0800d8bd
 800d810:	0800d8bd 	.word	0x0800d8bd
 800d814:	0800d8bd 	.word	0x0800d8bd
 800d818:	0800d8bd 	.word	0x0800d8bd
 800d81c:	0800d8bd 	.word	0x0800d8bd
 800d820:	0800d861 	.word	0x0800d861
 800d824:	0800d8bd 	.word	0x0800d8bd
 800d828:	0800d8bd 	.word	0x0800d8bd
 800d82c:	0800d8bd 	.word	0x0800d8bd
 800d830:	0800d8bd 	.word	0x0800d8bd
 800d834:	0800d8bd 	.word	0x0800d8bd
 800d838:	0800d8bd 	.word	0x0800d8bd
 800d83c:	0800d8bd 	.word	0x0800d8bd
 800d840:	0800d87b 	.word	0x0800d87b
 800d844:	46020c00 	.word	0x46020c00
 800d848:	00f42400 	.word	0x00f42400
 800d84c:	08011b5c 	.word	0x08011b5c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d850:	f7fd fa62 	bl	800ad18 <HAL_RCC_GetPCLK3Freq>
 800d854:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d856:	e1ba      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d858:	f7fd f91a 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d85c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d85e:	e1b6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d860:	4b9f      	ldr	r3, [pc, #636]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d86c:	d102      	bne.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d86e:	4b9d      	ldr	r3, [pc, #628]	@ (800dae4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d870:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d872:	e1ac      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d874:	2300      	movs	r3, #0
 800d876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d878:	e1a9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d87a:	4b99      	ldr	r3, [pc, #612]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f003 0320 	and.w	r3, r3, #32
 800d882:	2b20      	cmp	r3, #32
 800d884:	d117      	bne.n	800d8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d886:	4b96      	ldr	r3, [pc, #600]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d005      	beq.n	800d89e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d892:	4b93      	ldr	r3, [pc, #588]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	0e1b      	lsrs	r3, r3, #24
 800d898:	f003 030f 	and.w	r3, r3, #15
 800d89c:	e006      	b.n	800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d89e:	4b90      	ldr	r3, [pc, #576]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d8a4:	041b      	lsls	r3, r3, #16
 800d8a6:	0e1b      	lsrs	r3, r3, #24
 800d8a8:	f003 030f 	and.w	r3, r3, #15
 800d8ac:	4a8e      	ldr	r2, [pc, #568]	@ (800dae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8b4:	e18b      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8ba:	e188      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8c0:	e185      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8c6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d8ca:	430b      	orrs	r3, r1
 800d8cc:	d155      	bne.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d8ce:	4b84      	ldr	r3, [pc, #528]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d8d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d8d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d8e0:	d013      	beq.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d8e8:	d844      	bhi.n	800d974 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8f0:	d013      	beq.n	800d91a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8f8:	d83c      	bhi.n	800d974 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d014      	beq.n	800d92a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d906:	d014      	beq.n	800d932 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d908:	e034      	b.n	800d974 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d90a:	f107 0318 	add.w	r3, r7, #24
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fe fb2e 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d918:	e159      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d91a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe f9cc 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d926:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d928:	e151      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d92a:	f7fd f8b1 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d92e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d930:	e14d      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d932:	4b6b      	ldr	r3, [pc, #428]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 0320 	and.w	r3, r3, #32
 800d93a:	2b20      	cmp	r3, #32
 800d93c:	d117      	bne.n	800d96e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d93e:	4b68      	ldr	r3, [pc, #416]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d946:	2b00      	cmp	r3, #0
 800d948:	d005      	beq.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d94a:	4b65      	ldr	r3, [pc, #404]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	0e1b      	lsrs	r3, r3, #24
 800d950:	f003 030f 	and.w	r3, r3, #15
 800d954:	e006      	b.n	800d964 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d956:	4b62      	ldr	r3, [pc, #392]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d95c:	041b      	lsls	r3, r3, #16
 800d95e:	0e1b      	lsrs	r3, r3, #24
 800d960:	f003 030f 	and.w	r3, r3, #15
 800d964:	4a60      	ldr	r2, [pc, #384]	@ (800dae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d96a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d96c:	e12f      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d96e:	2300      	movs	r3, #0
 800d970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d972:	e12c      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d974:	2300      	movs	r3, #0
 800d976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d978:	e129      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d97a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d97e:	1e59      	subs	r1, r3, #1
 800d980:	ea52 0301 	orrs.w	r3, r2, r1
 800d984:	d13c      	bne.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d986:	4b56      	ldr	r3, [pc, #344]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d98c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d990:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d998:	d027      	beq.n	800d9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d9a0:	d82b      	bhi.n	800d9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d9a8:	d017      	beq.n	800d9da <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d9b0:	d823      	bhi.n	800d9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d004      	beq.n	800d9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9be:	d004      	beq.n	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d9c0:	e01b      	b.n	800d9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d9c2:	f7fd f865 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800d9c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d9c8:	e101      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fe f974 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9d8:	e0f9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9da:	f107 0318 	add.w	r3, r7, #24
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fe fac6 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9e8:	e0f1      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9ea:	f107 030c 	add.w	r3, r7, #12
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe fc18 	bl	800c224 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9f8:	e0e9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9fe:	e0e6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800da00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da04:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800da08:	430b      	orrs	r3, r1
 800da0a:	d131      	bne.n	800da70 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800da0c:	4b34      	ldr	r3, [pc, #208]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da16:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800da18:	4b31      	ldr	r3, [pc, #196]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da1e:	f003 0302 	and.w	r3, r3, #2
 800da22:	2b02      	cmp	r3, #2
 800da24:	d106      	bne.n	800da34 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800da26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d103      	bne.n	800da34 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800da2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da30:	637b      	str	r3, [r7, #52]	@ 0x34
 800da32:	e0cc      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800da34:	4b2a      	ldr	r3, [pc, #168]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da42:	d112      	bne.n	800da6a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800da44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da4a:	d10e      	bne.n	800da6a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da4c:	4b24      	ldr	r3, [pc, #144]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da5a:	d102      	bne.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800da5c:	23fa      	movs	r3, #250	@ 0xfa
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da60:	e0b5      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800da62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800da66:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da68:	e0b1      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800da6a:	2300      	movs	r3, #0
 800da6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800da6e:	e0ae      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800da70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da74:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800da78:	430b      	orrs	r3, r1
 800da7a:	d13b      	bne.n	800daf4 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800da7c:	4b18      	ldr	r3, [pc, #96]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800da86:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800da88:	4b15      	ldr	r3, [pc, #84]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da94:	d105      	bne.n	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800da96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d102      	bne.n	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800da9c:	4b13      	ldr	r3, [pc, #76]	@ (800daec <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800da9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800daa0:	e095      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800daa2:	4b0f      	ldr	r3, [pc, #60]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800daae:	d106      	bne.n	800dabe <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800dab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dab6:	d102      	bne.n	800dabe <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800dab8:	4b0d      	ldr	r3, [pc, #52]	@ (800daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800daba:	637b      	str	r3, [r7, #52]	@ 0x34
 800dabc:	e087      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800dabe:	4b08      	ldr	r3, [pc, #32]	@ (800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800daca:	d106      	bne.n	800dada <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800dacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dad2:	d102      	bne.n	800dada <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800dad4:	4b03      	ldr	r3, [pc, #12]	@ (800dae4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800dad6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dad8:	e079      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800dada:	2300      	movs	r3, #0
 800dadc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dade:	e076      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dae0:	46020c00 	.word	0x46020c00
 800dae4:	00f42400 	.word	0x00f42400
 800dae8:	08011b5c 	.word	0x08011b5c
 800daec:	02dc6c00 	.word	0x02dc6c00
 800daf0:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800daf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daf8:	1e99      	subs	r1, r3, #2
 800dafa:	ea52 0301 	orrs.w	r3, r2, r1
 800dafe:	d120      	bne.n	800db42 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800db00:	4b35      	ldr	r3, [pc, #212]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800db0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d004      	beq.n	800db1c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800db12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db18:	d008      	beq.n	800db2c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800db1a:	e00f      	b.n	800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db1c:	f107 030c 	add.w	r3, r7, #12
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe fb7f 	bl	800c224 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db2a:	e050      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db2c:	f107 0318 	add.w	r3, r7, #24
 800db30:	4618      	mov	r0, r3
 800db32:	f7fe fa1d 	bl	800bf70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db3a:	e048      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db3c:	2300      	movs	r3, #0
 800db3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db40:	e045      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800db42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db46:	f1a3 0108 	sub.w	r1, r3, #8
 800db4a:	ea52 0301 	orrs.w	r3, r2, r1
 800db4e:	d13c      	bne.n	800dbca <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800db50:	4b21      	ldr	r3, [pc, #132]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db56:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800db5a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800db5c:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db68:	d105      	bne.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800db6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d102      	bne.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800db70:	4b1a      	ldr	r3, [pc, #104]	@ (800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800db72:	637b      	str	r3, [r7, #52]	@ 0x34
 800db74:	e02b      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800db76:	4b18      	ldr	r3, [pc, #96]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db82:	d106      	bne.n	800db92 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800db84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db8a:	d102      	bne.n	800db92 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800db8c:	4b14      	ldr	r3, [pc, #80]	@ (800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800db8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db90:	e01d      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db98:	d107      	bne.n	800dbaa <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fe f88c 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800dba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dba8:	e011      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dbb0:	d108      	bne.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe f880 	bl	800bcbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbe:	085b      	lsrs	r3, r3, #1
 800dbc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbc2:	e004      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbc8:	e001      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dbce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3738      	adds	r7, #56	@ 0x38
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	46020c00 	.word	0x46020c00
 800dbdc:	00f42400 	.word	0x00f42400
 800dbe0:	007a1200 	.word	0x007a1200

0800dbe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dbec:	4b47      	ldr	r3, [pc, #284]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a46      	ldr	r2, [pc, #280]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dbf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dbf6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dbf8:	f7f5 f80e 	bl	8002c18 <HAL_GetTick>
 800dbfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbfe:	e008      	b.n	800dc12 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc00:	f7f5 f80a 	bl	8002c18 <HAL_GetTick>
 800dc04:	4602      	mov	r2, r0
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d901      	bls.n	800dc12 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dc0e:	2303      	movs	r3, #3
 800dc10:	e077      	b.n	800dd02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc12:	4b3e      	ldr	r3, [pc, #248]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1f0      	bne.n	800dc00 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dc1e:	4b3b      	ldr	r3, [pc, #236]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dc26:	f023 0303 	bic.w	r3, r3, #3
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	6811      	ldr	r1, [r2, #0]
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	6852      	ldr	r2, [r2, #4]
 800dc32:	3a01      	subs	r2, #1
 800dc34:	0212      	lsls	r2, r2, #8
 800dc36:	430a      	orrs	r2, r1
 800dc38:	4934      	ldr	r1, [pc, #208]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dc3e:	4b33      	ldr	r3, [pc, #204]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc42:	4b33      	ldr	r3, [pc, #204]	@ (800dd10 <RCCEx_PLL2_Config+0x12c>)
 800dc44:	4013      	ands	r3, r2
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	6892      	ldr	r2, [r2, #8]
 800dc4a:	3a01      	subs	r2, #1
 800dc4c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	68d2      	ldr	r2, [r2, #12]
 800dc54:	3a01      	subs	r2, #1
 800dc56:	0252      	lsls	r2, r2, #9
 800dc58:	b292      	uxth	r2, r2
 800dc5a:	4311      	orrs	r1, r2
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	6912      	ldr	r2, [r2, #16]
 800dc60:	3a01      	subs	r2, #1
 800dc62:	0412      	lsls	r2, r2, #16
 800dc64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dc68:	4311      	orrs	r1, r2
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	6952      	ldr	r2, [r2, #20]
 800dc6e:	3a01      	subs	r2, #1
 800dc70:	0612      	lsls	r2, r2, #24
 800dc72:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dc76:	430a      	orrs	r2, r1
 800dc78:	4924      	ldr	r1, [pc, #144]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800dc7e:	4b23      	ldr	r3, [pc, #140]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc82:	f023 020c 	bic.w	r2, r3, #12
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	4920      	ldr	r1, [pc, #128]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dc90:	4b1e      	ldr	r3, [pc, #120]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	491c      	ldr	r1, [pc, #112]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800dc9e:	4b1b      	ldr	r3, [pc, #108]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca2:	4a1a      	ldr	r2, [pc, #104]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dca4:	f023 0310 	bic.w	r3, r3, #16
 800dca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dcaa:	4b18      	ldr	r3, [pc, #96]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dcac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dcb2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	69d2      	ldr	r2, [r2, #28]
 800dcba:	00d2      	lsls	r2, r2, #3
 800dcbc:	4913      	ldr	r1, [pc, #76]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dcc2:	4b12      	ldr	r3, [pc, #72]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc6:	4a11      	ldr	r2, [pc, #68]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dcc8:	f043 0310 	orr.w	r3, r3, #16
 800dccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dcce:	4b0f      	ldr	r3, [pc, #60]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a0e      	ldr	r2, [pc, #56]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dcd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dcd8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dcda:	f7f4 ff9d 	bl	8002c18 <HAL_GetTick>
 800dcde:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dce0:	e008      	b.n	800dcf4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dce2:	f7f4 ff99 	bl	8002c18 <HAL_GetTick>
 800dce6:	4602      	mov	r2, r0
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d901      	bls.n	800dcf4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e006      	b.n	800dd02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcf4:	4b05      	ldr	r3, [pc, #20]	@ (800dd0c <RCCEx_PLL2_Config+0x128>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0f0      	beq.n	800dce2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dd00:	2300      	movs	r3, #0

}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	46020c00 	.word	0x46020c00
 800dd10:	80800000 	.word	0x80800000

0800dd14 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800dd1c:	4b47      	ldr	r3, [pc, #284]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a46      	ldr	r2, [pc, #280]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800dd22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd28:	f7f4 ff76 	bl	8002c18 <HAL_GetTick>
 800dd2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd2e:	e008      	b.n	800dd42 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd30:	f7f4 ff72 	bl	8002c18 <HAL_GetTick>
 800dd34:	4602      	mov	r2, r0
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d901      	bls.n	800dd42 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	e077      	b.n	800de32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd42:	4b3e      	ldr	r3, [pc, #248]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1f0      	bne.n	800dd30 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800dd4e:	4b3b      	ldr	r3, [pc, #236]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800dd50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dd56:	f023 0303 	bic.w	r3, r3, #3
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	6811      	ldr	r1, [r2, #0]
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	6852      	ldr	r2, [r2, #4]
 800dd62:	3a01      	subs	r2, #1
 800dd64:	0212      	lsls	r2, r2, #8
 800dd66:	430a      	orrs	r2, r1
 800dd68:	4934      	ldr	r1, [pc, #208]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	630b      	str	r3, [r1, #48]	@ 0x30
 800dd6e:	4b33      	ldr	r3, [pc, #204]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800dd70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd72:	4b33      	ldr	r3, [pc, #204]	@ (800de40 <RCCEx_PLL3_Config+0x12c>)
 800dd74:	4013      	ands	r3, r2
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	6892      	ldr	r2, [r2, #8]
 800dd7a:	3a01      	subs	r2, #1
 800dd7c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	68d2      	ldr	r2, [r2, #12]
 800dd84:	3a01      	subs	r2, #1
 800dd86:	0252      	lsls	r2, r2, #9
 800dd88:	b292      	uxth	r2, r2
 800dd8a:	4311      	orrs	r1, r2
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	6912      	ldr	r2, [r2, #16]
 800dd90:	3a01      	subs	r2, #1
 800dd92:	0412      	lsls	r2, r2, #16
 800dd94:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dd98:	4311      	orrs	r1, r2
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	6952      	ldr	r2, [r2, #20]
 800dd9e:	3a01      	subs	r2, #1
 800dda0:	0612      	lsls	r2, r2, #24
 800dda2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dda6:	430a      	orrs	r2, r1
 800dda8:	4924      	ldr	r1, [pc, #144]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ddae:	4b23      	ldr	r3, [pc, #140]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb2:	f023 020c 	bic.w	r2, r3, #12
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	699b      	ldr	r3, [r3, #24]
 800ddba:	4920      	ldr	r1, [pc, #128]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ddc0:	4b1e      	ldr	r3, [pc, #120]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a1b      	ldr	r3, [r3, #32]
 800ddc8:	491c      	ldr	r1, [pc, #112]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ddce:	4b1b      	ldr	r3, [pc, #108]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddd2:	4a1a      	ldr	r2, [pc, #104]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddd4:	f023 0310 	bic.w	r3, r3, #16
 800ddd8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ddda:	4b18      	ldr	r3, [pc, #96]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800dddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dde2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	69d2      	ldr	r2, [r2, #28]
 800ddea:	00d2      	lsls	r2, r2, #3
 800ddec:	4913      	ldr	r1, [pc, #76]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ddf2:	4b12      	ldr	r3, [pc, #72]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddf6:	4a11      	ldr	r2, [pc, #68]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800ddf8:	f043 0310 	orr.w	r3, r3, #16
 800ddfc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ddfe:	4b0f      	ldr	r3, [pc, #60]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a0e      	ldr	r2, [pc, #56]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800de04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de08:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de0a:	f7f4 ff05 	bl	8002c18 <HAL_GetTick>
 800de0e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de10:	e008      	b.n	800de24 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de12:	f7f4 ff01 	bl	8002c18 <HAL_GetTick>
 800de16:	4602      	mov	r2, r0
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	d901      	bls.n	800de24 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800de20:	2303      	movs	r3, #3
 800de22:	e006      	b.n	800de32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de24:	4b05      	ldr	r3, [pc, #20]	@ (800de3c <RCCEx_PLL3_Config+0x128>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d0f0      	beq.n	800de12 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	46020c00 	.word	0x46020c00
 800de40:	80800000 	.word	0x80800000

0800de44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d071      	beq.n	800df3a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7f4 f97a 	bl	8002164 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800de78:	4b32      	ldr	r3, [pc, #200]	@ (800df44 <HAL_RTC_Init+0x100>)
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	f003 0310 	and.w	r3, r3, #16
 800de80:	2b10      	cmp	r3, #16
 800de82:	d051      	beq.n	800df28 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de84:	4b2f      	ldr	r3, [pc, #188]	@ (800df44 <HAL_RTC_Init+0x100>)
 800de86:	22ca      	movs	r2, #202	@ 0xca
 800de88:	625a      	str	r2, [r3, #36]	@ 0x24
 800de8a:	4b2e      	ldr	r3, [pc, #184]	@ (800df44 <HAL_RTC_Init+0x100>)
 800de8c:	2253      	movs	r2, #83	@ 0x53
 800de8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f88b 	bl	800dfac <RTC_EnterInitMode>
 800de96:	4603      	mov	r3, r0
 800de98:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800de9a:	7bfb      	ldrb	r3, [r7, #15]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d13f      	bne.n	800df20 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800dea0:	4b28      	ldr	r3, [pc, #160]	@ (800df44 <HAL_RTC_Init+0x100>)
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	4a27      	ldr	r2, [pc, #156]	@ (800df44 <HAL_RTC_Init+0x100>)
 800dea6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800deaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800deae:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800deb0:	4b24      	ldr	r3, [pc, #144]	@ (800df44 <HAL_RTC_Init+0x100>)
 800deb2:	699a      	ldr	r2, [r3, #24]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6859      	ldr	r1, [r3, #4]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	4319      	orrs	r1, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	699b      	ldr	r3, [r3, #24]
 800dec2:	430b      	orrs	r3, r1
 800dec4:	491f      	ldr	r1, [pc, #124]	@ (800df44 <HAL_RTC_Init+0x100>)
 800dec6:	4313      	orrs	r3, r2
 800dec8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	041b      	lsls	r3, r3, #16
 800ded4:	491b      	ldr	r1, [pc, #108]	@ (800df44 <HAL_RTC_Init+0x100>)
 800ded6:	4313      	orrs	r3, r2
 800ded8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800deda:	4b1a      	ldr	r3, [pc, #104]	@ (800df44 <HAL_RTC_Init+0x100>)
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deea:	430b      	orrs	r3, r1
 800deec:	4915      	ldr	r1, [pc, #84]	@ (800df44 <HAL_RTC_Init+0x100>)
 800deee:	4313      	orrs	r3, r2
 800def0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f896 	bl	800e024 <RTC_ExitInitMode>
 800def8:	4603      	mov	r3, r0
 800defa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d10e      	bne.n	800df20 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800df02:	4b10      	ldr	r3, [pc, #64]	@ (800df44 <HAL_RTC_Init+0x100>)
 800df04:	699b      	ldr	r3, [r3, #24]
 800df06:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a19      	ldr	r1, [r3, #32]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	69db      	ldr	r3, [r3, #28]
 800df12:	4319      	orrs	r1, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	430b      	orrs	r3, r1
 800df1a:	490a      	ldr	r1, [pc, #40]	@ (800df44 <HAL_RTC_Init+0x100>)
 800df1c:	4313      	orrs	r3, r2
 800df1e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df20:	4b08      	ldr	r3, [pc, #32]	@ (800df44 <HAL_RTC_Init+0x100>)
 800df22:	22ff      	movs	r2, #255	@ 0xff
 800df24:	625a      	str	r2, [r3, #36]	@ 0x24
 800df26:	e001      	b.n	800df2c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d103      	bne.n	800df3a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	46007800 	.word	0x46007800

0800df48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800df50:	4b15      	ldr	r3, [pc, #84]	@ (800dfa8 <HAL_RTC_WaitForSynchro+0x60>)
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	4a14      	ldr	r2, [pc, #80]	@ (800dfa8 <HAL_RTC_WaitForSynchro+0x60>)
 800df56:	f023 0320 	bic.w	r3, r3, #32
 800df5a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800df5c:	f7f4 fe5c 	bl	8002c18 <HAL_GetTick>
 800df60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df62:	e013      	b.n	800df8c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df64:	f7f4 fe58 	bl	8002c18 <HAL_GetTick>
 800df68:	4602      	mov	r2, r0
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df72:	d90b      	bls.n	800df8c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df74:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa8 <HAL_RTC_WaitForSynchro+0x60>)
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	f003 0320 	and.w	r3, r3, #32
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10c      	bne.n	800df9a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2203      	movs	r2, #3
 800df84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800df88:	2303      	movs	r3, #3
 800df8a:	e008      	b.n	800df9e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df8c:	4b06      	ldr	r3, [pc, #24]	@ (800dfa8 <HAL_RTC_WaitForSynchro+0x60>)
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f003 0320 	and.w	r3, r3, #32
 800df94:	2b00      	cmp	r3, #0
 800df96:	d0e5      	beq.n	800df64 <HAL_RTC_WaitForSynchro+0x1c>
 800df98:	e000      	b.n	800df9c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800df9a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	46007800 	.word	0x46007800

0800dfac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dfb8:	4b19      	ldr	r3, [pc, #100]	@ (800e020 <RTC_EnterInitMode+0x74>)
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d128      	bne.n	800e016 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dfc4:	4b16      	ldr	r3, [pc, #88]	@ (800e020 <RTC_EnterInitMode+0x74>)
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	4a15      	ldr	r2, [pc, #84]	@ (800e020 <RTC_EnterInitMode+0x74>)
 800dfca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfce:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800dfd0:	f7f4 fe22 	bl	8002c18 <HAL_GetTick>
 800dfd4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfd6:	e013      	b.n	800e000 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dfd8:	f7f4 fe1e 	bl	8002c18 <HAL_GetTick>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dfe6:	d90b      	bls.n	800e000 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dfe8:	4b0d      	ldr	r3, [pc, #52]	@ (800e020 <RTC_EnterInitMode+0x74>)
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10f      	bne.n	800e014 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800dff4:	2303      	movs	r3, #3
 800dff6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2203      	movs	r2, #3
 800dffc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e000:	4b07      	ldr	r3, [pc, #28]	@ (800e020 <RTC_EnterInitMode+0x74>)
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d104      	bne.n	800e016 <RTC_EnterInitMode+0x6a>
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d1e2      	bne.n	800dfd8 <RTC_EnterInitMode+0x2c>
 800e012:	e000      	b.n	800e016 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e014:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e016:	7bfb      	ldrb	r3, [r7, #15]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	46007800 	.word	0x46007800

0800e024 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e030:	4b1a      	ldr	r3, [pc, #104]	@ (800e09c <RTC_ExitInitMode+0x78>)
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	4a19      	ldr	r2, [pc, #100]	@ (800e09c <RTC_ExitInitMode+0x78>)
 800e036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e03a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e03c:	4b17      	ldr	r3, [pc, #92]	@ (800e09c <RTC_ExitInitMode+0x78>)
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	f003 0320 	and.w	r3, r3, #32
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10c      	bne.n	800e062 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7ff ff7d 	bl	800df48 <HAL_RTC_WaitForSynchro>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d01e      	beq.n	800e092 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2203      	movs	r2, #3
 800e058:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e05c:	2303      	movs	r3, #3
 800e05e:	73fb      	strb	r3, [r7, #15]
 800e060:	e017      	b.n	800e092 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e062:	4b0e      	ldr	r3, [pc, #56]	@ (800e09c <RTC_ExitInitMode+0x78>)
 800e064:	699b      	ldr	r3, [r3, #24]
 800e066:	4a0d      	ldr	r2, [pc, #52]	@ (800e09c <RTC_ExitInitMode+0x78>)
 800e068:	f023 0320 	bic.w	r3, r3, #32
 800e06c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7ff ff6a 	bl	800df48 <HAL_RTC_WaitForSynchro>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d005      	beq.n	800e086 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2203      	movs	r2, #3
 800e07e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e082:	2303      	movs	r3, #3
 800e084:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e086:	4b05      	ldr	r3, [pc, #20]	@ (800e09c <RTC_ExitInitMode+0x78>)
 800e088:	699b      	ldr	r3, [r3, #24]
 800e08a:	4a04      	ldr	r2, [pc, #16]	@ (800e09c <RTC_ExitInitMode+0x78>)
 800e08c:	f043 0320 	orr.w	r3, r3, #32
 800e090:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	46007800 	.word	0x46007800

0800e0a0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	4910      	ldr	r1, [pc, #64]	@ (800e0f4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	689a      	ldr	r2, [r3, #8]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	431a      	orrs	r2, r3
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	699b      	ldr	r3, [r3, #24]
 800e0c6:	490c      	ldr	r1, [pc, #48]	@ (800e0f8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e0ce:	6a1b      	ldr	r3, [r3, #32]
 800e0d0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	6919      	ldr	r1, [r3, #16]
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	695b      	ldr	r3, [r3, #20]
 800e0dc:	041b      	lsls	r3, r3, #16
 800e0de:	430b      	orrs	r3, r1
 800e0e0:	4905      	ldr	r1, [pc, #20]	@ (800e0f8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	46007800 	.word	0x46007800
 800e0f8:	46007c00 	.word	0x46007c00

0800e0fc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	d904      	bls.n	800e11a <HAL_SAI_InitProtocol+0x1e>
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	3b03      	subs	r3, #3
 800e114:	2b01      	cmp	r3, #1
 800e116:	d812      	bhi.n	800e13e <HAL_SAI_InitProtocol+0x42>
 800e118:	e008      	b.n	800e12c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	68b9      	ldr	r1, [r7, #8]
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f000 fbed 	bl	800e900 <SAI_InitI2S>
 800e126:	4603      	mov	r3, r0
 800e128:	75fb      	strb	r3, [r7, #23]
      break;
 800e12a:	e00b      	b.n	800e144 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	68b9      	ldr	r1, [r7, #8]
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f000 fc96 	bl	800ea64 <SAI_InitPCM>
 800e138:	4603      	mov	r3, r0
 800e13a:	75fb      	strb	r3, [r7, #23]
      break;
 800e13c:	e002      	b.n	800e144 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	75fb      	strb	r3, [r7, #23]
      break;
 800e142:	bf00      	nop
  }

  if (status == HAL_OK)
 800e144:	7dfb      	ldrb	r3, [r7, #23]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d104      	bne.n	800e154 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f000 f808 	bl	800e160 <HAL_SAI_Init>
 800e150:	4603      	mov	r3, r0
 800e152:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e154:	7dfb      	ldrb	r3, [r7, #23]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b08a      	sub	sp, #40	@ 0x28
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	e1ce      	b.n	800e510 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d10e      	bne.n	800e19a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a83      	ldr	r2, [pc, #524]	@ (800e390 <HAL_SAI_Init+0x230>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d107      	bne.n	800e196 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d103      	bne.n	800e196 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e192:	2b00      	cmp	r3, #0
 800e194:	d001      	beq.n	800e19a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e196:	2301      	movs	r3, #1
 800e198:	e1ba      	b.n	800e510 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d106      	bne.n	800e1b4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7f4 f9aa 	bl	8002508 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fd0f 	bl	800ebd8 <SAI_Disable>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e1a5      	b.n	800e510 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	d00c      	beq.n	800e1ee <HAL_SAI_Init+0x8e>
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d80d      	bhi.n	800e1f4 <HAL_SAI_Init+0x94>
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <HAL_SAI_Init+0x82>
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d003      	beq.n	800e1e8 <HAL_SAI_Init+0x88>
 800e1e0:	e008      	b.n	800e1f4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1e6:	e008      	b.n	800e1fa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e1e8:	2310      	movs	r3, #16
 800e1ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1ec:	e005      	b.n	800e1fa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e1ee:	2320      	movs	r3, #32
 800e1f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1f2:	e002      	b.n	800e1fa <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1f8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	2b03      	cmp	r3, #3
 800e200:	d81d      	bhi.n	800e23e <HAL_SAI_Init+0xde>
 800e202:	a201      	add	r2, pc, #4	@ (adr r2, 800e208 <HAL_SAI_Init+0xa8>)
 800e204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e208:	0800e219 	.word	0x0800e219
 800e20c:	0800e21f 	.word	0x0800e21f
 800e210:	0800e227 	.word	0x0800e227
 800e214:	0800e22f 	.word	0x0800e22f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e218:	2300      	movs	r3, #0
 800e21a:	61fb      	str	r3, [r7, #28]
      break;
 800e21c:	e012      	b.n	800e244 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e21e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e222:	61fb      	str	r3, [r7, #28]
      break;
 800e224:	e00e      	b.n	800e244 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e226:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e22a:	61fb      	str	r3, [r7, #28]
      break;
 800e22c:	e00a      	b.n	800e244 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e22e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e232:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e236:	f043 0301 	orr.w	r3, r3, #1
 800e23a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e23c:	e002      	b.n	800e244 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	61fb      	str	r3, [r7, #28]
      break;
 800e242:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a51      	ldr	r2, [pc, #324]	@ (800e390 <HAL_SAI_Init+0x230>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d004      	beq.n	800e258 <HAL_SAI_Init+0xf8>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a50      	ldr	r2, [pc, #320]	@ (800e394 <HAL_SAI_Init+0x234>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d103      	bne.n	800e260 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e258:	4a4f      	ldr	r2, [pc, #316]	@ (800e398 <HAL_SAI_Init+0x238>)
 800e25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25c:	6013      	str	r3, [r2, #0]
 800e25e:	e002      	b.n	800e266 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e260:	4a4e      	ldr	r2, [pc, #312]	@ (800e39c <HAL_SAI_Init+0x23c>)
 800e262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e264:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a1b      	ldr	r3, [r3, #32]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d077      	beq.n	800e35e <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a47      	ldr	r2, [pc, #284]	@ (800e390 <HAL_SAI_Init+0x230>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d004      	beq.n	800e282 <HAL_SAI_Init+0x122>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a45      	ldr	r2, [pc, #276]	@ (800e394 <HAL_SAI_Init+0x234>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d107      	bne.n	800e292 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e282:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e286:	f04f 0100 	mov.w	r1, #0
 800e28a:	f7fe f925 	bl	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800e28e:	61b8      	str	r0, [r7, #24]
 800e290:	e006      	b.n	800e2a0 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e292:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e296:	f04f 0100 	mov.w	r1, #0
 800e29a:	f7fe f91d 	bl	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800e29e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	699b      	ldr	r3, [r3, #24]
 800e2a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e2a8:	d120      	bne.n	800e2ec <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2ae:	2b04      	cmp	r3, #4
 800e2b0:	d102      	bne.n	800e2b8 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e2b2:	2340      	movs	r3, #64	@ 0x40
 800e2b4:	613b      	str	r3, [r7, #16]
 800e2b6:	e00a      	b.n	800e2ce <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2bc:	2b08      	cmp	r3, #8
 800e2be:	d103      	bne.n	800e2c8 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e2c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e2c4:	613b      	str	r3, [r7, #16]
 800e2c6:	e002      	b.n	800e2ce <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2cc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e2ce:	69ba      	ldr	r2, [r7, #24]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	005b      	lsls	r3, r3, #1
 800e2d8:	4619      	mov	r1, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6a1b      	ldr	r3, [r3, #32]
 800e2de:	693a      	ldr	r2, [r7, #16]
 800e2e0:	fb02 f303 	mul.w	r3, r2, r3
 800e2e4:	fbb1 f3f3 	udiv	r3, r1, r3
 800e2e8:	617b      	str	r3, [r7, #20]
 800e2ea:	e017      	b.n	800e31c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e2f4:	d101      	bne.n	800e2fa <HAL_SAI_Init+0x19a>
 800e2f6:	2302      	movs	r3, #2
 800e2f8:	e000      	b.n	800e2fc <HAL_SAI_Init+0x19c>
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e2fe:	69ba      	ldr	r2, [r7, #24]
 800e300:	4613      	mov	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	4413      	add	r3, r2
 800e306:	005b      	lsls	r3, r3, #1
 800e308:	4619      	mov	r1, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a1b      	ldr	r3, [r3, #32]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	fb02 f303 	mul.w	r3, r2, r3
 800e314:	021b      	lsls	r3, r3, #8
 800e316:	fbb1 f3f3 	udiv	r3, r1, r3
 800e31a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	4a20      	ldr	r2, [pc, #128]	@ (800e3a0 <HAL_SAI_Init+0x240>)
 800e320:	fba2 2303 	umull	r2, r3, r2, r3
 800e324:	08da      	lsrs	r2, r3, #3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e32a:	6979      	ldr	r1, [r7, #20]
 800e32c:	4b1c      	ldr	r3, [pc, #112]	@ (800e3a0 <HAL_SAI_Init+0x240>)
 800e32e:	fba3 2301 	umull	r2, r3, r3, r1
 800e332:	08da      	lsrs	r2, r3, #3
 800e334:	4613      	mov	r3, r2
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	4413      	add	r3, r2
 800e33a:	005b      	lsls	r3, r3, #1
 800e33c:	1aca      	subs	r2, r1, r3
 800e33e:	2a08      	cmp	r2, #8
 800e340:	d904      	bls.n	800e34c <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e346:	1c5a      	adds	r2, r3, #1
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e350:	2b04      	cmp	r3, #4
 800e352:	d104      	bne.n	800e35e <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e358:	085a      	lsrs	r2, r3, #1
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d003      	beq.n	800e36e <HAL_SAI_Init+0x20e>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d109      	bne.n	800e382 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e372:	2b01      	cmp	r3, #1
 800e374:	d101      	bne.n	800e37a <HAL_SAI_Init+0x21a>
 800e376:	2300      	movs	r3, #0
 800e378:	e001      	b.n	800e37e <HAL_SAI_Init+0x21e>
 800e37a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e37e:	623b      	str	r3, [r7, #32]
 800e380:	e012      	b.n	800e3a8 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e386:	2b01      	cmp	r3, #1
 800e388:	d10c      	bne.n	800e3a4 <HAL_SAI_Init+0x244>
 800e38a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e38e:	e00a      	b.n	800e3a6 <HAL_SAI_Init+0x246>
 800e390:	40015404 	.word	0x40015404
 800e394:	40015424 	.word	0x40015424
 800e398:	40015400 	.word	0x40015400
 800e39c:	40015800 	.word	0x40015800
 800e3a0:	cccccccd 	.word	0xcccccccd
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6819      	ldr	r1, [r3, #0]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	4b59      	ldr	r3, [pc, #356]	@ (800e518 <HAL_SAI_Init+0x3b8>)
 800e3b4:	400b      	ands	r3, r1
 800e3b6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6819      	ldr	r1, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3c6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e3cc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3d2:	431a      	orrs	r2, r3
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e3e0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	695b      	ldr	r3, [r3, #20]
 800e3e6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e3ec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f2:	051b      	lsls	r3, r3, #20
 800e3f4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3fa:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	430a      	orrs	r2, r1
 800e408:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	6812      	ldr	r2, [r2, #0]
 800e414:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e418:	f023 030f 	bic.w	r3, r3, #15
 800e41c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6859      	ldr	r1, [r3, #4]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	69da      	ldr	r2, [r3, #28]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e42c:	431a      	orrs	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e432:	431a      	orrs	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	430a      	orrs	r2, r1
 800e43a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6899      	ldr	r1, [r3, #8]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	4b35      	ldr	r3, [pc, #212]	@ (800e51c <HAL_SAI_Init+0x3bc>)
 800e448:	400b      	ands	r3, r1
 800e44a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6899      	ldr	r1, [r3, #8]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e456:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e45c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e462:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e468:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e46e:	3b01      	subs	r3, #1
 800e470:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e472:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	430a      	orrs	r2, r1
 800e47a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68d9      	ldr	r1, [r3, #12]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e48a:	400b      	ands	r3, r1
 800e48c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	68d9      	ldr	r1, [r3, #12]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e49c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4a2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e4a4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	021b      	lsls	r3, r3, #8
 800e4ae:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	430a      	orrs	r2, r1
 800e4b6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a18      	ldr	r2, [pc, #96]	@ (800e520 <HAL_SAI_Init+0x3c0>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d119      	bne.n	800e4f6 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e4c2:	4b18      	ldr	r3, [pc, #96]	@ (800e524 <HAL_SAI_Init+0x3c4>)
 800e4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4c6:	4a17      	ldr	r2, [pc, #92]	@ (800e524 <HAL_SAI_Init+0x3c4>)
 800e4c8:	f023 0301 	bic.w	r3, r3, #1
 800e4cc:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d10e      	bne.n	800e4f6 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e4e4:	490f      	ldr	r1, [pc, #60]	@ (800e524 <HAL_SAI_Init+0x3c4>)
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e4ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e524 <HAL_SAI_Init+0x3c4>)
 800e4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ee:	4a0d      	ldr	r2, [pc, #52]	@ (800e524 <HAL_SAI_Init+0x3c4>)
 800e4f0:	f043 0301 	orr.w	r3, r3, #1
 800e4f4:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2201      	movs	r2, #1
 800e502:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3728      	adds	r7, #40	@ 0x28
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	f005c010 	.word	0xf005c010
 800e51c:	fff88000 	.word	0xfff88000
 800e520:	40015404 	.word	0x40015404
 800e524:	40015400 	.word	0x40015400

0800e528 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b088      	sub	sp, #32
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	4613      	mov	r3, r2
 800e534:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e536:	f7f4 fb6f 	bl	8002c18 <HAL_GetTick>
 800e53a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d002      	beq.n	800e548 <HAL_SAI_Transmit_DMA+0x20>
 800e542:	88fb      	ldrh	r3, [r7, #6]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d101      	bne.n	800e54c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	e0e4      	b.n	800e716 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e552:	b2db      	uxtb	r3, r3
 800e554:	2b01      	cmp	r3, #1
 800e556:	f040 80dd 	bne.w	800e714 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e560:	2b01      	cmp	r3, #1
 800e562:	d101      	bne.n	800e568 <HAL_SAI_Transmit_DMA+0x40>
 800e564:	2302      	movs	r3, #2
 800e566:	e0d6      	b.n	800e716 <HAL_SAI_Transmit_DMA+0x1ee>
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	68ba      	ldr	r2, [r7, #8]
 800e574:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	88fa      	ldrh	r2, [r7, #6]
 800e57a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	88fa      	ldrh	r2, [r7, #6]
 800e582:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2212      	movs	r2, #18
 800e592:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e59c:	4a60      	ldr	r2, [pc, #384]	@ (800e720 <HAL_SAI_Transmit_DMA+0x1f8>)
 800e59e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a6:	4a5f      	ldr	r2, [pc, #380]	@ (800e724 <HAL_SAI_Transmit_DMA+0x1fc>)
 800e5a8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5b0:	4a5d      	ldr	r2, [pc, #372]	@ (800e728 <HAL_SAI_Transmit_DMA+0x200>)
 800e5b2:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5c2:	2b40      	cmp	r3, #64	@ 0x40
 800e5c4:	d106      	bne.n	800e5d4 <HAL_SAI_Transmit_DMA+0xac>
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d102      	bne.n	800e5d4 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e5ce:	88fb      	ldrh	r3, [r7, #6]
 800e5d0:	61bb      	str	r3, [r7, #24]
 800e5d2:	e00a      	b.n	800e5ea <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5d8:	2b80      	cmp	r3, #128	@ 0x80
 800e5da:	d803      	bhi.n	800e5e4 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e5dc:	88fb      	ldrh	r3, [r7, #6]
 800e5de:	005b      	lsls	r3, r3, #1
 800e5e0:	61bb      	str	r3, [r7, #24]
 800e5e2:	e002      	b.n	800e5ea <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e5e4:	88fb      	ldrh	r3, [r7, #6]
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d02d      	beq.n	800e656 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e602:	2b00      	cmp	r3, #0
 800e604:	d021      	beq.n	800e64a <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e60c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	69ba      	ldr	r2, [r7, #24]
 800e612:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e61e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f103 021c 	add.w	r2, r3, #28
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e63e:	4618      	mov	r0, r3
 800e640:	f7f7 ff88 	bl	8006554 <HAL_DMAEx_List_Start_IT>
 800e644:	4603      	mov	r3, r0
 800e646:	77fb      	strb	r3, [r7, #31]
 800e648:	e014      	b.n	800e674 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	e05f      	b.n	800e716 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e660:	4619      	mov	r1, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	331c      	adds	r3, #28
 800e668:	461a      	mov	r2, r3
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	f7f6 ffe0 	bl	8005630 <HAL_DMA_Start_IT>
 800e670:	4603      	mov	r3, r0
 800e672:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e674:	7ffb      	ldrb	r3, [r7, #31]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d005      	beq.n	800e686 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e682:	2301      	movs	r3, #1
 800e684:	e047      	b.n	800e716 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e686:	2100      	movs	r1, #0
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f000 fa6d 	bl	800eb68 <SAI_InterruptFlag>
 800e68e:	4601      	mov	r1, r0
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	691a      	ldr	r2, [r3, #16]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	430a      	orrs	r2, r1
 800e69c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e6ac:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e6ae:	e015      	b.n	800e6dc <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e6b0:	f7f4 fab2 	bl	8002c18 <HAL_GetTick>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e6be:	d90d      	bls.n	800e6dc <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e01c      	b.n	800e716 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	695b      	ldr	r3, [r3, #20]
 800e6e2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d0e2      	beq.n	800e6b0 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d107      	bne.n	800e708 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e706:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e710:	2300      	movs	r3, #0
 800e712:	e000      	b.n	800e716 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800e714:	2302      	movs	r3, #2
  }
}
 800e716:	4618      	mov	r0, r3
 800e718:	3720      	adds	r7, #32
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	0800ecab 	.word	0x0800ecab
 800e724:	0800ec4d 	.word	0x0800ec4d
 800e728:	0800ed41 	.word	0x0800ed41

0800e72c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	4613      	mov	r3, r2
 800e738:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d002      	beq.n	800e746 <HAL_SAI_Receive_DMA+0x1a>
 800e740:	88fb      	ldrh	r3, [r7, #6]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e0c6      	b.n	800e8d8 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b01      	cmp	r3, #1
 800e754:	f040 80bf 	bne.w	800e8d6 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d101      	bne.n	800e766 <HAL_SAI_Receive_DMA+0x3a>
 800e762:	2302      	movs	r3, #2
 800e764:	e0b8      	b.n	800e8d8 <HAL_SAI_Receive_DMA+0x1ac>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	88fa      	ldrh	r2, [r7, #6]
 800e778:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	88fa      	ldrh	r2, [r7, #6]
 800e780:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2222      	movs	r2, #34	@ 0x22
 800e790:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e79a:	4a51      	ldr	r2, [pc, #324]	@ (800e8e0 <HAL_SAI_Receive_DMA+0x1b4>)
 800e79c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7a4:	4a4f      	ldr	r2, [pc, #316]	@ (800e8e4 <HAL_SAI_Receive_DMA+0x1b8>)
 800e7a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7ae:	4a4e      	ldr	r2, [pc, #312]	@ (800e8e8 <HAL_SAI_Receive_DMA+0x1bc>)
 800e7b0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7c0:	2b40      	cmp	r3, #64	@ 0x40
 800e7c2:	d106      	bne.n	800e7d2 <HAL_SAI_Receive_DMA+0xa6>
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d102      	bne.n	800e7d2 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e7cc:	88fb      	ldrh	r3, [r7, #6]
 800e7ce:	613b      	str	r3, [r7, #16]
 800e7d0:	e00a      	b.n	800e7e8 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7d6:	2b80      	cmp	r3, #128	@ 0x80
 800e7d8:	d803      	bhi.n	800e7e2 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e7da:	88fb      	ldrh	r3, [r7, #6]
 800e7dc:	005b      	lsls	r3, r3, #1
 800e7de:	613b      	str	r3, [r7, #16]
 800e7e0:	e002      	b.n	800e7e8 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e7e2:	88fb      	ldrh	r3, [r7, #6]
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d02d      	beq.n	800e854 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e800:	2b00      	cmp	r3, #0
 800e802:	d021      	beq.n	800e848 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e80a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	693a      	ldr	r2, [r7, #16]
 800e810:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f103 021c 	add.w	r2, r3, #28
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7f7 fe89 	bl	8006554 <HAL_DMAEx_List_Start_IT>
 800e842:	4603      	mov	r3, r0
 800e844:	75fb      	strb	r3, [r7, #23]
 800e846:	e014      	b.n	800e872 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e850:	2301      	movs	r3, #1
 800e852:	e041      	b.n	800e8d8 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	331c      	adds	r3, #28
 800e860:	4619      	mov	r1, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e866:	461a      	mov	r2, r3
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	f7f6 fee1 	bl	8005630 <HAL_DMA_Start_IT>
 800e86e:	4603      	mov	r3, r0
 800e870:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e872:	7dfb      	ldrb	r3, [r7, #23]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	e029      	b.n	800e8d8 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e884:	2100      	movs	r1, #0
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f000 f96e 	bl	800eb68 <SAI_InterruptFlag>
 800e88c:	4601      	mov	r1, r0
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	691a      	ldr	r2, [r3, #16]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	430a      	orrs	r2, r1
 800e89a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e8aa:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d107      	bne.n	800e8ca <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e8c8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e000      	b.n	800e8d8 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e8d6:	2302      	movs	r3, #2
  }
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3718      	adds	r7, #24
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	0800ed25 	.word	0x0800ed25
 800e8e4:	0800ecc7 	.word	0x0800ecc7
 800e8e8:	0800ed41 	.word	0x0800ed41

0800e8ec <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e900:	b480      	push	{r7}
 800e902:	b087      	sub	sp, #28
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
 800e90c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2200      	movs	r2, #0
 800e91c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <SAI_InitI2S+0x2e>
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d103      	bne.n	800e936 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	651a      	str	r2, [r3, #80]	@ 0x50
 800e934:	e002      	b.n	800e93c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2201      	movs	r2, #1
 800e93a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e942:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e94a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2200      	movs	r2, #0
 800e950:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e077      	b.n	800ea56 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d107      	bne.n	800e97c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e978:	665a      	str	r2, [r3, #100]	@ 0x64
 800e97a:	e006      	b.n	800e98a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e982:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b03      	cmp	r3, #3
 800e98e:	d84f      	bhi.n	800ea30 <SAI_InitI2S+0x130>
 800e990:	a201      	add	r2, pc, #4	@ (adr r2, 800e998 <SAI_InitI2S+0x98>)
 800e992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e996:	bf00      	nop
 800e998:	0800e9a9 	.word	0x0800e9a9
 800e99c:	0800e9cb 	.word	0x0800e9cb
 800e9a0:	0800e9ed 	.word	0x0800e9ed
 800e9a4:	0800ea0f 	.word	0x0800ea0f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2280      	movs	r2, #128	@ 0x80
 800e9ac:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	085b      	lsrs	r3, r3, #1
 800e9b2:	015a      	lsls	r2, r3, #5
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	085b      	lsrs	r3, r3, #1
 800e9bc:	011a      	lsls	r2, r3, #4
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2240      	movs	r2, #64	@ 0x40
 800e9c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e9c8:	e035      	b.n	800ea36 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2280      	movs	r2, #128	@ 0x80
 800e9ce:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	085b      	lsrs	r3, r3, #1
 800e9d4:	019a      	lsls	r2, r3, #6
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	085b      	lsrs	r3, r3, #1
 800e9de:	015a      	lsls	r2, r3, #5
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2280      	movs	r2, #128	@ 0x80
 800e9e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e9ea:	e024      	b.n	800ea36 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	22c0      	movs	r2, #192	@ 0xc0
 800e9f0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	085b      	lsrs	r3, r3, #1
 800e9f6:	019a      	lsls	r2, r3, #6
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	085b      	lsrs	r3, r3, #1
 800ea00:	015a      	lsls	r2, r3, #5
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2280      	movs	r2, #128	@ 0x80
 800ea0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea0c:	e013      	b.n	800ea36 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	22e0      	movs	r2, #224	@ 0xe0
 800ea12:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	085b      	lsrs	r3, r3, #1
 800ea18:	019a      	lsls	r2, r3, #6
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	085b      	lsrs	r3, r3, #1
 800ea22:	015a      	lsls	r2, r3, #5
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2280      	movs	r2, #128	@ 0x80
 800ea2c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea2e:	e002      	b.n	800ea36 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	75fb      	strb	r3, [r7, #23]
      break;
 800ea34:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d10b      	bne.n	800ea54 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d102      	bne.n	800ea48 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2210      	movs	r2, #16
 800ea46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d102      	bne.n	800ea54 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2208      	movs	r2, #8
 800ea52:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ea54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	371c      	adds	r7, #28
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop

0800ea64 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b087      	sub	sp, #28
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
 800ea70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea72:	2300      	movs	r3, #0
 800ea74:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d003      	beq.n	800ea92 <SAI_InitPCM+0x2e>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d103      	bne.n	800ea9a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2201      	movs	r2, #1
 800ea96:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea98:	e002      	b.n	800eaa0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800eaac:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800eab4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2200      	movs	r2, #0
 800eaba:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eac8:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	2b04      	cmp	r3, #4
 800eace:	d103      	bne.n	800ead8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2201      	movs	r2, #1
 800ead4:	659a      	str	r2, [r3, #88]	@ 0x58
 800ead6:	e002      	b.n	800eade <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	220d      	movs	r2, #13
 800eadc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b03      	cmp	r3, #3
 800eae2:	d837      	bhi.n	800eb54 <SAI_InitPCM+0xf0>
 800eae4:	a201      	add	r2, pc, #4	@ (adr r2, 800eaec <SAI_InitPCM+0x88>)
 800eae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaea:	bf00      	nop
 800eaec:	0800eafd 	.word	0x0800eafd
 800eaf0:	0800eb13 	.word	0x0800eb13
 800eaf4:	0800eb29 	.word	0x0800eb29
 800eaf8:	0800eb3f 	.word	0x0800eb3f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2280      	movs	r2, #128	@ 0x80
 800eb00:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	011a      	lsls	r2, r3, #4
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2240      	movs	r2, #64	@ 0x40
 800eb0e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb10:	e023      	b.n	800eb5a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2280      	movs	r2, #128	@ 0x80
 800eb16:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	015a      	lsls	r2, r3, #5
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2280      	movs	r2, #128	@ 0x80
 800eb24:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb26:	e018      	b.n	800eb5a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	22c0      	movs	r2, #192	@ 0xc0
 800eb2c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	015a      	lsls	r2, r3, #5
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2280      	movs	r2, #128	@ 0x80
 800eb3a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb3c:	e00d      	b.n	800eb5a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	22e0      	movs	r2, #224	@ 0xe0
 800eb42:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	015a      	lsls	r2, r3, #5
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2280      	movs	r2, #128	@ 0x80
 800eb50:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb52:	e002      	b.n	800eb5a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	75fb      	strb	r3, [r7, #23]
      break;
 800eb58:	bf00      	nop
  }

  return status;
 800eb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	371c      	adds	r7, #28
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	460b      	mov	r3, r1
 800eb72:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800eb78:	78fb      	ldrb	r3, [r7, #3]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d103      	bne.n	800eb86 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f043 0308 	orr.w	r3, r3, #8
 800eb84:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb8a:	2b08      	cmp	r3, #8
 800eb8c:	d10b      	bne.n	800eba6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d003      	beq.n	800eb9e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d103      	bne.n	800eba6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f043 0310 	orr.w	r3, r3, #16
 800eba4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	2b03      	cmp	r3, #3
 800ebac:	d003      	beq.n	800ebb6 <SAI_InterruptFlag+0x4e>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	d104      	bne.n	800ebc0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	e003      	b.n	800ebc8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f043 0304 	orr.w	r3, r3, #4
 800ebc6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ebe0:	4b18      	ldr	r3, [pc, #96]	@ (800ec44 <SAI_Disable+0x6c>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a18      	ldr	r2, [pc, #96]	@ (800ec48 <SAI_Disable+0x70>)
 800ebe6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebea:	0b1b      	lsrs	r3, r3, #12
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ec02:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10a      	bne.n	800ec20 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	72fb      	strb	r3, [r7, #11]
      break;
 800ec1e:	e009      	b.n	800ec34 <SAI_Disable+0x5c>
    }
    count--;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	3b01      	subs	r3, #1
 800ec24:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1e7      	bne.n	800ec04 <SAI_Disable+0x2c>

  return status;
 800ec34:	7afb      	ldrb	r3, [r7, #11]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	20000020 	.word	0x20000020
 800ec48:	95cbec1b 	.word	0x95cbec1b

0800ec4c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec58:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec5e:	2b81      	cmp	r3, #129	@ 0x81
 800ec60:	d01c      	beq.n	800ec9c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ec78:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f7ff ff73 	bl	800eb68 <SAI_InterruptFlag>
 800ec82:	4603      	mov	r3, r0
 800ec84:	43d9      	mvns	r1, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	691a      	ldr	r2, [r3, #16]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	400a      	ands	r2, r1
 800ec92:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7f2 fd2d 	bl	80016fc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eca2:	bf00      	nop
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b084      	sub	sp, #16
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ecb6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7f2 fd09 	bl	80016d0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ecbe:	bf00      	nop
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b084      	sub	sp, #16
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ecd2:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecd8:	2b81      	cmp	r3, #129	@ 0x81
 800ecda:	d01c      	beq.n	800ed16 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ecea:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7ff ff36 	bl	800eb68 <SAI_InterruptFlag>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	43d9      	mvns	r1, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	691a      	ldr	r2, [r3, #16]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	400a      	ands	r2, r1
 800ed0c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	f7f2 fcc4 	bl	80016a4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed1c:	bf00      	nop
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f7f2 fca0 	bl	8001678 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed38:	bf00      	nop
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed4c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ed6c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f7ff ff32 	bl	800ebd8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2201      	movs	r2, #1
 800ed78:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7ff fdb1 	bl	800e8ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed8a:	bf00      	nop
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b082      	sub	sp, #8
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	e049      	b.n	800ee38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d106      	bne.n	800edbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7f3 fa41 	bl	8002240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2202      	movs	r2, #2
 800edc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	3304      	adds	r3, #4
 800edce:	4619      	mov	r1, r3
 800edd0:	4610      	mov	r0, r2
 800edd2:	f000 fb3b 	bl	800f44c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2201      	movs	r2, #1
 800ede2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2201      	movs	r2, #1
 800edea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2201      	movs	r2, #1
 800edf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2201      	movs	r2, #1
 800edfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2201      	movs	r2, #1
 800ee12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2201      	movs	r2, #1
 800ee22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d001      	beq.n	800ee58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	e06a      	b.n	800ef2e <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a35      	ldr	r2, [pc, #212]	@ (800ef3c <HAL_TIM_Base_Start+0xfc>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d040      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4a34      	ldr	r2, [pc, #208]	@ (800ef40 <HAL_TIM_Base_Start+0x100>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d03b      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee7c:	d036      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee86:	d031      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4a2d      	ldr	r2, [pc, #180]	@ (800ef44 <HAL_TIM_Base_Start+0x104>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d02c      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a2c      	ldr	r2, [pc, #176]	@ (800ef48 <HAL_TIM_Base_Start+0x108>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d027      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a2a      	ldr	r2, [pc, #168]	@ (800ef4c <HAL_TIM_Base_Start+0x10c>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d022      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a29      	ldr	r2, [pc, #164]	@ (800ef50 <HAL_TIM_Base_Start+0x110>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d01d      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a27      	ldr	r2, [pc, #156]	@ (800ef54 <HAL_TIM_Base_Start+0x114>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d018      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a26      	ldr	r2, [pc, #152]	@ (800ef58 <HAL_TIM_Base_Start+0x118>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d013      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a24      	ldr	r2, [pc, #144]	@ (800ef5c <HAL_TIM_Base_Start+0x11c>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d00e      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a23      	ldr	r2, [pc, #140]	@ (800ef60 <HAL_TIM_Base_Start+0x120>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d009      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a21      	ldr	r2, [pc, #132]	@ (800ef64 <HAL_TIM_Base_Start+0x124>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d004      	beq.n	800eeec <HAL_TIM_Base_Start+0xac>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a20      	ldr	r2, [pc, #128]	@ (800ef68 <HAL_TIM_Base_Start+0x128>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d115      	bne.n	800ef18 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	689a      	ldr	r2, [r3, #8]
 800eef2:	4b1e      	ldr	r3, [pc, #120]	@ (800ef6c <HAL_TIM_Base_Start+0x12c>)
 800eef4:	4013      	ands	r3, r2
 800eef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2b06      	cmp	r3, #6
 800eefc:	d015      	beq.n	800ef2a <HAL_TIM_Base_Start+0xea>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef04:	d011      	beq.n	800ef2a <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f042 0201 	orr.w	r2, r2, #1
 800ef14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef16:	e008      	b.n	800ef2a <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f042 0201 	orr.w	r2, r2, #1
 800ef26:	601a      	str	r2, [r3, #0]
 800ef28:	e000      	b.n	800ef2c <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	40012c00 	.word	0x40012c00
 800ef40:	50012c00 	.word	0x50012c00
 800ef44:	40000400 	.word	0x40000400
 800ef48:	50000400 	.word	0x50000400
 800ef4c:	40000800 	.word	0x40000800
 800ef50:	50000800 	.word	0x50000800
 800ef54:	40000c00 	.word	0x40000c00
 800ef58:	50000c00 	.word	0x50000c00
 800ef5c:	40013400 	.word	0x40013400
 800ef60:	50013400 	.word	0x50013400
 800ef64:	40014000 	.word	0x40014000
 800ef68:	50014000 	.word	0x50014000
 800ef6c:	00010007 	.word	0x00010007

0800ef70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d101      	bne.n	800ef82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e049      	b.n	800f016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d106      	bne.n	800ef9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7f3 f930 	bl	80021fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2202      	movs	r2, #2
 800efa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	3304      	adds	r3, #4
 800efac:	4619      	mov	r1, r3
 800efae:	4610      	mov	r0, r2
 800efb0:	f000 fa4c 	bl	800f44c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2201      	movs	r2, #1
 800efd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2201      	movs	r2, #1
 800efd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2201      	movs	r2, #1
 800efe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
	...

0800f020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f036:	2b01      	cmp	r3, #1
 800f038:	d101      	bne.n	800f03e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f03a:	2302      	movs	r3, #2
 800f03c:	e0ff      	b.n	800f23e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2201      	movs	r2, #1
 800f042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b14      	cmp	r3, #20
 800f04a:	f200 80f0 	bhi.w	800f22e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f04e:	a201      	add	r2, pc, #4	@ (adr r2, 800f054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f054:	0800f0a9 	.word	0x0800f0a9
 800f058:	0800f22f 	.word	0x0800f22f
 800f05c:	0800f22f 	.word	0x0800f22f
 800f060:	0800f22f 	.word	0x0800f22f
 800f064:	0800f0e9 	.word	0x0800f0e9
 800f068:	0800f22f 	.word	0x0800f22f
 800f06c:	0800f22f 	.word	0x0800f22f
 800f070:	0800f22f 	.word	0x0800f22f
 800f074:	0800f12b 	.word	0x0800f12b
 800f078:	0800f22f 	.word	0x0800f22f
 800f07c:	0800f22f 	.word	0x0800f22f
 800f080:	0800f22f 	.word	0x0800f22f
 800f084:	0800f16b 	.word	0x0800f16b
 800f088:	0800f22f 	.word	0x0800f22f
 800f08c:	0800f22f 	.word	0x0800f22f
 800f090:	0800f22f 	.word	0x0800f22f
 800f094:	0800f1ad 	.word	0x0800f1ad
 800f098:	0800f22f 	.word	0x0800f22f
 800f09c:	0800f22f 	.word	0x0800f22f
 800f0a0:	0800f22f 	.word	0x0800f22f
 800f0a4:	0800f1ed 	.word	0x0800f1ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68b9      	ldr	r1, [r7, #8]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f000 fad2 	bl	800f658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	699a      	ldr	r2, [r3, #24]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f042 0208 	orr.w	r2, r2, #8
 800f0c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	699a      	ldr	r2, [r3, #24]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f022 0204 	bic.w	r2, r2, #4
 800f0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	6999      	ldr	r1, [r3, #24]
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	691a      	ldr	r2, [r3, #16]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	430a      	orrs	r2, r1
 800f0e4:	619a      	str	r2, [r3, #24]
      break;
 800f0e6:	e0a5      	b.n	800f234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	68b9      	ldr	r1, [r7, #8]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 fb74 	bl	800f7dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	699a      	ldr	r2, [r3, #24]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	699a      	ldr	r2, [r3, #24]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	6999      	ldr	r1, [r3, #24]
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	021a      	lsls	r2, r3, #8
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	430a      	orrs	r2, r1
 800f126:	619a      	str	r2, [r3, #24]
      break;
 800f128:	e084      	b.n	800f234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68b9      	ldr	r1, [r7, #8]
 800f130:	4618      	mov	r0, r3
 800f132:	f000 fc03 	bl	800f93c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	69da      	ldr	r2, [r3, #28]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f042 0208 	orr.w	r2, r2, #8
 800f144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	69da      	ldr	r2, [r3, #28]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f022 0204 	bic.w	r2, r2, #4
 800f154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	69d9      	ldr	r1, [r3, #28]
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	691a      	ldr	r2, [r3, #16]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	430a      	orrs	r2, r1
 800f166:	61da      	str	r2, [r3, #28]
      break;
 800f168:	e064      	b.n	800f234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	68b9      	ldr	r1, [r7, #8]
 800f170:	4618      	mov	r0, r3
 800f172:	f000 fc91 	bl	800fa98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	69da      	ldr	r2, [r3, #28]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	69da      	ldr	r2, [r3, #28]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	69d9      	ldr	r1, [r3, #28]
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	691b      	ldr	r3, [r3, #16]
 800f1a0:	021a      	lsls	r2, r3, #8
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	430a      	orrs	r2, r1
 800f1a8:	61da      	str	r2, [r3, #28]
      break;
 800f1aa:	e043      	b.n	800f234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68b9      	ldr	r1, [r7, #8]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 fd20 	bl	800fbf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f042 0208 	orr.w	r2, r2, #8
 800f1c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f022 0204 	bic.w	r2, r2, #4
 800f1d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	691a      	ldr	r2, [r3, #16]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	430a      	orrs	r2, r1
 800f1e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f1ea:	e023      	b.n	800f234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68b9      	ldr	r1, [r7, #8]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 fd82 	bl	800fcfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f206:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f216:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	021a      	lsls	r2, r3, #8
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	430a      	orrs	r2, r1
 800f22a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f22c:	e002      	b.n	800f234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f22e:	2301      	movs	r3, #1
 800f230:	75fb      	strb	r3, [r7, #23]
      break;
 800f232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3718      	adds	r7, #24
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop

0800f248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d101      	bne.n	800f264 <HAL_TIM_ConfigClockSource+0x1c>
 800f260:	2302      	movs	r3, #2
 800f262:	e0e6      	b.n	800f432 <HAL_TIM_ConfigClockSource+0x1ea>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2201      	movs	r2, #1
 800f268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2202      	movs	r2, #2
 800f270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f28e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a67      	ldr	r2, [pc, #412]	@ (800f43c <HAL_TIM_ConfigClockSource+0x1f4>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	f000 80b1 	beq.w	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f2a4:	4a65      	ldr	r2, [pc, #404]	@ (800f43c <HAL_TIM_ConfigClockSource+0x1f4>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	f200 80b6 	bhi.w	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2ac:	4a64      	ldr	r2, [pc, #400]	@ (800f440 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	f000 80a9 	beq.w	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f2b4:	4a62      	ldr	r2, [pc, #392]	@ (800f440 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	f200 80ae 	bhi.w	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2bc:	4a61      	ldr	r2, [pc, #388]	@ (800f444 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	f000 80a1 	beq.w	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f2c4:	4a5f      	ldr	r2, [pc, #380]	@ (800f444 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	f200 80a6 	bhi.w	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2cc:	4a5e      	ldr	r2, [pc, #376]	@ (800f448 <HAL_TIM_ConfigClockSource+0x200>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	f000 8099 	beq.w	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f2d4:	4a5c      	ldr	r2, [pc, #368]	@ (800f448 <HAL_TIM_ConfigClockSource+0x200>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	f200 809e 	bhi.w	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f2e0:	f000 8091 	beq.w	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f2e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f2e8:	f200 8096 	bhi.w	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2f0:	f000 8089 	beq.w	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f2f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2f8:	f200 808e 	bhi.w	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f300:	d03e      	beq.n	800f380 <HAL_TIM_ConfigClockSource+0x138>
 800f302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f306:	f200 8087 	bhi.w	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f30a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f30e:	f000 8086 	beq.w	800f41e <HAL_TIM_ConfigClockSource+0x1d6>
 800f312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f316:	d87f      	bhi.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f318:	2b70      	cmp	r3, #112	@ 0x70
 800f31a:	d01a      	beq.n	800f352 <HAL_TIM_ConfigClockSource+0x10a>
 800f31c:	2b70      	cmp	r3, #112	@ 0x70
 800f31e:	d87b      	bhi.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f320:	2b60      	cmp	r3, #96	@ 0x60
 800f322:	d050      	beq.n	800f3c6 <HAL_TIM_ConfigClockSource+0x17e>
 800f324:	2b60      	cmp	r3, #96	@ 0x60
 800f326:	d877      	bhi.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f328:	2b50      	cmp	r3, #80	@ 0x50
 800f32a:	d03c      	beq.n	800f3a6 <HAL_TIM_ConfigClockSource+0x15e>
 800f32c:	2b50      	cmp	r3, #80	@ 0x50
 800f32e:	d873      	bhi.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f330:	2b40      	cmp	r3, #64	@ 0x40
 800f332:	d058      	beq.n	800f3e6 <HAL_TIM_ConfigClockSource+0x19e>
 800f334:	2b40      	cmp	r3, #64	@ 0x40
 800f336:	d86f      	bhi.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f338:	2b30      	cmp	r3, #48	@ 0x30
 800f33a:	d064      	beq.n	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f33c:	2b30      	cmp	r3, #48	@ 0x30
 800f33e:	d86b      	bhi.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f340:	2b20      	cmp	r3, #32
 800f342:	d060      	beq.n	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f344:	2b20      	cmp	r3, #32
 800f346:	d867      	bhi.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d05c      	beq.n	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f34c:	2b10      	cmp	r3, #16
 800f34e:	d05a      	beq.n	800f406 <HAL_TIM_ConfigClockSource+0x1be>
 800f350:	e062      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f362:	f000 fdcb 	bl	800fefc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	68ba      	ldr	r2, [r7, #8]
 800f37c:	609a      	str	r2, [r3, #8]
      break;
 800f37e:	e04f      	b.n	800f420 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f390:	f000 fdb4 	bl	800fefc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689a      	ldr	r2, [r3, #8]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f3a2:	609a      	str	r2, [r3, #8]
      break;
 800f3a4:	e03c      	b.n	800f420 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	f000 fd26 	bl	800fe04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2150      	movs	r1, #80	@ 0x50
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fd7f 	bl	800fec2 <TIM_ITRx_SetConfig>
      break;
 800f3c4:	e02c      	b.n	800f420 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	f000 fd45 	bl	800fe62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2160      	movs	r1, #96	@ 0x60
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f000 fd6f 	bl	800fec2 <TIM_ITRx_SetConfig>
      break;
 800f3e4:	e01c      	b.n	800f420 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	f000 fd06 	bl	800fe04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2140      	movs	r1, #64	@ 0x40
 800f3fe:	4618      	mov	r0, r3
 800f400:	f000 fd5f 	bl	800fec2 <TIM_ITRx_SetConfig>
      break;
 800f404:	e00c      	b.n	800f420 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	4619      	mov	r1, r3
 800f410:	4610      	mov	r0, r2
 800f412:	f000 fd56 	bl	800fec2 <TIM_ITRx_SetConfig>
      break;
 800f416:	e003      	b.n	800f420 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800f418:	2301      	movs	r3, #1
 800f41a:	73fb      	strb	r3, [r7, #15]
      break;
 800f41c:	e000      	b.n	800f420 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800f41e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2201      	movs	r2, #1
 800f424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f430:	7bfb      	ldrb	r3, [r7, #15]
}
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	00100070 	.word	0x00100070
 800f440:	00100040 	.word	0x00100040
 800f444:	00100030 	.word	0x00100030
 800f448:	00100020 	.word	0x00100020

0800f44c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a6e      	ldr	r2, [pc, #440]	@ (800f618 <TIM_Base_SetConfig+0x1cc>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d02b      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a6d      	ldr	r2, [pc, #436]	@ (800f61c <TIM_Base_SetConfig+0x1d0>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d027      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f472:	d023      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f47a:	d01f      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	4a68      	ldr	r2, [pc, #416]	@ (800f620 <TIM_Base_SetConfig+0x1d4>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d01b      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a67      	ldr	r2, [pc, #412]	@ (800f624 <TIM_Base_SetConfig+0x1d8>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d017      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a66      	ldr	r2, [pc, #408]	@ (800f628 <TIM_Base_SetConfig+0x1dc>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d013      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a65      	ldr	r2, [pc, #404]	@ (800f62c <TIM_Base_SetConfig+0x1e0>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d00f      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a64      	ldr	r2, [pc, #400]	@ (800f630 <TIM_Base_SetConfig+0x1e4>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d00b      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a63      	ldr	r2, [pc, #396]	@ (800f634 <TIM_Base_SetConfig+0x1e8>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d007      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a62      	ldr	r2, [pc, #392]	@ (800f638 <TIM_Base_SetConfig+0x1ec>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d003      	beq.n	800f4bc <TIM_Base_SetConfig+0x70>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a61      	ldr	r2, [pc, #388]	@ (800f63c <TIM_Base_SetConfig+0x1f0>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d108      	bne.n	800f4ce <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4a51      	ldr	r2, [pc, #324]	@ (800f618 <TIM_Base_SetConfig+0x1cc>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d043      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4a50      	ldr	r2, [pc, #320]	@ (800f61c <TIM_Base_SetConfig+0x1d0>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d03f      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4e4:	d03b      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4ec:	d037      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4a4b      	ldr	r2, [pc, #300]	@ (800f620 <TIM_Base_SetConfig+0x1d4>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d033      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4a4a      	ldr	r2, [pc, #296]	@ (800f624 <TIM_Base_SetConfig+0x1d8>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d02f      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4a49      	ldr	r2, [pc, #292]	@ (800f628 <TIM_Base_SetConfig+0x1dc>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d02b      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4a48      	ldr	r2, [pc, #288]	@ (800f62c <TIM_Base_SetConfig+0x1e0>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d027      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4a47      	ldr	r2, [pc, #284]	@ (800f630 <TIM_Base_SetConfig+0x1e4>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d023      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4a46      	ldr	r2, [pc, #280]	@ (800f634 <TIM_Base_SetConfig+0x1e8>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d01f      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a45      	ldr	r2, [pc, #276]	@ (800f638 <TIM_Base_SetConfig+0x1ec>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d01b      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a44      	ldr	r2, [pc, #272]	@ (800f63c <TIM_Base_SetConfig+0x1f0>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d017      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a43      	ldr	r2, [pc, #268]	@ (800f640 <TIM_Base_SetConfig+0x1f4>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d013      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a42      	ldr	r2, [pc, #264]	@ (800f644 <TIM_Base_SetConfig+0x1f8>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d00f      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a41      	ldr	r2, [pc, #260]	@ (800f648 <TIM_Base_SetConfig+0x1fc>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d00b      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a40      	ldr	r2, [pc, #256]	@ (800f64c <TIM_Base_SetConfig+0x200>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d007      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a3f      	ldr	r2, [pc, #252]	@ (800f650 <TIM_Base_SetConfig+0x204>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d003      	beq.n	800f55e <TIM_Base_SetConfig+0x112>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a3e      	ldr	r2, [pc, #248]	@ (800f654 <TIM_Base_SetConfig+0x208>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d108      	bne.n	800f570 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	695b      	ldr	r3, [r3, #20]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	689a      	ldr	r2, [r3, #8]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a20      	ldr	r2, [pc, #128]	@ (800f618 <TIM_Base_SetConfig+0x1cc>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d023      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a1f      	ldr	r2, [pc, #124]	@ (800f61c <TIM_Base_SetConfig+0x1d0>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d01f      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a24      	ldr	r2, [pc, #144]	@ (800f638 <TIM_Base_SetConfig+0x1ec>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d01b      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a23      	ldr	r2, [pc, #140]	@ (800f63c <TIM_Base_SetConfig+0x1f0>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d017      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a22      	ldr	r2, [pc, #136]	@ (800f640 <TIM_Base_SetConfig+0x1f4>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d013      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a21      	ldr	r2, [pc, #132]	@ (800f644 <TIM_Base_SetConfig+0x1f8>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d00f      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a20      	ldr	r2, [pc, #128]	@ (800f648 <TIM_Base_SetConfig+0x1fc>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d00b      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a1f      	ldr	r2, [pc, #124]	@ (800f64c <TIM_Base_SetConfig+0x200>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d007      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a1e      	ldr	r2, [pc, #120]	@ (800f650 <TIM_Base_SetConfig+0x204>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d003      	beq.n	800f5e4 <TIM_Base_SetConfig+0x198>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a1d      	ldr	r2, [pc, #116]	@ (800f654 <TIM_Base_SetConfig+0x208>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d103      	bne.n	800f5ec <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	691a      	ldr	r2, [r3, #16]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	f003 0301 	and.w	r3, r3, #1
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d105      	bne.n	800f60a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	691b      	ldr	r3, [r3, #16]
 800f602:	f023 0201 	bic.w	r2, r3, #1
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	611a      	str	r2, [r3, #16]
  }
}
 800f60a:	bf00      	nop
 800f60c:	3714      	adds	r7, #20
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	40012c00 	.word	0x40012c00
 800f61c:	50012c00 	.word	0x50012c00
 800f620:	40000400 	.word	0x40000400
 800f624:	50000400 	.word	0x50000400
 800f628:	40000800 	.word	0x40000800
 800f62c:	50000800 	.word	0x50000800
 800f630:	40000c00 	.word	0x40000c00
 800f634:	50000c00 	.word	0x50000c00
 800f638:	40013400 	.word	0x40013400
 800f63c:	50013400 	.word	0x50013400
 800f640:	40014000 	.word	0x40014000
 800f644:	50014000 	.word	0x50014000
 800f648:	40014400 	.word	0x40014400
 800f64c:	50014400 	.word	0x50014400
 800f650:	40014800 	.word	0x40014800
 800f654:	50014800 	.word	0x50014800

0800f658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f658:	b480      	push	{r7}
 800f65a:	b087      	sub	sp, #28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a1b      	ldr	r3, [r3, #32]
 800f666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a1b      	ldr	r3, [r3, #32]
 800f66c:	f023 0201 	bic.w	r2, r3, #1
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	699b      	ldr	r3, [r3, #24]
 800f67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f023 0303 	bic.w	r3, r3, #3
 800f692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	f023 0302 	bic.w	r3, r3, #2
 800f6a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	697a      	ldr	r2, [r7, #20]
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a40      	ldr	r2, [pc, #256]	@ (800f7b4 <TIM_OC1_SetConfig+0x15c>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d023      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4a3f      	ldr	r2, [pc, #252]	@ (800f7b8 <TIM_OC1_SetConfig+0x160>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d01f      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4a3e      	ldr	r2, [pc, #248]	@ (800f7bc <TIM_OC1_SetConfig+0x164>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d01b      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4a3d      	ldr	r2, [pc, #244]	@ (800f7c0 <TIM_OC1_SetConfig+0x168>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d017      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4a3c      	ldr	r2, [pc, #240]	@ (800f7c4 <TIM_OC1_SetConfig+0x16c>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d013      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4a3b      	ldr	r2, [pc, #236]	@ (800f7c8 <TIM_OC1_SetConfig+0x170>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d00f      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4a3a      	ldr	r2, [pc, #232]	@ (800f7cc <TIM_OC1_SetConfig+0x174>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d00b      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	4a39      	ldr	r2, [pc, #228]	@ (800f7d0 <TIM_OC1_SetConfig+0x178>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d007      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	4a38      	ldr	r2, [pc, #224]	@ (800f7d4 <TIM_OC1_SetConfig+0x17c>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d003      	beq.n	800f700 <TIM_OC1_SetConfig+0xa8>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a37      	ldr	r2, [pc, #220]	@ (800f7d8 <TIM_OC1_SetConfig+0x180>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d10c      	bne.n	800f71a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	f023 0308 	bic.w	r3, r3, #8
 800f706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	4313      	orrs	r3, r2
 800f710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	f023 0304 	bic.w	r3, r3, #4
 800f718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4a25      	ldr	r2, [pc, #148]	@ (800f7b4 <TIM_OC1_SetConfig+0x15c>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d023      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4a24      	ldr	r2, [pc, #144]	@ (800f7b8 <TIM_OC1_SetConfig+0x160>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d01f      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4a23      	ldr	r2, [pc, #140]	@ (800f7bc <TIM_OC1_SetConfig+0x164>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d01b      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4a22      	ldr	r2, [pc, #136]	@ (800f7c0 <TIM_OC1_SetConfig+0x168>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d017      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a21      	ldr	r2, [pc, #132]	@ (800f7c4 <TIM_OC1_SetConfig+0x16c>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d013      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a20      	ldr	r2, [pc, #128]	@ (800f7c8 <TIM_OC1_SetConfig+0x170>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d00f      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a1f      	ldr	r2, [pc, #124]	@ (800f7cc <TIM_OC1_SetConfig+0x174>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d00b      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a1e      	ldr	r2, [pc, #120]	@ (800f7d0 <TIM_OC1_SetConfig+0x178>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d007      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a1d      	ldr	r2, [pc, #116]	@ (800f7d4 <TIM_OC1_SetConfig+0x17c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d003      	beq.n	800f76a <TIM_OC1_SetConfig+0x112>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4a1c      	ldr	r2, [pc, #112]	@ (800f7d8 <TIM_OC1_SetConfig+0x180>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d111      	bne.n	800f78e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	4313      	orrs	r3, r2
 800f782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	693a      	ldr	r2, [r7, #16]
 800f792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	697a      	ldr	r2, [r7, #20]
 800f7a6:	621a      	str	r2, [r3, #32]
}
 800f7a8:	bf00      	nop
 800f7aa:	371c      	adds	r7, #28
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr
 800f7b4:	40012c00 	.word	0x40012c00
 800f7b8:	50012c00 	.word	0x50012c00
 800f7bc:	40013400 	.word	0x40013400
 800f7c0:	50013400 	.word	0x50013400
 800f7c4:	40014000 	.word	0x40014000
 800f7c8:	50014000 	.word	0x50014000
 800f7cc:	40014400 	.word	0x40014400
 800f7d0:	50014400 	.word	0x50014400
 800f7d4:	40014800 	.word	0x40014800
 800f7d8:	50014800 	.word	0x50014800

0800f7dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b087      	sub	sp, #28
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a1b      	ldr	r3, [r3, #32]
 800f7ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6a1b      	ldr	r3, [r3, #32]
 800f7f0:	f023 0210 	bic.w	r2, r3, #16
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	699b      	ldr	r3, [r3, #24]
 800f802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f80a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	021b      	lsls	r3, r3, #8
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	4313      	orrs	r3, r2
 800f822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	f023 0320 	bic.w	r3, r3, #32
 800f82a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	011b      	lsls	r3, r3, #4
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	4313      	orrs	r3, r2
 800f836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a36      	ldr	r2, [pc, #216]	@ (800f914 <TIM_OC2_SetConfig+0x138>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d00b      	beq.n	800f858 <TIM_OC2_SetConfig+0x7c>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a35      	ldr	r2, [pc, #212]	@ (800f918 <TIM_OC2_SetConfig+0x13c>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d007      	beq.n	800f858 <TIM_OC2_SetConfig+0x7c>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a34      	ldr	r2, [pc, #208]	@ (800f91c <TIM_OC2_SetConfig+0x140>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d003      	beq.n	800f858 <TIM_OC2_SetConfig+0x7c>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a33      	ldr	r2, [pc, #204]	@ (800f920 <TIM_OC2_SetConfig+0x144>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d10d      	bne.n	800f874 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f85e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	011b      	lsls	r3, r3, #4
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	4313      	orrs	r3, r2
 800f86a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a27      	ldr	r2, [pc, #156]	@ (800f914 <TIM_OC2_SetConfig+0x138>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d023      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a26      	ldr	r2, [pc, #152]	@ (800f918 <TIM_OC2_SetConfig+0x13c>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d01f      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a25      	ldr	r2, [pc, #148]	@ (800f91c <TIM_OC2_SetConfig+0x140>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d01b      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a24      	ldr	r2, [pc, #144]	@ (800f920 <TIM_OC2_SetConfig+0x144>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d017      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a23      	ldr	r2, [pc, #140]	@ (800f924 <TIM_OC2_SetConfig+0x148>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d013      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a22      	ldr	r2, [pc, #136]	@ (800f928 <TIM_OC2_SetConfig+0x14c>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d00f      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a21      	ldr	r2, [pc, #132]	@ (800f92c <TIM_OC2_SetConfig+0x150>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d00b      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a20      	ldr	r2, [pc, #128]	@ (800f930 <TIM_OC2_SetConfig+0x154>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d007      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f934 <TIM_OC2_SetConfig+0x158>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d003      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xe8>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a1e      	ldr	r2, [pc, #120]	@ (800f938 <TIM_OC2_SetConfig+0x15c>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d113      	bne.n	800f8ec <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f8ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	695b      	ldr	r3, [r3, #20]
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	693a      	ldr	r2, [r7, #16]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	693a      	ldr	r2, [r7, #16]
 800f8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	697a      	ldr	r2, [r7, #20]
 800f904:	621a      	str	r2, [r3, #32]
}
 800f906:	bf00      	nop
 800f908:	371c      	adds	r7, #28
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	40012c00 	.word	0x40012c00
 800f918:	50012c00 	.word	0x50012c00
 800f91c:	40013400 	.word	0x40013400
 800f920:	50013400 	.word	0x50013400
 800f924:	40014000 	.word	0x40014000
 800f928:	50014000 	.word	0x50014000
 800f92c:	40014400 	.word	0x40014400
 800f930:	50014400 	.word	0x50014400
 800f934:	40014800 	.word	0x40014800
 800f938:	50014800 	.word	0x50014800

0800f93c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b087      	sub	sp, #28
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6a1b      	ldr	r3, [r3, #32]
 800f950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f96a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f023 0303 	bic.w	r3, r3, #3
 800f976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	4313      	orrs	r3, r2
 800f980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	689b      	ldr	r3, [r3, #8]
 800f98e:	021b      	lsls	r3, r3, #8
 800f990:	697a      	ldr	r2, [r7, #20]
 800f992:	4313      	orrs	r3, r2
 800f994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a35      	ldr	r2, [pc, #212]	@ (800fa70 <TIM_OC3_SetConfig+0x134>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d00b      	beq.n	800f9b6 <TIM_OC3_SetConfig+0x7a>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4a34      	ldr	r2, [pc, #208]	@ (800fa74 <TIM_OC3_SetConfig+0x138>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d007      	beq.n	800f9b6 <TIM_OC3_SetConfig+0x7a>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a33      	ldr	r2, [pc, #204]	@ (800fa78 <TIM_OC3_SetConfig+0x13c>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d003      	beq.n	800f9b6 <TIM_OC3_SetConfig+0x7a>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a32      	ldr	r2, [pc, #200]	@ (800fa7c <TIM_OC3_SetConfig+0x140>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d10d      	bne.n	800f9d2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	021b      	lsls	r3, r3, #8
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a26      	ldr	r2, [pc, #152]	@ (800fa70 <TIM_OC3_SetConfig+0x134>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d023      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a25      	ldr	r2, [pc, #148]	@ (800fa74 <TIM_OC3_SetConfig+0x138>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d01f      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a24      	ldr	r2, [pc, #144]	@ (800fa78 <TIM_OC3_SetConfig+0x13c>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d01b      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4a23      	ldr	r2, [pc, #140]	@ (800fa7c <TIM_OC3_SetConfig+0x140>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d017      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a22      	ldr	r2, [pc, #136]	@ (800fa80 <TIM_OC3_SetConfig+0x144>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d013      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a21      	ldr	r2, [pc, #132]	@ (800fa84 <TIM_OC3_SetConfig+0x148>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d00f      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a20      	ldr	r2, [pc, #128]	@ (800fa88 <TIM_OC3_SetConfig+0x14c>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d00b      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4a1f      	ldr	r2, [pc, #124]	@ (800fa8c <TIM_OC3_SetConfig+0x150>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d007      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4a1e      	ldr	r2, [pc, #120]	@ (800fa90 <TIM_OC3_SetConfig+0x154>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d003      	beq.n	800fa22 <TIM_OC3_SetConfig+0xe6>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a1d      	ldr	r2, [pc, #116]	@ (800fa94 <TIM_OC3_SetConfig+0x158>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d113      	bne.n	800fa4a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fa30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	011b      	lsls	r3, r3, #4
 800fa38:	693a      	ldr	r2, [r7, #16]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	011b      	lsls	r3, r3, #4
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	693a      	ldr	r2, [r7, #16]
 800fa4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	685a      	ldr	r2, [r3, #4]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	697a      	ldr	r2, [r7, #20]
 800fa62:	621a      	str	r2, [r3, #32]
}
 800fa64:	bf00      	nop
 800fa66:	371c      	adds	r7, #28
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	40012c00 	.word	0x40012c00
 800fa74:	50012c00 	.word	0x50012c00
 800fa78:	40013400 	.word	0x40013400
 800fa7c:	50013400 	.word	0x50013400
 800fa80:	40014000 	.word	0x40014000
 800fa84:	50014000 	.word	0x50014000
 800fa88:	40014400 	.word	0x40014400
 800fa8c:	50014400 	.word	0x50014400
 800fa90:	40014800 	.word	0x40014800
 800fa94:	50014800 	.word	0x50014800

0800fa98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b087      	sub	sp, #28
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6a1b      	ldr	r3, [r3, #32]
 800faa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6a1b      	ldr	r3, [r3, #32]
 800faac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	69db      	ldr	r3, [r3, #28]
 800fabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800faca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	021b      	lsls	r3, r3, #8
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	4313      	orrs	r3, r2
 800fade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	031b      	lsls	r3, r3, #12
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	4313      	orrs	r3, r2
 800faf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a36      	ldr	r2, [pc, #216]	@ (800fbd0 <TIM_OC4_SetConfig+0x138>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d00b      	beq.n	800fb14 <TIM_OC4_SetConfig+0x7c>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a35      	ldr	r2, [pc, #212]	@ (800fbd4 <TIM_OC4_SetConfig+0x13c>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d007      	beq.n	800fb14 <TIM_OC4_SetConfig+0x7c>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a34      	ldr	r2, [pc, #208]	@ (800fbd8 <TIM_OC4_SetConfig+0x140>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d003      	beq.n	800fb14 <TIM_OC4_SetConfig+0x7c>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4a33      	ldr	r2, [pc, #204]	@ (800fbdc <TIM_OC4_SetConfig+0x144>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d10d      	bne.n	800fb30 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	031b      	lsls	r3, r3, #12
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	4313      	orrs	r3, r2
 800fb26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a27      	ldr	r2, [pc, #156]	@ (800fbd0 <TIM_OC4_SetConfig+0x138>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d023      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a26      	ldr	r2, [pc, #152]	@ (800fbd4 <TIM_OC4_SetConfig+0x13c>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d01f      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a25      	ldr	r2, [pc, #148]	@ (800fbd8 <TIM_OC4_SetConfig+0x140>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d01b      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a24      	ldr	r2, [pc, #144]	@ (800fbdc <TIM_OC4_SetConfig+0x144>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d017      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a23      	ldr	r2, [pc, #140]	@ (800fbe0 <TIM_OC4_SetConfig+0x148>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d013      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a22      	ldr	r2, [pc, #136]	@ (800fbe4 <TIM_OC4_SetConfig+0x14c>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d00f      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a21      	ldr	r2, [pc, #132]	@ (800fbe8 <TIM_OC4_SetConfig+0x150>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d00b      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a20      	ldr	r2, [pc, #128]	@ (800fbec <TIM_OC4_SetConfig+0x154>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d007      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4a1f      	ldr	r2, [pc, #124]	@ (800fbf0 <TIM_OC4_SetConfig+0x158>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d003      	beq.n	800fb80 <TIM_OC4_SetConfig+0xe8>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a1e      	ldr	r2, [pc, #120]	@ (800fbf4 <TIM_OC4_SetConfig+0x15c>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d113      	bne.n	800fba8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	695b      	ldr	r3, [r3, #20]
 800fb94:	019b      	lsls	r3, r3, #6
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	019b      	lsls	r3, r3, #6
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	621a      	str	r2, [r3, #32]
}
 800fbc2:	bf00      	nop
 800fbc4:	371c      	adds	r7, #28
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	40012c00 	.word	0x40012c00
 800fbd4:	50012c00 	.word	0x50012c00
 800fbd8:	40013400 	.word	0x40013400
 800fbdc:	50013400 	.word	0x50013400
 800fbe0:	40014000 	.word	0x40014000
 800fbe4:	50014000 	.word	0x50014000
 800fbe8:	40014400 	.word	0x40014400
 800fbec:	50014400 	.word	0x50014400
 800fbf0:	40014800 	.word	0x40014800
 800fbf4:	50014800 	.word	0x50014800

0800fbf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b087      	sub	sp, #28
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6a1b      	ldr	r3, [r3, #32]
 800fc0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	68fa      	ldr	r2, [r7, #12]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fc3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	041b      	lsls	r3, r3, #16
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4a21      	ldr	r2, [pc, #132]	@ (800fcd4 <TIM_OC5_SetConfig+0xdc>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d023      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4a20      	ldr	r2, [pc, #128]	@ (800fcd8 <TIM_OC5_SetConfig+0xe0>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d01f      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4a1f      	ldr	r2, [pc, #124]	@ (800fcdc <TIM_OC5_SetConfig+0xe4>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d01b      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4a1e      	ldr	r2, [pc, #120]	@ (800fce0 <TIM_OC5_SetConfig+0xe8>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d017      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4a1d      	ldr	r2, [pc, #116]	@ (800fce4 <TIM_OC5_SetConfig+0xec>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d013      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a1c      	ldr	r2, [pc, #112]	@ (800fce8 <TIM_OC5_SetConfig+0xf0>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d00f      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a1b      	ldr	r2, [pc, #108]	@ (800fcec <TIM_OC5_SetConfig+0xf4>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d00b      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a1a      	ldr	r2, [pc, #104]	@ (800fcf0 <TIM_OC5_SetConfig+0xf8>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d007      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a19      	ldr	r2, [pc, #100]	@ (800fcf4 <TIM_OC5_SetConfig+0xfc>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d003      	beq.n	800fc9a <TIM_OC5_SetConfig+0xa2>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4a18      	ldr	r2, [pc, #96]	@ (800fcf8 <TIM_OC5_SetConfig+0x100>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d109      	bne.n	800fcae <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fca0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	695b      	ldr	r3, [r3, #20]
 800fca6:	021b      	lsls	r3, r3, #8
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	697a      	ldr	r2, [r7, #20]
 800fcb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	685a      	ldr	r2, [r3, #4]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	693a      	ldr	r2, [r7, #16]
 800fcc6:	621a      	str	r2, [r3, #32]
}
 800fcc8:	bf00      	nop
 800fcca:	371c      	adds	r7, #28
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr
 800fcd4:	40012c00 	.word	0x40012c00
 800fcd8:	50012c00 	.word	0x50012c00
 800fcdc:	40013400 	.word	0x40013400
 800fce0:	50013400 	.word	0x50013400
 800fce4:	40014000 	.word	0x40014000
 800fce8:	50014000 	.word	0x50014000
 800fcec:	40014400 	.word	0x40014400
 800fcf0:	50014400 	.word	0x50014400
 800fcf4:	40014800 	.word	0x40014800
 800fcf8:	50014800 	.word	0x50014800

0800fcfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b087      	sub	sp, #28
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a1b      	ldr	r3, [r3, #32]
 800fd0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6a1b      	ldr	r3, [r3, #32]
 800fd10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fd2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	021b      	lsls	r3, r3, #8
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fd42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	051b      	lsls	r3, r3, #20
 800fd4a:	693a      	ldr	r2, [r7, #16]
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4a22      	ldr	r2, [pc, #136]	@ (800fddc <TIM_OC6_SetConfig+0xe0>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d023      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a21      	ldr	r2, [pc, #132]	@ (800fde0 <TIM_OC6_SetConfig+0xe4>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d01f      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a20      	ldr	r2, [pc, #128]	@ (800fde4 <TIM_OC6_SetConfig+0xe8>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d01b      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4a1f      	ldr	r2, [pc, #124]	@ (800fde8 <TIM_OC6_SetConfig+0xec>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d017      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a1e      	ldr	r2, [pc, #120]	@ (800fdec <TIM_OC6_SetConfig+0xf0>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d013      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a1d      	ldr	r2, [pc, #116]	@ (800fdf0 <TIM_OC6_SetConfig+0xf4>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d00f      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4a1c      	ldr	r2, [pc, #112]	@ (800fdf4 <TIM_OC6_SetConfig+0xf8>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d00b      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a1b      	ldr	r2, [pc, #108]	@ (800fdf8 <TIM_OC6_SetConfig+0xfc>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d007      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4a1a      	ldr	r2, [pc, #104]	@ (800fdfc <TIM_OC6_SetConfig+0x100>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d003      	beq.n	800fda0 <TIM_OC6_SetConfig+0xa4>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	4a19      	ldr	r2, [pc, #100]	@ (800fe00 <TIM_OC6_SetConfig+0x104>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d109      	bne.n	800fdb4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fda6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	695b      	ldr	r3, [r3, #20]
 800fdac:	029b      	lsls	r3, r3, #10
 800fdae:	697a      	ldr	r2, [r7, #20]
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	697a      	ldr	r2, [r7, #20]
 800fdb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	685a      	ldr	r2, [r3, #4]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	693a      	ldr	r2, [r7, #16]
 800fdcc:	621a      	str	r2, [r3, #32]
}
 800fdce:	bf00      	nop
 800fdd0:	371c      	adds	r7, #28
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	40012c00 	.word	0x40012c00
 800fde0:	50012c00 	.word	0x50012c00
 800fde4:	40013400 	.word	0x40013400
 800fde8:	50013400 	.word	0x50013400
 800fdec:	40014000 	.word	0x40014000
 800fdf0:	50014000 	.word	0x50014000
 800fdf4:	40014400 	.word	0x40014400
 800fdf8:	50014400 	.word	0x50014400
 800fdfc:	40014800 	.word	0x40014800
 800fe00:	50014800 	.word	0x50014800

0800fe04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b087      	sub	sp, #28
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6a1b      	ldr	r3, [r3, #32]
 800fe14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6a1b      	ldr	r3, [r3, #32]
 800fe1a:	f023 0201 	bic.w	r2, r3, #1
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	699b      	ldr	r3, [r3, #24]
 800fe26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fe2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	011b      	lsls	r3, r3, #4
 800fe34:	693a      	ldr	r2, [r7, #16]
 800fe36:	4313      	orrs	r3, r2
 800fe38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	f023 030a 	bic.w	r3, r3, #10
 800fe40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe42:	697a      	ldr	r2, [r7, #20]
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	693a      	ldr	r2, [r7, #16]
 800fe4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	697a      	ldr	r2, [r7, #20]
 800fe54:	621a      	str	r2, [r3, #32]
}
 800fe56:	bf00      	nop
 800fe58:	371c      	adds	r7, #28
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr

0800fe62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe62:	b480      	push	{r7}
 800fe64:	b087      	sub	sp, #28
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	60f8      	str	r0, [r7, #12]
 800fe6a:	60b9      	str	r1, [r7, #8]
 800fe6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6a1b      	ldr	r3, [r3, #32]
 800fe78:	f023 0210 	bic.w	r2, r3, #16
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fe8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	031b      	lsls	r3, r3, #12
 800fe92:	693a      	ldr	r2, [r7, #16]
 800fe94:	4313      	orrs	r3, r2
 800fe96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fe9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	011b      	lsls	r3, r3, #4
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	693a      	ldr	r2, [r7, #16]
 800feae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	697a      	ldr	r2, [r7, #20]
 800feb4:	621a      	str	r2, [r3, #32]
}
 800feb6:	bf00      	nop
 800feb8:	371c      	adds	r7, #28
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b085      	sub	sp, #20
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800fed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fedc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fede:	683a      	ldr	r2, [r7, #0]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	f043 0307 	orr.w	r3, r3, #7
 800fee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	609a      	str	r2, [r3, #8]
}
 800fef0:	bf00      	nop
 800fef2:	3714      	adds	r7, #20
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b087      	sub	sp, #28
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
 800ff08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	021a      	lsls	r2, r3, #8
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	431a      	orrs	r2, r3
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	697a      	ldr	r2, [r7, #20]
 800ff2e:	609a      	str	r2, [r3, #8]
}
 800ff30:	bf00      	nop
 800ff32:	371c      	adds	r7, #28
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d101      	bne.n	800ff54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff50:	2302      	movs	r3, #2
 800ff52:	e097      	b.n	8010084 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2201      	movs	r2, #1
 800ff58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2202      	movs	r2, #2
 800ff60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4a45      	ldr	r2, [pc, #276]	@ (8010090 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d00e      	beq.n	800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	4a44      	ldr	r2, [pc, #272]	@ (8010094 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ff84:	4293      	cmp	r3, r2
 800ff86:	d009      	beq.n	800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4a42      	ldr	r2, [pc, #264]	@ (8010098 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d004      	beq.n	800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4a41      	ldr	r2, [pc, #260]	@ (801009c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d108      	bne.n	800ffae <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ffa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ffb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a2f      	ldr	r2, [pc, #188]	@ (8010090 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d040      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4a2e      	ldr	r2, [pc, #184]	@ (8010094 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d03b      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffe8:	d036      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fff2:	d031      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a29      	ldr	r2, [pc, #164]	@ (80100a0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d02c      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a28      	ldr	r2, [pc, #160]	@ (80100a4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d027      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a26      	ldr	r2, [pc, #152]	@ (80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d022      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a25      	ldr	r2, [pc, #148]	@ (80100ac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d01d      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a23      	ldr	r2, [pc, #140]	@ (80100b0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d018      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a22      	ldr	r2, [pc, #136]	@ (80100b4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d013      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a18      	ldr	r2, [pc, #96]	@ (8010098 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d00e      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a17      	ldr	r2, [pc, #92]	@ (801009c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d009      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a1b      	ldr	r2, [pc, #108]	@ (80100b8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d004      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a1a      	ldr	r2, [pc, #104]	@ (80100bc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d10c      	bne.n	8010072 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801005e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	4313      	orrs	r3, r2
 8010068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2201      	movs	r2, #1
 8010076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3714      	adds	r7, #20
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	40012c00 	.word	0x40012c00
 8010094:	50012c00 	.word	0x50012c00
 8010098:	40013400 	.word	0x40013400
 801009c:	50013400 	.word	0x50013400
 80100a0:	40000400 	.word	0x40000400
 80100a4:	50000400 	.word	0x50000400
 80100a8:	40000800 	.word	0x40000800
 80100ac:	50000800 	.word	0x50000800
 80100b0:	40000c00 	.word	0x40000c00
 80100b4:	50000c00 	.word	0x50000c00
 80100b8:	40014000 	.word	0x40014000
 80100bc:	50014000 	.word	0x50014000

080100c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e042      	b.n	8010158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d106      	bne.n	80100ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7f2 f907 	bl	80022f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2224      	movs	r2, #36	@ 0x24
 80100ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f022 0201 	bic.w	r2, r2, #1
 8010100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010106:	2b00      	cmp	r3, #0
 8010108:	d002      	beq.n	8010110 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 fd02 	bl	8010b14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fb51 	bl	80107b8 <UART_SetConfig>
 8010116:	4603      	mov	r3, r0
 8010118:	2b01      	cmp	r3, #1
 801011a:	d101      	bne.n	8010120 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801011c:	2301      	movs	r3, #1
 801011e:	e01b      	b.n	8010158 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801012e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	689a      	ldr	r2, [r3, #8]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801013e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f042 0201 	orr.w	r2, r2, #1
 801014e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 fd81 	bl	8010c58 <UART_CheckIdleState>
 8010156:	4603      	mov	r3, r0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b0ba      	sub	sp, #232	@ 0xe8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	69db      	ldr	r3, [r3, #28]
 801016e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801018a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801018e:	4013      	ands	r3, r2
 8010190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010198:	2b00      	cmp	r3, #0
 801019a:	d11b      	bne.n	80101d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801019c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101a0:	f003 0320 	and.w	r3, r3, #32
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d015      	beq.n	80101d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101ac:	f003 0320 	and.w	r3, r3, #32
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d105      	bne.n	80101c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d009      	beq.n	80101d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f000 82cb 	beq.w	8010760 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	4798      	blx	r3
      }
      return;
 80101d2:	e2c5      	b.n	8010760 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80101d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f000 8123 	beq.w	8010424 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80101de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80101e2:	4b8d      	ldr	r3, [pc, #564]	@ (8010418 <HAL_UART_IRQHandler+0x2b8>)
 80101e4:	4013      	ands	r3, r2
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d106      	bne.n	80101f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80101ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80101ee:	4b8b      	ldr	r3, [pc, #556]	@ (801041c <HAL_UART_IRQHandler+0x2bc>)
 80101f0:	4013      	ands	r3, r2
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f000 8116 	beq.w	8010424 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101fc:	f003 0301 	and.w	r3, r3, #1
 8010200:	2b00      	cmp	r3, #0
 8010202:	d011      	beq.n	8010228 <HAL_UART_IRQHandler+0xc8>
 8010204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801020c:	2b00      	cmp	r3, #0
 801020e:	d00b      	beq.n	8010228 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2201      	movs	r2, #1
 8010216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801021e:	f043 0201 	orr.w	r2, r3, #1
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801022c:	f003 0302 	and.w	r3, r3, #2
 8010230:	2b00      	cmp	r3, #0
 8010232:	d011      	beq.n	8010258 <HAL_UART_IRQHandler+0xf8>
 8010234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00b      	beq.n	8010258 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2202      	movs	r2, #2
 8010246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801024e:	f043 0204 	orr.w	r2, r3, #4
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801025c:	f003 0304 	and.w	r3, r3, #4
 8010260:	2b00      	cmp	r3, #0
 8010262:	d011      	beq.n	8010288 <HAL_UART_IRQHandler+0x128>
 8010264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010268:	f003 0301 	and.w	r3, r3, #1
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00b      	beq.n	8010288 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2204      	movs	r2, #4
 8010276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801027e:	f043 0202 	orr.w	r2, r3, #2
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801028c:	f003 0308 	and.w	r3, r3, #8
 8010290:	2b00      	cmp	r3, #0
 8010292:	d017      	beq.n	80102c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010298:	f003 0320 	and.w	r3, r3, #32
 801029c:	2b00      	cmp	r3, #0
 801029e:	d105      	bne.n	80102ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80102a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80102a4:	4b5c      	ldr	r3, [pc, #368]	@ (8010418 <HAL_UART_IRQHandler+0x2b8>)
 80102a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d00b      	beq.n	80102c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2208      	movs	r2, #8
 80102b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ba:	f043 0208 	orr.w	r2, r3, #8
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80102c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d012      	beq.n	80102f6 <HAL_UART_IRQHandler+0x196>
 80102d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00c      	beq.n	80102f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80102e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ec:	f043 0220 	orr.w	r2, r3, #32
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 8231 	beq.w	8010764 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010306:	f003 0320 	and.w	r3, r3, #32
 801030a:	2b00      	cmp	r3, #0
 801030c:	d013      	beq.n	8010336 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801030e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010312:	f003 0320 	and.w	r3, r3, #32
 8010316:	2b00      	cmp	r3, #0
 8010318:	d105      	bne.n	8010326 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801031a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801031e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010322:	2b00      	cmp	r3, #0
 8010324:	d007      	beq.n	8010336 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801032a:	2b00      	cmp	r3, #0
 801032c:	d003      	beq.n	8010336 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801033c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801034a:	2b40      	cmp	r3, #64	@ 0x40
 801034c:	d005      	beq.n	801035a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801034e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010352:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010356:	2b00      	cmp	r3, #0
 8010358:	d054      	beq.n	8010404 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 fd93 	bl	8010e86 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801036a:	2b40      	cmp	r3, #64	@ 0x40
 801036c:	d146      	bne.n	80103fc <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	3308      	adds	r3, #8
 8010374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010378:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801037c:	e853 3f00 	ldrex	r3, [r3]
 8010380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010384:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801038c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3308      	adds	r3, #8
 8010396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801039a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801039e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80103a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80103aa:	e841 2300 	strex	r3, r2, [r1]
 80103ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80103b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1d9      	bne.n	801036e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d017      	beq.n	80103f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103ca:	4a15      	ldr	r2, [pc, #84]	@ (8010420 <HAL_UART_IRQHandler+0x2c0>)
 80103cc:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7f5 fa07 	bl	80057e8 <HAL_DMA_Abort_IT>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d019      	beq.n	8010414 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80103ee:	4610      	mov	r0, r2
 80103f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103f2:	e00f      	b.n	8010414 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 f9c9 	bl	801078c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103fa:	e00b      	b.n	8010414 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 f9c5 	bl	801078c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010402:	e007      	b.n	8010414 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 f9c1 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2200      	movs	r2, #0
 801040e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010412:	e1a7      	b.n	8010764 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010414:	bf00      	nop
    return;
 8010416:	e1a5      	b.n	8010764 <HAL_UART_IRQHandler+0x604>
 8010418:	10000001 	.word	0x10000001
 801041c:	04000120 	.word	0x04000120
 8010420:	08010f53 	.word	0x08010f53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010428:	2b01      	cmp	r3, #1
 801042a:	f040 8150 	bne.w	80106ce <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801042e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010432:	f003 0310 	and.w	r3, r3, #16
 8010436:	2b00      	cmp	r3, #0
 8010438:	f000 8149 	beq.w	80106ce <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801043c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010440:	f003 0310 	and.w	r3, r3, #16
 8010444:	2b00      	cmp	r3, #0
 8010446:	f000 8142 	beq.w	80106ce <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2210      	movs	r2, #16
 8010450:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	689b      	ldr	r3, [r3, #8]
 8010458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801045c:	2b40      	cmp	r3, #64	@ 0x40
 801045e:	f040 80b8 	bne.w	80105d2 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801046c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010474:	2b00      	cmp	r3, #0
 8010476:	f000 8177 	beq.w	8010768 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010484:	429a      	cmp	r2, r3
 8010486:	f080 816f 	bcs.w	8010768 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801049a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801049c:	2b81      	cmp	r3, #129	@ 0x81
 801049e:	f000 8087 	beq.w	80105b0 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80104ae:	e853 3f00 	ldrex	r3, [r3]
 80104b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80104b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	461a      	mov	r2, r3
 80104c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80104cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80104d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80104d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80104dc:	e841 2300 	strex	r3, r2, [r1]
 80104e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80104e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1da      	bne.n	80104a2 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3308      	adds	r3, #8
 80104f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80104f6:	e853 3f00 	ldrex	r3, [r3]
 80104fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80104fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80104fe:	f023 0301 	bic.w	r3, r3, #1
 8010502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	3308      	adds	r3, #8
 801050c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010510:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010514:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010516:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010518:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801051c:	e841 2300 	strex	r3, r2, [r1]
 8010520:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1e1      	bne.n	80104ec <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	3308      	adds	r3, #8
 801052e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010532:	e853 3f00 	ldrex	r3, [r3]
 8010536:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801053a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801053e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	3308      	adds	r3, #8
 8010548:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801054c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801054e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010550:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010552:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010554:	e841 2300 	strex	r3, r2, [r1]
 8010558:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801055a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801055c:	2b00      	cmp	r3, #0
 801055e:	d1e3      	bne.n	8010528 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2220      	movs	r2, #32
 8010564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010576:	e853 3f00 	ldrex	r3, [r3]
 801057a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801057c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801057e:	f023 0310 	bic.w	r3, r3, #16
 8010582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	461a      	mov	r2, r3
 801058c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010590:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010592:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010594:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010596:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010598:	e841 2300 	strex	r3, r2, [r1]
 801059c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801059e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1e4      	bne.n	801056e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7f5 f8a0 	bl	80056f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2202      	movs	r2, #2
 80105b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f8e8 	bl	80107a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105d0:	e0ca      	b.n	8010768 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105de:	b29b      	uxth	r3, r3
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 80bc 	beq.w	801076c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80105f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f000 80b7 	beq.w	801076c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010606:	e853 3f00 	ldrex	r3, [r3]
 801060a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801060c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801060e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010612:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	461a      	mov	r2, r3
 801061c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010620:	647b      	str	r3, [r7, #68]	@ 0x44
 8010622:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010628:	e841 2300 	strex	r3, r2, [r1]
 801062c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801062e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1e4      	bne.n	80105fe <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	3308      	adds	r3, #8
 801063a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063e:	e853 3f00 	ldrex	r3, [r3]
 8010642:	623b      	str	r3, [r7, #32]
   return(result);
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801064a:	f023 0301 	bic.w	r3, r3, #1
 801064e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801065c:	633a      	str	r2, [r7, #48]	@ 0x30
 801065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010660:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010664:	e841 2300 	strex	r3, r2, [r1]
 8010668:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801066a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1e1      	bne.n	8010634 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2220      	movs	r2, #32
 8010674:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2200      	movs	r2, #0
 801067c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2200      	movs	r2, #0
 8010682:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	e853 3f00 	ldrex	r3, [r3]
 8010690:	60fb      	str	r3, [r7, #12]
   return(result);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f023 0310 	bic.w	r3, r3, #16
 8010698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	461a      	mov	r2, r3
 80106a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80106a6:	61fb      	str	r3, [r7, #28]
 80106a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106aa:	69b9      	ldr	r1, [r7, #24]
 80106ac:	69fa      	ldr	r2, [r7, #28]
 80106ae:	e841 2300 	strex	r3, r2, [r1]
 80106b2:	617b      	str	r3, [r7, #20]
   return(result);
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1e4      	bne.n	8010684 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2202      	movs	r2, #2
 80106be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80106c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80106c4:	4619      	mov	r1, r3
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 f86a 	bl	80107a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80106cc:	e04e      	b.n	801076c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d014      	beq.n	8010704 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d105      	bne.n	80106f2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80106e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d008      	beq.n	8010704 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d03a      	beq.n	8010770 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	4798      	blx	r3
    }
    return;
 8010702:	e035      	b.n	8010770 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801070c:	2b00      	cmp	r3, #0
 801070e:	d009      	beq.n	8010724 <HAL_UART_IRQHandler+0x5c4>
 8010710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010718:	2b00      	cmp	r3, #0
 801071a:	d003      	beq.n	8010724 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f000 fc2e 	bl	8010f7e <UART_EndTransmit_IT>
    return;
 8010722:	e026      	b.n	8010772 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801072c:	2b00      	cmp	r3, #0
 801072e:	d009      	beq.n	8010744 <HAL_UART_IRQHandler+0x5e4>
 8010730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010734:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010738:	2b00      	cmp	r3, #0
 801073a:	d003      	beq.n	8010744 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 fc53 	bl	8010fe8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010742:	e016      	b.n	8010772 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801074c:	2b00      	cmp	r3, #0
 801074e:	d010      	beq.n	8010772 <HAL_UART_IRQHandler+0x612>
 8010750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010754:	2b00      	cmp	r3, #0
 8010756:	da0c      	bge.n	8010772 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 fc3b 	bl	8010fd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801075e:	e008      	b.n	8010772 <HAL_UART_IRQHandler+0x612>
      return;
 8010760:	bf00      	nop
 8010762:	e006      	b.n	8010772 <HAL_UART_IRQHandler+0x612>
    return;
 8010764:	bf00      	nop
 8010766:	e004      	b.n	8010772 <HAL_UART_IRQHandler+0x612>
      return;
 8010768:	bf00      	nop
 801076a:	e002      	b.n	8010772 <HAL_UART_IRQHandler+0x612>
      return;
 801076c:	bf00      	nop
 801076e:	e000      	b.n	8010772 <HAL_UART_IRQHandler+0x612>
    return;
 8010770:	bf00      	nop
  }
}
 8010772:	37e8      	adds	r7, #232	@ 0xe8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	460b      	mov	r3, r1
 80107aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107ac:	bf00      	nop
 80107ae:	370c      	adds	r7, #12
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107bc:	b094      	sub	sp, #80	@ 0x50
 80107be:	af00      	add	r7, sp, #0
 80107c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80107c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	4b83      	ldr	r3, [pc, #524]	@ (80109dc <UART_SetConfig+0x224>)
 80107ce:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d2:	689a      	ldr	r2, [r3, #8]
 80107d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	431a      	orrs	r2, r3
 80107da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107dc:	695b      	ldr	r3, [r3, #20]
 80107de:	431a      	orrs	r2, r3
 80107e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e2:	69db      	ldr	r3, [r3, #28]
 80107e4:	4313      	orrs	r3, r2
 80107e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	497c      	ldr	r1, [pc, #496]	@ (80109e0 <UART_SetConfig+0x228>)
 80107f0:	4019      	ands	r1, r3
 80107f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107f8:	430b      	orrs	r3, r1
 80107fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010808:	68d9      	ldr	r1, [r3, #12]
 801080a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	ea40 0301 	orr.w	r3, r0, r1
 8010812:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801081a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	4b6f      	ldr	r3, [pc, #444]	@ (80109dc <UART_SetConfig+0x224>)
 8010820:	429a      	cmp	r2, r3
 8010822:	d009      	beq.n	8010838 <UART_SetConfig+0x80>
 8010824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	4b6e      	ldr	r3, [pc, #440]	@ (80109e4 <UART_SetConfig+0x22c>)
 801082a:	429a      	cmp	r2, r3
 801082c:	d004      	beq.n	8010838 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801082e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010830:	6a1a      	ldr	r2, [r3, #32]
 8010832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010834:	4313      	orrs	r3, r2
 8010836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010842:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8010846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801084c:	430b      	orrs	r3, r1
 801084e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010856:	f023 000f 	bic.w	r0, r3, #15
 801085a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801085c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801085e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010860:	681a      	ldr	r2, [r3, #0]
 8010862:	ea40 0301 	orr.w	r3, r0, r1
 8010866:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	4b5e      	ldr	r3, [pc, #376]	@ (80109e8 <UART_SetConfig+0x230>)
 801086e:	429a      	cmp	r2, r3
 8010870:	d102      	bne.n	8010878 <UART_SetConfig+0xc0>
 8010872:	2301      	movs	r3, #1
 8010874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010876:	e032      	b.n	80108de <UART_SetConfig+0x126>
 8010878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	4b5b      	ldr	r3, [pc, #364]	@ (80109ec <UART_SetConfig+0x234>)
 801087e:	429a      	cmp	r2, r3
 8010880:	d102      	bne.n	8010888 <UART_SetConfig+0xd0>
 8010882:	2302      	movs	r3, #2
 8010884:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010886:	e02a      	b.n	80108de <UART_SetConfig+0x126>
 8010888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	4b58      	ldr	r3, [pc, #352]	@ (80109f0 <UART_SetConfig+0x238>)
 801088e:	429a      	cmp	r2, r3
 8010890:	d102      	bne.n	8010898 <UART_SetConfig+0xe0>
 8010892:	2304      	movs	r3, #4
 8010894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010896:	e022      	b.n	80108de <UART_SetConfig+0x126>
 8010898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	4b55      	ldr	r3, [pc, #340]	@ (80109f4 <UART_SetConfig+0x23c>)
 801089e:	429a      	cmp	r2, r3
 80108a0:	d102      	bne.n	80108a8 <UART_SetConfig+0xf0>
 80108a2:	2308      	movs	r3, #8
 80108a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108a6:	e01a      	b.n	80108de <UART_SetConfig+0x126>
 80108a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	4b52      	ldr	r3, [pc, #328]	@ (80109f8 <UART_SetConfig+0x240>)
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d102      	bne.n	80108b8 <UART_SetConfig+0x100>
 80108b2:	2310      	movs	r3, #16
 80108b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108b6:	e012      	b.n	80108de <UART_SetConfig+0x126>
 80108b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	4b4f      	ldr	r3, [pc, #316]	@ (80109fc <UART_SetConfig+0x244>)
 80108be:	429a      	cmp	r2, r3
 80108c0:	d103      	bne.n	80108ca <UART_SetConfig+0x112>
 80108c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80108c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108c8:	e009      	b.n	80108de <UART_SetConfig+0x126>
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	4b43      	ldr	r3, [pc, #268]	@ (80109dc <UART_SetConfig+0x224>)
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d102      	bne.n	80108da <UART_SetConfig+0x122>
 80108d4:	2320      	movs	r3, #32
 80108d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108d8:	e001      	b.n	80108de <UART_SetConfig+0x126>
 80108da:	2300      	movs	r3, #0
 80108dc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80108de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4b3e      	ldr	r3, [pc, #248]	@ (80109dc <UART_SetConfig+0x224>)
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d005      	beq.n	80108f4 <UART_SetConfig+0x13c>
 80108e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	4b3d      	ldr	r3, [pc, #244]	@ (80109e4 <UART_SetConfig+0x22c>)
 80108ee:	429a      	cmp	r2, r3
 80108f0:	f040 8088 	bne.w	8010a04 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80108f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108f6:	2200      	movs	r2, #0
 80108f8:	623b      	str	r3, [r7, #32]
 80108fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80108fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010900:	f7fb fdea 	bl	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010904:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010908:	2b00      	cmp	r3, #0
 801090a:	f000 80eb 	beq.w	8010ae4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801090e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010912:	4a3b      	ldr	r2, [pc, #236]	@ (8010a00 <UART_SetConfig+0x248>)
 8010914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010918:	461a      	mov	r2, r3
 801091a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801091c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010920:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010924:	685a      	ldr	r2, [r3, #4]
 8010926:	4613      	mov	r3, r2
 8010928:	005b      	lsls	r3, r3, #1
 801092a:	4413      	add	r3, r2
 801092c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801092e:	429a      	cmp	r2, r3
 8010930:	d305      	bcc.n	801093e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801093a:	429a      	cmp	r2, r3
 801093c:	d903      	bls.n	8010946 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801093e:	2301      	movs	r3, #1
 8010940:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010944:	e048      	b.n	80109d8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010948:	2200      	movs	r2, #0
 801094a:	61bb      	str	r3, [r7, #24]
 801094c:	61fa      	str	r2, [r7, #28]
 801094e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010952:	4a2b      	ldr	r2, [pc, #172]	@ (8010a00 <UART_SetConfig+0x248>)
 8010954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010958:	b29b      	uxth	r3, r3
 801095a:	2200      	movs	r2, #0
 801095c:	613b      	str	r3, [r7, #16]
 801095e:	617a      	str	r2, [r7, #20]
 8010960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010964:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010968:	f7ef fca4 	bl	80002b4 <__aeabi_uldivmod>
 801096c:	4602      	mov	r2, r0
 801096e:	460b      	mov	r3, r1
 8010970:	4610      	mov	r0, r2
 8010972:	4619      	mov	r1, r3
 8010974:	f04f 0200 	mov.w	r2, #0
 8010978:	f04f 0300 	mov.w	r3, #0
 801097c:	020b      	lsls	r3, r1, #8
 801097e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010982:	0202      	lsls	r2, r0, #8
 8010984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010986:	6849      	ldr	r1, [r1, #4]
 8010988:	0849      	lsrs	r1, r1, #1
 801098a:	2000      	movs	r0, #0
 801098c:	460c      	mov	r4, r1
 801098e:	4605      	mov	r5, r0
 8010990:	eb12 0804 	adds.w	r8, r2, r4
 8010994:	eb43 0905 	adc.w	r9, r3, r5
 8010998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	2200      	movs	r2, #0
 801099e:	60bb      	str	r3, [r7, #8]
 80109a0:	60fa      	str	r2, [r7, #12]
 80109a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80109a6:	4640      	mov	r0, r8
 80109a8:	4649      	mov	r1, r9
 80109aa:	f7ef fc83 	bl	80002b4 <__aeabi_uldivmod>
 80109ae:	4602      	mov	r2, r0
 80109b0:	460b      	mov	r3, r1
 80109b2:	4613      	mov	r3, r2
 80109b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80109b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80109bc:	d308      	bcc.n	80109d0 <UART_SetConfig+0x218>
 80109be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109c4:	d204      	bcs.n	80109d0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80109c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80109cc:	60da      	str	r2, [r3, #12]
 80109ce:	e003      	b.n	80109d8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80109d0:	2301      	movs	r3, #1
 80109d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80109d6:	e085      	b.n	8010ae4 <UART_SetConfig+0x32c>
 80109d8:	e084      	b.n	8010ae4 <UART_SetConfig+0x32c>
 80109da:	bf00      	nop
 80109dc:	46002400 	.word	0x46002400
 80109e0:	cfff69f3 	.word	0xcfff69f3
 80109e4:	56002400 	.word	0x56002400
 80109e8:	40013800 	.word	0x40013800
 80109ec:	40004400 	.word	0x40004400
 80109f0:	40004800 	.word	0x40004800
 80109f4:	40004c00 	.word	0x40004c00
 80109f8:	40005000 	.word	0x40005000
 80109fc:	40006400 	.word	0x40006400
 8010a00:	08011c1c 	.word	0x08011c1c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a06:	69db      	ldr	r3, [r3, #28]
 8010a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010a0c:	d13c      	bne.n	8010a88 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a10:	2200      	movs	r2, #0
 8010a12:	603b      	str	r3, [r7, #0]
 8010a14:	607a      	str	r2, [r7, #4]
 8010a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010a1a:	f7fb fd5d 	bl	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a1e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d05e      	beq.n	8010ae4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a2a:	4a39      	ldr	r2, [pc, #228]	@ (8010b10 <UART_SetConfig+0x358>)
 8010a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a30:	461a      	mov	r2, r3
 8010a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a38:	005a      	lsls	r2, r3, #1
 8010a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	085b      	lsrs	r3, r3, #1
 8010a40:	441a      	add	r2, r3
 8010a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a4e:	2b0f      	cmp	r3, #15
 8010a50:	d916      	bls.n	8010a80 <UART_SetConfig+0x2c8>
 8010a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a58:	d212      	bcs.n	8010a80 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	f023 030f 	bic.w	r3, r3, #15
 8010a62:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a66:	085b      	lsrs	r3, r3, #1
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	f003 0307 	and.w	r3, r3, #7
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010a72:	4313      	orrs	r3, r2
 8010a74:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010a7c:	60da      	str	r2, [r3, #12]
 8010a7e:	e031      	b.n	8010ae4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010a80:	2301      	movs	r3, #1
 8010a82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010a86:	e02d      	b.n	8010ae4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	469a      	mov	sl, r3
 8010a8e:	4693      	mov	fp, r2
 8010a90:	4650      	mov	r0, sl
 8010a92:	4659      	mov	r1, fp
 8010a94:	f7fb fd20 	bl	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a98:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d021      	beq.n	8010ae4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8010b10 <UART_SetConfig+0x358>)
 8010aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aae:	fbb3 f2f2 	udiv	r2, r3, r2
 8010ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	085b      	lsrs	r3, r3, #1
 8010ab8:	441a      	add	r2, r3
 8010aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ac6:	2b0f      	cmp	r3, #15
 8010ac8:	d909      	bls.n	8010ade <UART_SetConfig+0x326>
 8010aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ad0:	d205      	bcs.n	8010ade <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	60da      	str	r2, [r3, #12]
 8010adc:	e002      	b.n	8010ae4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aee:	2201      	movs	r2, #1
 8010af0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af6:	2200      	movs	r2, #0
 8010af8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afc:	2200      	movs	r2, #0
 8010afe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010b00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3750      	adds	r7, #80	@ 0x50
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010b0e:	bf00      	nop
 8010b10:	08011c1c 	.word	0x08011c1c

08010b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b20:	f003 0308 	and.w	r3, r3, #8
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00a      	beq.n	8010b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	430a      	orrs	r2, r1
 8010b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b42:	f003 0301 	and.w	r3, r3, #1
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00a      	beq.n	8010b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	430a      	orrs	r2, r1
 8010b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b64:	f003 0302 	and.w	r3, r3, #2
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00a      	beq.n	8010b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	430a      	orrs	r2, r1
 8010b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b86:	f003 0304 	and.w	r3, r3, #4
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00a      	beq.n	8010ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	430a      	orrs	r2, r1
 8010ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ba8:	f003 0310 	and.w	r3, r3, #16
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00a      	beq.n	8010bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	430a      	orrs	r2, r1
 8010bc4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bca:	f003 0320 	and.w	r3, r3, #32
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00a      	beq.n	8010be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	430a      	orrs	r2, r1
 8010be6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d01a      	beq.n	8010c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	430a      	orrs	r2, r1
 8010c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c12:	d10a      	bne.n	8010c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	430a      	orrs	r2, r1
 8010c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00a      	beq.n	8010c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	430a      	orrs	r2, r1
 8010c4a:	605a      	str	r2, [r3, #4]
  }
}
 8010c4c:	bf00      	nop
 8010c4e:	370c      	adds	r7, #12
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b098      	sub	sp, #96	@ 0x60
 8010c5c:	af02      	add	r7, sp, #8
 8010c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010c68:	f7f1 ffd6 	bl	8002c18 <HAL_GetTick>
 8010c6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f003 0308 	and.w	r3, r3, #8
 8010c78:	2b08      	cmp	r3, #8
 8010c7a:	d12f      	bne.n	8010cdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010c7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c84:	2200      	movs	r2, #0
 8010c86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 f88e 	bl	8010dac <UART_WaitOnFlagUntilTimeout>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d022      	beq.n	8010cdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9e:	e853 3f00 	ldrex	r3, [r3]
 8010ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cbc:	e841 2300 	strex	r3, r2, [r1]
 8010cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d1e6      	bne.n	8010c96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2220      	movs	r2, #32
 8010ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010cd8:	2303      	movs	r3, #3
 8010cda:	e063      	b.n	8010da4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f003 0304 	and.w	r3, r3, #4
 8010ce6:	2b04      	cmp	r3, #4
 8010ce8:	d149      	bne.n	8010d7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010cea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 f857 	bl	8010dac <UART_WaitOnFlagUntilTimeout>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d03c      	beq.n	8010d7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d0c:	e853 3f00 	ldrex	r3, [r3]
 8010d10:	623b      	str	r3, [r7, #32]
   return(result);
 8010d12:	6a3b      	ldr	r3, [r7, #32]
 8010d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d2a:	e841 2300 	strex	r3, r2, [r1]
 8010d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d1e6      	bne.n	8010d04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	3308      	adds	r3, #8
 8010d3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	e853 3f00 	ldrex	r3, [r3]
 8010d44:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f023 0301 	bic.w	r3, r3, #1
 8010d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	3308      	adds	r3, #8
 8010d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d56:	61fa      	str	r2, [r7, #28]
 8010d58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d5a:	69b9      	ldr	r1, [r7, #24]
 8010d5c:	69fa      	ldr	r2, [r7, #28]
 8010d5e:	e841 2300 	strex	r3, r2, [r1]
 8010d62:	617b      	str	r3, [r7, #20]
   return(result);
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1e5      	bne.n	8010d36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2220      	movs	r2, #32
 8010d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	e012      	b.n	8010da4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2220      	movs	r2, #32
 8010d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2220      	movs	r2, #32
 8010d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2200      	movs	r2, #0
 8010d92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2200      	movs	r2, #0
 8010d98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3758      	adds	r7, #88	@ 0x58
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	603b      	str	r3, [r7, #0]
 8010db8:	4613      	mov	r3, r2
 8010dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010dbc:	e04f      	b.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc4:	d04b      	beq.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010dc6:	f7f1 ff27 	bl	8002c18 <HAL_GetTick>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	69ba      	ldr	r2, [r7, #24]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d302      	bcc.n	8010ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d101      	bne.n	8010de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010ddc:	2303      	movs	r3, #3
 8010dde:	e04e      	b.n	8010e7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f003 0304 	and.w	r3, r3, #4
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d037      	beq.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2b80      	cmp	r3, #128	@ 0x80
 8010df2:	d034      	beq.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	2b40      	cmp	r3, #64	@ 0x40
 8010df8:	d031      	beq.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	69db      	ldr	r3, [r3, #28]
 8010e00:	f003 0308 	and.w	r3, r3, #8
 8010e04:	2b08      	cmp	r3, #8
 8010e06:	d110      	bne.n	8010e2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2208      	movs	r2, #8
 8010e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	f000 f838 	bl	8010e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2208      	movs	r2, #8
 8010e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e029      	b.n	8010e7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	69db      	ldr	r3, [r3, #28]
 8010e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e38:	d111      	bne.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e44:	68f8      	ldr	r0, [r7, #12]
 8010e46:	f000 f81e 	bl	8010e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2220      	movs	r2, #32
 8010e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2200      	movs	r2, #0
 8010e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	e00f      	b.n	8010e7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	69da      	ldr	r2, [r3, #28]
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	4013      	ands	r3, r2
 8010e68:	68ba      	ldr	r2, [r7, #8]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	bf0c      	ite	eq
 8010e6e:	2301      	moveq	r3, #1
 8010e70:	2300      	movne	r3, #0
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	461a      	mov	r2, r3
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d0a0      	beq.n	8010dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010e7c:	2300      	movs	r3, #0
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3710      	adds	r7, #16
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e86:	b480      	push	{r7}
 8010e88:	b095      	sub	sp, #84	@ 0x54
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e96:	e853 3f00 	ldrex	r3, [r3]
 8010e9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8010eae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010eb4:	e841 2300 	strex	r3, r2, [r1]
 8010eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d1e6      	bne.n	8010e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	3308      	adds	r3, #8
 8010ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec8:	6a3b      	ldr	r3, [r7, #32]
 8010eca:	e853 3f00 	ldrex	r3, [r3]
 8010ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010ed6:	f023 0301 	bic.w	r3, r3, #1
 8010eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	3308      	adds	r3, #8
 8010ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ee4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010eec:	e841 2300 	strex	r3, r2, [r1]
 8010ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d1e3      	bne.n	8010ec0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d118      	bne.n	8010f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	e853 3f00 	ldrex	r3, [r3]
 8010f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	f023 0310 	bic.w	r3, r3, #16
 8010f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f1e:	61bb      	str	r3, [r7, #24]
 8010f20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f22:	6979      	ldr	r1, [r7, #20]
 8010f24:	69ba      	ldr	r2, [r7, #24]
 8010f26:	e841 2300 	strex	r3, r2, [r1]
 8010f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d1e6      	bne.n	8010f00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2220      	movs	r2, #32
 8010f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2200      	movs	r2, #0
 8010f44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010f46:	bf00      	nop
 8010f48:	3754      	adds	r7, #84	@ 0x54
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr

08010f52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b084      	sub	sp, #16
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2200      	movs	r2, #0
 8010f64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f7ff fc0b 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f76:	bf00      	nop
 8010f78:	3710      	adds	r7, #16
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b088      	sub	sp, #32
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	e853 3f00 	ldrex	r3, [r3]
 8010f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f9a:	61fb      	str	r3, [r7, #28]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	61bb      	str	r3, [r7, #24]
 8010fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fa8:	6979      	ldr	r1, [r7, #20]
 8010faa:	69ba      	ldr	r2, [r7, #24]
 8010fac:	e841 2300 	strex	r3, r2, [r1]
 8010fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1e6      	bne.n	8010f86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2220      	movs	r2, #32
 8010fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7ff fbd6 	bl	8010778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fcc:	bf00      	nop
 8010fce:	3720      	adds	r7, #32
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ff0:	bf00      	nop
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801100a:	2b01      	cmp	r3, #1
 801100c:	d101      	bne.n	8011012 <HAL_UARTEx_DisableFifoMode+0x16>
 801100e:	2302      	movs	r3, #2
 8011010:	e027      	b.n	8011062 <HAL_UARTEx_DisableFifoMode+0x66>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2201      	movs	r2, #1
 8011016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2224      	movs	r2, #36	@ 0x24
 801101e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f022 0201 	bic.w	r2, r2, #1
 8011038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2220      	movs	r2, #32
 8011054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2200      	movs	r2, #0
 801105c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3714      	adds	r7, #20
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr

0801106e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b084      	sub	sp, #16
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801107e:	2b01      	cmp	r3, #1
 8011080:	d101      	bne.n	8011086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011082:	2302      	movs	r3, #2
 8011084:	e02d      	b.n	80110e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2201      	movs	r2, #1
 801108a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2224      	movs	r2, #36	@ 0x24
 8011092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f022 0201 	bic.w	r2, r2, #1
 80110ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	430a      	orrs	r2, r1
 80110c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 f850 	bl	8011168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2220      	movs	r2, #32
 80110d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b084      	sub	sp, #16
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d101      	bne.n	8011102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80110fe:	2302      	movs	r3, #2
 8011100:	e02d      	b.n	801115e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2201      	movs	r2, #1
 8011106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2224      	movs	r2, #36	@ 0x24
 801110e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f022 0201 	bic.w	r2, r2, #1
 8011128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	689b      	ldr	r3, [r3, #8]
 8011130:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	683a      	ldr	r2, [r7, #0]
 801113a:	430a      	orrs	r2, r1
 801113c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f812 	bl	8011168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2220      	movs	r2, #32
 8011150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801115c:	2300      	movs	r3, #0
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
	...

08011168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011174:	2b00      	cmp	r3, #0
 8011176:	d108      	bne.n	801118a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2201      	movs	r2, #1
 801117c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2201      	movs	r2, #1
 8011184:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011188:	e031      	b.n	80111ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801118a:	2308      	movs	r3, #8
 801118c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801118e:	2308      	movs	r3, #8
 8011190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	689b      	ldr	r3, [r3, #8]
 8011198:	0e5b      	lsrs	r3, r3, #25
 801119a:	b2db      	uxtb	r3, r3
 801119c:	f003 0307 	and.w	r3, r3, #7
 80111a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	0f5b      	lsrs	r3, r3, #29
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	f003 0307 	and.w	r3, r3, #7
 80111b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	7b3a      	ldrb	r2, [r7, #12]
 80111b6:	4911      	ldr	r1, [pc, #68]	@ (80111fc <UARTEx_SetNbDataToProcess+0x94>)
 80111b8:	5c8a      	ldrb	r2, [r1, r2]
 80111ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111be:	7b3a      	ldrb	r2, [r7, #12]
 80111c0:	490f      	ldr	r1, [pc, #60]	@ (8011200 <UARTEx_SetNbDataToProcess+0x98>)
 80111c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111d0:	7bfb      	ldrb	r3, [r7, #15]
 80111d2:	7b7a      	ldrb	r2, [r7, #13]
 80111d4:	4909      	ldr	r1, [pc, #36]	@ (80111fc <UARTEx_SetNbDataToProcess+0x94>)
 80111d6:	5c8a      	ldrb	r2, [r1, r2]
 80111d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111dc:	7b7a      	ldrb	r2, [r7, #13]
 80111de:	4908      	ldr	r1, [pc, #32]	@ (8011200 <UARTEx_SetNbDataToProcess+0x98>)
 80111e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80111e6:	b29a      	uxth	r2, r3
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80111ee:	bf00      	nop
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	08011c34 	.word	0x08011c34
 8011200:	08011c3c 	.word	0x08011c3c

08011204 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b086      	sub	sp, #24
 8011208:	af02      	add	r7, sp, #8
 801120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801120c:	2300      	movs	r3, #0
 801120e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011210:	f7f1 fd02 	bl	8002c18 <HAL_GetTick>
 8011214:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d102      	bne.n	8011222 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 801121c:	2301      	movs	r3, #1
 801121e:	73fb      	strb	r3, [r7, #15]
 8011220:	e137      	b.n	8011492 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4a76      	ldr	r2, [pc, #472]	@ (8011400 <HAL_XSPI_Init+0x1fc>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d008      	beq.n	801123e <HAL_XSPI_Init+0x3a>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	4a74      	ldr	r2, [pc, #464]	@ (8011404 <HAL_XSPI_Init+0x200>)
 8011232:	4293      	cmp	r3, r2
 8011234:	d003      	beq.n	801123e <HAL_XSPI_Init+0x3a>
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a73      	ldr	r2, [pc, #460]	@ (8011408 <HAL_XSPI_Init+0x204>)
 801123c:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	4a72      	ldr	r2, [pc, #456]	@ (801140c <HAL_XSPI_Init+0x208>)
 8011244:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a6d      	ldr	r2, [pc, #436]	@ (8011400 <HAL_XSPI_Init+0x1fc>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d008      	beq.n	8011262 <HAL_XSPI_Init+0x5e>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4a6b      	ldr	r2, [pc, #428]	@ (8011404 <HAL_XSPI_Init+0x200>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d003      	beq.n	8011262 <HAL_XSPI_Init+0x5e>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a6a      	ldr	r2, [pc, #424]	@ (8011408 <HAL_XSPI_Init+0x204>)
 8011260:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a66      	ldr	r2, [pc, #408]	@ (8011400 <HAL_XSPI_Init+0x1fc>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d008      	beq.n	801127e <HAL_XSPI_Init+0x7a>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4a64      	ldr	r2, [pc, #400]	@ (8011404 <HAL_XSPI_Init+0x200>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d003      	beq.n	801127e <HAL_XSPI_Init+0x7a>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a63      	ldr	r2, [pc, #396]	@ (8011408 <HAL_XSPI_Init+0x204>)
 801127c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2200      	movs	r2, #0
 8011282:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011288:	2b00      	cmp	r3, #0
 801128a:	f040 8102 	bne.w	8011492 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7f0 fcc0 	bl	8001c14 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011294:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 f8ff 	bl	801149c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	689a      	ldr	r2, [r3, #8]
 80112a4:	4b5a      	ldr	r3, [pc, #360]	@ (8011410 <HAL_XSPI_Init+0x20c>)
 80112a6:	4013      	ands	r3, r2
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	68d1      	ldr	r1, [r2, #12]
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	6912      	ldr	r2, [r2, #16]
 80112b0:	0412      	lsls	r2, r2, #16
 80112b2:	4311      	orrs	r1, r2
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	6952      	ldr	r2, [r2, #20]
 80112b8:	3a01      	subs	r2, #1
 80112ba:	0212      	lsls	r2, r2, #8
 80112bc:	4311      	orrs	r1, r2
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	69d2      	ldr	r2, [r2, #28]
 80112c2:	4311      	orrs	r1, r2
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	6812      	ldr	r2, [r2, #0]
 80112c8:	430b      	orrs	r3, r1
 80112ca:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a4b      	ldr	r2, [pc, #300]	@ (8011400 <HAL_XSPI_Init+0x1fc>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d00e      	beq.n	80112f4 <HAL_XSPI_Init+0xf0>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4a4a      	ldr	r2, [pc, #296]	@ (8011404 <HAL_XSPI_Init+0x200>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d009      	beq.n	80112f4 <HAL_XSPI_Init+0xf0>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4a48      	ldr	r2, [pc, #288]	@ (8011408 <HAL_XSPI_Init+0x204>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d004      	beq.n	80112f4 <HAL_XSPI_Init+0xf0>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4a49      	ldr	r2, [pc, #292]	@ (8011414 <HAL_XSPI_Init+0x210>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d10a      	bne.n	801130a <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	689b      	ldr	r3, [r3, #8]
 80112fa:	f023 0108 	bic.w	r1, r3, #8
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	430a      	orrs	r2, r1
 8011308:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6a1a      	ldr	r2, [r3, #32]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	430a      	orrs	r2, r1
 801131e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	691b      	ldr	r3, [r3, #16]
 8011326:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801132e:	041a      	lsls	r2, r3, #16
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	430a      	orrs	r2, r1
 8011336:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a30      	ldr	r2, [pc, #192]	@ (8011400 <HAL_XSPI_Init+0x1fc>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d00e      	beq.n	8011360 <HAL_XSPI_Init+0x15c>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4a2f      	ldr	r2, [pc, #188]	@ (8011404 <HAL_XSPI_Init+0x200>)
 8011348:	4293      	cmp	r3, r2
 801134a:	d009      	beq.n	8011360 <HAL_XSPI_Init+0x15c>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	4a2d      	ldr	r2, [pc, #180]	@ (8011408 <HAL_XSPI_Init+0x204>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d004      	beq.n	8011360 <HAL_XSPI_Init+0x15c>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a2e      	ldr	r2, [pc, #184]	@ (8011414 <HAL_XSPI_Init+0x210>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d10a      	bne.n	8011376 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	691b      	ldr	r3, [r3, #16]
 8011366:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	430a      	orrs	r2, r1
 8011374:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801137e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	3b01      	subs	r3, #1
 8011390:	021a      	lsls	r2, r3, #8
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	430a      	orrs	r2, r1
 8011398:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801139e:	9300      	str	r3, [sp, #0]
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	2200      	movs	r2, #0
 80113a4:	2120      	movs	r1, #32
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f000 f887 	bl	80114ba <XSPI_WaitFlagStateUntilTimeout>
 80113ac:	4603      	mov	r3, r0
 80113ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80113b0:	7bfb      	ldrb	r3, [r7, #15]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d16d      	bne.n	8011492 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	430a      	orrs	r2, r1
 80113ca:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4a0e      	ldr	r2, [pc, #56]	@ (801140c <HAL_XSPI_Init+0x208>)
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d004      	beq.n	80113e0 <HAL_XSPI_Init+0x1dc>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4a0f      	ldr	r2, [pc, #60]	@ (8011418 <HAL_XSPI_Init+0x214>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d11d      	bne.n	801141c <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80113e4:	9300      	str	r3, [sp, #0]
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	2200      	movs	r2, #0
 80113ea:	2120      	movs	r1, #32
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 f864 	bl	80114ba <XSPI_WaitFlagStateUntilTimeout>
 80113f2:	4603      	mov	r3, r0
 80113f4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80113f6:	7bfb      	ldrb	r3, [r7, #15]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d00f      	beq.n	801141c <HAL_XSPI_Init+0x218>
          {
            return status;
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
 80113fe:	e049      	b.n	8011494 <HAL_XSPI_Init+0x290>
 8011400:	420d1400 	.word	0x420d1400
 8011404:	520d1400 	.word	0x520d1400
 8011408:	420d2400 	.word	0x420d2400
 801140c:	420d3400 	.word	0x420d3400
 8011410:	f8e0c0fc 	.word	0xf8e0c0fc
 8011414:	520d2400 	.word	0x520d2400
 8011418:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	689a      	ldr	r2, [r3, #8]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	430a      	orrs	r2, r1
 8011430:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801143a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011446:	431a      	orrs	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	430a      	orrs	r2, r1
 801144e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f042 0201 	orr.w	r2, r2, #1
 8011460:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	699b      	ldr	r3, [r3, #24]
 8011466:	2b02      	cmp	r3, #2
 8011468:	d107      	bne.n	801147a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	689a      	ldr	r2, [r3, #8]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f042 0202 	orr.w	r2, r2, #2
 8011478:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011482:	d103      	bne.n	801148c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2201      	movs	r2, #1
 8011488:	655a      	str	r2, [r3, #84]	@ 0x54
 801148a:	e002      	b.n	8011492 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2202      	movs	r2, #2
 8011490:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011492:	7bfb      	ldrb	r3, [r7, #15]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	683a      	ldr	r2, [r7, #0]
 80114aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	370c      	adds	r7, #12
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b084      	sub	sp, #16
 80114be:	af00      	add	r7, sp, #0
 80114c0:	60f8      	str	r0, [r7, #12]
 80114c2:	60b9      	str	r1, [r7, #8]
 80114c4:	603b      	str	r3, [r7, #0]
 80114c6:	4613      	mov	r3, r2
 80114c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80114ca:	e01a      	b.n	8011502 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114d2:	d016      	beq.n	8011502 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114d4:	f7f1 fba0 	bl	8002c18 <HAL_GetTick>
 80114d8:	4602      	mov	r2, r0
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	1ad3      	subs	r3, r2, r3
 80114de:	69ba      	ldr	r2, [r7, #24]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d302      	bcc.n	80114ea <XSPI_WaitFlagStateUntilTimeout+0x30>
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d10b      	bne.n	8011502 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114f0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114f6:	f043 0201 	orr.w	r2, r3, #1
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80114fe:	2303      	movs	r3, #3
 8011500:	e00e      	b.n	8011520 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	6a1a      	ldr	r2, [r3, #32]
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	4013      	ands	r3, r2
 801150c:	2b00      	cmp	r3, #0
 801150e:	bf14      	ite	ne
 8011510:	2301      	movne	r3, #1
 8011512:	2300      	moveq	r3, #0
 8011514:	b2db      	uxtb	r3, r3
 8011516:	461a      	mov	r2, r3
 8011518:	79fb      	ldrb	r3, [r7, #7]
 801151a:	429a      	cmp	r2, r3
 801151c:	d1d6      	bne.n	80114cc <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801151e:	2300      	movs	r3, #0
}
 8011520:	4618      	mov	r0, r3
 8011522:	3710      	adds	r7, #16
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011528:	b084      	sub	sp, #16
 801152a:	b580      	push	{r7, lr}
 801152c:	b084      	sub	sp, #16
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
 8011532:	f107 001c 	add.w	r0, r7, #28
 8011536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801153a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801153e:	2b03      	cmp	r3, #3
 8011540:	d105      	bne.n	801154e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f000 fa8e 	bl	8011a70 <USB_CoreReset>
 8011554:	4603      	mov	r3, r0
 8011556:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8011558:	7fbb      	ldrb	r3, [r7, #30]
 801155a:	2b01      	cmp	r3, #1
 801155c:	d10b      	bne.n	8011576 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	f043 0208 	orr.w	r2, r3, #8
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	f043 0220 	orr.w	r2, r3, #32
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8011576:	7bfb      	ldrb	r3, [r7, #15]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3710      	adds	r7, #16
 801157c:	46bd      	mov	sp, r7
 801157e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011582:	b004      	add	sp, #16
 8011584:	4770      	bx	lr

08011586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011586:	b480      	push	{r7}
 8011588:	b083      	sub	sp, #12
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	689b      	ldr	r3, [r3, #8]
 8011592:	f023 0201 	bic.w	r2, r3, #1
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801159a:	2300      	movs	r3, #0
}
 801159c:	4618      	mov	r0, r3
 801159e:	370c      	adds	r7, #12
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b084      	sub	sp, #16
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	460b      	mov	r3, r1
 80115b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80115b4:	2300      	movs	r3, #0
 80115b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80115c4:	78fb      	ldrb	r3, [r7, #3]
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d115      	bne.n	80115f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80115d6:	200a      	movs	r0, #10
 80115d8:	f7f1 fb2a 	bl	8002c30 <HAL_Delay>
      ms += 10U;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	330a      	adds	r3, #10
 80115e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f000 fa36 	bl	8011a54 <USB_GetMode>
 80115e8:	4603      	mov	r3, r0
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d01e      	beq.n	801162c <USB_SetCurrentMode+0x84>
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80115f2:	d9f0      	bls.n	80115d6 <USB_SetCurrentMode+0x2e>
 80115f4:	e01a      	b.n	801162c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80115f6:	78fb      	ldrb	r3, [r7, #3]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d115      	bne.n	8011628 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011608:	200a      	movs	r0, #10
 801160a:	f7f1 fb11 	bl	8002c30 <HAL_Delay>
      ms += 10U;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	330a      	adds	r3, #10
 8011612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 fa1d 	bl	8011a54 <USB_GetMode>
 801161a:	4603      	mov	r3, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	d005      	beq.n	801162c <USB_SetCurrentMode+0x84>
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2bc7      	cmp	r3, #199	@ 0xc7
 8011624:	d9f0      	bls.n	8011608 <USB_SetCurrentMode+0x60>
 8011626:	e001      	b.n	801162c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011628:	2301      	movs	r3, #1
 801162a:	e005      	b.n	8011638 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2bc8      	cmp	r3, #200	@ 0xc8
 8011630:	d101      	bne.n	8011636 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011632:	2301      	movs	r3, #1
 8011634:	e000      	b.n	8011638 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011636:	2300      	movs	r3, #0
}
 8011638:	4618      	mov	r0, r3
 801163a:	3710      	adds	r7, #16
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011640:	b084      	sub	sp, #16
 8011642:	b580      	push	{r7, lr}
 8011644:	b086      	sub	sp, #24
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
 801164a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801164e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011652:	2300      	movs	r3, #0
 8011654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801165a:	2300      	movs	r3, #0
 801165c:	613b      	str	r3, [r7, #16]
 801165e:	e009      	b.n	8011674 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	3340      	adds	r3, #64	@ 0x40
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	4413      	add	r3, r2
 801166a:	2200      	movs	r2, #0
 801166c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	3301      	adds	r3, #1
 8011672:	613b      	str	r3, [r7, #16]
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	2b0e      	cmp	r3, #14
 8011678:	d9f2      	bls.n	8011660 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801167e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011686:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801168a:	2b00      	cmp	r3, #0
 801168c:	d11c      	bne.n	80116c8 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	68fa      	ldr	r2, [r7, #12]
 8011698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801169c:	f043 0302 	orr.w	r3, r3, #2
 80116a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116b2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80116c6:	e011      	b.n	80116ec <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80116f2:	461a      	mov	r2, r3
 80116f4:	2300      	movs	r3, #0
 80116f6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80116f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80116fc:	2b03      	cmp	r3, #3
 80116fe:	d10d      	bne.n	801171c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011704:	2b00      	cmp	r3, #0
 8011706:	d104      	bne.n	8011712 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011708:	2100      	movs	r1, #0
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 f968 	bl	80119e0 <USB_SetDevSpeed>
 8011710:	e008      	b.n	8011724 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011712:	2101      	movs	r1, #1
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f963 	bl	80119e0 <USB_SetDevSpeed>
 801171a:	e003      	b.n	8011724 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801171c:	2103      	movs	r1, #3
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f000 f95e 	bl	80119e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011724:	2110      	movs	r1, #16
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f000 f8fa 	bl	8011920 <USB_FlushTxFifo>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d001      	beq.n	8011736 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8011732:	2301      	movs	r3, #1
 8011734:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 f924 	bl	8011984 <USB_FlushRxFifo>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d001      	beq.n	8011746 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011742:	2301      	movs	r3, #1
 8011744:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801174c:	461a      	mov	r2, r3
 801174e:	2300      	movs	r3, #0
 8011750:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011758:	461a      	mov	r2, r3
 801175a:	2300      	movs	r3, #0
 801175c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011764:	461a      	mov	r2, r3
 8011766:	2300      	movs	r3, #0
 8011768:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801176a:	2300      	movs	r3, #0
 801176c:	613b      	str	r3, [r7, #16]
 801176e:	e043      	b.n	80117f8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	015a      	lsls	r2, r3, #5
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	4413      	add	r3, r2
 8011778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011786:	d118      	bne.n	80117ba <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d10a      	bne.n	80117a4 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	015a      	lsls	r2, r3, #5
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	4413      	add	r3, r2
 8011796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801179a:	461a      	mov	r2, r3
 801179c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80117a0:	6013      	str	r3, [r2, #0]
 80117a2:	e013      	b.n	80117cc <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	015a      	lsls	r2, r3, #5
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	4413      	add	r3, r2
 80117ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117b0:	461a      	mov	r2, r3
 80117b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80117b6:	6013      	str	r3, [r2, #0]
 80117b8:	e008      	b.n	80117cc <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	015a      	lsls	r2, r3, #5
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	4413      	add	r3, r2
 80117c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117c6:	461a      	mov	r2, r3
 80117c8:	2300      	movs	r3, #0
 80117ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	015a      	lsls	r2, r3, #5
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	4413      	add	r3, r2
 80117d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117d8:	461a      	mov	r2, r3
 80117da:	2300      	movs	r3, #0
 80117dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	015a      	lsls	r2, r3, #5
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	4413      	add	r3, r2
 80117e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117ea:	461a      	mov	r2, r3
 80117ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80117f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	3301      	adds	r3, #1
 80117f6:	613b      	str	r3, [r7, #16]
 80117f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80117fc:	461a      	mov	r2, r3
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	4293      	cmp	r3, r2
 8011802:	d3b5      	bcc.n	8011770 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011804:	2300      	movs	r3, #0
 8011806:	613b      	str	r3, [r7, #16]
 8011808:	e043      	b.n	8011892 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	015a      	lsls	r2, r3, #5
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	4413      	add	r3, r2
 8011812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801181c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011820:	d118      	bne.n	8011854 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d10a      	bne.n	801183e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	015a      	lsls	r2, r3, #5
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	4413      	add	r3, r2
 8011830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011834:	461a      	mov	r2, r3
 8011836:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801183a:	6013      	str	r3, [r2, #0]
 801183c:	e013      	b.n	8011866 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	015a      	lsls	r2, r3, #5
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	4413      	add	r3, r2
 8011846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801184a:	461a      	mov	r2, r3
 801184c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011850:	6013      	str	r3, [r2, #0]
 8011852:	e008      	b.n	8011866 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	015a      	lsls	r2, r3, #5
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	4413      	add	r3, r2
 801185c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011860:	461a      	mov	r2, r3
 8011862:	2300      	movs	r3, #0
 8011864:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	015a      	lsls	r2, r3, #5
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	4413      	add	r3, r2
 801186e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011872:	461a      	mov	r2, r3
 8011874:	2300      	movs	r3, #0
 8011876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	015a      	lsls	r2, r3, #5
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	4413      	add	r3, r2
 8011880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011884:	461a      	mov	r2, r3
 8011886:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801188a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	3301      	adds	r3, #1
 8011890:	613b      	str	r3, [r7, #16]
 8011892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011896:	461a      	mov	r2, r3
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	4293      	cmp	r3, r2
 801189c:	d3b5      	bcc.n	801180a <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118a4:	691b      	ldr	r3, [r3, #16]
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80118ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80118b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2200      	movs	r2, #0
 80118b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80118be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80118c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d105      	bne.n	80118d4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	699b      	ldr	r3, [r3, #24]
 80118cc:	f043 0210 	orr.w	r2, r3, #16
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	699a      	ldr	r2, [r3, #24]
 80118d8:	4b10      	ldr	r3, [pc, #64]	@ (801191c <USB_DevInit+0x2dc>)
 80118da:	4313      	orrs	r3, r2
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80118e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d005      	beq.n	80118f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	699b      	ldr	r3, [r3, #24]
 80118ec:	f043 0208 	orr.w	r2, r3, #8
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80118f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d107      	bne.n	801190c <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	699b      	ldr	r3, [r3, #24]
 8011900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011904:	f043 0304 	orr.w	r3, r3, #4
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801190c:	7dfb      	ldrb	r3, [r7, #23]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3718      	adds	r7, #24
 8011912:	46bd      	mov	sp, r7
 8011914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011918:	b004      	add	sp, #16
 801191a:	4770      	bx	lr
 801191c:	803c3800 	.word	0x803c3800

08011920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011920:	b480      	push	{r7}
 8011922:	b085      	sub	sp, #20
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801192a:	2300      	movs	r3, #0
 801192c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	3301      	adds	r3, #1
 8011932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801193a:	d901      	bls.n	8011940 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801193c:	2303      	movs	r3, #3
 801193e:	e01b      	b.n	8011978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	691b      	ldr	r3, [r3, #16]
 8011944:	2b00      	cmp	r3, #0
 8011946:	daf2      	bge.n	801192e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011948:	2300      	movs	r3, #0
 801194a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	019b      	lsls	r3, r3, #6
 8011950:	f043 0220 	orr.w	r2, r3, #32
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	3301      	adds	r3, #1
 801195c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011964:	d901      	bls.n	801196a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011966:	2303      	movs	r3, #3
 8011968:	e006      	b.n	8011978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	691b      	ldr	r3, [r3, #16]
 801196e:	f003 0320 	and.w	r3, r3, #32
 8011972:	2b20      	cmp	r3, #32
 8011974:	d0f0      	beq.n	8011958 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3714      	adds	r7, #20
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr

08011984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011984:	b480      	push	{r7}
 8011986:	b085      	sub	sp, #20
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801198c:	2300      	movs	r3, #0
 801198e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	3301      	adds	r3, #1
 8011994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801199c:	d901      	bls.n	80119a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801199e:	2303      	movs	r3, #3
 80119a0:	e018      	b.n	80119d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	691b      	ldr	r3, [r3, #16]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	daf2      	bge.n	8011990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80119aa:	2300      	movs	r3, #0
 80119ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2210      	movs	r2, #16
 80119b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	3301      	adds	r3, #1
 80119b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119c0:	d901      	bls.n	80119c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80119c2:	2303      	movs	r3, #3
 80119c4:	e006      	b.n	80119d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	f003 0310 	and.w	r3, r3, #16
 80119ce:	2b10      	cmp	r3, #16
 80119d0:	d0f0      	beq.n	80119b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80119d2:	2300      	movs	r3, #0
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b085      	sub	sp, #20
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	460b      	mov	r3, r1
 80119ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	78fb      	ldrb	r3, [r7, #3]
 80119fa:	68f9      	ldr	r1, [r7, #12]
 80119fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011a00:	4313      	orrs	r3, r2
 8011a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr

08011a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011a12:	b480      	push	{r7}
 8011a14:	b085      	sub	sp, #20
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011a2c:	f023 0303 	bic.w	r3, r3, #3
 8011a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011a40:	f043 0302 	orr.w	r3, r3, #2
 8011a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3714      	adds	r7, #20
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr

08011a54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011a54:	b480      	push	{r7}
 8011a56:	b083      	sub	sp, #12
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	695b      	ldr	r3, [r3, #20]
 8011a60:	f003 0301 	and.w	r3, r3, #1
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b085      	sub	sp, #20
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a88:	d901      	bls.n	8011a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011a8a:	2303      	movs	r3, #3
 8011a8c:	e01b      	b.n	8011ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	691b      	ldr	r3, [r3, #16]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	daf2      	bge.n	8011a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011a96:	2300      	movs	r3, #0
 8011a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	691b      	ldr	r3, [r3, #16]
 8011a9e:	f043 0201 	orr.w	r2, r3, #1
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011ab2:	d901      	bls.n	8011ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011ab4:	2303      	movs	r3, #3
 8011ab6:	e006      	b.n	8011ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	f003 0301 	and.w	r3, r3, #1
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d0f0      	beq.n	8011aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3714      	adds	r7, #20
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr

08011ad2 <memset>:
 8011ad2:	4402      	add	r2, r0
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d100      	bne.n	8011adc <memset+0xa>
 8011ada:	4770      	bx	lr
 8011adc:	f803 1b01 	strb.w	r1, [r3], #1
 8011ae0:	e7f9      	b.n	8011ad6 <memset+0x4>
	...

08011ae4 <__libc_init_array>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8011b1c <__libc_init_array+0x38>)
 8011ae8:	2600      	movs	r6, #0
 8011aea:	4c0d      	ldr	r4, [pc, #52]	@ (8011b20 <__libc_init_array+0x3c>)
 8011aec:	1b64      	subs	r4, r4, r5
 8011aee:	10a4      	asrs	r4, r4, #2
 8011af0:	42a6      	cmp	r6, r4
 8011af2:	d109      	bne.n	8011b08 <__libc_init_array+0x24>
 8011af4:	4d0b      	ldr	r5, [pc, #44]	@ (8011b24 <__libc_init_array+0x40>)
 8011af6:	2600      	movs	r6, #0
 8011af8:	4c0b      	ldr	r4, [pc, #44]	@ (8011b28 <__libc_init_array+0x44>)
 8011afa:	f000 f817 	bl	8011b2c <_init>
 8011afe:	1b64      	subs	r4, r4, r5
 8011b00:	10a4      	asrs	r4, r4, #2
 8011b02:	42a6      	cmp	r6, r4
 8011b04:	d105      	bne.n	8011b12 <__libc_init_array+0x2e>
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0c:	3601      	adds	r6, #1
 8011b0e:	4798      	blx	r3
 8011b10:	e7ee      	b.n	8011af0 <__libc_init_array+0xc>
 8011b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b16:	3601      	adds	r6, #1
 8011b18:	4798      	blx	r3
 8011b1a:	e7f2      	b.n	8011b02 <__libc_init_array+0x1e>
 8011b1c:	08011c4c 	.word	0x08011c4c
 8011b20:	08011c4c 	.word	0x08011c4c
 8011b24:	08011c4c 	.word	0x08011c4c
 8011b28:	08011c50 	.word	0x08011c50

08011b2c <_init>:
 8011b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2e:	bf00      	nop
 8011b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b32:	bc08      	pop	{r3}
 8011b34:	469e      	mov	lr, r3
 8011b36:	4770      	bx	lr

08011b38 <_fini>:
 8011b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b3a:	bf00      	nop
 8011b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b3e:	bc08      	pop	{r3}
 8011b40:	469e      	mov	lr, r3
 8011b42:	4770      	bx	lr
