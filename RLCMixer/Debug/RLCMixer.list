
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125cc  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08012840  08012840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012940  08012940  00014034  2**0
                  CONTENTS
  4 .ARM          00000008  08012940  08012940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012948  08012948  00014034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012948  08012948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801294c  0801294c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08012950  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00033c30  20000034  08012984  00014034  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20033c64  08012984  00014c64  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032050  00000000  00000000  0001406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da1  00000000  00000000  000460ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad0  00000000  00000000  0004ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002196  00000000  00000000  0004d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047332  00000000  00000000  0004fac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035ec1  00000000  00000000  00096df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bcb3f  00000000  00000000  000cccb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002897f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be5c  00000000  00000000  0028983c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00295698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000034 	.word	0x20000034
 8000290:	00000000 	.word	0x00000000
 8000294:	08012828 	.word	0x08012828

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000038 	.word	0x20000038
 80002b0:	08012828 	.word	0x08012828

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Do_Comb0>:

struct delayInit delayChannel[6] = {0};


float Do_Comb0(float inSample, int channelNum)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005d6:	6038      	str	r0, [r7, #0]
	delayChannel[2].cf_g = 0.8;
 80005d8:	4b46      	ldr	r3, [pc, #280]	@ (80006f4 <Do_Comb0+0x128>)
 80005da:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80005de:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 80005e2:	4a45      	ldr	r2, [pc, #276]	@ (80006f8 <Do_Comb0+0x12c>)
 80005e4:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p];
 80005e6:	4a43      	ldr	r2, [pc, #268]	@ (80006f4 <Do_Comb0+0x128>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80005ee:	fb01 f303 	mul.w	r3, r1, r3
 80005f2:	4413      	add	r3, r2
 80005f4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80005f8:	3320      	adds	r3, #32
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	493d      	ldr	r1, [pc, #244]	@ (80006f4 <Do_Comb0+0x128>)
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000604:	fb00 f202 	mul.w	r2, r0, r2
 8000608:	4413      	add	r3, r2
 800060a:	3302      	adds	r3, #2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]
	float new = readback*(delayChannel[channelNum].cf_g) + inSample;
 8000614:	4a37      	ldr	r2, [pc, #220]	@ (80006f4 <Do_Comb0+0x128>)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000626:	3318      	adds	r3, #24
 8000628:	ed93 7a00 	vldr	s14, [r3]
 800062c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000634:	ed97 7a01 	vldr	s14, [r7, #4]
 8000638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800063c:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p] = new;
 8000640:	4a2c      	ldr	r2, [pc, #176]	@ (80006f4 <Do_Comb0+0x128>)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	4413      	add	r3, r2
 800064e:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000652:	3320      	adds	r3, #32
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4927      	ldr	r1, [pc, #156]	@ (80006f4 <Do_Comb0+0x128>)
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 800065e:	fb00 f202 	mul.w	r2, r0, r2
 8000662:	4413      	add	r3, r2
 8000664:	3302      	adds	r3, #2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].cf_p++;
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <Do_Comb0+0x128>)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000680:	3320      	adds	r3, #32
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	491b      	ldr	r1, [pc, #108]	@ (80006f4 <Do_Comb0+0x128>)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 800068e:	fb00 f303 	mul.w	r3, r0, r3
 8000692:	440b      	add	r3, r1
 8000694:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000698:	3320      	adds	r3, #32
 800069a:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].cf_p==delayChannel[channelNum].cf_lim)
 800069c:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <Do_Comb0+0x128>)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006a4:	fb01 f303 	mul.w	r3, r1, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006ae:	3320      	adds	r3, #32
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4910      	ldr	r1, [pc, #64]	@ (80006f4 <Do_Comb0+0x128>)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80006ba:	fb00 f303 	mul.w	r3, r0, r3
 80006be:	440b      	add	r3, r1
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d10b      	bne.n	80006de <Do_Comb0+0x112>
	{
		delayChannel[channelNum].cf_p = 0;
 80006c6:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <Do_Comb0+0x128>)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006ce:	fb01 f303 	mul.w	r3, r1, r3
 80006d2:	4413      	add	r3, r2
 80006d4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006d8:	3320      	adds	r3, #32
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
	}
	return readback;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	ee07 3a90 	vmov	s15, r3

}
 80006e4:	eeb0 0a67 	vmov.f32	s0, s15
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000d84 	.word	0x20000d84
 80006f8:	3f4ccccd 	.word	0x3f4ccccd

080006fc <Do_Allpass0>:
float Do_Allpass0(float inSample, int channelNum)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a01 	vstr	s0, [r7, #4]
 8000706:	6038      	str	r0, [r7, #0]
	delayChannel[2].ap_g = 0.7;
 8000708:	4b4e      	ldr	r3, [pc, #312]	@ (8000844 <Do_Allpass0+0x148>)
 800070a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800070e:	f603 53ec 	addw	r3, r3, #3564	@ 0xdec
 8000712:	4a4d      	ldr	r2, [pc, #308]	@ (8000848 <Do_Allpass0+0x14c>)
 8000714:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p];
 8000716:	4a4b      	ldr	r2, [pc, #300]	@ (8000844 <Do_Allpass0+0x148>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800071e:	fb01 f303 	mul.w	r3, r1, r3
 8000722:	4413      	add	r3, r2
 8000724:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000728:	3324      	adds	r3, #36	@ 0x24
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4945      	ldr	r1, [pc, #276]	@ (8000844 <Do_Allpass0+0x148>)
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000734:	fb00 f202 	mul.w	r2, r0, r2
 8000738:	4413      	add	r3, r2
 800073a:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 800073e:	3306      	adds	r3, #6
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	440b      	add	r3, r1
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
	readback += (-delayChannel[channelNum].ap_g) * inSample;
 8000748:	4a3e      	ldr	r2, [pc, #248]	@ (8000844 <Do_Allpass0+0x148>)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	4413      	add	r3, r2
 8000756:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800075a:	331c      	adds	r3, #28
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	eeb1 7a67 	vneg.f32	s14, s15
 8000764:	edd7 7a01 	vldr	s15, [r7, #4]
 8000768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000774:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*delayChannel[0].ap_g + inSample;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <Do_Allpass0+0x148>)
 800077a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800077e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000782:	ed93 7a00 	vldr	s14, [r3]
 8000786:	edd7 7a03 	vldr	s15, [r7, #12]
 800078a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800078e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000796:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p] = new;
 800079a:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <Do_Allpass0+0x148>)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007ac:	3324      	adds	r3, #36	@ 0x24
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4924      	ldr	r1, [pc, #144]	@ (8000844 <Do_Allpass0+0x148>)
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 80007b8:	fb00 f202 	mul.w	r2, r0, r2
 80007bc:	4413      	add	r3, r2
 80007be:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80007c2:	3306      	adds	r3, #6
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].ap_p++;
 80007cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000844 <Do_Allpass0+0x148>)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007d4:	fb01 f303 	mul.w	r3, r1, r3
 80007d8:	4413      	add	r3, r2
 80007da:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007de:	3324      	adds	r3, #36	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4917      	ldr	r1, [pc, #92]	@ (8000844 <Do_Allpass0+0x148>)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80007ec:	fb00 f303 	mul.w	r3, r0, r3
 80007f0:	440b      	add	r3, r1
 80007f2:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007f6:	3324      	adds	r3, #36	@ 0x24
 80007f8:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].ap_p == delayChannel[0].ap_lim)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <Do_Allpass0+0x148>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000802:	fb01 f303 	mul.w	r3, r1, r3
 8000806:	4413      	add	r3, r2
 8000808:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800080c:	3324      	adds	r3, #36	@ 0x24
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <Do_Allpass0+0x148>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d10b      	bne.n	8000830 <Do_Allpass0+0x134>
	{
		delayChannel[channelNum].ap_p = 0;
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <Do_Allpass0+0x148>)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800082a:	3324      	adds	r3, #36	@ 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
	}
	return readback;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	ee07 3a90 	vmov	s15, r3

}
 8000836:	eeb0 0a67 	vmov.f32	s0, s15
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000d84 	.word	0x20000d84
 8000848:	3f333333 	.word	0x3f333333

0800084c <Do_Delay>:
float Do_Delay(float inSample, int channelNum) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	ed87 0a01 	vstr	s0, [r7, #4]
 8000856:	6038      	str	r0, [r7, #0]
	float newsample = (Do_Comb0(inSample, channelNum));
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	ed97 0a01 	vldr	s0, [r7, #4]
 800085e:	f7ff feb5 	bl	80005cc <Do_Comb0>
 8000862:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass0(newsample, channelNum);
 8000866:	6838      	ldr	r0, [r7, #0]
 8000868:	ed97 0a03 	vldr	s0, [r7, #12]
 800086c:	f7ff ff46 	bl	80006fc <Do_Allpass0>
 8000870:	ed87 0a03 	vstr	s0, [r7, #12]
	return newsample;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	ee07 3a90 	vmov	s15, r3
}
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	ed2d 8b02 	vpush	{d8}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  //code credits start 'yetanotherelectronicschannel'
  delayChannel[0].cf_lim = (int)(time*CB);
 800088e:	4bb5      	ldr	r3, [pc, #724]	@ (8000b64 <main+0x2e0>)
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000b68 <main+0x2e4>
 8000898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008a4:	ee17 2a90 	vmov	r2, s15
 80008a8:	4bb0      	ldr	r3, [pc, #704]	@ (8000b6c <main+0x2e8>)
 80008aa:	601a      	str	r2, [r3, #0]
  delayChannel[0].ap_lim = (int)(time*AP);
 80008ac:	4bad      	ldr	r3, [pc, #692]	@ (8000b64 <main+0x2e0>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8000b70 <main+0x2ec>
 80008b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c2:	ee17 2a90 	vmov	r2, s15
 80008c6:	4ba9      	ldr	r3, [pc, #676]	@ (8000b6c <main+0x2e8>)
 80008c8:	605a      	str	r2, [r3, #4]

  delayChannel[1].cf_lim = (int)(time*CB);
 80008ca:	4ba6      	ldr	r3, [pc, #664]	@ (8000b64 <main+0x2e0>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000b68 <main+0x2e4>
 80008d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e0:	ee17 2a90 	vmov	r2, s15
 80008e4:	4ba1      	ldr	r3, [pc, #644]	@ (8000b6c <main+0x2e8>)
 80008e6:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80008ea:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
  delayChannel[1].ap_lim = (int)(time*AP);
 80008ee:	4b9d      	ldr	r3, [pc, #628]	@ (8000b64 <main+0x2e0>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8000b70 <main+0x2ec>
 80008f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000904:	ee17 2a90 	vmov	r2, s15
 8000908:	4b98      	ldr	r3, [pc, #608]	@ (8000b6c <main+0x2e8>)
 800090a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800090e:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac

  delayChannel[2].cf_lim = (int)(time*CB);
 8000912:	4b94      	ldr	r3, [pc, #592]	@ (8000b64 <main+0x2e0>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8000b68 <main+0x2e4>
 800091c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000920:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000928:	ee17 2a90 	vmov	r2, s15
 800092c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b6c <main+0x2e8>)
 800092e:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000932:	f8c3 2950 	str.w	r2, [r3, #2384]	@ 0x950
  delayChannel[2].ap_lim = (int)(time*AP);
 8000936:	4b8b      	ldr	r3, [pc, #556]	@ (8000b64 <main+0x2e0>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000b70 <main+0x2ec>
 8000940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000944:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800094c:	ee17 2a90 	vmov	r2, s15
 8000950:	4b86      	ldr	r3, [pc, #536]	@ (8000b6c <main+0x2e8>)
 8000952:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000956:	f8c3 2954 	str.w	r2, [r3, #2388]	@ 0x954

  delayChannel[3].cf_lim = (int)(time*CB);
 800095a:	4b82      	ldr	r3, [pc, #520]	@ (8000b64 <main+0x2e0>)
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8000b68 <main+0x2e4>
 8000964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800096c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000970:	ee17 2a90 	vmov	r2, s15
 8000974:	4b7d      	ldr	r3, [pc, #500]	@ (8000b6c <main+0x2e8>)
 8000976:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800097a:	f8c3 2df8 	str.w	r2, [r3, #3576]	@ 0xdf8
  delayChannel[3].ap_lim = (int)(time*AP);
 800097e:	4b79      	ldr	r3, [pc, #484]	@ (8000b64 <main+0x2e0>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8000b70 <main+0x2ec>
 8000988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000994:	ee17 2a90 	vmov	r2, s15
 8000998:	4b74      	ldr	r3, [pc, #464]	@ (8000b6c <main+0x2e8>)
 800099a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800099e:	f8c3 2dfc 	str.w	r2, [r3, #3580]	@ 0xdfc

  delayChannel[4].cf_lim = (int)(time*CB);
 80009a2:	4b70      	ldr	r3, [pc, #448]	@ (8000b64 <main+0x2e0>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8000b68 <main+0x2e4>
 80009ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 2a90 	vmov	r2, s15
 80009bc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b6c <main+0x2e8>)
 80009be:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009c2:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
  delayChannel[4].ap_lim = (int)(time*AP);
 80009c6:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <main+0x2e0>)
 80009c8:	edd3 7a00 	vldr	s15, [r3]
 80009cc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8000b70 <main+0x2ec>
 80009d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009dc:	ee17 2a90 	vmov	r2, s15
 80009e0:	4b62      	ldr	r3, [pc, #392]	@ (8000b6c <main+0x2e8>)
 80009e2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  delayChannel[5].cf_lim = (int)(time*CB);
 80009ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000b64 <main+0x2e0>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000b68 <main+0x2e4>
 80009f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a00:	ee17 2a90 	vmov	r2, s15
 8000a04:	4b59      	ldr	r3, [pc, #356]	@ (8000b6c <main+0x2e8>)
 8000a06:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a0a:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
  delayChannel[5].ap_lim = (int)(time*AP);
 8000a0e:	4b55      	ldr	r3, [pc, #340]	@ (8000b64 <main+0x2e0>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000b70 <main+0x2ec>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a24:	ee17 2a90 	vmov	r2, s15
 8000a28:	4b50      	ldr	r3, [pc, #320]	@ (8000b6c <main+0x2e8>)
 8000a2a:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a2e:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c

  delayChannel[0].cf_p = 0;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	@ (8000b6c <main+0x2e8>)
 8000a34:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0
  delayChannel[1].cf_p = 0;
 8000a40:	4b4a      	ldr	r3, [pc, #296]	@ (8000b6c <main+0x2e8>)
 8000a42:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a46:	461a      	mov	r2, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c2 3948 	str.w	r3, [r2, #2376]	@ 0x948
  delayChannel[2].cf_p = 0;
 8000a4e:	4b47      	ldr	r3, [pc, #284]	@ (8000b6c <main+0x2e8>)
 8000a50:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000a54:	461a      	mov	r2, r3
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c2 3df0 	str.w	r3, [r2, #3568]	@ 0xdf0
  delayChannel[3].cf_p = 0;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <main+0x2e8>)
 8000a5e:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000a62:	461a      	mov	r2, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
  delayChannel[4].cf_p = 0;
 8000a6a:	4b40      	ldr	r3, [pc, #256]	@ (8000b6c <main+0x2e8>)
 8000a6c:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a70:	461a      	mov	r2, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c2 3740 	str.w	r3, [r2, #1856]	@ 0x740
  delayChannel[5].cf_p = 0;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <main+0x2e8>)
 8000a7a:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c2 3be8 	str.w	r3, [r2, #3048]	@ 0xbe8

  delayChannel[0].ap_p = 0;
 8000a86:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <main+0x2e8>)
 8000a88:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c2 34a4 	str.w	r3, [r2, #1188]	@ 0x4a4
  delayChannel[1].ap_p = 0;
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <main+0x2e8>)
 8000a96:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c2 394c 	str.w	r3, [r2, #2380]	@ 0x94c
  delayChannel[2].ap_p = 0;
 8000aa2:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <main+0x2e8>)
 8000aa4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c2 3df4 	str.w	r3, [r2, #3572]	@ 0xdf4
  delayChannel[3].ap_p = 0;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <main+0x2e8>)
 8000ab2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
  delayChannel[4].ap_p = 0;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <main+0x2e8>)
 8000ac0:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c2 3744 	str.w	r3, [r2, #1860]	@ 0x744
  delayChannel[5].ap_p = 0;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <main+0x2e8>)
 8000ace:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c2 3bec 	str.w	r3, [r2, #3052]	@ 0xbec
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f002 fe2b 	bl	8003734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f991 	bl	8000e04 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae2:	f000 f9fb 	bl	8000edc <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ae6:	f000 fa30 	bl	8000f4a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aea:	f000 ff91 	bl	8001a10 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000aee:	f000 fc1f 	bl	8001330 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 8000af2:	f000 fbdf 	bl	80012b4 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 8000af6:	f000 fc53 	bl	80013a0 <MX_HSPI1_Init>
  MX_I2C2_Init();
 8000afa:	f000 fccf 	bl	800149c <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000afe:	f000 fd0d 	bl	800151c <MX_ICACHE_Init>
  MX_LTDC_Init();
 8000b02:	f000 fd1f 	bl	8001544 <MX_LTDC_Init>
  MX_RTC_Init();
 8000b06:	f000 fd9d 	bl	8001644 <MX_RTC_Init>
  MX_TIM3_Init();
 8000b0a:	f000 fe55 	bl	80017b8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000b0e:	f000 fa2b 	bl	8000f68 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b12:	f000 ff03 	bl	800191c <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000b16:	f000 fde3 	bl	80016e0 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000b1a:	f000 fb4f 	bl	80011bc <MX_ADC4_Init>
  MX_I2C1_Init();
 8000b1e:	f000 fc7d 	bl	800141c <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000b22:	f000 ff47 	bl	80019b4 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 8000b26:	f000 fea9 	bl	800187c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	4911      	ldr	r1, [pc, #68]	@ (8000b74 <main+0x2f0>)
 8000b2e:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <main+0x2f4>)
 8000b30:	f003 fd4c 	bl	80045cc <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 8000b34:	2202      	movs	r2, #2
 8000b36:	4911      	ldr	r1, [pc, #68]	@ (8000b7c <main+0x2f8>)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <main+0x2fc>)
 8000b3a:	f003 fd47 	bl	80045cc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000b3e:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <main+0x300>)
 8000b40:	f00e fffc 	bl	800fb3c <HAL_TIM_Base_Start>
  //Config ADC/DAC

  HAL_Delay(2000);
 8000b44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b48:	f002 feba 	bl	80038c0 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <main+0x304>)
 8000b52:	f007 fcd5 	bl	8008500 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5a:	f002 feb1 	bl	80038c0 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e024      	b.n	8000bae <main+0x32a>
 8000b64:	20000004 	.word	0x20000004
 8000b68:	454b2000 	.word	0x454b2000
 8000b6c:	20000d84 	.word	0x20000d84
 8000b70:	43f00000 	.word	0x43f00000
 8000b74:	2002c974 	.word	0x2002c974
 8000b78:	20000050 	.word	0x20000050
 8000b7c:	2002c98c 	.word	0x2002c98c
 8000b80:	200000dc 	.word	0x200000dc
 8000b84:	200007c0 	.word	0x200007c0
 8000b88:	42021000 	.word	0x42021000
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4a8d      	ldr	r2, [pc, #564]	@ (8000dc8 <main+0x544>)
 8000b92:	441a      	add	r2, r3
 8000b94:	2364      	movs	r3, #100	@ 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2302      	movs	r3, #2
 8000b9a:	2190      	movs	r1, #144	@ 0x90
 8000b9c:	488b      	ldr	r0, [pc, #556]	@ (8000dcc <main+0x548>)
 8000b9e:	f007 fdb9 	bl	8008714 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000ba2:	2064      	movs	r0, #100	@ 0x64
 8000ba4:	f002 fe8c 	bl	80038c0 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	3301      	adds	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	2b1d      	cmp	r3, #29
 8000bb2:	d9eb      	bls.n	8000b8c <main+0x308>
  }

  HAL_Delay(100);
 8000bb4:	2064      	movs	r0, #100	@ 0x64
 8000bb6:	f002 fe83 	bl	80038c0 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 8000bba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bbe:	4984      	ldr	r1, [pc, #528]	@ (8000dd0 <main+0x54c>)
 8000bc0:	4884      	ldr	r0, [pc, #528]	@ (8000dd4 <main+0x550>)
 8000bc2:	f00e fc31 	bl	800f428 <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 8000bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bca:	4983      	ldr	r1, [pc, #524]	@ (8000dd8 <main+0x554>)
 8000bcc:	4883      	ldr	r0, [pc, #524]	@ (8000ddc <main+0x558>)
 8000bce:	f00e fb29 	bl	800f224 <HAL_SAI_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 8000bd2:	f002 fe69 	bl	80038a8 <HAL_GetTick>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bdc:	61bb      	str	r3, [r7, #24]
  uint16_t index = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	82fb      	strh	r3, [r7, #22]
  int channelNumber = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 8000be6:	f002 fe5f 	bl	80038a8 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d809      	bhi.n	8000c06 <main+0x382>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 8000bf2:	f002 fe59 	bl	80038a8 <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bfc:	61bb      	str	r3, [r7, #24]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4877      	ldr	r0, [pc, #476]	@ (8000de0 <main+0x55c>)
 8000c02:	f007 fc95 	bl	8008530 <HAL_GPIO_TogglePin>
	  }
	  //Slider/Pot Processing
	  volumeLRPoll(index);
 8000c06:	8afb      	ldrh	r3, [r7, #22]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f84d 	bl	8001ca8 <volumeLRPoll>
	  index++;
 8000c0e:	8afb      	ldrh	r3, [r7, #22]
 8000c10:	3301      	adds	r3, #1
 8000c12:	82fb      	strh	r3, [r7, #22]


	  if(adcReady)
 8000c14:	4b73      	ldr	r3, [pc, #460]	@ (8000de4 <main+0x560>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d067      	beq.n	8000cee <main+0x46a>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	82bb      	strh	r3, [r7, #20]
 8000c22:	e05e      	b.n	8000ce2 <main+0x45e>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	827b      	strh	r3, [r7, #18]
 8000c28:	e055      	b.n	8000cd6 <main+0x452>
		        {
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 8000c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8000de8 <main+0x564>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	8a7b      	ldrh	r3, [r7, #18]
 8000c30:	00d9      	lsls	r1, r3, #3
 8000c32:	8abb      	ldrh	r3, [r7, #20]
 8000c34:	440b      	add	r3, r1
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	8abd      	ldrh	r5, [r7, #20]
 8000c3e:	8a7c      	ldrh	r4, [r7, #18]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 f81b 	bl	8001c7c <signExtend24>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4968      	ldr	r1, [pc, #416]	@ (8000dec <main+0x568>)
 8000c4a:	f44f 738b 	mov.w	r3, #278	@ 0x116
 8000c4e:	fb05 f303 	mul.w	r3, r5, r3
 8000c52:	4423      	add	r3, r4
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		            if(channel == 1){
 8000c58:	8abb      	ldrh	r3, [r7, #20]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d138      	bne.n	8000cd0 <main+0x44c>
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000c5e:	4b64      	ldr	r3, [pc, #400]	@ (8000df0 <main+0x56c>)
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c6c:	8a7b      	ldrh	r3, [r7, #18]
 8000c6e:	4a5f      	ldr	r2, [pc, #380]	@ (8000dec <main+0x568>)
 8000c70:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c80:	ee27 8a27 	vmul.f32	s16, s14, s15
							    + wet*Do_Delay((float)channels[1].channelData[sample], 1));
 8000c84:	8a7b      	ldrh	r3, [r7, #18]
 8000c86:	4a59      	ldr	r2, [pc, #356]	@ (8000dec <main+0x568>)
 8000c88:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c98:	2001      	movs	r0, #1
 8000c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9e:	f7ff fdd5 	bl	800084c <Do_Delay>
 8000ca2:	eeb0 7a40 	vmov.f32	s14, s0
 8000ca6:	4b52      	ldr	r3, [pc, #328]	@ (8000df0 <main+0x56c>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	ee78 7a27 	vadd.f32	s15, s16, s15
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000cb4:	8aba      	ldrh	r2, [r7, #20]
 8000cb6:	8a7b      	ldrh	r3, [r7, #18]
 8000cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cbc:	ee17 4a90 	vmov	r4, s15
 8000cc0:	494a      	ldr	r1, [pc, #296]	@ (8000dec <main+0x568>)
 8000cc2:	f44f 708b 	mov.w	r0, #278	@ 0x116
 8000cc6:	fb00 f202 	mul.w	r2, r0, r2
 8000cca:	4413      	add	r3, r2
 8000ccc:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000cd0:	8a7b      	ldrh	r3, [r7, #18]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	827b      	strh	r3, [r7, #18]
 8000cd6:	8a7b      	ldrh	r3, [r7, #18]
 8000cd8:	2bff      	cmp	r3, #255	@ 0xff
 8000cda:	d9a6      	bls.n	8000c2a <main+0x3a6>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000cdc:	8abb      	ldrh	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	82bb      	strh	r3, [r7, #20]
 8000ce2:	8abb      	ldrh	r3, [r7, #20]
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	d99d      	bls.n	8000c24 <main+0x3a0>
		            }
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8000de4 <main+0x560>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 8000cee:	4b41      	ldr	r3, [pc, #260]	@ (8000df4 <main+0x570>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f43f af76 	beq.w	8000be6 <main+0x362>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	823b      	strh	r3, [r7, #16]
 8000cfe:	e05c      	b.n	8000dba <main+0x536>
		  {
			  int32_t mixedSignal = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	817b      	strh	r3, [r7, #10]
 8000d08:	e03b      	b.n	8000d82 <main+0x4fe>
			  {
				  float digGain = (float)((channels[currChannel].volumeRunner / 8) >>2) / 512.0f;
 8000d0a:	897b      	ldrh	r3, [r7, #10]
 8000d0c:	4a37      	ldr	r2, [pc, #220]	@ (8000dec <main+0x568>)
 8000d0e:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8000d12:	fb01 f303 	mul.w	r3, r1, r3
 8000d16:	4413      	add	r3, r2
 8000d18:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d2e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8000df8 <main+0x574>
 8000d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d36:	edc7 7a00 	vstr	s15, [r7]
				  digGain = digGain * maxGain;
 8000d3a:	edd7 7a00 	vldr	s15, [r7]
 8000d3e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d46:	edc7 7a00 	vstr	s15, [r7]
				  mixedSignal += (int32_t)((float)channels[currChannel].channelData[sample] * digGain);
 8000d4a:	897a      	ldrh	r2, [r7, #10]
 8000d4c:	8a3b      	ldrh	r3, [r7, #16]
 8000d4e:	4927      	ldr	r1, [pc, #156]	@ (8000dec <main+0x568>)
 8000d50:	f44f 708b 	mov.w	r0, #278	@ 0x116
 8000d54:	fb00 f202 	mul.w	r2, r0, r2
 8000d58:	4413      	add	r3, r2
 8000d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d66:	edd7 7a00 	vldr	s15, [r7]
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d72:	ee17 2a90 	vmov	r2, s15
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000d7c:	897b      	ldrh	r3, [r7, #10]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	817b      	strh	r3, [r7, #10]
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d9c0      	bls.n	8000d0a <main+0x486>
			  }
			  mixedSignal = mixedSignal / 6;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <main+0x578>)
 8000d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d90:	17db      	asrs	r3, r3, #31
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	60fb      	str	r3, [r7, #12]
			  dacData[(sample * 2)] =  mixedSignal;//channels[2].channelData[sample];
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <main+0x57c>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	8a3b      	ldrh	r3, [r7, #16]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	4413      	add	r3, r2
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = mixedSignal;//channels[2].channelData[sample];
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <main+0x57c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	8a3b      	ldrh	r3, [r7, #16]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	3304      	adds	r3, #4
 8000dae:	4413      	add	r3, r2
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000db4:	8a3b      	ldrh	r3, [r7, #16]
 8000db6:	3301      	adds	r3, #1
 8000db8:	823b      	strh	r3, [r7, #16]
 8000dba:	8a3b      	ldrh	r3, [r7, #16]
 8000dbc:	2bff      	cmp	r3, #255	@ 0xff
 8000dbe:	d99f      	bls.n	8000d00 <main+0x47c>
		  }
		  dacReady = false;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <main+0x570>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 8000dc6:	e70e      	b.n	8000be6 <main+0x362>
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	2000035c 	.word	0x2000035c
 8000dd0:	2002c990 	.word	0x2002c990
 8000dd4:	20000574 	.word	0x20000574
 8000dd8:	20030990 	.word	0x20030990
 8000ddc:	200004dc 	.word	0x200004dc
 8000de0:	42020c00 	.word	0x42020c00
 8000de4:	20033c50 	.word	0x20033c50
 8000de8:	20033c54 	.word	0x20033c54
 8000dec:	20031990 	.word	0x20031990
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20033c51 	.word	0x20033c51
 8000df8:	44000000 	.word	0x44000000
 8000dfc:	2aaaaaab 	.word	0x2aaaaaab
 8000e00:	20033c58 	.word	0x20033c58

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b09e      	sub	sp, #120	@ 0x78
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2260      	movs	r2, #96	@ 0x60
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f011 fcdb 	bl	80127ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e28:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000e2c:	f009 fab6 	bl	800a39c <HAL_PWREx_ControlVoltageScaling>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000e36:	f001 faab 	bl	8002390 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e3a:	f009 fa9f 	bl	800a37c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <SystemClock_Config+0xd4>)
 8000e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e44:	4a24      	ldr	r2, [pc, #144]	@ (8000ed8 <SystemClock_Config+0xd4>)
 8000e46:	f023 0318 	bic.w	r3, r3, #24
 8000e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000e4e:	2307      	movs	r3, #7
 8000e50:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e58:	2381      	movs	r3, #129	@ 0x81
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e62:	2310      	movs	r3, #16
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e66:	2302      	movs	r3, #2
 8000e68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e76:	2308      	movs	r3, #8
 8000e78:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000e86:	230c      	movs	r3, #12
 8000e88:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	4618      	mov	r0, r3
 8000e94:	f009 fbac 	bl	800a5f0 <HAL_RCC_OscConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e9e:	f001 fa77 	bl	8002390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	231f      	movs	r3, #31
 8000ea4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00a fa72 	bl	800b3a8 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000eca:	f001 fa61 	bl	8002390 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3778      	adds	r7, #120	@ 0x78
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	46020c00 	.word	0x46020c00

08000edc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0b8      	sub	sp, #224	@ 0xe0
 8000ee0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	22e0      	movs	r2, #224	@ 0xe0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f011 fc70 	bl	80127ce <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000eee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef2:	f04f 0301 	mov.w	r3, #1
 8000ef6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000f00:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000f04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000f10:	230c      	movs	r3, #12
 8000f12:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000f20:	230c      	movs	r3, #12
 8000f22:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000f2a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f00a fe08 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000f3e:	f001 fa27 	bl	8002390 <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	37e0      	adds	r7, #224	@ 0xe0
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000f4e:	f009 fb11 	bl	800a574 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000f52:	2002      	movs	r0, #2
 8000f54:	f009 faae 	bl	800a4b4 <HAL_PWREx_ConfigSupply>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000f5e:	f001 fa17 	bl	8002390 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f011 fc2a 	bl	80127ce <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7a:	4b82      	ldr	r3, [pc, #520]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000f7c:	4a82      	ldr	r2, [pc, #520]	@ (8001188 <MX_ADC1_Init+0x220>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f80:	4b80      	ldr	r3, [pc, #512]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b7f      	ldr	r3, [pc, #508]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f92:	4b7c      	ldr	r3, [pc, #496]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f98:	4b7a      	ldr	r3, [pc, #488]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b79      	ldr	r3, [pc, #484]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000fa4:	4b77      	ldr	r3, [pc, #476]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000faa:	4b76      	ldr	r3, [pc, #472]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 12;
 8000fb2:	4b74      	ldr	r3, [pc, #464]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb8:	4b72      	ldr	r3, [pc, #456]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000fc0:	4b70      	ldr	r3, [pc, #448]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fc2:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000fc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fce:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fde:	4b69      	ldr	r3, [pc, #420]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fe4:	4b67      	ldr	r3, [pc, #412]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000fea:	4b66      	ldr	r3, [pc, #408]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000fec:	2203      	movs	r2, #3
 8000fee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ff0:	4b64      	ldr	r3, [pc, #400]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff8:	4862      	ldr	r0, [pc, #392]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8000ffa:	f002 ffff 	bl	8003ffc <HAL_ADC_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001004:	f001 f9c4 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001008:	4b60      	ldr	r3, [pc, #384]	@ (800118c <MX_ADC1_Init+0x224>)
 800100a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100c:	2306      	movs	r3, #6
 800100e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001014:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001018:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4857      	ldr	r0, [pc, #348]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8001028:	f003 ff16 	bl	8004e58 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001032:	f001 f9ad 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001036:	4b56      	ldr	r3, [pc, #344]	@ (8001190 <MX_ADC1_Init+0x228>)
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800103a:	230c      	movs	r3, #12
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4850      	ldr	r0, [pc, #320]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8001044:	f003 ff08 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800104e:	f001 f99f 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001052:	4b50      	ldr	r3, [pc, #320]	@ (8001194 <MX_ADC1_Init+0x22c>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001056:	2312      	movs	r3, #18
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4849      	ldr	r0, [pc, #292]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8001060:	f003 fefa 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800106a:	f001 f991 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800106e:	4b4a      	ldr	r3, [pc, #296]	@ (8001198 <MX_ADC1_Init+0x230>)
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001072:	2318      	movs	r3, #24
 8001074:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4842      	ldr	r0, [pc, #264]	@ (8001184 <MX_ADC1_Init+0x21c>)
 800107c:	f003 feec 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001086:	f001 f983 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800108a:	4b44      	ldr	r3, [pc, #272]	@ (800119c <MX_ADC1_Init+0x234>)
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800108e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001092:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	483a      	ldr	r0, [pc, #232]	@ (8001184 <MX_ADC1_Init+0x21c>)
 800109a:	f003 fedd 	bl	8004e58 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 80010a4:	f001 f974 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010a8:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <MX_ADC1_Init+0x238>)
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010ac:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80010b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4833      	ldr	r0, [pc, #204]	@ (8001184 <MX_ADC1_Init+0x21c>)
 80010b8:	f003 fece 	bl	8004e58 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80010c2:	f001 f965 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010c6:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <MX_ADC1_Init+0x23c>)
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80010ca:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80010ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	482b      	ldr	r0, [pc, #172]	@ (8001184 <MX_ADC1_Init+0x21c>)
 80010d6:	f003 febf 	bl	8004e58 <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 80010e0:	f001 f956 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <MX_ADC1_Init+0x240>)
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80010e8:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80010ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4824      	ldr	r0, [pc, #144]	@ (8001184 <MX_ADC1_Init+0x21c>)
 80010f4:	f003 feb0 	bl	8004e58 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 80010fe:	f001 f947 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <MX_ADC1_Init+0x244>)
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001106:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	481c      	ldr	r0, [pc, #112]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8001112:	f003 fea1 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 800111c:	f001 f938 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001120:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <MX_ADC1_Init+0x248>)
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001128:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4815      	ldr	r0, [pc, #84]	@ (8001184 <MX_ADC1_Init+0x21c>)
 8001130:	f003 fe92 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 800113a:	f001 f929 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <MX_ADC1_Init+0x24c>)
 8001140:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001142:	f240 2306 	movw	r3, #518	@ 0x206
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_ADC1_Init+0x21c>)
 800114e:	f003 fe83 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8001158:	f001 f91a 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_ADC1_Init+0x250>)
 800115e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001160:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001164:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	@ (8001184 <MX_ADC1_Init+0x21c>)
 800116c:	f003 fe74 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8001176:	f001 f90b 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000050 	.word	0x20000050
 8001188:	42028000 	.word	0x42028000
 800118c:	04000002 	.word	0x04000002
 8001190:	08000004 	.word	0x08000004
 8001194:	0c000008 	.word	0x0c000008
 8001198:	10000010 	.word	0x10000010
 800119c:	14000020 	.word	0x14000020
 80011a0:	1c000080 	.word	0x1c000080
 80011a4:	20000100 	.word	0x20000100
 80011a8:	2a000400 	.word	0x2a000400
 80011ac:	2e000800 	.word	0x2e000800
 80011b0:	32001000 	.word	0x32001000
 80011b4:	3e008000 	.word	0x3e008000
 80011b8:	42010000 	.word	0x42010000

080011bc <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2220      	movs	r2, #32
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f011 fb00 	bl	80127ce <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011ce:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011d0:	4a35      	ldr	r2, [pc, #212]	@ (80012a8 <MX_ADC4_Init+0xec>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d4:	4b33      	ldr	r3, [pc, #204]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011da:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011dc:	2204      	movs	r2, #4
 80011de:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e0:	4b30      	ldr	r3, [pc, #192]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 80011e6:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80011ec:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80011f4:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001200:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8001208:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 800120a:	2202      	movs	r2, #2
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001210:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001228:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800122c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001236:	2200      	movs	r2, #0
 8001238:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 800123c:	2200      	movs	r2, #0
 800123e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001248:	4816      	ldr	r0, [pc, #88]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 800124a:	f002 fed7 	bl	8003ffc <HAL_ADC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 8001254:	f001 f89c 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_ADC4_Init+0xf0>)
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001264:	2304      	movs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 8001272:	f003 fdf1 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 800127c:	f001 f888 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_ADC4_Init+0xf4>)
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8001284:	2304      	movs	r3, #4
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_ADC4_Init+0xe8>)
 800128e:	f003 fde3 	bl	8004e58 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 8001298:	f001 f87a 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	46021000 	.word	0x46021000
 80012ac:	1c000080 	.word	0x1c000080
 80012b0:	20000100 	.word	0x20000100

080012b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <MX_DMA2D_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <MX_DMA2D_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001300:	4809      	ldr	r0, [pc, #36]	@ (8001328 <MX_DMA2D_Init+0x74>)
 8001302:	f005 fd33 	bl	8006d6c <HAL_DMA2D_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 800130c:	f001 f840 	bl	8002390 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001310:	2101      	movs	r1, #1
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_DMA2D_Init+0x74>)
 8001314:	f005 fd8c 	bl	8006e30 <HAL_DMA2D_ConfigLayer>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800131e:	f001 f837 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000294 	.word	0x20000294
 800132c:	4002b000 	.word	0x4002b000

08001330 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <MX_GPDMA1_Init+0x6c>)
 8001338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133c:	4a17      	ldr	r2, [pc, #92]	@ (800139c <MX_GPDMA1_Init+0x6c>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_GPDMA1_Init+0x6c>)
 8001348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	201d      	movs	r0, #29
 800135a:	f004 fda9 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800135e:	201d      	movs	r0, #29
 8001360:	f004 fdc0 	bl	8005ee4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	201e      	movs	r0, #30
 800136a:	f004 fda1 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800136e:	201e      	movs	r0, #30
 8001370:	f004 fdb8 	bl	8005ee4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	201f      	movs	r0, #31
 800137a:	f004 fd99 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800137e:	201f      	movs	r0, #31
 8001380:	f004 fdb0 	bl	8005ee4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2020      	movs	r0, #32
 800138a:	f004 fd91 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800138e:	2020      	movs	r0, #32
 8001390:	f004 fda8 	bl	8005ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	46020c00 	.word	0x46020c00

080013a0 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <MX_HSPI1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013ac:	2204      	movs	r2, #4
 80013ae:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013bc:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013c0:	221a      	movs	r2, #26
 80013c2:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_HSPI1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_HSPI1_Init+0x74>)
 8001402:	f010 fd7d 	bl	8011f00 <HAL_XSPI_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 800140c:	f000 ffc0 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002fc 	.word	0x200002fc
 8001418:	420d3400 	.word	0x420d3400

0800141c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <MX_I2C1_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <MX_I2C1_Init+0x7c>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_I2C1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001434:	2201      	movs	r2, #1
 8001436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001458:	f007 f8c0 	bl	80085dc <HAL_I2C_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001462:	f000 ff95 	bl	8002390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <MX_I2C1_Init+0x74>)
 800146a:	f008 fa4b 	bl	8009904 <HAL_I2CEx_ConfigAnalogFilter>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001474:	f000 ff8c 	bl	8002390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001478:	2100      	movs	r1, #0
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_I2C1_Init+0x74>)
 800147c:	f008 fa8d 	bl	800999a <HAL_I2CEx_ConfigDigitalFilter>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 ff83 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000035c 	.word	0x2000035c
 8001494:	40005400 	.word	0x40005400
 8001498:	20a0c4df 	.word	0x20a0c4df

0800149c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001514 <MX_I2C2_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <MX_I2C2_Init+0x7c>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d6:	480e      	ldr	r0, [pc, #56]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014d8:	f007 f880 	bl	80085dc <HAL_I2C_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014e2:	f000 ff55 	bl	8002390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4809      	ldr	r0, [pc, #36]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014ea:	f008 fa0b 	bl	8009904 <HAL_I2CEx_ConfigAnalogFilter>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014f4:	f000 ff4c 	bl	8002390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014fc:	f008 fa4d 	bl	800999a <HAL_I2CEx_ConfigDigitalFilter>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 ff43 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200003b0 	.word	0x200003b0
 8001514:	40005800 	.word	0x40005800
 8001518:	20a0c4df 	.word	0x20a0c4df

0800151c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001520:	2000      	movs	r0, #0
 8001522:	f008 fa87 	bl	8009a34 <HAL_ICACHE_ConfigAssociativityMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800152c:	f000 ff30 	bl	8002390 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001530:	f008 faa0 	bl	8009a74 <HAL_ICACHE_Enable>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800153a:	f000 ff29 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	@ 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2234      	movs	r2, #52	@ 0x34
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f011 f93c 	bl	80127ce <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001556:	4b39      	ldr	r3, [pc, #228]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001558:	4a39      	ldr	r2, [pc, #228]	@ (8001640 <MX_LTDC_Init+0xfc>)
 800155a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800155c:	4b37      	ldr	r3, [pc, #220]	@ (800163c <MX_LTDC_Init+0xf8>)
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001562:	4b36      	ldr	r3, [pc, #216]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001568:	4b34      	ldr	r3, [pc, #208]	@ (800163c <MX_LTDC_Init+0xf8>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800156e:	4b33      	ldr	r3, [pc, #204]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001574:	4b31      	ldr	r3, [pc, #196]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001576:	2203      	movs	r2, #3
 8001578:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <MX_LTDC_Init+0xf8>)
 800157c:	2203      	movs	r2, #3
 800157e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001580:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001582:	220b      	movs	r2, #11
 8001584:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001588:	220b      	movs	r2, #11
 800158a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <MX_LTDC_Init+0xf8>)
 800158e:	f240 322b 	movw	r2, #811	@ 0x32b
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8001594:	4b29      	ldr	r3, [pc, #164]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001596:	f240 12eb 	movw	r2, #491	@ 0x1eb
 800159a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 800159c:	4b27      	ldr	r3, [pc, #156]	@ (800163c <MX_LTDC_Init+0xf8>)
 800159e:	f240 3233 	movw	r2, #819	@ 0x333
 80015a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <MX_LTDC_Init+0xf8>)
 80015a6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <MX_LTDC_Init+0xf8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <MX_LTDC_Init+0xf8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <MX_LTDC_Init+0xf8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015c4:	481d      	ldr	r0, [pc, #116]	@ (800163c <MX_LTDC_Init+0xf8>)
 80015c6:	f008 fa65 	bl	8009a94 <HAL_LTDC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015d0:	f000 fede 	bl	8002390 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80015d8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80015dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80015e2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015e6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80015e8:	2301      	movs	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015ec:	23ff      	movs	r3, #255	@ 0xff
 80015ee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80015f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015f8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015fa:	2307      	movs	r3, #7
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <MX_LTDC_Init+0xf8>)
 8001624:	f008 fbc8 	bl	8009db8 <HAL_LTDC_ConfigLayer>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800162e:	f000 feaf 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3738      	adds	r7, #56	@ 0x38
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000404 	.word	0x20000404
 8001640:	40016800 	.word	0x40016800

08001644 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_RTC_Init+0x94>)
 800165e:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <MX_RTC_Init+0x98>)
 8001660:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <MX_RTC_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_RTC_Init+0x94>)
 800166a:	227f      	movs	r2, #127	@ 0x7f
 800166c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <MX_RTC_Init+0x94>)
 8001670:	22ff      	movs	r2, #255	@ 0xff
 8001672:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <MX_RTC_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_RTC_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_RTC_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <MX_RTC_Init+0x94>)
 8001688:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_RTC_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_RTC_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800169a:	480f      	ldr	r0, [pc, #60]	@ (80016d8 <MX_RTC_Init+0x94>)
 800169c:	f00d fa50 	bl	800eb40 <HAL_RTC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80016a6:	f000 fe73 	bl	8002390 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <MX_RTC_Init+0x94>)
 80016c0:	f00d fb6c 	bl	800ed9c <HAL_RTCEx_PrivilegeModeSet>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80016ca:	f000 fe61 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200004ac 	.word	0x200004ac
 80016dc:	46007800 	.word	0x46007800

080016e0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80016e4:	4b30      	ldr	r3, [pc, #192]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 80016e6:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <MX_SAI2_Init+0xcc>)
 80016e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80016ea:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80016f6:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001702:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001708:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 800170a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800170e:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001710:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001716:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 8001718:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800171c:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 8001720:	2200      	movs	r2, #0
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 8001726:	2200      	movs	r2, #0
 8001728:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 800172c:	2210      	movs	r2, #16
 800172e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001730:	2302      	movs	r3, #2
 8001732:	2202      	movs	r2, #2
 8001734:	2101      	movs	r1, #1
 8001736:	481c      	ldr	r0, [pc, #112]	@ (80017a8 <MX_SAI2_Init+0xc8>)
 8001738:	f00d fb5e 	bl	800edf8 <HAL_SAI_InitProtocol>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 8001742:	f000 fe25 	bl	8002390 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001748:	4a1a      	ldr	r2, [pc, #104]	@ (80017b4 <MX_SAI2_Init+0xd4>)
 800174a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 800174e:	2201      	movs	r2, #1
 8001750:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001766:	2202      	movs	r2, #2
 8001768:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 800176c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001770:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001778:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 800177a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800177e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001782:	2200      	movs	r2, #0
 8001784:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001788:	2200      	movs	r2, #0
 800178a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 800178c:	2308      	movs	r3, #8
 800178e:	2202      	movs	r2, #2
 8001790:	2100      	movs	r1, #0
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <MX_SAI2_Init+0xd0>)
 8001794:	f00d fb30 	bl	800edf8 <HAL_SAI_InitProtocol>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 800179e:	f000 fdf7 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200004dc 	.word	0x200004dc
 80017ac:	40015804 	.word	0x40015804
 80017b0:	20000574 	.word	0x20000574
 80017b4:	40015824 	.word	0x40015824

080017b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017dc:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <MX_TIM3_Init+0xbc>)
 80017de:	4a26      	ldr	r2, [pc, #152]	@ (8001878 <MX_TIM3_Init+0xc0>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <MX_TIM3_Init+0xbc>)
 80017e4:	22a0      	movs	r2, #160	@ 0xa0
 80017e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <MX_TIM3_Init+0xbc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <MX_TIM3_Init+0xbc>)
 80017f0:	2264      	movs	r2, #100	@ 0x64
 80017f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <MX_TIM3_Init+0xbc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <MX_TIM3_Init+0xbc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001800:	481c      	ldr	r0, [pc, #112]	@ (8001874 <MX_TIM3_Init+0xbc>)
 8001802:	f00e fa33 	bl	800fc6c <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800180c:	f000 fdc0 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	4815      	ldr	r0, [pc, #84]	@ (8001874 <MX_TIM3_Init+0xbc>)
 8001820:	f00f fa0a 	bl	8010c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800182a:	f000 fdb1 	bl	8002390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	@ 0x60
 8001830:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001832:	234b      	movs	r3, #75	@ 0x4b
 8001834:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800183e:	463b      	mov	r3, r7
 8001840:	220c      	movs	r2, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480b      	ldr	r0, [pc, #44]	@ (8001874 <MX_TIM3_Init+0xbc>)
 8001846:	f00e fa69 	bl	800fd1c <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001850:	f000 fd9e 	bl	8002390 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <MX_TIM3_Init+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <MX_TIM3_Init+0xbc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001862:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001864:	4803      	ldr	r0, [pc, #12]	@ (8001874 <MX_TIM3_Init+0xbc>)
 8001866:	f001 fb55 	bl	8002f14 <HAL_TIM_MspPostInit>

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	@ 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000774 	.word	0x20000774
 8001878:	40000400 	.word	0x40000400

0800187c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800189a:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <MX_TIM15_Init+0x98>)
 800189c:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <MX_TIM15_Init+0x9c>)
 800189e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018a2:	221a      	movs	r2, #26
 80018a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018ae:	2231      	movs	r2, #49	@ 0x31
 80018b0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80018c4:	4813      	ldr	r0, [pc, #76]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018c6:	f00e f8e2 	bl	800fa8e <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80018d0:	f000 fd5e 	bl	8002390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	4619      	mov	r1, r3
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018e2:	f00e fb2f 	bl	800ff44 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80018ec:	f000 fd50 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018f0:	2320      	movs	r3, #32
 80018f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_TIM15_Init+0x98>)
 80018fe:	f00f f99b 	bl	8010c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001908:	f000 fd42 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200007c0 	.word	0x200007c0
 8001918:	40014000 	.word	0x40014000

0800191c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001922:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <MX_USART1_UART_Init+0x94>)
 8001924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001964:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001966:	f00f fa29 	bl	8010dbc <HAL_UART_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001970:	f000 fd0e 	bl	8002390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 8001978:	f010 f9f7 	bl	8011d6a <HAL_UARTEx_SetTxFifoThreshold>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001982:	f000 fd05 	bl	8002390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4808      	ldr	r0, [pc, #32]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 800198a:	f010 fa2c 	bl	8011de6 <HAL_UARTEx_SetRxFifoThreshold>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001994:	f000 fcfc 	bl	8002390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <MX_USART1_UART_Init+0x90>)
 800199a:	f010 f9ad 	bl	8011cf8 <HAL_UARTEx_DisableFifoMode>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 fcf4 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000080c 	.word	0x2000080c
 80019b0:	40013800 	.word	0x40013800

080019b4 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <MX_USB_OTG_HS_PCD_Init+0x58>)
 80019bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019c0:	2209      	movs	r2, #9
 80019c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80019c4:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019d8:	2200      	movs	r2, #0
 80019da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019de:	2200      	movs	r2, #0
 80019e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80019f6:	f008 fb90 	bl	800a11a <HAL_PCD_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001a00:	f000 fcc6 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200008a0 	.word	0x200008a0
 8001a0c:	42040000 	.word	0x42040000

08001a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	@ 0x38
 8001a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a26:	4b8c      	ldr	r3, [pc, #560]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2c:	4a8a      	ldr	r2, [pc, #552]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a36:	4b88      	ldr	r3, [pc, #544]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b84      	ldr	r3, [pc, #528]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a4a:	4a83      	ldr	r2, [pc, #524]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a54:	4b80      	ldr	r3, [pc, #512]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a62:	4b7d      	ldr	r3, [pc, #500]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a68:	4a7b      	ldr	r2, [pc, #492]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a72:	4b79      	ldr	r3, [pc, #484]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a80:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a86:	4a74      	ldr	r2, [pc, #464]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a90:	4b71      	ldr	r3, [pc, #452]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aa4:	4a6c      	ldr	r2, [pc, #432]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aae:	4b6a      	ldr	r3, [pc, #424]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b66      	ldr	r3, [pc, #408]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac2:	4a65      	ldr	r2, [pc, #404]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001acc:	4b62      	ldr	r3, [pc, #392]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ada:	4b5f      	ldr	r3, [pc, #380]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aea:	4b5b      	ldr	r3, [pc, #364]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af8:	4b57      	ldr	r3, [pc, #348]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001afe:	4a56      	ldr	r2, [pc, #344]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b08:	4b53      	ldr	r3, [pc, #332]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b16:	4b50      	ldr	r3, [pc, #320]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b26:	4b4c      	ldr	r3, [pc, #304]	@ (8001c58 <MX_GPIO_Init+0x248>)
 8001b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2104      	movs	r1, #4
 8001b38:	4848      	ldr	r0, [pc, #288]	@ (8001c5c <MX_GPIO_Init+0x24c>)
 8001b3a:	f006 fce1 	bl	8008500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2110      	movs	r1, #16
 8001b42:	4846      	ldr	r0, [pc, #280]	@ (8001c5c <MX_GPIO_Init+0x24c>)
 8001b44:	f006 fcdc 	bl	8008500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2114      	movs	r1, #20
 8001b4c:	4844      	ldr	r0, [pc, #272]	@ (8001c60 <MX_GPIO_Init+0x250>)
 8001b4e:	f006 fcd7 	bl	8008500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001b52:	2314      	movs	r3, #20
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	483c      	ldr	r0, [pc, #240]	@ (8001c5c <MX_GPIO_Init+0x24c>)
 8001b6a:	f006 faf1 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b72:	4b3c      	ldr	r3, [pc, #240]	@ (8001c64 <MX_GPIO_Init+0x254>)
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4836      	ldr	r0, [pc, #216]	@ (8001c5c <MX_GPIO_Init+0x24c>)
 8001b82:	f006 fae5 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001b86:	2302      	movs	r3, #2
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b8a:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <MX_GPIO_Init+0x258>)
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4834      	ldr	r0, [pc, #208]	@ (8001c6c <MX_GPIO_Init+0x25c>)
 8001b9a:	f006 fad9 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ba2:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <MX_GPIO_Init+0x260>)
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	482e      	ldr	r0, [pc, #184]	@ (8001c6c <MX_GPIO_Init+0x25c>)
 8001bb2:	f006 facd 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001bb6:	2314      	movs	r3, #20
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4824      	ldr	r0, [pc, #144]	@ (8001c60 <MX_GPIO_Init+0x250>)
 8001bce:	f006 fabf 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	481e      	ldr	r0, [pc, #120]	@ (8001c60 <MX_GPIO_Init+0x250>)
 8001be6:	f006 fab3 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001bea:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481d      	ldr	r0, [pc, #116]	@ (8001c74 <MX_GPIO_Init+0x264>)
 8001c00:	f006 faa6 	bl	8008150 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001c04:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4817      	ldr	r0, [pc, #92]	@ (8001c78 <MX_GPIO_Init+0x268>)
 8001c1a:	f006 fa99 	bl	8008150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	200c      	movs	r0, #12
 8001c24:	f004 f944 	bl	8005eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c28:	200c      	movs	r0, #12
 8001c2a:	f004 f95b 	bl	8005ee4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	200f      	movs	r0, #15
 8001c34:	f004 f93c 	bl	8005eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c38:	200f      	movs	r0, #15
 8001c3a:	f004 f953 	bl	8005ee4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2010      	movs	r0, #16
 8001c44:	f004 f934 	bl	8005eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f004 f94b 	bl	8005ee4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c4e:	bf00      	nop
 8001c50:	3738      	adds	r7, #56	@ 0x38
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	46020c00 	.word	0x46020c00
 8001c5c:	42021000 	.word	0x42021000
 8001c60:	42020c00 	.word	0x42020c00
 8001c64:	10110000 	.word	0x10110000
 8001c68:	10310000 	.word	0x10310000
 8001c6c:	42020000 	.word	0x42020000
 8001c70:	10210000 	.word	0x10210000
 8001c74:	42021800 	.word	0x42021800
 8001c78:	42020400 	.word	0x42020400

08001c7c <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <signExtend24+0x1a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c94:	e002      	b.n	8001c9c <signExtend24+0x20>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <volumeLRPoll>:

static void volumeLRPoll(uint16_t index)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
	  //Channel 1 Volume
	  channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)] = adcGroup1[c1Vol];
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4ac2      	ldr	r2, [pc, #776]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001cba:	8811      	ldrh	r1, [r2, #0]
 8001cbc:	4ac2      	ldr	r2, [pc, #776]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001cbe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	805a      	strh	r2, [r3, #2]
	  channels[0].volumeRunner += channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)];
 8001cca:	4bbf      	ldr	r3, [pc, #764]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001ccc:	f8b3 2412 	ldrh.w	r2, [r3, #1042]	@ 0x412
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	49bc      	ldr	r1, [pc, #752]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001cd8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	440b      	add	r3, r1
 8001ce0:	885b      	ldrh	r3, [r3, #2]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4bb8      	ldr	r3, [pc, #736]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001ce8:	f8a3 2412 	strh.w	r2, [r3, #1042]	@ 0x412
	  channels[0].volumeRunner -= channels[0].volumeBuffer[(index + 1) % (sizeof(channels[0].volumeBuffer) / 2)];
 8001cec:	4bb6      	ldr	r3, [pc, #728]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001cee:	f8b3 2412 	ldrh.w	r2, [r3, #1042]	@ 0x412
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	49b3      	ldr	r1, [pc, #716]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001cfc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	440b      	add	r3, r1
 8001d04:	885b      	ldrh	r3, [r3, #2]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4baf      	ldr	r3, [pc, #700]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d0c:	f8a3 2412 	strh.w	r2, [r3, #1042]	@ 0x412

	  //Channel 2 Volume
	  channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)] = adcGroup1[c2Vol];
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	4aab      	ldr	r2, [pc, #684]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001d18:	8851      	ldrh	r1, [r2, #2]
 8001d1a:	4aab      	ldr	r2, [pc, #684]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d1c:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	460a      	mov	r2, r1
 8001d26:	805a      	strh	r2, [r3, #2]
	  channels[1].volumeRunner += channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)];
 8001d28:	4ba7      	ldr	r3, [pc, #668]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d2a:	f8b3 286a 	ldrh.w	r2, [r3, #2154]	@ 0x86a
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	49a4      	ldr	r1, [pc, #656]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d36:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	440b      	add	r3, r1
 8001d3e:	885b      	ldrh	r3, [r3, #2]
 8001d40:	4413      	add	r3, r2
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4ba0      	ldr	r3, [pc, #640]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d46:	f8a3 286a 	strh.w	r2, [r3, #2154]	@ 0x86a
	  channels[1].volumeRunner -= channels[1].volumeBuffer[(index + 1) % (sizeof(channels[1].volumeBuffer) / 2)];
 8001d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d4c:	f8b3 286a 	ldrh.w	r2, [r3, #2154]	@ 0x86a
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	499b      	ldr	r1, [pc, #620]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d5a:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	885b      	ldrh	r3, [r3, #2]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b97      	ldr	r3, [pc, #604]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d6a:	f8a3 286a 	strh.w	r2, [r3, #2154]	@ 0x86a

	  //Channel 3 Volume
	  channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)] = adcGroup1[c3Vol];
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4a93      	ldr	r2, [pc, #588]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001d76:	8891      	ldrh	r1, [r2, #4]
 8001d78:	4a93      	ldr	r2, [pc, #588]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d7a:	f503 63cb 	add.w	r3, r3, #1624	@ 0x658
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	460a      	mov	r2, r1
 8001d84:	805a      	strh	r2, [r3, #2]
	  channels[2].volumeRunner += channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)];
 8001d86:	4b90      	ldr	r3, [pc, #576]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d88:	f8b3 2cc2 	ldrh.w	r2, [r3, #3266]	@ 0xcc2
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	498d      	ldr	r1, [pc, #564]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001d94:	f503 63cb 	add.w	r3, r3, #1624	@ 0x658
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	440b      	add	r3, r1
 8001d9c:	885b      	ldrh	r3, [r3, #2]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b89      	ldr	r3, [pc, #548]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001da4:	f8a3 2cc2 	strh.w	r2, [r3, #3266]	@ 0xcc2
	  channels[2].volumeRunner -= channels[2].volumeBuffer[(index + 1) % (sizeof(channels[2].volumeBuffer) / 2)];
 8001da8:	4b87      	ldr	r3, [pc, #540]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001daa:	f8b3 2cc2 	ldrh.w	r2, [r3, #3266]	@ 0xcc2
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	4984      	ldr	r1, [pc, #528]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001db8:	f503 63cb 	add.w	r3, r3, #1624	@ 0x658
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	440b      	add	r3, r1
 8001dc0:	885b      	ldrh	r3, [r3, #2]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b80      	ldr	r3, [pc, #512]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001dc8:	f8a3 2cc2 	strh.w	r2, [r3, #3266]	@ 0xcc2

	  //Channel 4 Volume
	  channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)] = adcGroup1[c4Vol];
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001dd4:	88d1      	ldrh	r1, [r2, #6]
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001dd8:	f603 0384 	addw	r3, r3, #2180	@ 0x884
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	460a      	mov	r2, r1
 8001de2:	805a      	strh	r2, [r3, #2]
	  channels[3].volumeRunner += channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)];
 8001de4:	4b78      	ldr	r3, [pc, #480]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dea:	f8b3 211a 	ldrh.w	r2, [r3, #282]	@ 0x11a
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4974      	ldr	r1, [pc, #464]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001df6:	f603 0384 	addw	r3, r3, #2180	@ 0x884
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	440b      	add	r3, r1
 8001dfe:	885b      	ldrh	r3, [r3, #2]
 8001e00:	4413      	add	r3, r2
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b70      	ldr	r3, [pc, #448]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0a:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
	  channels[3].volumeRunner -= channels[3].volumeBuffer[(index + 1) % (sizeof(channels[3].volumeBuffer) / 2)];
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e14:	f8b3 211a 	ldrh.w	r2, [r3, #282]	@ 0x11a
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4969      	ldr	r1, [pc, #420]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e22:	f603 0384 	addw	r3, r3, #2180	@ 0x884
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	885b      	ldrh	r3, [r3, #2]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b65      	ldr	r3, [pc, #404]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e36:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a

	  //Channel 5 Volume
	  channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)] = adcGroup1[c5Vol];
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4a60      	ldr	r2, [pc, #384]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001e42:	8911      	ldrh	r1, [r2, #8]
 8001e44:	4a60      	ldr	r2, [pc, #384]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e46:	f503 632b 	add.w	r3, r3, #2736	@ 0xab0
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	460a      	mov	r2, r1
 8001e50:	805a      	strh	r2, [r3, #2]
	  channels[4].volumeRunner += channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)];
 8001e52:	4b5d      	ldr	r3, [pc, #372]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e58:	f8b3 2572 	ldrh.w	r2, [r3, #1394]	@ 0x572
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	4959      	ldr	r1, [pc, #356]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e64:	f503 632b 	add.w	r3, r3, #2736	@ 0xab0
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	440b      	add	r3, r1
 8001e6c:	885b      	ldrh	r3, [r3, #2]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b55      	ldr	r3, [pc, #340]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e78:	f8a3 2572 	strh.w	r2, [r3, #1394]	@ 0x572
	  channels[4].volumeRunner -= channels[4].volumeBuffer[(index + 1) % (sizeof(channels[4].volumeBuffer) / 2)];
 8001e7c:	4b52      	ldr	r3, [pc, #328]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e82:	f8b3 2572 	ldrh.w	r2, [r3, #1394]	@ 0x572
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	494e      	ldr	r1, [pc, #312]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001e90:	f503 632b 	add.w	r3, r3, #2736	@ 0xab0
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	885b      	ldrh	r3, [r3, #2]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea4:	f8a3 2572 	strh.w	r2, [r3, #1394]	@ 0x572

	  //Channel 6 Volume
	  channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)] = adcGroup1[c6Vol];
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	4a45      	ldr	r2, [pc, #276]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001eb0:	8951      	ldrh	r1, [r2, #10]
 8001eb2:	4a45      	ldr	r2, [pc, #276]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001eb4:	f603 43dc 	addw	r3, r3, #3292	@ 0xcdc
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	805a      	strh	r2, [r3, #2]
	  channels[5].volumeRunner += channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)];
 8001ec0:	4b41      	ldr	r3, [pc, #260]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec6:	f8b3 29ca 	ldrh.w	r2, [r3, #2506]	@ 0x9ca
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	493d      	ldr	r1, [pc, #244]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001ed2:	f603 43dc 	addw	r3, r3, #3292	@ 0xcdc
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	885b      	ldrh	r3, [r3, #2]
 8001edc:	4413      	add	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee6:	f8a3 29ca 	strh.w	r2, [r3, #2506]	@ 0x9ca
	  channels[5].volumeRunner -= channels[5].volumeBuffer[(index + 1) % (sizeof(channels[5].volumeBuffer) / 2)];
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef0:	f8b3 29ca 	ldrh.w	r2, [r3, #2506]	@ 0x9ca
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4932      	ldr	r1, [pc, #200]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001efe:	f603 43dc 	addw	r3, r3, #3292	@ 0xcdc
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f12:	f8a3 29ca 	strh.w	r2, [r3, #2506]	@ 0x9ca

	  //Channel 1 LR
	  channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)] = adcGroup1[c1LR];
 8001f16:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001f18:	8a1a      	ldrh	r2, [r3, #16]
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	ee07 2a90 	vmov	s15, r2
 8001f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f28:	4a27      	ldr	r2, [pc, #156]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001f2a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3304      	adds	r3, #4
 8001f34:	edc3 7a00 	vstr	s15, [r3]
	  channels[0].lrRunner += channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)];
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001f3a:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	@ 0x434
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001f4e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f64:	ee17 3a90 	vmov	r3, s15
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001f6c:	f8a3 2434 	strh.w	r2, [r3, #1076]	@ 0x434
	  channels[0].lrRunner -= channels[0].lrBuffer[(index + 1) % (sizeof(channels[0].lrBuffer) / 2)];
 8001f70:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001f72:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	@ 0x434
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	3301      	adds	r3, #1
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a10      	ldr	r2, [pc, #64]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001f88:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3304      	adds	r3, #4
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9e:	ee17 3a90 	vmov	r3, s15
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001fa6:	f8a3 2434 	strh.w	r2, [r3, #1076]	@ 0x434

	  //Channel 2 LR
	  channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)] = adcGroup1[c2LR];
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <volumeLRPoll+0x31c>)
 8001fac:	8a5a      	ldrh	r2, [r3, #18]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	ee07 2a90 	vmov	s15, r2
 8001fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fbc:	4a02      	ldr	r2, [pc, #8]	@ (8001fc8 <volumeLRPoll+0x320>)
 8001fbe:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001fc2:	e003      	b.n	8001fcc <volumeLRPoll+0x324>
 8001fc4:	2002c974 	.word	0x2002c974
 8001fc8:	20031990 	.word	0x20031990
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	edc3 7a00 	vstr	s15, [r3]
	  channels[1].lrRunner += channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)];
 8001fd6:	4bbf      	ldr	r3, [pc, #764]	@ (80022d4 <volumeLRPoll+0x62c>)
 8001fd8:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	@ 0x88c
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	4aba      	ldr	r2, [pc, #744]	@ (80022d4 <volumeLRPoll+0x62c>)
 8001fec:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002002:	ee17 3a90 	vmov	r3, s15
 8002006:	b29a      	uxth	r2, r3
 8002008:	4bb2      	ldr	r3, [pc, #712]	@ (80022d4 <volumeLRPoll+0x62c>)
 800200a:	f8a3 288c 	strh.w	r2, [r3, #2188]	@ 0x88c
	  channels[1].lrRunner -= channels[1].lrBuffer[(index + 1) % (sizeof(channels[1].lrBuffer) / 2)];
 800200e:	4bb1      	ldr	r3, [pc, #708]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002010:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	@ 0x88c
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	3301      	adds	r3, #1
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	4aab      	ldr	r2, [pc, #684]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002026:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203c:	ee17 3a90 	vmov	r3, s15
 8002040:	b29a      	uxth	r2, r3
 8002042:	4ba4      	ldr	r3, [pc, #656]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002044:	f8a3 288c 	strh.w	r2, [r3, #2188]	@ 0x88c

	  //Channel 3 LR
	  channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)] = adcGroup1[c3LR];
 8002048:	4ba3      	ldr	r3, [pc, #652]	@ (80022d8 <volumeLRPoll+0x630>)
 800204a:	8a9a      	ldrh	r2, [r3, #20]
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	ee07 2a90 	vmov	s15, r2
 8002056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205a:	4a9e      	ldr	r2, [pc, #632]	@ (80022d4 <volumeLRPoll+0x62c>)
 800205c:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	edc3 7a00 	vstr	s15, [r3]
	  channels[2].lrRunner += channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)];
 800206a:	4b9a      	ldr	r3, [pc, #616]	@ (80022d4 <volumeLRPoll+0x62c>)
 800206c:	f8b3 3ce4 	ldrh.w	r3, [r3, #3300]	@ 0xce4
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	4a95      	ldr	r2, [pc, #596]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002080:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002096:	ee17 3a90 	vmov	r3, s15
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b8d      	ldr	r3, [pc, #564]	@ (80022d4 <volumeLRPoll+0x62c>)
 800209e:	f8a3 2ce4 	strh.w	r2, [r3, #3300]	@ 0xce4
	  channels[2].lrRunner -= channels[2].lrBuffer[(index + 1) % (sizeof(channels[2].lrBuffer) / 2)];
 80020a2:	4b8c      	ldr	r3, [pc, #560]	@ (80022d4 <volumeLRPoll+0x62c>)
 80020a4:	f8b3 3ce4 	ldrh.w	r3, [r3, #3300]	@ 0xce4
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	4a86      	ldr	r2, [pc, #536]	@ (80022d4 <volumeLRPoll+0x62c>)
 80020ba:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d0:	ee17 3a90 	vmov	r3, s15
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b7f      	ldr	r3, [pc, #508]	@ (80022d4 <volumeLRPoll+0x62c>)
 80020d8:	f8a3 2ce4 	strh.w	r2, [r3, #3300]	@ 0xce4

	  //Channel 4 LR
	  channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)] = adcGroup1[c4LR];
 80020dc:	4b7e      	ldr	r3, [pc, #504]	@ (80022d8 <volumeLRPoll+0x630>)
 80020de:	8ada      	ldrh	r2, [r3, #22]
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	ee07 2a90 	vmov	s15, r2
 80020ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ee:	4a79      	ldr	r2, [pc, #484]	@ (80022d4 <volumeLRPoll+0x62c>)
 80020f0:	f203 4346 	addw	r3, r3, #1094	@ 0x446
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3304      	adds	r3, #4
 80020fa:	edc3 7a00 	vstr	s15, [r3]
	  channels[3].lrRunner += channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)];
 80020fe:	4b75      	ldr	r3, [pc, #468]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002104:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a6f      	ldr	r2, [pc, #444]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002118:	f203 4346 	addw	r3, r3, #1094	@ 0x446
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212e:	ee17 3a90 	vmov	r3, s15
 8002132:	b29a      	uxth	r2, r3
 8002134:	4b67      	ldr	r3, [pc, #412]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800213a:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
	  channels[3].lrRunner -= channels[3].lrBuffer[(index + 1) % (sizeof(channels[3].lrBuffer) / 2)];
 800213e:	4b65      	ldr	r3, [pc, #404]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002144:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	3301      	adds	r3, #1
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4a5e      	ldr	r2, [pc, #376]	@ (80022d4 <volumeLRPoll+0x62c>)
 800215a:	f203 4346 	addw	r3, r3, #1094	@ 0x446
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3304      	adds	r3, #4
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002170:	ee17 3a90 	vmov	r3, s15
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217c:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	  //Channel 5 LR
	  channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)] = adcGroup4[c5LR];
 8002180:	4b56      	ldr	r3, [pc, #344]	@ (80022dc <volumeLRPoll+0x634>)
 8002182:	881a      	ldrh	r2, [r3, #0]
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	ee07 2a90 	vmov	s15, r2
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	4a50      	ldr	r2, [pc, #320]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002194:	f203 535c 	addw	r3, r3, #1372	@ 0x55c
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	edc3 7a00 	vstr	s15, [r3]
	  channels[4].lrRunner += channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)];
 80021a2:	4b4c      	ldr	r3, [pc, #304]	@ (80022d4 <volumeLRPoll+0x62c>)
 80021a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a8:	f8b3 3594 	ldrh.w	r3, [r3, #1428]	@ 0x594
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	4a46      	ldr	r2, [pc, #280]	@ (80022d4 <volumeLRPoll+0x62c>)
 80021bc:	f203 535c 	addw	r3, r3, #1372	@ 0x55c
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d2:	ee17 3a90 	vmov	r3, s15
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <volumeLRPoll+0x62c>)
 80021da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021de:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
	  channels[4].lrRunner -= channels[4].lrBuffer[(index + 1) % (sizeof(channels[4].lrBuffer) / 2)];
 80021e2:	4b3c      	ldr	r3, [pc, #240]	@ (80022d4 <volumeLRPoll+0x62c>)
 80021e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e8:	f8b3 3594 	ldrh.w	r3, [r3, #1428]	@ 0x594
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	4a35      	ldr	r2, [pc, #212]	@ (80022d4 <volumeLRPoll+0x62c>)
 80021fe:	f203 535c 	addw	r3, r3, #1372	@ 0x55c
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b2e      	ldr	r3, [pc, #184]	@ (80022d4 <volumeLRPoll+0x62c>)
 800221c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002220:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594

	  //Channel 6 LR
	  channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)] = adcGroup4[c6LR];
 8002224:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <volumeLRPoll+0x634>)
 8002226:	885a      	ldrh	r2, [r3, #2]
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	ee07 2a90 	vmov	s15, r2
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002238:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	edc3 7a00 	vstr	s15, [r3]
	  channels[5].lrRunner += channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)];
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800224c:	f8b3 39ec 	ldrh.w	r3, [r3, #2540]	@ 0x9ec
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002260:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002276:	ee17 3a90 	vmov	r3, s15
 800227a:	b29a      	uxth	r2, r3
 800227c:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <volumeLRPoll+0x62c>)
 800227e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002282:	f8a3 29ec 	strh.w	r2, [r3, #2540]	@ 0x9ec
	  channels[5].lrRunner -= channels[5].lrBuffer[(index + 1) % (sizeof(channels[5].lrBuffer) / 2)];
 8002286:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <volumeLRPoll+0x62c>)
 8002288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228c:	f8b3 39ec 	ldrh.w	r3, [r3, #2540]	@ 0x9ec
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	3301      	adds	r3, #1
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <volumeLRPoll+0x62c>)
 80022a2:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b8:	ee17 3a90 	vmov	r3, s15
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <volumeLRPoll+0x62c>)
 80022c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c4:	f8a3 29ec 	strh.w	r2, [r3, #2540]	@ 0x9ec
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	20031990 	.word	0x20031990
 80022d8:	2002c974 	.word	0x2002c974
 80022dc:	2002c98c 	.word	0x2002c98c

080022e0 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <HAL_SAI_RxHalfCpltCallback+0x20>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 80022ee:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_SAI_RxHalfCpltCallback+0x24>)
 80022f0:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20033c50 	.word	0x20033c50
 8002304:	20033c54 	.word	0x20033c54
 8002308:	2002c990 	.word	0x2002c990

0800230c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_SAI_RxCpltCallback+0x20>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 800231a:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_SAI_RxCpltCallback+0x24>)
 800231c:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <HAL_SAI_RxCpltCallback+0x28>)
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	20033c50 	.word	0x20033c50
 8002330:	20033c54 	.word	0x20033c54
 8002334:	2002e990 	.word	0x2002e990

08002338 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_SAI_TxHalfCpltCallback+0x20>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 8002346:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_SAI_TxHalfCpltCallback+0x24>)
 8002348:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_SAI_TxHalfCpltCallback+0x28>)
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	20033c51 	.word	0x20033c51
 800235c:	20033c58 	.word	0x20033c58
 8002360:	20030990 	.word	0x20030990

08002364 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	dacReady = true;
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_SAI_TxCpltCallback+0x20>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 8002372:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_SAI_TxCpltCallback+0x24>)
 8002374:	4a05      	ldr	r2, [pc, #20]	@ (800238c <HAL_SAI_TxCpltCallback+0x28>)
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20033c51 	.word	0x20033c51
 8002388:	20033c58 	.word	0x20033c58
 800238c:	20031190 	.word	0x20031190

08002390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <Error_Handler+0x8>

0800239c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_MspInit+0x30>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a8:	4a08      	ldr	r2, [pc, #32]	@ (80023cc <HAL_MspInit+0x30>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_MspInit+0x30>)
 80023b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80023c0:	f008 f8e8 	bl	800a594 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	46020c00 	.word	0x46020c00

080023d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b0e4      	sub	sp, #400	@ 0x190
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023de:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  DMA_TriggerConfTypeDef TriggerConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023f4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023f8:	4618      	mov	r0, r3
 80023fa:	23e0      	movs	r3, #224	@ 0xe0
 80023fc:	461a      	mov	r2, r3
 80023fe:	2100      	movs	r1, #0
 8002400:	f010 f9e5 	bl	80127ce <memset>
  if(hadc->Instance==ADC1)
 8002404:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002408:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4aa1      	ldr	r2, [pc, #644]	@ (8002698 <HAL_ADC_MspInit+0x2c8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	f040 8152 	bne.w	80026bc <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002418:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800241c:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8002420:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800242c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002430:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002434:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002438:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	4618      	mov	r0, r3
 8002442:	f009 fb81 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800244c:	f7ff ffa0 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002450:	4b92      	ldr	r3, [pc, #584]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 8002452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002456:	4a91      	ldr	r2, [pc, #580]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 8002458:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800245c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002460:	4b8e      	ldr	r3, [pc, #568]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002466:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800246a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800246e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002478:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800247c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247e:	4b87      	ldr	r3, [pc, #540]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002484:	4a85      	ldr	r2, [pc, #532]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800248e:	4b83      	ldr	r3, [pc, #524]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 8002490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002494:	f003 0204 	and.w	r2, r3, #4
 8002498:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800249c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024a6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80024aa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	4b7b      	ldr	r3, [pc, #492]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 80024ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b2:	4a7a      	ldr	r2, [pc, #488]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024bc:	4b77      	ldr	r3, [pc, #476]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 80024be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c2:	f003 0201 	and.w	r2, r3, #1
 80024c6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024ca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024d4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80024d8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b70      	ldr	r3, [pc, #448]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 80024dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e0:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ea:	4b6c      	ldr	r3, [pc, #432]	@ (800269c <HAL_ADC_MspInit+0x2cc>)
 80024ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f0:	f003 0202 	and.w	r2, r3, #2
 80024f4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024f8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002502:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002506:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8002508:	230f      	movs	r3, #15
 800250a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250e:	2303      	movs	r3, #3
 8002510:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251a:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800251e:	4619      	mov	r1, r3
 8002520:	485f      	ldr	r0, [pc, #380]	@ (80026a0 <HAL_ADC_MspInit+0x2d0>)
 8002522:	f005 fe15 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8002526:	23ed      	movs	r3, #237	@ 0xed
 8002528:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252c:	2303      	movs	r3, #3
 800252e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800253c:	4619      	mov	r1, r3
 800253e:	4859      	ldr	r0, [pc, #356]	@ (80026a4 <HAL_ADC_MspInit+0x2d4>)
 8002540:	f005 fe06 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8002544:	2303      	movs	r3, #3
 8002546:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254a:	2303      	movs	r3, #3
 800254c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002556:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800255a:	4619      	mov	r1, r3
 800255c:	4852      	ldr	r0, [pc, #328]	@ (80026a8 <HAL_ADC_MspInit+0x2d8>)
 800255e:	f005 fdf7 	bl	8008150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002562:	2321      	movs	r3, #33	@ 0x21
 8002564:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002580:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002584:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002588:	2301      	movs	r3, #1
 800258a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800258e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002592:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcBurstLength = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.DestBurstLength = 1;
 800259c:	2301      	movs	r3, #1
 800259e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80025a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025a6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.Mode = DMA_NORMAL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80025bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80025c4:	232b      	movs	r3, #43	@ 0x2b
 80025c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80025d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80025da:	4934      	ldr	r1, [pc, #208]	@ (80026ac <HAL_ADC_MspInit+0x2dc>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fe95 	bl	800730c <HAL_DMAEx_List_BuildNode>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80025e8:	f7ff fed2 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80025ec:	4a2f      	ldr	r2, [pc, #188]	@ (80026ac <HAL_ADC_MspInit+0x2dc>)
 80025ee:	2100      	movs	r1, #0
 80025f0:	482f      	ldr	r0, [pc, #188]	@ (80026b0 <HAL_ADC_MspInit+0x2e0>)
 80025f2:	f004 feb7 	bl	8007364 <HAL_DMAEx_List_InsertNode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80025fc:	f7ff fec8 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8002600:	482b      	ldr	r0, [pc, #172]	@ (80026b0 <HAL_ADC_MspInit+0x2e0>)
 8002602:	f004 ff78 	bl	80074f6 <HAL_DMAEx_List_SetCircularMode>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 800260c:	f7ff fec0 	bl	8002390 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002610:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002612:	4a29      	ldr	r2, [pc, #164]	@ (80026b8 <HAL_ADC_MspInit+0x2e8>)
 8002614:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002616:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002618:	2200      	movs	r2, #0
 800261a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800261c:	4b25      	ldr	r3, [pc, #148]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 800261e:	2200      	movs	r2, #0
 8002620:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002622:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002624:	2200      	movs	r2, #0
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002628:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800262e:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002630:	2281      	movs	r2, #129	@ 0x81
 8002632:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002634:	481f      	ldr	r0, [pc, #124]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002636:	f004 fca9 	bl	8006f8c <HAL_DMAEx_List_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8002640:	f7ff fea6 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002644:	491a      	ldr	r1, [pc, #104]	@ (80026b0 <HAL_ADC_MspInit+0x2e0>)
 8002646:	481b      	ldr	r0, [pc, #108]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002648:	f004 ffb6 	bl	80075b8 <HAL_DMAEx_List_LinkQ>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8002652:	f7ff fe9d 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8002656:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800265a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002662:	671a      	str	r2, [r3, #112]	@ 0x70
 8002664:	4a13      	ldr	r2, [pc, #76]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002666:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800266a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002672:	2110      	movs	r1, #16
 8002674:	480f      	ldr	r0, [pc, #60]	@ (80026b4 <HAL_ADC_MspInit+0x2e4>)
 8002676:	f004 f897 	bl	80067a8 <HAL_DMA_ConfigChannelAttributes>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8002680:	f7ff fe86 	bl	8002390 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	2025      	movs	r0, #37	@ 0x25
 800268a:	f003 fc11 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800268e:	2025      	movs	r0, #37	@ 0x25
 8002690:	f003 fc28 	bl	8005ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002694:	e0d5      	b.n	8002842 <HAL_ADC_MspInit+0x472>
 8002696:	bf00      	nop
 8002698:	42028000 	.word	0x42028000
 800269c:	46020c00 	.word	0x46020c00
 80026a0:	42020800 	.word	0x42020800
 80026a4:	42020000 	.word	0x42020000
 80026a8:	42020400 	.word	0x42020400
 80026ac:	20000168 	.word	0x20000168
 80026b0:	2000018c 	.word	0x2000018c
 80026b4:	200001a4 	.word	0x200001a4
 80026b8:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 80026bc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80026c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a60      	ldr	r2, [pc, #384]	@ (800284c <HAL_ADC_MspInit+0x47c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f040 80b9 	bne.w	8002842 <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80026d0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80026d4:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80026d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80026e4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80026e8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	4618      	mov	r0, r3
 80026fa:	f009 fa25 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8002704:	f7ff fe44 	bl	8002390 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8002708:	4b51      	ldr	r3, [pc, #324]	@ (8002850 <HAL_ADC_MspInit+0x480>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270e:	4a50      	ldr	r2, [pc, #320]	@ (8002850 <HAL_ADC_MspInit+0x480>)
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <HAL_ADC_MspInit+0x480>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271e:	f003 0220 	and.w	r2, r3, #32
 8002722:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002726:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002730:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002734:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002736:	4b46      	ldr	r3, [pc, #280]	@ (8002850 <HAL_ADC_MspInit+0x480>)
 8002738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800273c:	4a44      	ldr	r2, [pc, #272]	@ (8002850 <HAL_ADC_MspInit+0x480>)
 800273e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002742:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002746:	4b42      	ldr	r3, [pc, #264]	@ (8002850 <HAL_ADC_MspInit+0x480>)
 8002748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800274c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002750:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002754:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800275e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002762:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8002764:	2303      	movs	r3, #3
 8002766:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276a:	2303      	movs	r3, #3
 800276c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002776:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800277a:	4619      	mov	r1, r3
 800277c:	4835      	ldr	r0, [pc, #212]	@ (8002854 <HAL_ADC_MspInit+0x484>)
 800277e:	f005 fce7 	bl	8008150 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002782:	4b35      	ldr	r3, [pc, #212]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 8002784:	4a35      	ldr	r2, [pc, #212]	@ (800285c <HAL_ADC_MspInit+0x48c>)
 8002786:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8002788:	4b33      	ldr	r3, [pc, #204]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 800278a:	2201      	movs	r2, #1
 800278c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800278e:	4b32      	ldr	r3, [pc, #200]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002794:	4b30      	ldr	r3, [pc, #192]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800279a:	4b2f      	ldr	r3, [pc, #188]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80027a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80027a6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80027a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80027ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027b4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80027b6:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80027bc:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027be:	2201      	movs	r2, #1
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80027c8:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80027d4:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80027da:	481f      	ldr	r0, [pc, #124]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 80027dc:	f003 fc44 	bl	8006068 <HAL_DMA_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 80027e6:	f7ff fdd3 	bl	8002390 <Error_Handler>
    TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80027f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80027f8:	232b      	movs	r3, #43	@ 0x2b
 80027fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA1_Channel2, &TriggerConfig) != HAL_OK)
 80027fe:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002802:	4619      	mov	r1, r3
 8002804:	4814      	ldr	r0, [pc, #80]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 8002806:	f004 ff6d 	bl	80076e4 <HAL_DMAEx_ConfigTrigger>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_ADC_MspInit+0x444>
      Error_Handler();
 8002810:	f7ff fdbe 	bl	8002390 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8002814:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002818:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a0e      	ldr	r2, [pc, #56]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 8002820:	671a      	str	r2, [r3, #112]	@ 0x70
 8002822:	4a0d      	ldr	r2, [pc, #52]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 8002824:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002828:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002830:	2110      	movs	r1, #16
 8002832:	4809      	ldr	r0, [pc, #36]	@ (8002858 <HAL_ADC_MspInit+0x488>)
 8002834:	f003 ffb8 	bl	80067a8 <HAL_DMA_ConfigChannelAttributes>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_ADC_MspInit+0x472>
      Error_Handler();
 800283e:	f7ff fda7 	bl	8002390 <Error_Handler>
}
 8002842:	bf00      	nop
 8002844:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	46021000 	.word	0x46021000
 8002850:	46020c00 	.word	0x46020c00
 8002854:	42021800 	.word	0x42021800
 8002858:	2000021c 	.word	0x2000021c
 800285c:	40020150 	.word	0x40020150

08002860 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <HAL_DMA2D_MspInit+0x3c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10e      	bne.n	8002890 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_DMA2D_MspInit+0x40>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002878:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_DMA2D_MspInit+0x40>)
 800287a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002882:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <HAL_DMA2D_MspInit+0x40>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002888:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	4002b000 	.word	0x4002b000
 80028a0:	46020c00 	.word	0x46020c00

080028a4 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	@ 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2a      	ldr	r2, [pc, #168]	@ (800296c <HAL_XSPI_MspInit+0xc8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d14d      	bne.n	8002962 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 80028c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 80028ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d6:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028e4:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 80028e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ea:	4a21      	ldr	r2, [pc, #132]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 80028ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 80028f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002902:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002908:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002912:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <HAL_XSPI_MspInit+0xcc>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8002920:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8002924:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8002932:	2308      	movs	r3, #8
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	480d      	ldr	r0, [pc, #52]	@ (8002974 <HAL_XSPI_MspInit+0xd0>)
 800293e:	f005 fc07 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002942:	230f      	movs	r3, #15
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8002952:	2308      	movs	r3, #8
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	4806      	ldr	r0, [pc, #24]	@ (8002978 <HAL_XSPI_MspInit+0xd4>)
 800295e:	f005 fbf7 	bl	8008150 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	@ 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	420d3400 	.word	0x420d3400
 8002970:	46020c00 	.word	0x46020c00
 8002974:	42021c00 	.word	0x42021c00
 8002978:	42022000 	.word	0x42022000

0800297c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b0c4      	sub	sp, #272	@ 0x110
 8002980:	af00      	add	r7, sp, #0
 8002982:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002986:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800298a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299c:	f107 0318 	add.w	r3, r7, #24
 80029a0:	22e0      	movs	r2, #224	@ 0xe0
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00f ff12 	bl	80127ce <memset>
  if(hi2c->Instance==I2C1)
 80029aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a63      	ldr	r2, [pc, #396]	@ (8002b44 <HAL_I2C_MspInit+0x1c8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d14f      	bne.n	8002a5c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029bc:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ce:	f107 0318 	add.w	r3, r7, #24
 80029d2:	4618      	mov	r0, r3
 80029d4:	f009 f8b8 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80029de:	f7ff fcd7 	bl	8002390 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029e2:	4b59      	ldr	r3, [pc, #356]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 80029e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e8:	4a57      	ldr	r2, [pc, #348]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 80029ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029f2:	4b55      	ldr	r3, [pc, #340]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002a00:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a08:	2312      	movs	r3, #18
 8002a0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a20:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002a24:	4619      	mov	r1, r3
 8002a26:	4849      	ldr	r0, [pc, #292]	@ (8002b4c <HAL_I2C_MspInit+0x1d0>)
 8002a28:	f005 fb92 	bl	8008150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a2c:	4b46      	ldr	r3, [pc, #280]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a32:	4a45      	ldr	r2, [pc, #276]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002a34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a38:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002a3c:	4b42      	ldr	r3, [pc, #264]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a42:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002a46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a58:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a5a:	e06e      	b.n	8002b3a <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8002a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a39      	ldr	r2, [pc, #228]	@ (8002b50 <HAL_I2C_MspInit+0x1d4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d165      	bne.n	8002b3a <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a6e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a80:	f107 0318 	add.w	r3, r7, #24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f009 f85f 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002a90:	f7ff fc7e 	bl	8002390 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a94:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aa4:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aaa:	f003 0220 	and.w	r2, r3, #32
 8002aae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ac0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac8:	2312      	movs	r3, #18
 8002aca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ada:	2304      	movs	r3, #4
 8002adc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ae0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	481b      	ldr	r0, [pc, #108]	@ (8002b54 <HAL_I2C_MspInit+0x1d8>)
 8002ae8:	f005 fb32 	bl	8008150 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002aec:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002af2:	4a15      	ldr	r2, [pc, #84]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002af4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002af8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002afc:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_I2C_MspInit+0x1cc>)
 8002afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b02:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b18:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2039      	movs	r0, #57	@ 0x39
 8002b20:	f003 f9c6 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002b24:	2039      	movs	r0, #57	@ 0x39
 8002b26:	f003 f9dd 	bl	8005ee4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	203a      	movs	r0, #58	@ 0x3a
 8002b30:	f003 f9be 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002b34:	203a      	movs	r0, #58	@ 0x3a
 8002b36:	f003 f9d5 	bl	8005ee4 <HAL_NVIC_EnableIRQ>
}
 8002b3a:	bf00      	nop
 8002b3c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40005400 	.word	0x40005400
 8002b48:	46020c00 	.word	0x46020c00
 8002b4c:	42021800 	.word	0x42021800
 8002b50:	40005800 	.word	0x40005800
 8002b54:	42021400 	.word	0x42021400

08002b58 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0c6      	sub	sp, #280	@ 0x118
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b66:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b78:	f107 0320 	add.w	r3, r7, #32
 8002b7c:	22e0      	movs	r2, #224	@ 0xe0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00f fe24 	bl	80127ce <memset>
  if(hltdc->Instance==LTDC)
 8002b86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a92      	ldr	r2, [pc, #584]	@ (8002ddc <HAL_LTDC_MspInit+0x284>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f040 811b 	bne.w	8002dd0 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0302 	mov.w	r3, #2
 8002ba2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8002bac:	2303      	movs	r3, #3
 8002bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8002bb4:	2332      	movs	r3, #50	@ 0x32
 8002bb6:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8002bcc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd2:	f107 0320 	add.w	r3, r7, #32
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f008 ffb6 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8002be2:	f7ff fbd5 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002be6:	4b7e      	ldr	r3, [pc, #504]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bec:	4a7c      	ldr	r2, [pc, #496]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002bee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bf2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002bf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c04:	4b76      	ldr	r3, [pc, #472]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c0a:	4a75      	ldr	r2, [pc, #468]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c14:	4b72      	ldr	r3, [pc, #456]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1a:	f003 0202 	and.w	r2, r3, #2
 8002c1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c2c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c30:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c32:	4b6b      	ldr	r3, [pc, #428]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c38:	4a69      	ldr	r2, [pc, #420]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c42:	4b67      	ldr	r3, [pc, #412]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c48:	f003 0210 	and.w	r2, r3, #16
 8002c4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c5e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c60:	4b5f      	ldr	r3, [pc, #380]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c66:	4a5e      	ldr	r2, [pc, #376]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c68:	f043 0308 	orr.w	r3, r3, #8
 8002c6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c70:	4b5b      	ldr	r3, [pc, #364]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c76:	f003 0208 	and.w	r2, r3, #8
 8002c7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c8c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c94:	4a52      	ldr	r2, [pc, #328]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c9e:	4b50      	ldr	r3, [pc, #320]	@ (8002de0 <HAL_LTDC_MspInit+0x288>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca4:	f003 0204 	and.w	r2, r3, #4
 8002ca8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002cac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002cb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cba:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4840      	ldr	r0, [pc, #256]	@ (8002de4 <HAL_LTDC_MspInit+0x28c>)
 8002ce2:	f005 fa35 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002ce6:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8002cea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002d00:	2308      	movs	r3, #8
 8002d02:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d06:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4836      	ldr	r0, [pc, #216]	@ (8002de8 <HAL_LTDC_MspInit+0x290>)
 8002d0e:	f005 fa1f 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002d12:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002d16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d32:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d36:	4619      	mov	r1, r3
 8002d38:	482c      	ldr	r0, [pc, #176]	@ (8002dec <HAL_LTDC_MspInit+0x294>)
 8002d3a:	f005 fa09 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d3e:	23c0      	movs	r3, #192	@ 0xc0
 8002d40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002d56:	2307      	movs	r3, #7
 8002d58:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d60:	4619      	mov	r1, r3
 8002d62:	4823      	ldr	r0, [pc, #140]	@ (8002df0 <HAL_LTDC_MspInit+0x298>)
 8002d64:	f005 f9f4 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002d82:	2308      	movs	r3, #8
 8002d84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d88:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4818      	ldr	r0, [pc, #96]	@ (8002df0 <HAL_LTDC_MspInit+0x298>)
 8002d90:	f005 f9de 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002dae:	2307      	movs	r3, #7
 8002db0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002db8:	4619      	mov	r1, r3
 8002dba:	480a      	ldr	r0, [pc, #40]	@ (8002de4 <HAL_LTDC_MspInit+0x28c>)
 8002dbc:	f005 f9c8 	bl	8008150 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2087      	movs	r0, #135	@ 0x87
 8002dc6:	f003 f873 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002dca:	2087      	movs	r0, #135	@ 0x87
 8002dcc:	f003 f88a 	bl	8005ee4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002dd0:	bf00      	nop
 8002dd2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40016800 	.word	0x40016800
 8002de0:	46020c00 	.word	0x46020c00
 8002de4:	42020400 	.word	0x42020400
 8002de8:	42021000 	.word	0x42021000
 8002dec:	42020c00 	.word	0x42020c00
 8002df0:	42020800 	.word	0x42020800

08002df4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0bc      	sub	sp, #240	@ 0xf0
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	22e0      	movs	r2, #224	@ 0xe0
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f00f fce2 	bl	80127ce <memset>
  if(hrtc->Instance==RTC)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <HAL_RTC_MspInit+0x90>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d132      	bne.n	8002e7a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e14:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f008 fe8b 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002e38:	f7ff faaa 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_RTC_MspInit+0x94>)
 8002e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e42:	4a11      	ldr	r2, [pc, #68]	@ (8002e88 <HAL_RTC_MspInit+0x94>)
 8002e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_RTC_MspInit+0x94>)
 8002e4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e52:	4a0d      	ldr	r2, [pc, #52]	@ (8002e88 <HAL_RTC_MspInit+0x94>)
 8002e54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e58:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_RTC_MspInit+0x94>)
 8002e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002e6a:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <HAL_RTC_MspInit+0x94>)
 8002e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e70:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <HAL_RTC_MspInit+0x94>)
 8002e72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002e7a:	bf00      	nop
 8002e7c:	37f0      	adds	r7, #240	@ 0xf0
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	46007800 	.word	0x46007800
 8002e88:	46020c00 	.word	0x46020c00

08002e8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_TIM_PWM_MspInit+0x40>)
 8002ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ea4:	4a09      	ldr	r2, [pc, #36]	@ (8002ecc <HAL_TIM_PWM_MspInit+0x40>)
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002eae:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <HAL_TIM_PWM_MspInit+0x40>)
 8002eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	46020c00 	.word	0x46020c00

08002ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0b      	ldr	r2, [pc, #44]	@ (8002f0c <HAL_TIM_Base_MspInit+0x3c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10e      	bne.n	8002f00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_TIM_Base_MspInit+0x40>)
 8002ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ee8:	4a09      	ldr	r2, [pc, #36]	@ (8002f10 <HAL_TIM_Base_MspInit+0x40>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <HAL_TIM_Base_MspInit+0x40>)
 8002ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	46020c00 	.word	0x46020c00

08002f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <HAL_TIM_MspPostInit+0x68>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d11e      	bne.n	8002f74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f36:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <HAL_TIM_MspPostInit+0x6c>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f3c:	4a10      	ldr	r2, [pc, #64]	@ (8002f80 <HAL_TIM_MspPostInit+0x6c>)
 8002f3e:	f043 0310 	orr.w	r3, r3, #16
 8002f42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <HAL_TIM_MspPostInit+0x6c>)
 8002f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002f54:	2340      	movs	r3, #64	@ 0x40
 8002f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f64:	2302      	movs	r3, #2
 8002f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4805      	ldr	r0, [pc, #20]	@ (8002f84 <HAL_TIM_MspPostInit+0x70>)
 8002f70:	f005 f8ee 	bl	8008150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f74:	bf00      	nop
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	46020c00 	.word	0x46020c00
 8002f84:	42021000 	.word	0x42021000

08002f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b0c2      	sub	sp, #264	@ 0x108
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f96:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	22e0      	movs	r2, #224	@ 0xe0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f00f fc0c 	bl	80127ce <memset>
  if(huart->Instance==USART1)
 8002fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003080 <HAL_UART_MspInit+0xf8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d155      	bne.n	8003074 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fc8:	f04f 0201 	mov.w	r2, #1
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f008 fdb3 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002fe8:	f7ff f9d2 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fec:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <HAL_UART_MspInit+0xfc>)
 8002fee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ff2:	4a24      	ldr	r2, [pc, #144]	@ (8003084 <HAL_UART_MspInit+0xfc>)
 8002ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ff8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ffc:	4b21      	ldr	r3, [pc, #132]	@ (8003084 <HAL_UART_MspInit+0xfc>)
 8002ffe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	4b1e      	ldr	r3, [pc, #120]	@ (8003084 <HAL_UART_MspInit+0xfc>)
 800300c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003010:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <HAL_UART_MspInit+0xfc>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800301a:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_UART_MspInit+0xfc>)
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003020:	f003 0201 	and.w	r2, r3, #1
 8003024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003028:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003032:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003036:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003038:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800303c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003052:	2307      	movs	r3, #7
 8003054:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800305c:	4619      	mov	r1, r3
 800305e:	480a      	ldr	r0, [pc, #40]	@ (8003088 <HAL_UART_MspInit+0x100>)
 8003060:	f005 f876 	bl	8008150 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	203d      	movs	r0, #61	@ 0x3d
 800306a:	f002 ff21 	bl	8005eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800306e:	203d      	movs	r0, #61	@ 0x3d
 8003070:	f002 ff38 	bl	8005ee4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003074:	bf00      	nop
 8003076:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40013800 	.word	0x40013800
 8003084:	46020c00 	.word	0x46020c00
 8003088:	42020000 	.word	0x42020000

0800308c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0be      	sub	sp, #248	@ 0xf8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	22e0      	movs	r2, #224	@ 0xe0
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f00f fb96 	bl	80127ce <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003190 <HAL_PCD_MspInit+0x104>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d16d      	bne.n	8003188 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ac:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 80030ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030b2:	4a38      	ldr	r2, [pc, #224]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80030bc:	4b35      	ldr	r3, [pc, #212]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 80030be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0308 	mov.w	r3, #8
 80030d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80030d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80030da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f008 fd30 	bl	800bb48 <HAL_RCCEx_PeriphCLKConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80030ee:	f7ff f94f 	bl	8002390 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80030f2:	200c      	movs	r0, #12
 80030f4:	f000 fc1c 	bl	8003930 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80030f8:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 80030fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fe:	4a25      	ldr	r2, [pc, #148]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003104:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003108:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 800310a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800310e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8003116:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800311c:	4a1d      	ldr	r2, [pc, #116]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 800311e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003122:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003126:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 8003128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800312c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003134:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11b      	bne.n	800317a <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 8003144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003148:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003152:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003160:	f007 f9f8 	bl	800a554 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003164:	f007 fa26 	bl	800a5b4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <HAL_PCD_MspInit+0x108>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003178:	e003      	b.n	8003182 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800317a:	f007 f9eb 	bl	800a554 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800317e:	f007 fa19 	bl	800a5b4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8003182:	2001      	movs	r0, #1
 8003184:	f000 fbc0 	bl	8003908 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8003188:	bf00      	nop
 800318a:	37f8      	adds	r7, #248	@ 0xf8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	42040000 	.word	0x42040000
 8003194:	46020c00 	.word	0x46020c00

08003198 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0a4      	sub	sp, #144	@ 0x90
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4abb      	ldr	r2, [pc, #748]	@ (8003494 <HAL_SAI_MspInit+0x2fc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f040 80ca 	bne.w	8003340 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80031ac:	4bba      	ldr	r3, [pc, #744]	@ (8003498 <HAL_SAI_MspInit+0x300>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10e      	bne.n	80031d2 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80031b4:	4bb9      	ldr	r3, [pc, #740]	@ (800349c <HAL_SAI_MspInit+0x304>)
 80031b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031ba:	4ab8      	ldr	r2, [pc, #736]	@ (800349c <HAL_SAI_MspInit+0x304>)
 80031bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031c0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80031c4:	4bb5      	ldr	r3, [pc, #724]	@ (800349c <HAL_SAI_MspInit+0x304>)
 80031c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80031d2:	4bb1      	ldr	r3, [pc, #708]	@ (8003498 <HAL_SAI_MspInit+0x300>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	4aaf      	ldr	r2, [pc, #700]	@ (8003498 <HAL_SAI_MspInit+0x300>)
 80031da:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80031dc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80031e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80031f4:	230d      	movs	r3, #13
 80031f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80031fe:	4619      	mov	r1, r3
 8003200:	48a7      	ldr	r0, [pc, #668]	@ (80034a0 <HAL_SAI_MspInit+0x308>)
 8003202:	f004 ffa5 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003206:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800320a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800321e:	230d      	movs	r3, #13
 8003220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003224:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003228:	4619      	mov	r1, r3
 800322a:	489d      	ldr	r0, [pc, #628]	@ (80034a0 <HAL_SAI_MspInit+0x308>)
 800322c:	f004 ff90 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003234:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003248:	230d      	movs	r3, #13
 800324a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800324e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003252:	4619      	mov	r1, r3
 8003254:	4893      	ldr	r0, [pc, #588]	@ (80034a4 <HAL_SAI_MspInit+0x30c>)
 8003256:	f004 ff7b 	bl	8008150 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800325a:	2321      	movs	r3, #33	@ 0x21
 800325c:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 800325e:	2326      	movs	r3, #38	@ 0x26
 8003260:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800326a:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 800326c:	2308      	movs	r3, #8
 800326e:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8003274:	2302      	movs	r3, #2
 8003276:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8003278:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800327e:	2301      	movs	r3, #1
 8003280:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003286:	2300      	movs	r3, #0
 8003288:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800328a:	2300      	movs	r3, #0
 800328c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800328e:	2300      	movs	r3, #0
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8003292:	2300      	movs	r3, #0
 8003294:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8003296:	2300      	movs	r3, #0
 8003298:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800329a:	2300      	movs	r3, #0
 800329c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 800329e:	f107 0310 	add.w	r3, r7, #16
 80032a2:	4981      	ldr	r1, [pc, #516]	@ (80034a8 <HAL_SAI_MspInit+0x310>)
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 f831 	bl	800730c <HAL_DMAEx_List_BuildNode>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80032b0:	f7ff f86e 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 80032b4:	4a7c      	ldr	r2, [pc, #496]	@ (80034a8 <HAL_SAI_MspInit+0x310>)
 80032b6:	2100      	movs	r1, #0
 80032b8:	487c      	ldr	r0, [pc, #496]	@ (80034ac <HAL_SAI_MspInit+0x314>)
 80032ba:	f004 f853 	bl	8007364 <HAL_DMAEx_List_InsertNode>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 80032c4:	f7ff f864 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80032c8:	4878      	ldr	r0, [pc, #480]	@ (80034ac <HAL_SAI_MspInit+0x314>)
 80032ca:	f004 f914 	bl	80074f6 <HAL_DMAEx_List_SetCircularMode>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80032d4:	f7ff f85c 	bl	8002390 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80032d8:	4b75      	ldr	r3, [pc, #468]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 80032da:	4a76      	ldr	r2, [pc, #472]	@ (80034b4 <HAL_SAI_MspInit+0x31c>)
 80032dc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80032de:	4b74      	ldr	r3, [pc, #464]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 80032e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032e4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80032e6:	4b72      	ldr	r3, [pc, #456]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80032ec:	4b70      	ldr	r3, [pc, #448]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80032f2:	4b6f      	ldr	r3, [pc, #444]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80032f8:	4b6d      	ldr	r3, [pc, #436]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 80032fa:	2281      	movs	r2, #129	@ 0x81
 80032fc:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80032fe:	486c      	ldr	r0, [pc, #432]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 8003300:	f003 fe44 	bl	8006f8c <HAL_DMAEx_List_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 800330a:	f7ff f841 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 800330e:	4967      	ldr	r1, [pc, #412]	@ (80034ac <HAL_SAI_MspInit+0x314>)
 8003310:	4867      	ldr	r0, [pc, #412]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 8003312:	f004 f951 	bl	80075b8 <HAL_DMAEx_List_LinkQ>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 800331c:	f7ff f838 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a63      	ldr	r2, [pc, #396]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 8003324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003328:	4a61      	ldr	r2, [pc, #388]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800332e:	2110      	movs	r1, #16
 8003330:	485f      	ldr	r0, [pc, #380]	@ (80034b0 <HAL_SAI_MspInit+0x318>)
 8003332:	f003 fa39 	bl	80067a8 <HAL_DMA_ConfigChannelAttributes>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 800333c:	f7ff f828 	bl	8002390 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5c      	ldr	r2, [pc, #368]	@ (80034b8 <HAL_SAI_MspInit+0x320>)
 8003346:	4293      	cmp	r3, r2
 8003348:	f040 80eb 	bne.w	8003522 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800334c:	4b52      	ldr	r3, [pc, #328]	@ (8003498 <HAL_SAI_MspInit+0x300>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10e      	bne.n	8003372 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003354:	4b51      	ldr	r3, [pc, #324]	@ (800349c <HAL_SAI_MspInit+0x304>)
 8003356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800335a:	4a50      	ldr	r2, [pc, #320]	@ (800349c <HAL_SAI_MspInit+0x304>)
 800335c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003360:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003364:	4b4d      	ldr	r3, [pc, #308]	@ (800349c <HAL_SAI_MspInit+0x304>)
 8003366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800336a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8003372:	4b49      	ldr	r3, [pc, #292]	@ (8003498 <HAL_SAI_MspInit+0x300>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a47      	ldr	r2, [pc, #284]	@ (8003498 <HAL_SAI_MspInit+0x300>)
 800337a:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800337c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003380:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003394:	230d      	movs	r3, #13
 8003396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800339e:	4619      	mov	r1, r3
 80033a0:	4846      	ldr	r0, [pc, #280]	@ (80034bc <HAL_SAI_MspInit+0x324>)
 80033a2:	f004 fed5 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80033be:	230d      	movs	r3, #13
 80033c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80033c8:	4619      	mov	r1, r3
 80033ca:	483d      	ldr	r0, [pc, #244]	@ (80034c0 <HAL_SAI_MspInit+0x328>)
 80033cc:	f004 fec0 	bl	8008150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80033d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80033e8:	230d      	movs	r3, #13
 80033ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ee:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80033f2:	4619      	mov	r1, r3
 80033f4:	4832      	ldr	r0, [pc, #200]	@ (80034c0 <HAL_SAI_MspInit+0x328>)
 80033f6:	f004 feab 	bl	8008150 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80033fa:	2321      	movs	r3, #33	@ 0x21
 80033fc:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80033fe:	2327      	movs	r3, #39	@ 0x27
 8003400:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800340e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8003414:	2302      	movs	r3, #2
 8003416:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8003418:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800341e:	2301      	movs	r3, #1
 8003420:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003426:	2300      	movs	r3, #0
 8003428:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800342a:	2300      	movs	r3, #0
 800342c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800342e:	2300      	movs	r3, #0
 8003430:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8003432:	2300      	movs	r3, #0
 8003434:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8003436:	2300      	movs	r3, #0
 8003438:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800343a:	2300      	movs	r3, #0
 800343c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800343e:	f107 0310 	add.w	r3, r7, #16
 8003442:	4920      	ldr	r1, [pc, #128]	@ (80034c4 <HAL_SAI_MspInit+0x32c>)
 8003444:	4618      	mov	r0, r3
 8003446:	f003 ff61 	bl	800730c <HAL_DMAEx_List_BuildNode>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8003450:	f7fe ff9e 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8003454:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <HAL_SAI_MspInit+0x32c>)
 8003456:	2100      	movs	r1, #0
 8003458:	481b      	ldr	r0, [pc, #108]	@ (80034c8 <HAL_SAI_MspInit+0x330>)
 800345a:	f003 ff83 	bl	8007364 <HAL_DMAEx_List_InsertNode>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8003464:	f7fe ff94 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8003468:	4817      	ldr	r0, [pc, #92]	@ (80034c8 <HAL_SAI_MspInit+0x330>)
 800346a:	f004 f844 	bl	80074f6 <HAL_DMAEx_List_SetCircularMode>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8003474:	f7fe ff8c 	bl	8002390 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8003478:	4b14      	ldr	r3, [pc, #80]	@ (80034cc <HAL_SAI_MspInit+0x334>)
 800347a:	4a15      	ldr	r2, [pc, #84]	@ (80034d0 <HAL_SAI_MspInit+0x338>)
 800347c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800347e:	4b13      	ldr	r3, [pc, #76]	@ (80034cc <HAL_SAI_MspInit+0x334>)
 8003480:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003484:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_SAI_MspInit+0x334>)
 8003488:	2200      	movs	r2, #0
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800348c:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <HAL_SAI_MspInit+0x334>)
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
 8003492:	e01f      	b.n	80034d4 <HAL_SAI_MspInit+0x33c>
 8003494:	40015804 	.word	0x40015804
 8003498:	20033c5c 	.word	0x20033c5c
 800349c:	46020c00 	.word	0x46020c00
 80034a0:	42020400 	.word	0x42020400
 80034a4:	42021800 	.word	0x42021800
 80034a8:	2000060c 	.word	0x2000060c
 80034ac:	20000630 	.word	0x20000630
 80034b0:	20000648 	.word	0x20000648
 80034b4:	400201d0 	.word	0x400201d0
 80034b8:	40015824 	.word	0x40015824
 80034bc:	42020000 	.word	0x42020000
 80034c0:	42020800 	.word	0x42020800
 80034c4:	200006c0 	.word	0x200006c0
 80034c8:	200006e4 	.word	0x200006e4
 80034cc:	200006fc 	.word	0x200006fc
 80034d0:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80034d4:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_SAI_MspInit+0x394>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80034da:	4b14      	ldr	r3, [pc, #80]	@ (800352c <HAL_SAI_MspInit+0x394>)
 80034dc:	2281      	movs	r2, #129	@ 0x81
 80034de:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80034e0:	4812      	ldr	r0, [pc, #72]	@ (800352c <HAL_SAI_MspInit+0x394>)
 80034e2:	f003 fd53 	bl	8006f8c <HAL_DMAEx_List_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80034ec:	f7fe ff50 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80034f0:	490f      	ldr	r1, [pc, #60]	@ (8003530 <HAL_SAI_MspInit+0x398>)
 80034f2:	480e      	ldr	r0, [pc, #56]	@ (800352c <HAL_SAI_MspInit+0x394>)
 80034f4:	f004 f860 	bl	80075b8 <HAL_DMAEx_List_LinkQ>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80034fe:	f7fe ff47 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a09      	ldr	r2, [pc, #36]	@ (800352c <HAL_SAI_MspInit+0x394>)
 8003506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800350a:	4a08      	ldr	r2, [pc, #32]	@ (800352c <HAL_SAI_MspInit+0x394>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003510:	2110      	movs	r1, #16
 8003512:	4806      	ldr	r0, [pc, #24]	@ (800352c <HAL_SAI_MspInit+0x394>)
 8003514:	f003 f948 	bl	80067a8 <HAL_DMA_ConfigChannelAttributes>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 800351e:	f7fe ff37 	bl	8002390 <Error_Handler>
    }

    }
}
 8003522:	bf00      	nop
 8003524:	3790      	adds	r7, #144	@ 0x90
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200006fc 	.word	0x200006fc
 8003530:	200006e4 	.word	0x200006e4

08003534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <NMI_Handler+0x4>

0800353c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <HardFault_Handler+0x4>

08003544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <MemManage_Handler+0x4>

0800354c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <BusFault_Handler+0x4>

08003554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <UsageFault_Handler+0x4>

0800355c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800358a:	f000 f979 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}

08003592 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003596:	2002      	movs	r0, #2
 8003598:	f004 ffe4 	bl	8008564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}

080035a0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80035a4:	2010      	movs	r0, #16
 80035a6:	f004 ffdd 	bl	8008564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}

080035ae <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80035b2:	2020      	movs	r0, #32
 80035b4:	f004 ffd6 	bl	8008564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}

080035bc <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <GPDMA1_Channel0_IRQHandler+0x10>)
 80035c2:	f002 ff82 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200001a4 	.word	0x200001a4

080035d0 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80035d4:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <GPDMA1_Channel1_IRQHandler+0x10>)
 80035d6:	f002 ff78 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200006fc 	.word	0x200006fc

080035e4 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80035e8:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <GPDMA1_Channel2_IRQHandler+0x10>)
 80035ea:	f002 ff6e 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000021c 	.word	0x2000021c

080035f8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <GPDMA1_Channel3_IRQHandler+0x10>)
 80035fe:	f002 ff64 	bl	80064ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000648 	.word	0x20000648

0800360c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003610:	4802      	ldr	r0, [pc, #8]	@ (800361c <ADC1_2_IRQHandler+0x10>)
 8003612:	f001 f925 	bl	8004860 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000050 	.word	0x20000050

08003620 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003624:	4802      	ldr	r0, [pc, #8]	@ (8003630 <I2C2_EV_IRQHandler+0x10>)
 8003626:	f005 f969 	bl	80088fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200003b0 	.word	0x200003b0

08003634 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003638:	4802      	ldr	r0, [pc, #8]	@ (8003644 <I2C2_ER_IRQHandler+0x10>)
 800363a:	f005 f979 	bl	8008930 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200003b0 	.word	0x200003b0

08003648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800364c:	4802      	ldr	r0, [pc, #8]	@ (8003658 <USART1_IRQHandler+0x10>)
 800364e:	f00d fc05 	bl	8010e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	2000080c 	.word	0x2000080c

0800365c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003660:	4802      	ldr	r0, [pc, #8]	@ (800366c <LTDC_IRQHandler+0x10>)
 8003662:	f006 fae7 	bl	8009c34 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000404 	.word	0x20000404

08003670 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003674:	4b18      	ldr	r3, [pc, #96]	@ (80036d8 <SystemInit+0x68>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	4a17      	ldr	r2, [pc, #92]	@ (80036d8 <SystemInit+0x68>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003684:	4b15      	ldr	r3, [pc, #84]	@ (80036dc <SystemInit+0x6c>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800368a:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <SystemInit+0x6c>)
 800368c:	2200      	movs	r2, #0
 800368e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <SystemInit+0x6c>)
 8003692:	2200      	movs	r2, #0
 8003694:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <SystemInit+0x6c>)
 8003698:	2200      	movs	r2, #0
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800369c:	4b0f      	ldr	r3, [pc, #60]	@ (80036dc <SystemInit+0x6c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <SystemInit+0x6c>)
 80036a2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80036a6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80036aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <SystemInit+0x6c>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <SystemInit+0x6c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <SystemInit+0x6c>)
 80036b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <SystemInit+0x6c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036c4:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <SystemInit+0x68>)
 80036c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80036ca:	609a      	str	r2, [r3, #8]
  #endif
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000ed00 	.word	0xe000ed00
 80036dc:	46020c00 	.word	0x46020c00

080036e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80036e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003718 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036e4:	f7ff ffc4 	bl	8003670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80036e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80036ea:	e003      	b.n	80036f4 <LoopCopyDataInit>

080036ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80036ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80036f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80036f2:	3104      	adds	r1, #4

080036f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80036f4:	480a      	ldr	r0, [pc, #40]	@ (8003720 <LoopForever+0xa>)
	ldr	r3, =_edata
 80036f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <LoopForever+0xe>)
	adds	r2, r0, r1
 80036f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80036fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80036fc:	d3f6      	bcc.n	80036ec <CopyDataInit>
	ldr	r2, =_sbss
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003700:	e002      	b.n	8003708 <LoopFillZerobss>

08003702 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003702:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003704:	f842 3b04 	str.w	r3, [r2], #4

08003708 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003708:	4b08      	ldr	r3, [pc, #32]	@ (800372c <LoopForever+0x16>)
	cmp	r2, r3
 800370a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800370c:	d3f9      	bcc.n	8003702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800370e:	f00f f867 	bl	80127e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003712:	f7fd f8b7 	bl	8000884 <main>

08003716 <LoopForever>:

LoopForever:
    b LoopForever
 8003716:	e7fe      	b.n	8003716 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003718:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 800371c:	08012950 	.word	0x08012950
	ldr	r0, =_sdata
 8003720:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003724:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8003728:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 800372c:	20033c64 	.word	0x20033c64

08003730 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003730:	e7fe      	b.n	8003730 <ADC4_IRQHandler>
	...

08003734 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003738:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_Init+0x50>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a11      	ldr	r2, [pc, #68]	@ (8003784 <HAL_Init+0x50>)
 800373e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003744:	2003      	movs	r0, #3
 8003746:	f002 fba8 	bl	8005e9a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800374a:	f008 f81f 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <HAL_Init+0x54>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	490c      	ldr	r1, [pc, #48]	@ (800378c <HAL_Init+0x58>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	4a0b      	ldr	r2, [pc, #44]	@ (8003790 <HAL_Init+0x5c>)
 8003762:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003764:	2004      	movs	r0, #4
 8003766:	f002 fbed 	bl	8005f44 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800376a:	200f      	movs	r0, #15
 800376c:	f000 f812 	bl	8003794 <HAL_InitTick>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e002      	b.n	8003780 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800377a:	f7fe fe0f 	bl	800239c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40022000 	.word	0x40022000
 8003788:	46020c00 	.word	0x46020c00
 800378c:	08012840 	.word	0x08012840
 8003790:	20000028 	.word	0x20000028

08003794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80037a0:	4b33      	ldr	r3, [pc, #204]	@ (8003870 <HAL_InitTick+0xdc>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e05c      	b.n	8003866 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80037ac:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <HAL_InitTick+0xe0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d10c      	bne.n	80037d2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80037b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003878 <HAL_InitTick+0xe4>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <HAL_InitTick+0xdc>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e037      	b.n	8003842 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80037d2:	f002 fc0f 	bl	8005ff4 <HAL_SYSTICK_GetCLKSourceConfig>
 80037d6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d023      	beq.n	8003826 <HAL_InitTick+0x92>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d82d      	bhi.n	8003840 <HAL_InitTick+0xac>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_InitTick+0x5e>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d00d      	beq.n	800380c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80037f0:	e026      	b.n	8003840 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80037f2:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <HAL_InitTick+0xe4>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <HAL_InitTick+0xdc>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003800:	fbb3 f3f1 	udiv	r3, r3, r1
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	60fb      	str	r3, [r7, #12]
        break;
 800380a:	e01a      	b.n	8003842 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800380c:	4b18      	ldr	r3, [pc, #96]	@ (8003870 <HAL_InitTick+0xdc>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003816:	fbb3 f3f2 	udiv	r3, r3, r2
 800381a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	60fb      	str	r3, [r7, #12]
        break;
 8003824:	e00d      	b.n	8003842 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003826:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <HAL_InitTick+0xdc>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003830:	fbb3 f3f2 	udiv	r3, r3, r2
 8003834:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	60fb      	str	r3, [r7, #12]
        break;
 800383e:	e000      	b.n	8003842 <HAL_InitTick+0xae>
        break;
 8003840:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f002 fb5c 	bl	8005f00 <HAL_SYSTICK_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e009      	b.n	8003866 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003852:	2200      	movs	r2, #0
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	f04f 30ff 	mov.w	r0, #4294967295
 800385a:	f002 fb29 	bl	8005eb0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800385e:	4a07      	ldr	r2, [pc, #28]	@ (800387c <HAL_InitTick+0xe8>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000030 	.word	0x20000030
 8003874:	e000e010 	.word	0xe000e010
 8003878:	20000028 	.word	0x20000028
 800387c:	2000002c 	.word	0x2000002c

08003880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_IncTick+0x20>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_IncTick+0x24>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4413      	add	r3, r2
 8003890:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_IncTick+0x24>)
 8003892:	6013      	str	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000030 	.word	0x20000030
 80038a4:	20033c60 	.word	0x20033c60

080038a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return uwTick;
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <HAL_GetTick+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20033c60 	.word	0x20033c60

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff ffee 	bl	80038a8 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d005      	beq.n	80038e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <HAL_Delay+0x44>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038e6:	bf00      	nop
 80038e8:	f7ff ffde 	bl	80038a8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8f7      	bhi.n	80038e8 <HAL_Delay+0x28>
  {
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000030 	.word	0x20000030

08003908 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8003912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003914:	f023 0201 	bic.w	r2, r3, #1
 8003918:	4904      	ldr	r1, [pc, #16]	@ (800392c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4313      	orrs	r3, r2
 800391e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	46000400 	.word	0x46000400

08003930 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800393a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393c:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8003940:	4904      	ldr	r1, [pc, #16]	@ (8003954 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4313      	orrs	r3, r2
 8003946:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	46000400 	.word	0x46000400

08003958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <LL_ADC_SetResolution+0x3c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d104      	bne.n	80039e0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3b01      	subs	r3, #1
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f023 020c 	bic.w	r2, r3, #12
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	46021000 	.word	0x46021000

08003a00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3360      	adds	r3, #96	@ 0x60
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	431a      	orrs	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3360      	adds	r3, #96	@ 0x60
 8003a50:	461a      	mov	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b087      	sub	sp, #28
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3360      	adds	r3, #96	@ 0x60
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3360      	adds	r3, #96	@ 0x60
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3360      	adds	r3, #96	@ 0x60
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	d002      	beq.n	8003b42 <LL_ADC_SetGainCompensation+0x32>
 8003b3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b40:	e000      	b.n	8003b44 <LL_ADC_SetGainCompensation+0x34>
 8003b42:	2200      	movs	r2, #0
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2107      	movs	r1, #7
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	401a      	ands	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	@ 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a2b      	ldr	r2, [pc, #172]	@ (8003c78 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d020      	beq.n	8003c12 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3330      	adds	r3, #48	@ 0x30
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	4413      	add	r3, r2
 8003be2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	211f      	movs	r1, #31
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	0e9b      	lsrs	r3, r3, #26
 8003bfc:	f003 011f 	and.w	r1, r3, #31
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003c10:	e02b      	b.n	8003c6a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	210f      	movs	r1, #15
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	401a      	ands	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0e9b      	lsrs	r3, r3, #26
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	e010      	b.n	8003c5c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	613b      	str	r3, [r7, #16]
  return result;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003c50:	2320      	movs	r3, #32
 8003c52:	e003      	b.n	8003c5c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	f001 011f 	and.w	r1, r1, #31
 8003c62:	408b      	lsls	r3, r1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c6a:	bf00      	nop
 8003c6c:	3724      	adds	r7, #36	@ 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	46021000 	.word	0x46021000

08003c7c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	e015      	b.n	8003ccc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	60fb      	str	r3, [r7, #12]
  return result;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	e003      	b.n	8003cc2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	0e9b      	lsrs	r3, r3, #26
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	401a      	ands	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b08b      	sub	sp, #44	@ 0x2c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d042      	beq.n	8003dee <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <LL_ADC_SetChannelSamplingTime+0x28>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	e011      	b.n	8003da0 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	617b      	str	r3, [r7, #20]
  return result;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003d92:	2320      	movs	r3, #32
 8003d94:	e003      	b.n	8003d9e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	0e5b      	lsrs	r3, r3, #25
 8003da4:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003da8:	460b      	mov	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	1ad2      	subs	r2, r2, r3
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	0e5b      	lsrs	r3, r3, #25
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	4413      	add	r3, r2
 8003dcc:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	2107      	movs	r1, #7
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	431a      	orrs	r2, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003dec:	e00e      	b.n	8003e0c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	43db      	mvns	r3, r3
 8003df8:	401a      	ands	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	0219      	lsls	r1, r3, #8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	400b      	ands	r3, r1
 8003e02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	615a      	str	r2, [r3, #20]
}
 8003e0c:	bf00      	nop
 8003e0e:	372c      	adds	r7, #44	@ 0x2c
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	46021000 	.word	0x46021000

08003e1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f003 0318 	and.w	r3, r3, #24
 8003e3e:	4908      	ldr	r1, [pc, #32]	@ (8003e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e40:	40d9      	lsrs	r1, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	400b      	ands	r3, r1
 8003e46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	000fffff 	.word	0x000fffff

08003e64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 031f 	and.w	r3, r3, #31
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6093      	str	r3, [r2, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ef8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003efc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f24:	d101      	bne.n	8003f2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <LL_ADC_IsEnabled+0x18>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <LL_ADC_IsEnabled+0x1a>
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f9a:	f043 0204 	orr.w	r2, r3, #4
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d101      	bne.n	8003fc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d101      	bne.n	8003fec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b08b      	sub	sp, #44	@ 0x2c
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800400a:	2300      	movs	r3, #0
 800400c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e2ce      	b.n	80045ba <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a95      	ldr	r2, [pc, #596]	@ (8004280 <HAL_ADC_Init+0x284>)
 800402a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7fe f9cb 	bl	80023d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff37 	bl	8003ec0 <LL_ADC_IsDeepPowerDownEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff1d 	bl	8003e9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff52 	bl	8003f10 <LL_ADC_IsInternalRegulatorEnabled>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d115      	bne.n	800409e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ff36 	bl	8003ee8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800407c:	4b81      	ldr	r3, [pc, #516]	@ (8004284 <HAL_ADC_Init+0x288>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	099b      	lsrs	r3, r3, #6
 8004082:	4a81      	ldr	r2, [pc, #516]	@ (8004288 <HAL_ADC_Init+0x28c>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004090:	e002      	b.n	8004098 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f9      	bne.n	8004092 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff34 	bl	8003f10 <LL_ADC_IsInternalRegulatorEnabled>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10e      	bne.n	80040cc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040be:	f043 0201 	orr.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff6c 	bl	8003fae <LL_ADC_REG_IsConversionOngoing>
 80040d6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 825f 	bne.w	80045a4 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 825b 	bne.w	80045a4 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ff2c 	bl	8003f60 <LL_ADC_IsEnabled>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d14f      	bne.n	80041ae <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5b      	ldr	r2, [pc, #364]	@ (8004280 <HAL_ADC_Init+0x284>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d037      	beq.n	8004188 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a5b      	ldr	r2, [pc, #364]	@ (800428c <HAL_ADC_Init+0x290>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_ADC_Init+0x130>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5a      	ldr	r2, [pc, #360]	@ (8004290 <HAL_ADC_Init+0x294>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d10e      	bne.n	800414a <HAL_ADC_Init+0x14e>
 800412c:	4857      	ldr	r0, [pc, #348]	@ (800428c <HAL_ADC_Init+0x290>)
 800412e:	f7ff ff17 	bl	8003f60 <LL_ADC_IsEnabled>
 8004132:	4604      	mov	r4, r0
 8004134:	4856      	ldr	r0, [pc, #344]	@ (8004290 <HAL_ADC_Init+0x294>)
 8004136:	f7ff ff13 	bl	8003f60 <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	4323      	orrs	r3, r4
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e008      	b.n	800415c <HAL_ADC_Init+0x160>
 800414a:	484d      	ldr	r0, [pc, #308]	@ (8004280 <HAL_ADC_Init+0x284>)
 800414c:	f7ff ff08 	bl	8003f60 <LL_ADC_IsEnabled>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d026      	beq.n	80041ae <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a49      	ldr	r2, [pc, #292]	@ (800428c <HAL_ADC_Init+0x290>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_ADC_Init+0x178>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a48      	ldr	r2, [pc, #288]	@ (8004290 <HAL_ADC_Init+0x294>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_ADC_Init+0x17c>
 8004174:	4a47      	ldr	r2, [pc, #284]	@ (8004294 <HAL_ADC_Init+0x298>)
 8004176:	e000      	b.n	800417a <HAL_ADC_Init+0x17e>
 8004178:	4a47      	ldr	r2, [pc, #284]	@ (8004298 <HAL_ADC_Init+0x29c>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f7ff fbe9 	bl	8003958 <LL_ADC_SetCommonClock>
 8004186:	e012      	b.n	80041ae <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7ff fc14 	bl	80039c0 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8004198:	4b3f      	ldr	r3, [pc, #252]	@ (8004298 <HAL_ADC_Init+0x29c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80041a8:	493b      	ldr	r1, [pc, #236]	@ (8004298 <HAL_ADC_Init+0x29c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a33      	ldr	r2, [pc, #204]	@ (8004280 <HAL_ADC_Init+0x284>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d010      	beq.n	80041da <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041be:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80041c4:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80041ca:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80041d2:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80041d4:	4313      	orrs	r3, r2
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	e035      	b.n	8004246 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	7f1b      	ldrb	r3, [r3, #28]
 80041de:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041e6:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041e8:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_ADC_Init+0x1fc>
 80041f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041f6:	e000      	b.n	80041fa <HAL_ADC_Init+0x1fe>
 80041f8:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80041fa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8004200:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	da04      	bge.n	8004214 <HAL_ADC_Init+0x218>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004212:	e001      	b.n	8004218 <HAL_ADC_Init+0x21c>
 8004214:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8004218:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	491b      	ldr	r1, [pc, #108]	@ (800428c <HAL_ADC_Init+0x290>)
 8004220:	428b      	cmp	r3, r1
 8004222:	d004      	beq.n	800422e <HAL_ADC_Init+0x232>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4919      	ldr	r1, [pc, #100]	@ (8004290 <HAL_ADC_Init+0x294>)
 800422a:	428b      	cmp	r3, r1
 800422c:	d103      	bne.n	8004236 <HAL_ADC_Init+0x23a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004234:	e003      	b.n	800423e <HAL_ADC_Init+0x242>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800423c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800423e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	4313      	orrs	r3, r2
 8004244:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d131      	bne.n	80042b4 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <HAL_ADC_Init+0x284>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d007      	beq.n	800426a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	3b01      	subs	r3, #1
 8004260:	045b      	lsls	r3, r3, #17
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	4313      	orrs	r3, r2
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	e024      	b.n	80042b4 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d113      	bne.n	800429c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	e01a      	b.n	80042b4 <HAL_ADC_Init+0x2b8>
 800427e:	bf00      	nop
 8004280:	46021000 	.word	0x46021000
 8004284:	20000028 	.word	0x20000028
 8004288:	053e2d63 	.word	0x053e2d63
 800428c:	42028000 	.word	0x42028000
 8004290:	42028100 	.word	0x42028100
 8004294:	42028300 	.word	0x42028300
 8004298:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a75      	ldr	r2, [pc, #468]	@ (8004490 <HAL_ADC_Init+0x494>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	4313      	orrs	r3, r2
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004494 <HAL_ADC_Init+0x498>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	430b      	orrs	r3, r1
 80042ec:	60d3      	str	r3, [r2, #12]
 80042ee:	e031      	b.n	8004354 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fc:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	4313      	orrs	r3, r2
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	4313      	orrs	r3, r2
 800430a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	4b61      	ldr	r3, [pc, #388]	@ (8004498 <HAL_ADC_Init+0x49c>)
 8004314:	4013      	ands	r3, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	6a39      	ldr	r1, [r7, #32]
 800431c:	430b      	orrs	r3, r1
 800431e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a4d      	ldr	r2, [pc, #308]	@ (8004490 <HAL_ADC_Init+0x494>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f000 80a4 	beq.w	80044a8 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fe22 	bl	8003fae <LL_ADC_REG_IsConversionOngoing>
 800436a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fe2f 	bl	8003fd4 <LL_ADC_INJ_IsConversionOngoing>
 8004376:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d166      	bne.n	800444c <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d163      	bne.n	800444c <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7f1b      	ldrb	r3, [r3, #28]
 8004388:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4943      	ldr	r1, [pc, #268]	@ (800449c <HAL_ADC_Init+0x4a0>)
 8004390:	428b      	cmp	r3, r1
 8004392:	d004      	beq.n	800439e <HAL_ADC_Init+0x3a2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4941      	ldr	r1, [pc, #260]	@ (80044a0 <HAL_ADC_Init+0x4a4>)
 800439a:	428b      	cmp	r3, r1
 800439c:	d102      	bne.n	80043a4 <HAL_ADC_Init+0x3a8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a2:	e002      	b.n	80043aa <HAL_ADC_Init+0x3ae>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a8:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043aa:	4313      	orrs	r3, r2
 80043ac:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043b8:	f023 0303 	bic.w	r3, r3, #3
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	6a39      	ldr	r1, [r7, #32]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7ff fb99 	bl	8003b10 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d11e      	bne.n	8004426 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ec:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	4b2b      	ldr	r3, [pc, #172]	@ (80044a4 <HAL_ADC_Init+0x4a8>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80043fc:	0411      	lsls	r1, r2, #16
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004402:	4311      	orrs	r1, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8004408:	4311      	orrs	r1, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800440e:	4311      	orrs	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004414:	0892      	lsrs	r2, r2, #2
 8004416:	430a      	orrs	r2, r1
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	611a      	str	r2, [r3, #16]
 8004424:	e007      	b.n	8004436 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10c      	bne.n	800446e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	f023 010f 	bic.w	r1, r3, #15
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
 800446c:	e007      	b.n	800447e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 020f 	bic.w	r2, r2, #15
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800448e:	e092      	b.n	80045b6 <HAL_ADC_Init+0x5ba>
 8004490:	46021000 	.word	0x46021000
 8004494:	fff0c013 	.word	0xfff0c013
 8004498:	ffde800d 	.word	0xffde800d
 800449c:	42028000 	.word	0x42028000
 80044a0:	42028100 	.word	0x42028100
 80044a4:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d111      	bne.n	80044d6 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80044ba:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80044c0:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80044c6:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <HAL_ADC_Init+0x5c8>)
 80044de:	4013      	ands	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	69f9      	ldr	r1, [r7, #28]
 80044e6:	430b      	orrs	r3, r1
 80044e8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f2:	461a      	mov	r2, r3
 80044f4:	2100      	movs	r1, #0
 80044f6:	f7ff fb2e 	bl	8003b56 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004502:	461a      	mov	r2, r3
 8004504:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8004508:	f7ff fb25 	bl	8003b56 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d108      	bne.n	8004526 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f062 020f 	orn	r2, r2, #15
 8004522:	629a      	str	r2, [r3, #40]	@ 0x28
 8004524:	e018      	b.n	8004558 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800452e:	d113      	bne.n	8004558 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	3b01      	subs	r3, #1
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	f003 031c 	and.w	r3, r3, #28
 8004542:	f06f 020f 	mvn.w	r2, #15
 8004546:	fa02 f103 	lsl.w	r1, r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	4b1a      	ldr	r3, [pc, #104]	@ (80045c8 <HAL_ADC_Init+0x5cc>)
 8004560:	4013      	ands	r3, r2
 8004562:	6a3a      	ldr	r2, [r7, #32]
 8004564:	429a      	cmp	r2, r3
 8004566:	d10b      	bne.n	8004580 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	f043 0201 	orr.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800457e:	e01a      	b.n	80045b6 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004584:	f023 0312 	bic.w	r3, r3, #18
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80045a2:	e008      	b.n	80045b6 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80045b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	372c      	adds	r7, #44	@ 0x2c
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}
 80045c2:	bf00      	nop
 80045c4:	f7fffc02 	.word	0xf7fffc02
 80045c8:	833ffff3 	.word	0x833ffff3

080045cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b0a2      	sub	sp, #136	@ 0x88
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a98      	ldr	r2, [pc, #608]	@ (8004840 <HAL_ADC_Start_DMA+0x274>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_ADC_Start_DMA+0x20>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a97      	ldr	r2, [pc, #604]	@ (8004844 <HAL_ADC_Start_DMA+0x278>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_Start_DMA+0x24>
 80045ec:	4b96      	ldr	r3, [pc, #600]	@ (8004848 <HAL_ADC_Start_DMA+0x27c>)
 80045ee:	e000      	b.n	80045f2 <HAL_ADC_Start_DMA+0x26>
 80045f0:	4b96      	ldr	r3, [pc, #600]	@ (800484c <HAL_ADC_Start_DMA+0x280>)
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc36 	bl	8003e64 <LL_ADC_GetMultimode>
 80045f8:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fcd5 	bl	8003fae <LL_ADC_REG_IsConversionOngoing>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 8111 	bne.w	800482e <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_ADC_Start_DMA+0x4e>
 8004616:	2302      	movs	r3, #2
 8004618:	e10e      	b.n	8004838 <HAL_ADC_Start_DMA+0x26c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004628:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800462a:	2b05      	cmp	r3, #5
 800462c:	d003      	beq.n	8004636 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800462e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004630:	2b09      	cmp	r3, #9
 8004632:	f040 80f4 	bne.w	800481e <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f001 fa2c 	bl	8005a94 <ADC_Enable>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004642:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 80e4 	bne.w	8004814 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004650:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a7a      	ldr	r2, [pc, #488]	@ (8004850 <HAL_ADC_Start_DMA+0x284>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d026      	beq.n	80046b8 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a75      	ldr	r2, [pc, #468]	@ (8004844 <HAL_ADC_Start_DMA+0x278>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d002      	beq.n	800467a <HAL_ADC_Start_DMA+0xae>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	e000      	b.n	800467c <HAL_ADC_Start_DMA+0xb0>
 800467a:	4b71      	ldr	r3, [pc, #452]	@ (8004840 <HAL_ADC_Start_DMA+0x274>)
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	4293      	cmp	r3, r2
 8004682:	d002      	beq.n	800468a <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800469a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d006      	beq.n	80046b0 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a6:	f023 0206 	bic.w	r2, r3, #6
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	67da      	str	r2, [r3, #124]	@ 0x7c
 80046ae:	e006      	b.n	80046be <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80046b6:	e002      	b.n	80046be <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	4a64      	ldr	r2, [pc, #400]	@ (8004854 <HAL_ADC_Start_DMA+0x288>)
 80046c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ca:	4a63      	ldr	r2, [pc, #396]	@ (8004858 <HAL_ADC_Start_DMA+0x28c>)
 80046cc:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	4a62      	ldr	r2, [pc, #392]	@ (800485c <HAL_ADC_Start_DMA+0x290>)
 80046d4:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	221c      	movs	r2, #28
 80046dc:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0210 	orr.w	r2, r2, #16
 80046f4:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a55      	ldr	r2, [pc, #340]	@ (8004850 <HAL_ADC_Start_DMA+0x284>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d107      	bne.n	8004710 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04f      	beq.n	80047be <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004724:	2b00      	cmp	r3, #0
 8004726:	d046      	beq.n	80047b6 <HAL_ADC_Start_DMA+0x1ea>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d040      	beq.n	80047b6 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f002 fdf8 	bl	8007338 <HAL_DMAEx_List_GetNodeConfig>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e072      	b.n	8004838 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	2b02      	cmp	r3, #2
 8004756:	d104      	bne.n	8004762 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004760:	e00a      	b.n	8004778 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	2b01      	cmp	r3, #1
 8004766:	d104      	bne.n	8004772 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004770:	e002      	b.n	8004778 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004784:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	4618      	mov	r0, r3
 80047aa:	f002 fd1b 	bl	80071e4 <HAL_DMAEx_List_Start_IT>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80047b4:	e028      	b.n	8004808 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80047bc:	e024      	b.n	8004808 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d104      	bne.n	80047d2 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047d0:	e00c      	b.n	80047ec <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d104      	bne.n	80047e6 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047e4:	e002      	b.n	80047ec <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3340      	adds	r3, #64	@ 0x40
 80047f6:	4619      	mov	r1, r3
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047fe:	f001 fd5f 	bl	80062c0 <HAL_DMA_Start_IT>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fbba 	bl	8003f86 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004812:	e00f      	b.n	8004834 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 800481c:	e00a      	b.n	8004834 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800482c:	e002      	b.n	8004834 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800482e:	2302      	movs	r3, #2
 8004830:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8004834:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004838:	4618      	mov	r0, r3
 800483a:	3788      	adds	r7, #136	@ 0x88
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	42028000 	.word	0x42028000
 8004844:	42028100 	.word	0x42028100
 8004848:	42028300 	.word	0x42028300
 800484c:	46021300 	.word	0x46021300
 8004850:	46021000 	.word	0x46021000
 8004854:	08005bc9 	.word	0x08005bc9
 8004858:	08005ca1 	.word	0x08005ca1
 800485c:	08005cbd 	.word	0x08005cbd

08004860 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	@ 0x28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a77      	ldr	r2, [pc, #476]	@ (8004a60 <HAL_ADC_IRQHandler+0x200>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_ADC_IRQHandler+0x30>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a76      	ldr	r2, [pc, #472]	@ (8004a64 <HAL_ADC_IRQHandler+0x204>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d101      	bne.n	8004894 <HAL_ADC_IRQHandler+0x34>
 8004890:	4b75      	ldr	r3, [pc, #468]	@ (8004a68 <HAL_ADC_IRQHandler+0x208>)
 8004892:	e000      	b.n	8004896 <HAL_ADC_IRQHandler+0x36>
 8004894:	4b75      	ldr	r3, [pc, #468]	@ (8004a6c <HAL_ADC_IRQHandler+0x20c>)
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fae4 	bl	8003e64 <LL_ADC_GetMultimode>
 800489c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d017      	beq.n	80048d8 <HAL_ADC_IRQHandler+0x78>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048c2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f001 fa2e 	bl	8005d2c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2202      	movs	r2, #2
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_ADC_IRQHandler+0x8c>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 80d1 	beq.w	8004a9a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80cb 	beq.w	8004a9a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004914:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a53      	ldr	r2, [pc, #332]	@ (8004a70 <HAL_ADC_IRQHandler+0x210>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d06c      	beq.n	8004a00 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff f932 	bl	8003b94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80aa 	beq.w	8004a8c <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a49      	ldr	r2, [pc, #292]	@ (8004a64 <HAL_ADC_IRQHandler+0x204>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d002      	beq.n	8004948 <HAL_ADC_IRQHandler+0xe8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	e000      	b.n	800494a <HAL_ADC_IRQHandler+0xea>
 8004948:	4b45      	ldr	r3, [pc, #276]	@ (8004a60 <HAL_ADC_IRQHandler+0x200>)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	4293      	cmp	r3, r2
 8004950:	d008      	beq.n	8004964 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b05      	cmp	r3, #5
 800495c:	d002      	beq.n	8004964 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b09      	cmp	r3, #9
 8004962:	d104      	bne.n	800496e <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	e00c      	b.n	8004988 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a3c      	ldr	r2, [pc, #240]	@ (8004a64 <HAL_ADC_IRQHandler+0x204>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d002      	beq.n	800497e <HAL_ADC_IRQHandler+0x11e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	e000      	b.n	8004980 <HAL_ADC_IRQHandler+0x120>
 800497e:	4b38      	ldr	r3, [pc, #224]	@ (8004a60 <HAL_ADC_IRQHandler+0x200>)
 8004980:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d17c      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d175      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fb02 	bl	8003fae <LL_ADC_REG_IsConversionOngoing>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11a      	bne.n	80049e6 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 020c 	bic.w	r2, r2, #12
 80049be:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d159      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049dc:	f043 0201 	orr.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	679a      	str	r2, [r3, #120]	@ 0x78
 80049e4:	e052      	b.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ea:	f043 0210 	orr.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80049fe:	e045      	b.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff f8c5 	bl	8003b94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d03d      	beq.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d138      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d131      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fabe 	bl	8003fae <LL_ADC_REG_IsConversionOngoing>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11d      	bne.n	8004a74 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020c 	bic.w	r2, r2, #12
 8004a46:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	679a      	str	r2, [r3, #120]	@ 0x78
 8004a5c:	e016      	b.n	8004a8c <HAL_ADC_IRQHandler+0x22c>
 8004a5e:	bf00      	nop
 8004a60:	42028000 	.word	0x42028000
 8004a64:	42028100 	.word	0x42028100
 8004a68:	42028300 	.word	0x42028300
 8004a6c:	46021300 	.word	0x46021300
 8004a70:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f99d 	bl	8004dcc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	220c      	movs	r2, #12
 8004a98:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a8c      	ldr	r2, [pc, #560]	@ (8004cd0 <HAL_ADC_IRQHandler+0x470>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	f000 8095 	beq.w	8004bd0 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <HAL_ADC_IRQHandler+0x25a>
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8085 	beq.w	8004bd0 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d07f      	beq.n	8004bd0 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ae0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f91e 	bl	8003d2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004af2:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff f84b 	bl	8003b94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004afe:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a73      	ldr	r2, [pc, #460]	@ (8004cd4 <HAL_ADC_IRQHandler+0x474>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d002      	beq.n	8004b10 <HAL_ADC_IRQHandler+0x2b0>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	e000      	b.n	8004b12 <HAL_ADC_IRQHandler+0x2b2>
 8004b10:	4b71      	ldr	r3, [pc, #452]	@ (8004cd8 <HAL_ADC_IRQHandler+0x478>)
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d008      	beq.n	8004b2c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d002      	beq.n	8004b2c <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b07      	cmp	r3, #7
 8004b2a:	d104      	bne.n	8004b36 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	623b      	str	r3, [r7, #32]
 8004b34:	e00c      	b.n	8004b50 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a66      	ldr	r2, [pc, #408]	@ (8004cd4 <HAL_ADC_IRQHandler+0x474>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d002      	beq.n	8004b46 <HAL_ADC_IRQHandler+0x2e6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	e000      	b.n	8004b48 <HAL_ADC_IRQHandler+0x2e8>
 8004b46:	4b64      	ldr	r3, [pc, #400]	@ (8004cd8 <HAL_ADC_IRQHandler+0x478>)
 8004b48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d035      	beq.n	8004bc2 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <HAL_ADC_IRQHandler+0x310>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02d      	beq.n	8004bc2 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d128      	bne.n	8004bc2 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d121      	bne.n	8004bc2 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fa26 	bl	8003fd4 <LL_ADC_INJ_IsConversionOngoing>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d119      	bne.n	8004bc2 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b9c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d105      	bne.n	8004bc2 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f001 f894 	bl	8005cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2260      	movs	r2, #96	@ 0x60
 8004bce:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_ADC_IRQHandler+0x39e>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00c      	beq.n	8004bfe <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004be8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8ff 	bl	8004df4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2280      	movs	r2, #128	@ 0x80
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_ADC_IRQHandler+0x3ce>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 f870 	bl	8005d04 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <HAL_ADC_IRQHandler+0x3fe>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f001 f862 	bl	8005d18 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d05d      	beq.n	8004d24 <HAL_ADC_IRQHandler+0x4c4>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d058      	beq.n	8004d24 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c7e:	e03b      	b.n	8004cf8 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a12      	ldr	r2, [pc, #72]	@ (8004cd0 <HAL_ADC_IRQHandler+0x470>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d02c      	beq.n	8004ce4 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d015      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a10      	ldr	r2, [pc, #64]	@ (8004cd8 <HAL_ADC_IRQHandler+0x478>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_ADC_IRQHandler+0x444>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd4 <HAL_ADC_IRQHandler+0x474>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_IRQHandler+0x448>
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <HAL_ADC_IRQHandler+0x47c>)
 8004ca6:	e000      	b.n	8004caa <HAL_ADC_IRQHandler+0x44a>
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <HAL_ADC_IRQHandler+0x480>)
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f8e8 	bl	8003e80 <LL_ADC_GetMultiDMATransfer>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cba:	e01d      	b.n	8004cf8 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cce:	e013      	b.n	8004cf8 <HAL_ADC_IRQHandler+0x498>
 8004cd0:	46021000 	.word	0x46021000
 8004cd4:	42028100 	.word	0x42028100
 8004cd8:	42028000 	.word	0x42028000
 8004cdc:	42028300 	.word	0x42028300
 8004ce0:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff f812 	bl	8003d12 <LL_ADC_REG_GetDMATransfer>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d10e      	bne.n	8004d1c <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d02:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d0e:	f043 0202 	orr.w	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f876 	bl	8004e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2210      	movs	r2, #16
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01b      	beq.n	8004d66 <HAL_ADC_IRQHandler+0x506>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d48:	f043 0201 	orr.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f877 	bl	8004e44 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <HAL_ADC_IRQHandler+0x568>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d126      	bne.n	8004dbe <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <HAL_ADC_IRQHandler+0x534>
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f849 	bl	8004e1c <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d92:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00f      	beq.n	8004dbe <HAL_ADC_IRQHandler+0x55e>
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f841 	bl	8004e30 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dbc:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	3728      	adds	r7, #40	@ 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	46021000 	.word	0x46021000

08004dcc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b0b7      	sub	sp, #220	@ 0xdc
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4aa8      	ldr	r2, [pc, #672]	@ (8005114 <HAL_ADC_ConfigChannel+0x2bc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d103      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d102      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x36>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f000 bdfe 	b.w	8005a8a <HAL_ADC_ConfigChannel+0xc32>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f887 	bl	8003fae <LL_ADC_REG_IsConversionOngoing>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 85c1 	bne.w	8005a2a <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a99      	ldr	r2, [pc, #612]	@ (8005114 <HAL_ADC_ConfigChannel+0x2bc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	f000 8409 	beq.w	80056c6 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d108      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x7a>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0e9b      	lsrs	r3, r3, #26
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2201      	movs	r2, #1
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	e01d      	b.n	8004f0e <HAL_ADC_ConfigChannel+0xb6>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ede:	fa93 f3a3 	rbit	r3, r3
 8004ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004eea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004eee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004ef6:	2320      	movs	r3, #32
 8004ef8:	e004      	b.n	8004f04 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2201      	movs	r2, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	69d1      	ldr	r1, [r2, #28]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6859      	ldr	r1, [r3, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f7fe fe47 	bl	8003bbc <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f83b 	bl	8003fae <LL_ADC_REG_IsConversionOngoing>
 8004f38:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff f847 	bl	8003fd4 <LL_ADC_INJ_IsConversionOngoing>
 8004f46:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f040 81df 	bne.w	8005312 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 81da 	bne.w	8005312 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f7fe fef2 	bl	8003d54 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d046      	beq.n	8005020 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6919      	ldr	r1, [r3, #16]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fa2:	f7fe fd2d 	bl	8003a00 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6919      	ldr	r1, [r3, #16]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fe fd5b 	bl	8003a6e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	7e9b      	ldrb	r3, [r3, #26]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d11e      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x17e>
 8004fd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x180>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f7fe fd7e 	bl	8003ada <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d102      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x19c>
 8004fee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004ff2:	e000      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x19e>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f7fe fd54 	bl	8003aa4 <LL_ADC_SetOffsetSignedSaturation>
 8004ffc:	e189      	b.n	8005312 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2200      	movs	r2, #0
 8005008:	4619      	mov	r1, r3
 800500a:	f7fe fd66 	bl	8003ada <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2200      	movs	r2, #0
 8005018:	4619      	mov	r1, r3
 800501a:	f7fe fd43 	bl	8003aa4 <LL_ADC_SetOffsetSignedSaturation>
 800501e:	e178      	b.n	8005312 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fd0b 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 800502c:	4603      	mov	r3, r0
 800502e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <HAL_ADC_ConfigChannel+0x1f4>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe fd00 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 8005042:	4603      	mov	r3, r0
 8005044:	0e9b      	lsrs	r3, r3, #26
 8005046:	f003 021f 	and.w	r2, r3, #31
 800504a:	e01e      	b.n	800508a <HAL_ADC_ConfigChannel+0x232>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fcf5 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 8005058:	4603      	mov	r3, r0
 800505a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005062:	fa93 f3a3 	rbit	r3, r3
 8005066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800506a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800506e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005072:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800507a:	2320      	movs	r3, #32
 800507c:	e004      	b.n	8005088 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800507e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005082:	fab3 f383 	clz	r3, r3
 8005086:	b2db      	uxtb	r3, r3
 8005088:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d105      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x24a>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	0e9b      	lsrs	r3, r3, #26
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	e018      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x27c>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050ae:	fa93 f3a3 	rbit	r3, r3
 80050b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80050b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80050be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80050c6:	2320      	movs	r3, #32
 80050c8:	e004      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80050ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d107      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2300      	movs	r3, #0
 80050e2:	2100      	movs	r1, #0
 80050e4:	f7fe fc8c 	bl	8003a00 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2101      	movs	r1, #1
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fca7 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10c      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x2c0>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2101      	movs	r1, #1
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fc9c 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 800510a:	4603      	mov	r3, r0
 800510c:	0e9b      	lsrs	r3, r3, #26
 800510e:	f003 021f 	and.w	r2, r3, #31
 8005112:	e020      	b.n	8005156 <HAL_ADC_ConfigChannel+0x2fe>
 8005114:	46021000 	.word	0x46021000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2101      	movs	r1, #1
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fc8f 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 8005124:	4603      	mov	r3, r0
 8005126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005136:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800513a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800513e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8005146:	2320      	movs	r3, #32
 8005148:	e004      	b.n	8005154 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800514a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <HAL_ADC_ConfigChannel+0x316>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	0e9b      	lsrs	r3, r3, #26
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	e018      	b.n	80051a0 <HAL_ADC_ConfigChannel+0x348>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005182:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800518a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8005192:	2320      	movs	r3, #32
 8005194:	e004      	b.n	80051a0 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8005196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d107      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	2101      	movs	r1, #1
 80051b0:	f7fe fc26 	bl	8003a00 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2102      	movs	r1, #2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fc41 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x388>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2102      	movs	r1, #2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fc36 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 80051d6:	4603      	mov	r3, r0
 80051d8:	0e9b      	lsrs	r3, r3, #26
 80051da:	f003 021f 	and.w	r2, r3, #31
 80051de:	e01a      	b.n	8005216 <HAL_ADC_ConfigChannel+0x3be>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe fc2b 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 80051ec:	4603      	mov	r3, r0
 80051ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051f2:	fa93 f3a3 	rbit	r3, r3
 80051f6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80051f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80051fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8005206:	2320      	movs	r3, #32
 8005208:	e004      	b.n	8005214 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800520a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800520e:	fab3 f383 	clz	r3, r3
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_ADC_ConfigChannel+0x3d6>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	0e9b      	lsrs	r3, r3, #26
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	e011      	b.n	8005252 <HAL_ADC_ConfigChannel+0x3fa>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005234:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800523c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800523e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005240:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8005246:	2320      	movs	r3, #32
 8005248:	e003      	b.n	8005252 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800524a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800524c:	fab3 f383 	clz	r3, r3
 8005250:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005252:	429a      	cmp	r2, r3
 8005254:	d107      	bne.n	8005266 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	2300      	movs	r3, #0
 8005260:	2102      	movs	r1, #2
 8005262:	f7fe fbcd 	bl	8003a00 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2103      	movs	r1, #3
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe fbe8 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 8005272:	4603      	mov	r3, r0
 8005274:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x43a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2103      	movs	r1, #3
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fbdd 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 8005288:	4603      	mov	r3, r0
 800528a:	0e9b      	lsrs	r3, r3, #26
 800528c:	f003 021f 	and.w	r2, r3, #31
 8005290:	e017      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x46a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2103      	movs	r1, #3
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fbd2 	bl	8003a42 <LL_ADC_GetOffsetChannel>
 800529e:	4603      	mov	r3, r0
 80052a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80052aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80052ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80052b4:	2320      	movs	r3, #32
 80052b6:	e003      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80052b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ba:	fab3 f383 	clz	r3, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_ADC_ConfigChannel+0x482>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0e9b      	lsrs	r3, r3, #26
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	e011      	b.n	80052fe <HAL_ADC_ConfigChannel+0x4a6>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052e2:	fa93 f3a3 	rbit	r3, r3
 80052e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80052e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80052ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80052f2:	2320      	movs	r3, #32
 80052f4:	e003      	b.n	80052fe <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80052f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052f8:	fab3 f383 	clz	r3, r3
 80052fc:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052fe:	429a      	cmp	r2, r3
 8005300:	d107      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	2300      	movs	r3, #0
 800530c:	2103      	movs	r1, #3
 800530e:	f7fe fb77 	bl	8003a00 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fe22 	bl	8003f60 <LL_ADC_IsEnabled>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 83ad 	bne.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	6819      	ldr	r1, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	461a      	mov	r2, r3
 8005332:	f7fe fd73 	bl	8003e1c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800533e:	f040 80d6 	bne.w	80054ee <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x50e>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0e9b      	lsrs	r3, r3, #26
 8005354:	3301      	adds	r3, #1
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2b09      	cmp	r3, #9
 800535c:	bf94      	ite	ls
 800535e:	2301      	movls	r3, #1
 8005360:	2300      	movhi	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	e019      	b.n	800539a <HAL_ADC_ConfigChannel+0x542>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005376:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800537e:	2320      	movs	r3, #32
 8005380:	e003      	b.n	800538a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005384:	fab3 f383 	clz	r3, r3
 8005388:	b2db      	uxtb	r3, r3
 800538a:	3301      	adds	r3, #1
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2b09      	cmp	r3, #9
 8005392:	bf94      	ite	ls
 8005394:	2301      	movls	r3, #1
 8005396:	2300      	movhi	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04d      	beq.n	800543a <HAL_ADC_ConfigChannel+0x5e2>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_ADC_ConfigChannel+0x562>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	0e9b      	lsrs	r3, r3, #26
 80053b0:	3301      	adds	r3, #1
 80053b2:	069b      	lsls	r3, r3, #26
 80053b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053b8:	e015      	b.n	80053e6 <HAL_ADC_ConfigChannel+0x58e>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80053c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80053cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80053d2:	2320      	movs	r3, #32
 80053d4:	e003      	b.n	80053de <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80053d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d8:	fab3 f383 	clz	r3, r3
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	3301      	adds	r3, #1
 80053e0:	069b      	lsls	r3, r3, #26
 80053e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x5ae>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	0e9b      	lsrs	r3, r3, #26
 80053f8:	3301      	adds	r3, #1
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2101      	movs	r1, #1
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	e017      	b.n	8005436 <HAL_ADC_ConfigChannel+0x5de>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540e:	fa93 f3a3 	rbit	r3, r3
 8005412:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800541e:	2320      	movs	r3, #32
 8005420:	e003      	b.n	800542a <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	fab3 f383 	clz	r3, r3
 8005428:	b2db      	uxtb	r3, r3
 800542a:	3301      	adds	r3, #1
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	2101      	movs	r1, #1
 8005432:	fa01 f303 	lsl.w	r3, r1, r3
 8005436:	4313      	orrs	r3, r2
 8005438:	e04e      	b.n	80054d8 <HAL_ADC_ConfigChannel+0x680>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d107      	bne.n	8005456 <HAL_ADC_ConfigChannel+0x5fe>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	0e9b      	lsrs	r3, r3, #26
 800544c:	3301      	adds	r3, #1
 800544e:	069b      	lsls	r3, r3, #26
 8005450:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005454:	e015      	b.n	8005482 <HAL_ADC_ConfigChannel+0x62a>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800546e:	2320      	movs	r3, #32
 8005470:	e003      	b.n	800547a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	3301      	adds	r3, #1
 800547c:	069b      	lsls	r3, r3, #26
 800547e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x64a>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	0e9b      	lsrs	r3, r3, #26
 8005494:	3301      	adds	r3, #1
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2101      	movs	r1, #1
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	e017      	b.n	80054d2 <HAL_ADC_ConfigChannel+0x67a>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	61bb      	str	r3, [r7, #24]
  return result;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80054ba:	2320      	movs	r3, #32
 80054bc:	e003      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	fab3 f383 	clz	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	3301      	adds	r3, #1
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	461a      	mov	r2, r3
 80054e6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80054ea:	f7fe fc33 	bl	8003d54 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f280 82c3 	bge.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a92      	ldr	r2, [pc, #584]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_ADC_ConfigChannel+0x6b4>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a91      	ldr	r2, [pc, #580]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d101      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x6b8>
 800550c:	4b90      	ldr	r3, [pc, #576]	@ (8005750 <HAL_ADC_ConfigChannel+0x8f8>)
 800550e:	e000      	b.n	8005512 <HAL_ADC_ConfigChannel+0x6ba>
 8005510:	4b90      	ldr	r3, [pc, #576]	@ (8005754 <HAL_ADC_ConfigChannel+0x8fc>)
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fa46 	bl	80039a4 <LL_ADC_GetCommonPathInternalCh>
 8005518:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a89      	ldr	r2, [pc, #548]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_ADC_ConfigChannel+0x6d8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a88      	ldr	r2, [pc, #544]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10e      	bne.n	800554e <HAL_ADC_ConfigChannel+0x6f6>
 8005530:	4885      	ldr	r0, [pc, #532]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 8005532:	f7fe fd15 	bl	8003f60 <LL_ADC_IsEnabled>
 8005536:	4604      	mov	r4, r0
 8005538:	4884      	ldr	r0, [pc, #528]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 800553a:	f7fe fd11 	bl	8003f60 <LL_ADC_IsEnabled>
 800553e:	4603      	mov	r3, r0
 8005540:	4323      	orrs	r3, r4
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e008      	b.n	8005560 <HAL_ADC_ConfigChannel+0x708>
 800554e:	4882      	ldr	r0, [pc, #520]	@ (8005758 <HAL_ADC_ConfigChannel+0x900>)
 8005550:	f7fe fd06 	bl	8003f60 <LL_ADC_IsEnabled>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	bf0c      	ite	eq
 800555a:	2301      	moveq	r3, #1
 800555c:	2300      	movne	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80a6 	beq.w	80056b2 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a7c      	ldr	r2, [pc, #496]	@ (800575c <HAL_ADC_ConfigChannel+0x904>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d13c      	bne.n	80055ea <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005574:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d136      	bne.n	80055ea <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a71      	ldr	r2, [pc, #452]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00a      	beq.n	800559c <HAL_ADC_ConfigChannel+0x744>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a70      	ldr	r2, [pc, #448]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d005      	beq.n	800559c <HAL_ADC_ConfigChannel+0x744>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a70      	ldr	r2, [pc, #448]	@ (8005758 <HAL_ADC_ConfigChannel+0x900>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f040 826e 	bne.w	8005a78 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a69      	ldr	r2, [pc, #420]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_ADC_ConfigChannel+0x758>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a68      	ldr	r2, [pc, #416]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x75c>
 80055b0:	4a67      	ldr	r2, [pc, #412]	@ (8005750 <HAL_ADC_ConfigChannel+0x8f8>)
 80055b2:	e000      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x75e>
 80055b4:	4a67      	ldr	r2, [pc, #412]	@ (8005754 <HAL_ADC_ConfigChannel+0x8fc>)
 80055b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7fe f9dc 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055c6:	4b66      	ldr	r3, [pc, #408]	@ (8005760 <HAL_ADC_ConfigChannel+0x908>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	4a65      	ldr	r2, [pc, #404]	@ (8005764 <HAL_ADC_ConfigChannel+0x90c>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	099b      	lsrs	r3, r3, #6
 80055d4:	3301      	adds	r3, #1
 80055d6:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80055d8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80055da:	e002      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f9      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055e8:	e246      	b.n	8005a78 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005768 <HAL_ADC_ConfigChannel+0x910>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d12b      	bne.n	800564c <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d125      	bne.n	800564c <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a50      	ldr	r2, [pc, #320]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00a      	beq.n	8005620 <HAL_ADC_ConfigChannel+0x7c8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a4f      	ldr	r2, [pc, #316]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d005      	beq.n	8005620 <HAL_ADC_ConfigChannel+0x7c8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a4f      	ldr	r2, [pc, #316]	@ (8005758 <HAL_ADC_ConfigChannel+0x900>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f040 822e 	bne.w	8005a7c <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a48      	ldr	r2, [pc, #288]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_ADC_ConfigChannel+0x7dc>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a47      	ldr	r2, [pc, #284]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d101      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x7e0>
 8005634:	4a46      	ldr	r2, [pc, #280]	@ (8005750 <HAL_ADC_ConfigChannel+0x8f8>)
 8005636:	e000      	b.n	800563a <HAL_ADC_ConfigChannel+0x7e2>
 8005638:	4a46      	ldr	r2, [pc, #280]	@ (8005754 <HAL_ADC_ConfigChannel+0x8fc>)
 800563a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800563e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f7fe f99a 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800564a:	e217      	b.n	8005a7c <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a46      	ldr	r2, [pc, #280]	@ (800576c <HAL_ADC_ConfigChannel+0x914>)
 8005652:	4293      	cmp	r3, r2
 8005654:	f040 8213 	bne.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800565c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 820c 	bne.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a37      	ldr	r2, [pc, #220]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00a      	beq.n	8005686 <HAL_ADC_ConfigChannel+0x82e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a35      	ldr	r2, [pc, #212]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d005      	beq.n	8005686 <HAL_ADC_ConfigChannel+0x82e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a36      	ldr	r2, [pc, #216]	@ (8005758 <HAL_ADC_ConfigChannel+0x900>)
 8005680:	4293      	cmp	r3, r2
 8005682:	f040 81fc 	bne.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2f      	ldr	r2, [pc, #188]	@ (8005748 <HAL_ADC_ConfigChannel+0x8f0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_ADC_ConfigChannel+0x842>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2d      	ldr	r2, [pc, #180]	@ (800574c <HAL_ADC_ConfigChannel+0x8f4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_ADC_ConfigChannel+0x846>
 800569a:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <HAL_ADC_ConfigChannel+0x8f8>)
 800569c:	e000      	b.n	80056a0 <HAL_ADC_ConfigChannel+0x848>
 800569e:	4a2d      	ldr	r2, [pc, #180]	@ (8005754 <HAL_ADC_ConfigChannel+0x8fc>)
 80056a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe f967 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
 80056b0:	e1e5      	b.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80056c4:	e1db      	b.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	f000 811b 	beq.w	800590e <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056e0:	d004      	beq.n	80056ec <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80056e6:	4a22      	ldr	r2, [pc, #136]	@ (8005770 <HAL_ADC_ConfigChannel+0x918>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d107      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe fac1 	bl	8003c7c <LL_ADC_REG_SetSequencerChAdd>
 80056fa:	e059      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 031f 	and.w	r3, r3, #31
 800570a:	210f      	movs	r1, #15
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005718:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <HAL_ADC_ConfigChannel+0x8d4>
 8005720:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005724:	0e9b      	lsrs	r3, r3, #26
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	e027      	b.n	800577c <HAL_ADC_ConfigChannel+0x924>
 800572c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005730:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	fa93 f3a3 	rbit	r3, r3
 8005738:	60fb      	str	r3, [r7, #12]
  return result;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d117      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8005744:	2320      	movs	r3, #32
 8005746:	e019      	b.n	800577c <HAL_ADC_ConfigChannel+0x924>
 8005748:	42028000 	.word	0x42028000
 800574c:	42028100 	.word	0x42028100
 8005750:	42028300 	.word	0x42028300
 8005754:	46021300 	.word	0x46021300
 8005758:	46021000 	.word	0x46021000
 800575c:	ce080000 	.word	0xce080000
 8005760:	20000028 	.word	0x20000028
 8005764:	053e2d63 	.word	0x053e2d63
 8005768:	ca040000 	.word	0xca040000
 800576c:	80000001 	.word	0x80000001
 8005770:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6849      	ldr	r1, [r1, #4]
 8005780:	f001 011f 	and.w	r1, r1, #31
 8005784:	408b      	lsls	r3, r1
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	429a      	cmp	r2, r3
 800579c:	d808      	bhi.n	80057b0 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057aa:	4619      	mov	r1, r3
 80057ac:	f7fe fa06 	bl	8003bbc <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	461a      	mov	r2, r3
 80057ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80057be:	f7fe fac9 	bl	8003d54 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f280 8159 	bge.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a9b      	ldr	r2, [pc, #620]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_ADC_ConfigChannel+0x988>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a9a      	ldr	r2, [pc, #616]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d101      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x98c>
 80057e0:	4b99      	ldr	r3, [pc, #612]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 80057e2:	e000      	b.n	80057e6 <HAL_ADC_ConfigChannel+0x98e>
 80057e4:	4b99      	ldr	r3, [pc, #612]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe f8dc 	bl	80039a4 <LL_ADC_GetCommonPathInternalCh>
 80057ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a96      	ldr	r2, [pc, #600]	@ (8005a50 <HAL_ADC_ConfigChannel+0xbf8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d12b      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d125      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a8d      	ldr	r2, [pc, #564]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_ADC_ConfigChannel+0x9c2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a8b      	ldr	r2, [pc, #556]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <HAL_ADC_ConfigChannel+0x9c6>
 800581a:	4a8b      	ldr	r2, [pc, #556]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 800581c:	e000      	b.n	8005820 <HAL_ADC_ConfigChannel+0x9c8>
 800581e:	4a8b      	ldr	r2, [pc, #556]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 8005820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005824:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe f8a7 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005830:	4b88      	ldr	r3, [pc, #544]	@ (8005a54 <HAL_ADC_ConfigChannel+0xbfc>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	099b      	lsrs	r3, r3, #6
 8005836:	4a88      	ldr	r2, [pc, #544]	@ (8005a58 <HAL_ADC_ConfigChannel+0xc00>)
 8005838:	fba2 2303 	umull	r2, r3, r2, r3
 800583c:	099b      	lsrs	r3, r3, #6
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8005842:	e002      	b.n	800584a <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	3b01      	subs	r3, #1
 8005848:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f9      	bne.n	8005844 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8005850:	e045      	b.n	80058de <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a81      	ldr	r2, [pc, #516]	@ (8005a5c <HAL_ADC_ConfigChannel+0xc04>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d11b      	bne.n	8005894 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800585c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8005864:	2b00      	cmp	r3, #0
 8005866:	d115      	bne.n	8005894 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a74      	ldr	r2, [pc, #464]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_ADC_ConfigChannel+0xa24>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a73      	ldr	r2, [pc, #460]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_ADC_ConfigChannel+0xa28>
 800587c:	4a72      	ldr	r2, [pc, #456]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 800587e:	e000      	b.n	8005882 <HAL_ADC_ConfigChannel+0xa2a>
 8005880:	4a72      	ldr	r2, [pc, #456]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 8005882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7fe f876 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
 8005892:	e024      	b.n	80058de <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a71      	ldr	r2, [pc, #452]	@ (8005a60 <HAL_ADC_ConfigChannel+0xc08>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d11f      	bne.n	80058de <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800589e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d115      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a64      	ldr	r2, [pc, #400]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_ADC_ConfigChannel+0xa66>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a62      	ldr	r2, [pc, #392]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <HAL_ADC_ConfigChannel+0xa6a>
 80058be:	4a62      	ldr	r2, [pc, #392]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 80058c0:	e000      	b.n	80058c4 <HAL_ADC_ConfigChannel+0xa6c>
 80058c2:	4a62      	ldr	r2, [pc, #392]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 80058c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fe f855 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
 80058d4:	e003      	b.n	80058de <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a62      	ldr	r2, [pc, #392]	@ (8005a64 <HAL_ADC_ConfigChannel+0xc0c>)
 80058dc:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a61      	ldr	r2, [pc, #388]	@ (8005a68 <HAL_ADC_ConfigChannel+0xc10>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	f040 80ca 	bne.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 80c3 	bne.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0201 	orr.w	r2, r2, #1
 8005908:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800590c:	e0b7      	b.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005916:	d004      	beq.n	8005922 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800591c:	4a53      	ldr	r2, [pc, #332]	@ (8005a6c <HAL_ADC_ConfigChannel+0xc14>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d106      	bne.n	8005930 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe f9d9 	bl	8003ce2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f280 80a2 	bge.w	8005a7e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a40      	ldr	r2, [pc, #256]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d004      	beq.n	800594e <HAL_ADC_ConfigChannel+0xaf6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a3e      	ldr	r2, [pc, #248]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <HAL_ADC_ConfigChannel+0xafa>
 800594e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 8005950:	e000      	b.n	8005954 <HAL_ADC_ConfigChannel+0xafc>
 8005952:	4b3e      	ldr	r3, [pc, #248]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe f825 	bl	80039a4 <LL_ADC_GetCommonPathInternalCh>
 800595a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a43      	ldr	r2, [pc, #268]	@ (8005a70 <HAL_ADC_ConfigChannel+0xc18>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d115      	bne.n	8005994 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a34      	ldr	r2, [pc, #208]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_ADC_ConfigChannel+0xb24>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a33      	ldr	r2, [pc, #204]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <HAL_ADC_ConfigChannel+0xb28>
 800597c:	4a32      	ldr	r2, [pc, #200]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 800597e:	e000      	b.n	8005982 <HAL_ADC_ConfigChannel+0xb2a>
 8005980:	4a32      	ldr	r2, [pc, #200]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 8005982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005986:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f7fd fff6 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
 8005992:	e034      	b.n	80059fe <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a36      	ldr	r2, [pc, #216]	@ (8005a74 <HAL_ADC_ConfigChannel+0xc1c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d115      	bne.n	80059ca <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a27      	ldr	r2, [pc, #156]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_ADC_ConfigChannel+0xb5a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a25      	ldr	r2, [pc, #148]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_ADC_ConfigChannel+0xb5e>
 80059b2:	4a25      	ldr	r2, [pc, #148]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 80059b4:	e000      	b.n	80059b8 <HAL_ADC_ConfigChannel+0xb60>
 80059b6:	4a25      	ldr	r2, [pc, #148]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 80059b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7fd ffdb 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
 80059c8:	e019      	b.n	80059fe <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a24      	ldr	r2, [pc, #144]	@ (8005a60 <HAL_ADC_ConfigChannel+0xc08>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d114      	bne.n	80059fe <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a19      	ldr	r2, [pc, #100]	@ (8005a40 <HAL_ADC_ConfigChannel+0xbe8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_ADC_ConfigChannel+0xb90>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a18      	ldr	r2, [pc, #96]	@ (8005a44 <HAL_ADC_ConfigChannel+0xbec>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_ADC_ConfigChannel+0xb94>
 80059e8:	4a17      	ldr	r2, [pc, #92]	@ (8005a48 <HAL_ADC_ConfigChannel+0xbf0>)
 80059ea:	e000      	b.n	80059ee <HAL_ADC_ConfigChannel+0xb96>
 80059ec:	4a17      	ldr	r2, [pc, #92]	@ (8005a4c <HAL_ADC_ConfigChannel+0xbf4>)
 80059ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059f2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7fd ffc0 	bl	800397e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a19      	ldr	r2, [pc, #100]	@ (8005a68 <HAL_ADC_ConfigChannel+0xc10>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d13a      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d134      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005a28:	e029      	b.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a3c:	e01f      	b.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
 8005a3e:	bf00      	nop
 8005a40:	42028000 	.word	0x42028000
 8005a44:	42028100 	.word	0x42028100
 8005a48:	42028300 	.word	0x42028300
 8005a4c:	46021300 	.word	0x46021300
 8005a50:	b6002000 	.word	0xb6002000
 8005a54:	20000028 	.word	0x20000028
 8005a58:	053e2d63 	.word	0x053e2d63
 8005a5c:	ba004000 	.word	0xba004000
 8005a60:	80000001 	.word	0x80000001
 8005a64:	b2001000 	.word	0xb2001000
 8005a68:	d7200000 	.word	0xd7200000
 8005a6c:	80000010 	.word	0x80000010
 8005a70:	ce080000 	.word	0xce080000
 8005a74:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a78:	bf00      	nop
 8005a7a:	e000      	b.n	8005a7e <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a7c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8005a86:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	37dc      	adds	r7, #220	@ 0xdc
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd90      	pop	{r4, r7, pc}
 8005a92:	bf00      	nop

08005a94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe fa5d 	bl	8003f60 <LL_ADC_IsEnabled>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d17b      	bne.n	8005ba4 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb0 <ADC_Enable+0x11c>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e067      	b.n	8005ba6 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe fa28 	bl	8003f38 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <ADC_Enable+0x66>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2f      	ldr	r2, [pc, #188]	@ (8005bb4 <ADC_Enable+0x120>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d054      	beq.n	8005ba4 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005afa:	f7fd fed5 	bl	80038a8 <HAL_GetTick>
 8005afe:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb8 <ADC_Enable+0x124>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d004      	beq.n	8005b14 <ADC_Enable+0x80>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bbc <ADC_Enable+0x128>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d101      	bne.n	8005b18 <ADC_Enable+0x84>
 8005b14:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc0 <ADC_Enable+0x12c>)
 8005b16:	e000      	b.n	8005b1a <ADC_Enable+0x86>
 8005b18:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc4 <ADC_Enable+0x130>)
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe f9a2 	bl	8003e64 <LL_ADC_GetMultimode>
 8005b20:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a25      	ldr	r2, [pc, #148]	@ (8005bbc <ADC_Enable+0x128>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d002      	beq.n	8005b32 <ADC_Enable+0x9e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	e000      	b.n	8005b34 <ADC_Enable+0xa0>
 8005b32:	4b21      	ldr	r3, [pc, #132]	@ (8005bb8 <ADC_Enable+0x124>)
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d02c      	beq.n	8005b96 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d130      	bne.n	8005ba4 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b42:	e028      	b.n	8005b96 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fe fa09 	bl	8003f60 <LL_ADC_IsEnabled>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d104      	bne.n	8005b5e <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe f9ed 	bl	8003f38 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b5e:	f7fd fea3 	bl	80038a8 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d914      	bls.n	8005b96 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d00d      	beq.n	8005b96 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b7e:	f043 0210 	orr.w	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e007      	b.n	8005ba6 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d1cf      	bne.n	8005b44 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	8000003f 	.word	0x8000003f
 8005bb4:	46021000 	.word	0x46021000
 8005bb8:	42028000 	.word	0x42028000
 8005bbc:	42028100 	.word	0x42028100
 8005bc0:	42028300 	.word	0x42028300
 8005bc4:	46021300 	.word	0x46021300

08005bc8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d14b      	bne.n	8005c7a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005be6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d021      	beq.n	8005c40 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fd ffc7 	bl	8003b94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d032      	beq.n	8005c72 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d12b      	bne.n	8005c72 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d11f      	bne.n	8005c72 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c36:	f043 0201 	orr.w	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	679a      	str	r2, [r3, #120]	@ 0x78
 8005c3e:	e018      	b.n	8005c72 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d111      	bne.n	8005c72 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff f8aa 	bl	8004dcc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c78:	e00e      	b.n	8005c98 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff f8be 	bl	8004e08 <HAL_ADC_ErrorCallback>
}
 8005c8c:	e004      	b.n	8005c98 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff f896 	bl	8004de0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cda:	f043 0204 	orr.w	r2, r3, #4
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff f890 	bl	8004e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d50:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <__NVIC_SetPriorityGrouping+0x44>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d72:	4a04      	ldr	r2, [pc, #16]	@ (8005d84 <__NVIC_SetPriorityGrouping+0x44>)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	60d3      	str	r3, [r2, #12]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	e000ed00 	.word	0xe000ed00

08005d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d8c:	4b04      	ldr	r3, [pc, #16]	@ (8005da0 <__NVIC_GetPriorityGrouping+0x18>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	0a1b      	lsrs	r3, r3, #8
 8005d92:	f003 0307 	and.w	r3, r3, #7
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000ed00 	.word	0xe000ed00

08005da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	db0b      	blt.n	8005dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	f003 021f 	and.w	r2, r3, #31
 8005dbc:	4907      	ldr	r1, [pc, #28]	@ (8005ddc <__NVIC_EnableIRQ+0x38>)
 8005dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	e000e100 	.word	0xe000e100

08005de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	db0a      	blt.n	8005e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	490c      	ldr	r1, [pc, #48]	@ (8005e2c <__NVIC_SetPriority+0x4c>)
 8005dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dfe:	0112      	lsls	r2, r2, #4
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	440b      	add	r3, r1
 8005e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e08:	e00a      	b.n	8005e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4908      	ldr	r1, [pc, #32]	@ (8005e30 <__NVIC_SetPriority+0x50>)
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	3b04      	subs	r3, #4
 8005e18:	0112      	lsls	r2, r2, #4
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	761a      	strb	r2, [r3, #24]
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000e100 	.word	0xe000e100
 8005e30:	e000ed00 	.word	0xe000ed00

08005e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	@ 0x24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f1c3 0307 	rsb	r3, r3, #7
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	bf28      	it	cs
 8005e52:	2304      	movcs	r3, #4
 8005e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2b06      	cmp	r3, #6
 8005e5c:	d902      	bls.n	8005e64 <NVIC_EncodePriority+0x30>
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3b03      	subs	r3, #3
 8005e62:	e000      	b.n	8005e66 <NVIC_EncodePriority+0x32>
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43da      	mvns	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	401a      	ands	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	fa01 f303 	lsl.w	r3, r1, r3
 8005e86:	43d9      	mvns	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e8c:	4313      	orrs	r3, r2
         );
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3724      	adds	r7, #36	@ 0x24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff ff4c 	bl	8005d40 <__NVIC_SetPriorityGrouping>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ebe:	f7ff ff63 	bl	8005d88 <__NVIC_GetPriorityGrouping>
 8005ec2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f7ff ffb3 	bl	8005e34 <NVIC_EncodePriority>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ff82 	bl	8005de0 <__NVIC_SetPriority>
}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff ff56 	bl	8005da4 <__NVIC_EnableIRQ>
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f10:	d301      	bcc.n	8005f16 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005f12:	2301      	movs	r3, #1
 8005f14:	e00d      	b.n	8005f32 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005f16:	4a0a      	ldr	r2, [pc, #40]	@ (8005f40 <HAL_SYSTICK_Config+0x40>)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005f1e:	4b08      	ldr	r3, [pc, #32]	@ (8005f40 <HAL_SYSTICK_Config+0x40>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005f24:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <HAL_SYSTICK_Config+0x40>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a05      	ldr	r2, [pc, #20]	@ (8005f40 <HAL_SYSTICK_Config+0x40>)
 8005f2a:	f043 0303 	orr.w	r3, r3, #3
 8005f2e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000e010 	.word	0xe000e010

08005f44 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d844      	bhi.n	8005fdc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f7b 	.word	0x08005f7b
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005fbb 	.word	0x08005fbb
 8005f64:	08005fdd 	.word	0x08005fdd
 8005f68:	08005f6d 	.word	0x08005f6d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1e      	ldr	r2, [pc, #120]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f72:	f043 0304 	orr.w	r3, r3, #4
 8005f76:	6013      	str	r3, [r2, #0]
      break;
 8005f78:	e031      	b.n	8005fde <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f80:	f023 0304 	bic.w	r3, r3, #4
 8005f84:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005f86:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f8c:	4a18      	ldr	r2, [pc, #96]	@ (8005ff0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f8e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005f96:	e022      	b.n	8005fde <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f98:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f9e:	f023 0304 	bic.w	r3, r3, #4
 8005fa2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005fa4:	4b12      	ldr	r3, [pc, #72]	@ (8005ff0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005faa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005fae:	4a10      	ldr	r2, [pc, #64]	@ (8005ff0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005fb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005fb8:	e011      	b.n	8005fde <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005fba:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8005fec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fcc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005fd0:	4a07      	ldr	r2, [pc, #28]	@ (8005ff0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005fd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005fda:	e000      	b.n	8005fde <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005fdc:	bf00      	nop
  }
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	e000e010 	.word	0xe000e010
 8005ff0:	46020c00 	.word	0x46020c00

08005ff4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005ffa:	4b19      	ldr	r3, [pc, #100]	@ (8006060 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8006006:	2304      	movs	r3, #4
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	e021      	b.n	8006050 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800600c:	4b15      	ldr	r3, [pc, #84]	@ (8006064 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800600e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006012:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006016:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800601e:	d011      	beq.n	8006044 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006026:	d810      	bhi.n	800604a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d004      	beq.n	8006038 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006034:	d003      	beq.n	800603e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8006036:	e008      	b.n	800604a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8006038:	2300      	movs	r3, #0
 800603a:	607b      	str	r3, [r7, #4]
        break;
 800603c:	e008      	b.n	8006050 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800603e:	2301      	movs	r3, #1
 8006040:	607b      	str	r3, [r7, #4]
        break;
 8006042:	e005      	b.n	8006050 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8006044:	2302      	movs	r3, #2
 8006046:	607b      	str	r3, [r7, #4]
        break;
 8006048:	e002      	b.n	8006050 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800604a:	2300      	movs	r3, #0
 800604c:	607b      	str	r3, [r7, #4]
        break;
 800604e:	bf00      	nop
    }
  }
  return systick_source;
 8006050:	687b      	ldr	r3, [r7, #4]
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	e000e010 	.word	0xe000e010
 8006064:	46020c00 	.word	0x46020c00

08006068 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006070:	f7fd fc1a 	bl	80038a8 <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0db      	b.n	8006238 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a6e      	ldr	r2, [pc, #440]	@ (8006240 <HAL_DMA_Init+0x1d8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	f000 809f 	beq.w	80061ca <HAL_DMA_Init+0x162>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a6c      	ldr	r2, [pc, #432]	@ (8006244 <HAL_DMA_Init+0x1dc>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f000 8099 	beq.w	80061ca <HAL_DMA_Init+0x162>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a6a      	ldr	r2, [pc, #424]	@ (8006248 <HAL_DMA_Init+0x1e0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f000 8093 	beq.w	80061ca <HAL_DMA_Init+0x162>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a68      	ldr	r2, [pc, #416]	@ (800624c <HAL_DMA_Init+0x1e4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f000 808d 	beq.w	80061ca <HAL_DMA_Init+0x162>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a66      	ldr	r2, [pc, #408]	@ (8006250 <HAL_DMA_Init+0x1e8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	f000 8087 	beq.w	80061ca <HAL_DMA_Init+0x162>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a64      	ldr	r2, [pc, #400]	@ (8006254 <HAL_DMA_Init+0x1ec>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	f000 8081 	beq.w	80061ca <HAL_DMA_Init+0x162>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a62      	ldr	r2, [pc, #392]	@ (8006258 <HAL_DMA_Init+0x1f0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d07b      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a61      	ldr	r2, [pc, #388]	@ (800625c <HAL_DMA_Init+0x1f4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d076      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a5f      	ldr	r2, [pc, #380]	@ (8006260 <HAL_DMA_Init+0x1f8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d071      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006264 <HAL_DMA_Init+0x1fc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d06c      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a5c      	ldr	r2, [pc, #368]	@ (8006268 <HAL_DMA_Init+0x200>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d067      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a5b      	ldr	r2, [pc, #364]	@ (800626c <HAL_DMA_Init+0x204>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d062      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a59      	ldr	r2, [pc, #356]	@ (8006270 <HAL_DMA_Init+0x208>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d05d      	beq.n	80061ca <HAL_DMA_Init+0x162>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a58      	ldr	r2, [pc, #352]	@ (8006274 <HAL_DMA_Init+0x20c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d058      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a56      	ldr	r2, [pc, #344]	@ (8006278 <HAL_DMA_Init+0x210>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d053      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a55      	ldr	r2, [pc, #340]	@ (800627c <HAL_DMA_Init+0x214>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d04e      	beq.n	80061ca <HAL_DMA_Init+0x162>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a53      	ldr	r2, [pc, #332]	@ (8006280 <HAL_DMA_Init+0x218>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d049      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a52      	ldr	r2, [pc, #328]	@ (8006284 <HAL_DMA_Init+0x21c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d044      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a50      	ldr	r2, [pc, #320]	@ (8006288 <HAL_DMA_Init+0x220>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d03f      	beq.n	80061ca <HAL_DMA_Init+0x162>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4f      	ldr	r2, [pc, #316]	@ (800628c <HAL_DMA_Init+0x224>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d03a      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a4d      	ldr	r2, [pc, #308]	@ (8006290 <HAL_DMA_Init+0x228>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d035      	beq.n	80061ca <HAL_DMA_Init+0x162>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a4c      	ldr	r2, [pc, #304]	@ (8006294 <HAL_DMA_Init+0x22c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d030      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a4a      	ldr	r2, [pc, #296]	@ (8006298 <HAL_DMA_Init+0x230>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d02b      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a49      	ldr	r2, [pc, #292]	@ (800629c <HAL_DMA_Init+0x234>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d026      	beq.n	80061ca <HAL_DMA_Init+0x162>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a47      	ldr	r2, [pc, #284]	@ (80062a0 <HAL_DMA_Init+0x238>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d021      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a46      	ldr	r2, [pc, #280]	@ (80062a4 <HAL_DMA_Init+0x23c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d01c      	beq.n	80061ca <HAL_DMA_Init+0x162>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a44      	ldr	r2, [pc, #272]	@ (80062a8 <HAL_DMA_Init+0x240>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d017      	beq.n	80061ca <HAL_DMA_Init+0x162>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a43      	ldr	r2, [pc, #268]	@ (80062ac <HAL_DMA_Init+0x244>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d012      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a41      	ldr	r2, [pc, #260]	@ (80062b0 <HAL_DMA_Init+0x248>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00d      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a40      	ldr	r2, [pc, #256]	@ (80062b4 <HAL_DMA_Init+0x24c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d008      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a3e      	ldr	r2, [pc, #248]	@ (80062b8 <HAL_DMA_Init+0x250>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <HAL_DMA_Init+0x162>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a3d      	ldr	r2, [pc, #244]	@ (80062bc <HAL_DMA_Init+0x254>)
 80061c8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0206 	orr.w	r2, r2, #6
 80061e8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80061ea:	e00f      	b.n	800620c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80061ec:	f7fd fb5c 	bl	80038a8 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d908      	bls.n	800620c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2210      	movs	r2, #16
 80061fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2203      	movs	r2, #3
 8006204:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e015      	b.n	8006238 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e8      	bne.n	80061ec <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb26 	bl	800686c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40020050 	.word	0x40020050
 8006244:	50020050 	.word	0x50020050
 8006248:	400200d0 	.word	0x400200d0
 800624c:	500200d0 	.word	0x500200d0
 8006250:	40020150 	.word	0x40020150
 8006254:	50020150 	.word	0x50020150
 8006258:	400201d0 	.word	0x400201d0
 800625c:	500201d0 	.word	0x500201d0
 8006260:	40020250 	.word	0x40020250
 8006264:	50020250 	.word	0x50020250
 8006268:	400202d0 	.word	0x400202d0
 800626c:	500202d0 	.word	0x500202d0
 8006270:	40020350 	.word	0x40020350
 8006274:	50020350 	.word	0x50020350
 8006278:	400203d0 	.word	0x400203d0
 800627c:	500203d0 	.word	0x500203d0
 8006280:	40020450 	.word	0x40020450
 8006284:	50020450 	.word	0x50020450
 8006288:	400204d0 	.word	0x400204d0
 800628c:	500204d0 	.word	0x500204d0
 8006290:	40020550 	.word	0x40020550
 8006294:	50020550 	.word	0x50020550
 8006298:	400205d0 	.word	0x400205d0
 800629c:	500205d0 	.word	0x500205d0
 80062a0:	40020650 	.word	0x40020650
 80062a4:	50020650 	.word	0x50020650
 80062a8:	400206d0 	.word	0x400206d0
 80062ac:	500206d0 	.word	0x500206d0
 80062b0:	40020750 	.word	0x40020750
 80062b4:	50020750 	.word	0x50020750
 80062b8:	400207d0 	.word	0x400207d0
 80062bc:	500207d0 	.word	0x500207d0

080062c0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e04f      	b.n	8006378 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_DMA_Start_IT+0x26>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e048      	b.n	8006378 <HAL_DMA_Start_IT+0xb8>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d136      	bne.n	8006368 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fa86 	bl	8006820 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006322:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800633a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695a      	ldr	r2, [r3, #20]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006352:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e007      	b.n	8006378 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2240      	movs	r2, #64	@ 0x40
 800636c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8006388:	f7fd fa8e 	bl	80038a8 <HAL_GetTick>
 800638c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e06b      	b.n	8006470 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d008      	beq.n	80063b6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e05c      	b.n	8006470 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0204 	orr.w	r2, r2, #4
 80063c4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2205      	movs	r2, #5
 80063ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80063ce:	e020      	b.n	8006412 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80063d0:	f7fd fa6a 	bl	80038a8 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d919      	bls.n	8006412 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e2:	f043 0210 	orr.w	r2, r3, #16
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2203      	movs	r2, #3
 80063ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006402:	2201      	movs	r2, #1
 8006404:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e02e      	b.n	8006470 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0d7      	beq.n	80063d0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0202 	orr.w	r2, r2, #2
 800642e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2204      	movs	r2, #4
 8006434:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006440:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800645a:	2201      	movs	r2, #1
 800645c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e019      	b.n	80064be <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d004      	beq.n	80064a0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e00e      	b.n	80064be <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2204      	movs	r2, #4
 80064a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80064b6:	f043 0304 	orr.w	r3, r3, #4
 80064ba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b086      	sub	sp, #24
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80064da:	f023 030f 	bic.w	r3, r3, #15
 80064de:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e8:	3b50      	subs	r3, #80	@ 0x50
 80064ea:	09db      	lsrs	r3, r3, #7
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2201      	movs	r2, #1
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4013      	ands	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 813b 	beq.w	8006780 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006514:	2b00      	cmp	r3, #0
 8006516:	d011      	beq.n	800653c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800652e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006534:	f043 0201 	orr.w	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006546:	2b00      	cmp	r3, #0
 8006548:	d011      	beq.n	800656e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006560:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d011      	beq.n	80065a0 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006592:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006598:	f043 0204 	orr.w	r2, r3, #4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80065c4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ca:	f043 0208 	orr.w	r2, r3, #8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d04c      	beq.n	80066b0 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d045      	beq.n	80066b0 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800662c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b04      	cmp	r3, #4
 8006638:	d12e      	bne.n	8006698 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006648:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0202 	orr.w	r2, r2, #2
 8006658:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006672:	2201      	movs	r2, #1
 8006674:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d07a      	beq.n	8006784 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
        }

        return;
 8006696:	e075      	b.n	8006784 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2205      	movs	r2, #5
 800669c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d039      	beq.n	8006732 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d032      	beq.n	8006732 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d012      	beq.n	80066fe <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d116      	bne.n	8006710 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d111      	bne.n	8006710 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f8:	2201      	movs	r2, #1
 80066fa:	731a      	strb	r2, [r3, #12]
 80066fc:	e008      	b.n	8006710 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006718:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006736:	2b00      	cmp	r3, #0
 8006738:	d025      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0202 	orr.w	r2, r2, #2
 8006748:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006762:	2201      	movs	r2, #1
 8006764:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
 800677e:	e002      	b.n	8006786 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006784:	bf00      	nop
    }
  }
}
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800679a:	b2db      	uxtb	r3, r3
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e02b      	b.n	8006814 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80067c4:	f023 030f 	bic.w	r3, r3, #15
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d2:	3b50      	subs	r3, #80	@ 0x50
 80067d4:	09db      	lsrs	r3, r3, #7
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	2201      	movs	r2, #1
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d012      	beq.n	8006812 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f003 0311 	and.w	r3, r3, #17
 80067f2:	2b11      	cmp	r3, #17
 80067f4:	d106      	bne.n	8006804 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	e006      	b.n	8006812 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	43db      	mvns	r3, r3
 800680c:	401a      	ands	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006834:	0c1b      	lsrs	r3, r3, #16
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	b291      	uxth	r1, r2
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	430b      	orrs	r3, r1
 8006842:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800684c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	430a      	orrs	r2, r1
 800688c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a53      	ldr	r2, [pc, #332]	@ (80069f8 <DMA_Init+0x18c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	f000 80a0 	beq.w	80069f2 <DMA_Init+0x186>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a51      	ldr	r2, [pc, #324]	@ (80069fc <DMA_Init+0x190>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f000 809a 	beq.w	80069f2 <DMA_Init+0x186>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a4f      	ldr	r2, [pc, #316]	@ (8006a00 <DMA_Init+0x194>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f000 8094 	beq.w	80069f2 <DMA_Init+0x186>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a4d      	ldr	r2, [pc, #308]	@ (8006a04 <DMA_Init+0x198>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	f000 808e 	beq.w	80069f2 <DMA_Init+0x186>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a4b      	ldr	r2, [pc, #300]	@ (8006a08 <DMA_Init+0x19c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	f000 8088 	beq.w	80069f2 <DMA_Init+0x186>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a49      	ldr	r2, [pc, #292]	@ (8006a0c <DMA_Init+0x1a0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	f000 8082 	beq.w	80069f2 <DMA_Init+0x186>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a47      	ldr	r2, [pc, #284]	@ (8006a10 <DMA_Init+0x1a4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d07c      	beq.n	80069f2 <DMA_Init+0x186>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a45      	ldr	r2, [pc, #276]	@ (8006a14 <DMA_Init+0x1a8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d077      	beq.n	80069f2 <DMA_Init+0x186>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a44      	ldr	r2, [pc, #272]	@ (8006a18 <DMA_Init+0x1ac>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d072      	beq.n	80069f2 <DMA_Init+0x186>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a42      	ldr	r2, [pc, #264]	@ (8006a1c <DMA_Init+0x1b0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d06d      	beq.n	80069f2 <DMA_Init+0x186>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a41      	ldr	r2, [pc, #260]	@ (8006a20 <DMA_Init+0x1b4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d068      	beq.n	80069f2 <DMA_Init+0x186>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a3f      	ldr	r2, [pc, #252]	@ (8006a24 <DMA_Init+0x1b8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d063      	beq.n	80069f2 <DMA_Init+0x186>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a3e      	ldr	r2, [pc, #248]	@ (8006a28 <DMA_Init+0x1bc>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d05e      	beq.n	80069f2 <DMA_Init+0x186>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a3c      	ldr	r2, [pc, #240]	@ (8006a2c <DMA_Init+0x1c0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d059      	beq.n	80069f2 <DMA_Init+0x186>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a3b      	ldr	r2, [pc, #236]	@ (8006a30 <DMA_Init+0x1c4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d054      	beq.n	80069f2 <DMA_Init+0x186>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a39      	ldr	r2, [pc, #228]	@ (8006a34 <DMA_Init+0x1c8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d04f      	beq.n	80069f2 <DMA_Init+0x186>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a38      	ldr	r2, [pc, #224]	@ (8006a38 <DMA_Init+0x1cc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d04a      	beq.n	80069f2 <DMA_Init+0x186>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a36      	ldr	r2, [pc, #216]	@ (8006a3c <DMA_Init+0x1d0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d045      	beq.n	80069f2 <DMA_Init+0x186>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a35      	ldr	r2, [pc, #212]	@ (8006a40 <DMA_Init+0x1d4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d040      	beq.n	80069f2 <DMA_Init+0x186>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a33      	ldr	r2, [pc, #204]	@ (8006a44 <DMA_Init+0x1d8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d03b      	beq.n	80069f2 <DMA_Init+0x186>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a32      	ldr	r2, [pc, #200]	@ (8006a48 <DMA_Init+0x1dc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d036      	beq.n	80069f2 <DMA_Init+0x186>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a30      	ldr	r2, [pc, #192]	@ (8006a4c <DMA_Init+0x1e0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d031      	beq.n	80069f2 <DMA_Init+0x186>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a2f      	ldr	r2, [pc, #188]	@ (8006a50 <DMA_Init+0x1e4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d02c      	beq.n	80069f2 <DMA_Init+0x186>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a2d      	ldr	r2, [pc, #180]	@ (8006a54 <DMA_Init+0x1e8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d027      	beq.n	80069f2 <DMA_Init+0x186>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a58 <DMA_Init+0x1ec>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d022      	beq.n	80069f2 <DMA_Init+0x186>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a5c <DMA_Init+0x1f0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01d      	beq.n	80069f2 <DMA_Init+0x186>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a29      	ldr	r2, [pc, #164]	@ (8006a60 <DMA_Init+0x1f4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d018      	beq.n	80069f2 <DMA_Init+0x186>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a27      	ldr	r2, [pc, #156]	@ (8006a64 <DMA_Init+0x1f8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <DMA_Init+0x186>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a26      	ldr	r2, [pc, #152]	@ (8006a68 <DMA_Init+0x1fc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00e      	beq.n	80069f2 <DMA_Init+0x186>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a24      	ldr	r2, [pc, #144]	@ (8006a6c <DMA_Init+0x200>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d009      	beq.n	80069f2 <DMA_Init+0x186>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a23      	ldr	r2, [pc, #140]	@ (8006a70 <DMA_Init+0x204>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d004      	beq.n	80069f2 <DMA_Init+0x186>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a21      	ldr	r2, [pc, #132]	@ (8006a74 <DMA_Init+0x208>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d142      	bne.n	8006a78 <DMA_Init+0x20c>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e041      	b.n	8006a7a <DMA_Init+0x20e>
 80069f6:	bf00      	nop
 80069f8:	40020050 	.word	0x40020050
 80069fc:	50020050 	.word	0x50020050
 8006a00:	400200d0 	.word	0x400200d0
 8006a04:	500200d0 	.word	0x500200d0
 8006a08:	40020150 	.word	0x40020150
 8006a0c:	50020150 	.word	0x50020150
 8006a10:	400201d0 	.word	0x400201d0
 8006a14:	500201d0 	.word	0x500201d0
 8006a18:	40020250 	.word	0x40020250
 8006a1c:	50020250 	.word	0x50020250
 8006a20:	400202d0 	.word	0x400202d0
 8006a24:	500202d0 	.word	0x500202d0
 8006a28:	40020350 	.word	0x40020350
 8006a2c:	50020350 	.word	0x50020350
 8006a30:	400203d0 	.word	0x400203d0
 8006a34:	500203d0 	.word	0x500203d0
 8006a38:	40020450 	.word	0x40020450
 8006a3c:	50020450 	.word	0x50020450
 8006a40:	400204d0 	.word	0x400204d0
 8006a44:	500204d0 	.word	0x500204d0
 8006a48:	40020550 	.word	0x40020550
 8006a4c:	50020550 	.word	0x50020550
 8006a50:	400205d0 	.word	0x400205d0
 8006a54:	500205d0 	.word	0x500205d0
 8006a58:	40020650 	.word	0x40020650
 8006a5c:	50020650 	.word	0x50020650
 8006a60:	400206d0 	.word	0x400206d0
 8006a64:	500206d0 	.word	0x500206d0
 8006a68:	40020750 	.word	0x40020750
 8006a6c:	50020750 	.word	0x50020750
 8006a70:	400207d0 	.word	0x400207d0
 8006a74:	500207d0 	.word	0x500207d0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d012      	beq.n	8006aa4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a86:	3b01      	subs	r3, #1
 8006a88:	051b      	lsls	r3, r3, #20
 8006a8a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006a8e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	3b01      	subs	r3, #1
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006a9c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aaa:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad6:	f040 80b0 	bne.w	8006c3a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a82      	ldr	r2, [pc, #520]	@ (8006ce8 <DMA_Init+0x47c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	f000 80a0 	beq.w	8006c26 <DMA_Init+0x3ba>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a80      	ldr	r2, [pc, #512]	@ (8006cec <DMA_Init+0x480>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	f000 809a 	beq.w	8006c26 <DMA_Init+0x3ba>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a7e      	ldr	r2, [pc, #504]	@ (8006cf0 <DMA_Init+0x484>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	f000 8094 	beq.w	8006c26 <DMA_Init+0x3ba>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7c      	ldr	r2, [pc, #496]	@ (8006cf4 <DMA_Init+0x488>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	f000 808e 	beq.w	8006c26 <DMA_Init+0x3ba>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a7a      	ldr	r2, [pc, #488]	@ (8006cf8 <DMA_Init+0x48c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	f000 8088 	beq.w	8006c26 <DMA_Init+0x3ba>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a78      	ldr	r2, [pc, #480]	@ (8006cfc <DMA_Init+0x490>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	f000 8082 	beq.w	8006c26 <DMA_Init+0x3ba>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a76      	ldr	r2, [pc, #472]	@ (8006d00 <DMA_Init+0x494>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d07c      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a74      	ldr	r2, [pc, #464]	@ (8006d04 <DMA_Init+0x498>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d077      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a73      	ldr	r2, [pc, #460]	@ (8006d08 <DMA_Init+0x49c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d072      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a71      	ldr	r2, [pc, #452]	@ (8006d0c <DMA_Init+0x4a0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d06d      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a70      	ldr	r2, [pc, #448]	@ (8006d10 <DMA_Init+0x4a4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d068      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a6e      	ldr	r2, [pc, #440]	@ (8006d14 <DMA_Init+0x4a8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d063      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a6d      	ldr	r2, [pc, #436]	@ (8006d18 <DMA_Init+0x4ac>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d05e      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8006d1c <DMA_Init+0x4b0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d059      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a6a      	ldr	r2, [pc, #424]	@ (8006d20 <DMA_Init+0x4b4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d054      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a68      	ldr	r2, [pc, #416]	@ (8006d24 <DMA_Init+0x4b8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04f      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a67      	ldr	r2, [pc, #412]	@ (8006d28 <DMA_Init+0x4bc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d04a      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a65      	ldr	r2, [pc, #404]	@ (8006d2c <DMA_Init+0x4c0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d045      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a64      	ldr	r2, [pc, #400]	@ (8006d30 <DMA_Init+0x4c4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d040      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a62      	ldr	r2, [pc, #392]	@ (8006d34 <DMA_Init+0x4c8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d03b      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a61      	ldr	r2, [pc, #388]	@ (8006d38 <DMA_Init+0x4cc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d036      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8006d3c <DMA_Init+0x4d0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d031      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8006d40 <DMA_Init+0x4d4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d02c      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8006d44 <DMA_Init+0x4d8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d027      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a5b      	ldr	r2, [pc, #364]	@ (8006d48 <DMA_Init+0x4dc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a59      	ldr	r2, [pc, #356]	@ (8006d4c <DMA_Init+0x4e0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01d      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a58      	ldr	r2, [pc, #352]	@ (8006d50 <DMA_Init+0x4e4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a56      	ldr	r2, [pc, #344]	@ (8006d54 <DMA_Init+0x4e8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a55      	ldr	r2, [pc, #340]	@ (8006d58 <DMA_Init+0x4ec>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a53      	ldr	r2, [pc, #332]	@ (8006d5c <DMA_Init+0x4f0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a52      	ldr	r2, [pc, #328]	@ (8006d60 <DMA_Init+0x4f4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <DMA_Init+0x3ba>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a50      	ldr	r2, [pc, #320]	@ (8006d64 <DMA_Init+0x4f8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d101      	bne.n	8006c2a <DMA_Init+0x3be>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <DMA_Init+0x3c0>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	e008      	b.n	8006c4c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c42:	d103      	bne.n	8006c4c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c4a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c52:	4b45      	ldr	r3, [pc, #276]	@ (8006d68 <DMA_Init+0x4fc>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2200      	movs	r2, #0
 8006c66:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a36      	ldr	r2, [pc, #216]	@ (8006d48 <DMA_Init+0x4dc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <DMA_Init+0x44c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a35      	ldr	r2, [pc, #212]	@ (8006d4c <DMA_Init+0x4e0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01d      	beq.n	8006cb8 <DMA_Init+0x44c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a33      	ldr	r2, [pc, #204]	@ (8006d50 <DMA_Init+0x4e4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <DMA_Init+0x44c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a32      	ldr	r2, [pc, #200]	@ (8006d54 <DMA_Init+0x4e8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <DMA_Init+0x44c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a30      	ldr	r2, [pc, #192]	@ (8006d58 <DMA_Init+0x4ec>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <DMA_Init+0x44c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8006d5c <DMA_Init+0x4f0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <DMA_Init+0x44c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8006d60 <DMA_Init+0x4f4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <DMA_Init+0x44c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d64 <DMA_Init+0x4f8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d101      	bne.n	8006cbc <DMA_Init+0x450>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <DMA_Init+0x452>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006cda:	bf00      	nop
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40020050 	.word	0x40020050
 8006cec:	50020050 	.word	0x50020050
 8006cf0:	400200d0 	.word	0x400200d0
 8006cf4:	500200d0 	.word	0x500200d0
 8006cf8:	40020150 	.word	0x40020150
 8006cfc:	50020150 	.word	0x50020150
 8006d00:	400201d0 	.word	0x400201d0
 8006d04:	500201d0 	.word	0x500201d0
 8006d08:	40020250 	.word	0x40020250
 8006d0c:	50020250 	.word	0x50020250
 8006d10:	400202d0 	.word	0x400202d0
 8006d14:	500202d0 	.word	0x500202d0
 8006d18:	40020350 	.word	0x40020350
 8006d1c:	50020350 	.word	0x50020350
 8006d20:	400203d0 	.word	0x400203d0
 8006d24:	500203d0 	.word	0x500203d0
 8006d28:	40020450 	.word	0x40020450
 8006d2c:	50020450 	.word	0x50020450
 8006d30:	400204d0 	.word	0x400204d0
 8006d34:	500204d0 	.word	0x500204d0
 8006d38:	40020550 	.word	0x40020550
 8006d3c:	50020550 	.word	0x50020550
 8006d40:	400205d0 	.word	0x400205d0
 8006d44:	500205d0 	.word	0x500205d0
 8006d48:	40020650 	.word	0x40020650
 8006d4c:	50020650 	.word	0x50020650
 8006d50:	400206d0 	.word	0x400206d0
 8006d54:	500206d0 	.word	0x500206d0
 8006d58:	40020750 	.word	0x40020750
 8006d5c:	50020750 	.word	0x50020750
 8006d60:	400207d0 	.word	0x400207d0
 8006d64:	500207d0 	.word	0x500207d0
 8006d68:	3c803180 	.word	0x3c803180

08006d6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e053      	b.n	8006e26 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fb fd64 	bl	8002860 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6851      	ldr	r1, [r2, #4]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	69d2      	ldr	r2, [r2, #28]
 8006db6:	4311      	orrs	r1, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6812      	ldr	r2, [r2, #0]
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc6:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6891      	ldr	r1, [r2, #8]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6992      	ldr	r2, [r2, #24]
 8006dd6:	4311      	orrs	r1, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6812      	ldr	r2, [r2, #0]
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	0c1b      	lsrs	r3, r3, #16
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68d1      	ldr	r1, [r2, #12]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	051a      	lsls	r2, r3, #20
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	055b      	lsls	r3, r3, #21
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_DMA2D_ConfigLayer+0x24>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e092      	b.n	8006f7a <HAL_DMA2D_ConfigLayer+0x14a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	4613      	mov	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	3328      	adds	r3, #40	@ 0x28
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e88:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006e94:	4b3c      	ldr	r3, [pc, #240]	@ (8006f88 <HAL_DMA2D_ConfigLayer+0x158>)
 8006e96:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b0a      	cmp	r3, #10
 8006e9e:	d003      	beq.n	8006ea8 <HAL_DMA2D_ConfigLayer+0x78>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b09      	cmp	r3, #9
 8006ea6:	d107      	bne.n	8006eb8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	e005      	b.n	8006ec4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	061b      	lsls	r3, r3, #24
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d120      	bne.n	8006f0c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	ea02 0103 	and.w	r1, r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b0a      	cmp	r3, #10
 8006ef2:	d003      	beq.n	8006efc <HAL_DMA2D_ConfigLayer+0xcc>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b09      	cmp	r3, #9
 8006efa:	d135      	bne.n	8006f68 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006f08:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f0a:	e02d      	b.n	8006f68 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b0b      	cmp	r3, #11
 8006f12:	d109      	bne.n	8006f28 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	049b      	lsls	r3, r3, #18
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006f26:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69da      	ldr	r2, [r3, #28]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	ea02 0103 	and.w	r1, r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b0a      	cmp	r3, #10
 8006f50:	d003      	beq.n	8006f5a <HAL_DMA2D_ConfigLayer+0x12a>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b09      	cmp	r3, #9
 8006f58:	d106      	bne.n	8006f68 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006f66:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	ff33000f 	.word	0xff33000f

08006f8c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006f94:	f7fc fc88 	bl	80038a8 <HAL_GetTick>
 8006f98:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0db      	b.n	800715c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8007164 <HAL_DMAEx_List_Init+0x1d8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f000 809f 	beq.w	80070ee <HAL_DMAEx_List_Init+0x162>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a6c      	ldr	r2, [pc, #432]	@ (8007168 <HAL_DMAEx_List_Init+0x1dc>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	f000 8099 	beq.w	80070ee <HAL_DMAEx_List_Init+0x162>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800716c <HAL_DMAEx_List_Init+0x1e0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	f000 8093 	beq.w	80070ee <HAL_DMAEx_List_Init+0x162>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a68      	ldr	r2, [pc, #416]	@ (8007170 <HAL_DMAEx_List_Init+0x1e4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	f000 808d 	beq.w	80070ee <HAL_DMAEx_List_Init+0x162>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a66      	ldr	r2, [pc, #408]	@ (8007174 <HAL_DMAEx_List_Init+0x1e8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	f000 8087 	beq.w	80070ee <HAL_DMAEx_List_Init+0x162>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a64      	ldr	r2, [pc, #400]	@ (8007178 <HAL_DMAEx_List_Init+0x1ec>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	f000 8081 	beq.w	80070ee <HAL_DMAEx_List_Init+0x162>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a62      	ldr	r2, [pc, #392]	@ (800717c <HAL_DMAEx_List_Init+0x1f0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d07b      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a61      	ldr	r2, [pc, #388]	@ (8007180 <HAL_DMAEx_List_Init+0x1f4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d076      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a5f      	ldr	r2, [pc, #380]	@ (8007184 <HAL_DMAEx_List_Init+0x1f8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d071      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a5e      	ldr	r2, [pc, #376]	@ (8007188 <HAL_DMAEx_List_Init+0x1fc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d06c      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a5c      	ldr	r2, [pc, #368]	@ (800718c <HAL_DMAEx_List_Init+0x200>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d067      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a5b      	ldr	r2, [pc, #364]	@ (8007190 <HAL_DMAEx_List_Init+0x204>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d062      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a59      	ldr	r2, [pc, #356]	@ (8007194 <HAL_DMAEx_List_Init+0x208>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d05d      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a58      	ldr	r2, [pc, #352]	@ (8007198 <HAL_DMAEx_List_Init+0x20c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d058      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a56      	ldr	r2, [pc, #344]	@ (800719c <HAL_DMAEx_List_Init+0x210>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d053      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a55      	ldr	r2, [pc, #340]	@ (80071a0 <HAL_DMAEx_List_Init+0x214>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d04e      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a53      	ldr	r2, [pc, #332]	@ (80071a4 <HAL_DMAEx_List_Init+0x218>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d049      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a52      	ldr	r2, [pc, #328]	@ (80071a8 <HAL_DMAEx_List_Init+0x21c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d044      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a50      	ldr	r2, [pc, #320]	@ (80071ac <HAL_DMAEx_List_Init+0x220>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d03f      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a4f      	ldr	r2, [pc, #316]	@ (80071b0 <HAL_DMAEx_List_Init+0x224>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d03a      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a4d      	ldr	r2, [pc, #308]	@ (80071b4 <HAL_DMAEx_List_Init+0x228>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d035      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a4c      	ldr	r2, [pc, #304]	@ (80071b8 <HAL_DMAEx_List_Init+0x22c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d030      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a4a      	ldr	r2, [pc, #296]	@ (80071bc <HAL_DMAEx_List_Init+0x230>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d02b      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a49      	ldr	r2, [pc, #292]	@ (80071c0 <HAL_DMAEx_List_Init+0x234>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d026      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a47      	ldr	r2, [pc, #284]	@ (80071c4 <HAL_DMAEx_List_Init+0x238>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d021      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a46      	ldr	r2, [pc, #280]	@ (80071c8 <HAL_DMAEx_List_Init+0x23c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01c      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a44      	ldr	r2, [pc, #272]	@ (80071cc <HAL_DMAEx_List_Init+0x240>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d017      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a43      	ldr	r2, [pc, #268]	@ (80071d0 <HAL_DMAEx_List_Init+0x244>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d012      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a41      	ldr	r2, [pc, #260]	@ (80071d4 <HAL_DMAEx_List_Init+0x248>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00d      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a40      	ldr	r2, [pc, #256]	@ (80071d8 <HAL_DMAEx_List_Init+0x24c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d008      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a3e      	ldr	r2, [pc, #248]	@ (80071dc <HAL_DMAEx_List_Init+0x250>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <HAL_DMAEx_List_Init+0x162>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3d      	ldr	r2, [pc, #244]	@ (80071e0 <HAL_DMAEx_List_Init+0x254>)
 80070ec:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0206 	orr.w	r2, r2, #6
 800710c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800710e:	e00f      	b.n	8007130 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007110:	f7fc fbca 	bl	80038a8 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b05      	cmp	r3, #5
 800711c:	d908      	bls.n	8007130 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2210      	movs	r2, #16
 8007122:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2203      	movs	r2, #3
 8007128:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e015      	b.n	800715c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e8      	bne.n	8007110 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fb16 	bl	8007770 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40020050 	.word	0x40020050
 8007168:	50020050 	.word	0x50020050
 800716c:	400200d0 	.word	0x400200d0
 8007170:	500200d0 	.word	0x500200d0
 8007174:	40020150 	.word	0x40020150
 8007178:	50020150 	.word	0x50020150
 800717c:	400201d0 	.word	0x400201d0
 8007180:	500201d0 	.word	0x500201d0
 8007184:	40020250 	.word	0x40020250
 8007188:	50020250 	.word	0x50020250
 800718c:	400202d0 	.word	0x400202d0
 8007190:	500202d0 	.word	0x500202d0
 8007194:	40020350 	.word	0x40020350
 8007198:	50020350 	.word	0x50020350
 800719c:	400203d0 	.word	0x400203d0
 80071a0:	500203d0 	.word	0x500203d0
 80071a4:	40020450 	.word	0x40020450
 80071a8:	50020450 	.word	0x50020450
 80071ac:	400204d0 	.word	0x400204d0
 80071b0:	500204d0 	.word	0x500204d0
 80071b4:	40020550 	.word	0x40020550
 80071b8:	50020550 	.word	0x50020550
 80071bc:	400205d0 	.word	0x400205d0
 80071c0:	500205d0 	.word	0x500205d0
 80071c4:	40020650 	.word	0x40020650
 80071c8:	50020650 	.word	0x50020650
 80071cc:	400206d0 	.word	0x400206d0
 80071d0:	500206d0 	.word	0x500206d0
 80071d4:	40020750 	.word	0x40020750
 80071d8:	50020750 	.word	0x50020750
 80071dc:	400207d0 	.word	0x400207d0
 80071e0:	500207d0 	.word	0x500207d0

080071e4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_DMAEx_List_Start_IT+0x16>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e082      	b.n	8007304 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007204:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007210:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d005      	beq.n	8007224 <HAL_DMAEx_List_Start_IT+0x40>
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d16a      	bne.n	80072f4 <HAL_DMAEx_List_Start_IT+0x110>
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d067      	beq.n	80072f4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b01      	cmp	r3, #1
 800722e:	d157      	bne.n	80072e0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_DMAEx_List_Start_IT+0x5a>
 800723a:	2302      	movs	r3, #2
 800723c:	e062      	b.n	8007304 <HAL_DMAEx_List_Start_IT+0x120>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007252:	2202      	movs	r2, #2
 8007254:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007260:	2200      	movs	r2, #0
 8007262:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8007272:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800728a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072a2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f107 010c 	add.w	r1, r7, #12
 80072ae:	2200      	movs	r2, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fe7d 	bl	8007fb0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	0c0b      	lsrs	r3, r1, #16
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80072d4:	4013      	ands	r3, r2
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	430b      	orrs	r3, r1
 80072de:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e007      	b.n	8007304 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2240      	movs	r2, #64	@ 0x40
 80072f8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <HAL_DMAEx_List_BuildNode+0x16>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e004      	b.n	8007330 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fb79 	bl	8007a20 <DMA_List_BuildNode>

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e004      	b.n	800735c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fcb5 	bl	8007cc4 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08c      	sub	sp, #48	@ 0x30
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_DMAEx_List_InsertNode+0x18>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e0b6      	b.n	80074ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d104      	bne.n	8007392 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2204      	movs	r2, #4
 800738c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e0ad      	b.n	80074ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fd9c 	bl	8007ed8 <DMA_List_CheckNodesBaseAddresses>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2205      	movs	r2, #5
 80073aa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e09e      	b.n	80074ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fdbd 	bl	8007f38 <DMA_List_CheckNodesTypes>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d004      	beq.n	80073ce <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2204      	movs	r2, #4
 80073c8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e08f      	b.n	80074ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2202      	movs	r2, #2
 80073d2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80073da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80073de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fde3 	bl	8007fb0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d11a      	bne.n	8007428 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	e06c      	b.n	80074e0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007412:	4013      	ands	r3, r2
 8007414:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007418:	4319      	orrs	r1, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2202      	movs	r2, #2
 8007424:	609a      	str	r2, [r3, #8]
 8007426:	e05b      	b.n	80074e0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10f      	bne.n	800744e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007438:	4013      	ands	r3, r2
 800743a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800743c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800743e:	4319      	orrs	r1, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e043      	b.n	80074d6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8007452:	f107 0314 	add.w	r3, r7, #20
 8007456:	461a      	mov	r2, r3
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fdd8 	bl	8008010 <DMA_List_FindNode>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d132      	bne.n	80074cc <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	429a      	cmp	r2, r3
 800746e:	d11a      	bne.n	80074a6 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	461a      	mov	r2, r3
 800747e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007482:	4013      	ands	r3, r2
 8007484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007488:	4319      	orrs	r1, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007496:	4013      	ands	r3, r2
 8007498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800749a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800749c:	4319      	orrs	r1, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074a4:	e017      	b.n	80074d6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80074a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80074bc:	4013      	ands	r3, r2
 80074be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074c2:	4319      	orrs	r1, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074ca:	e004      	b.n	80074d6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2206      	movs	r2, #6
 80074d0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e00b      	b.n	80074ee <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3730      	adds	r7, #48	@ 0x30
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b08a      	sub	sp, #40	@ 0x28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e052      	b.n	80075ae <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e049      	b.n	80075ae <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00c      	beq.n	800753c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d101      	bne.n	8007532 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e03d      	b.n	80075ae <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2204      	movs	r2, #4
 8007536:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e038      	b.n	80075ae <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d104      	bne.n	800754e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2204      	movs	r2, #4
 8007548:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e02f      	b.n	80075ae <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2202      	movs	r2, #2
 8007552:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f107 0220 	add.w	r2, r7, #32
 8007562:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fd22 	bl	8007fb0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	461a      	mov	r2, r3
 8007576:	2100      	movs	r1, #0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fd49 	bl	8008010 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007588:	4013      	ands	r3, r2
 800758a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	4610      	mov	r0, r2
 8007590:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007592:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007594:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3728      	adds	r7, #40	@ 0x28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_DMAEx_List_LinkQ+0x16>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e072      	b.n	80076b8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80075d8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d002      	beq.n	80075ec <HAL_DMAEx_List_LinkQ+0x34>
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	2b05      	cmp	r3, #5
 80075ea:	d108      	bne.n	80075fe <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2240      	movs	r2, #64	@ 0x40
 80075f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e05c      	b.n	80076b8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	7b1b      	ldrb	r3, [r3, #12]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d104      	bne.n	8007612 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2201      	movs	r2, #1
 800760c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e052      	b.n	80076b8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2b      	ldr	r2, [pc, #172]	@ (80076c4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d022      	beq.n	8007662 <HAL_DMAEx_List_LinkQ+0xaa>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a29      	ldr	r2, [pc, #164]	@ (80076c8 <HAL_DMAEx_List_LinkQ+0x110>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01d      	beq.n	8007662 <HAL_DMAEx_List_LinkQ+0xaa>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a28      	ldr	r2, [pc, #160]	@ (80076cc <HAL_DMAEx_List_LinkQ+0x114>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d018      	beq.n	8007662 <HAL_DMAEx_List_LinkQ+0xaa>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a26      	ldr	r2, [pc, #152]	@ (80076d0 <HAL_DMAEx_List_LinkQ+0x118>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_DMAEx_List_LinkQ+0xaa>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a25      	ldr	r2, [pc, #148]	@ (80076d4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_DMAEx_List_LinkQ+0xaa>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a23      	ldr	r2, [pc, #140]	@ (80076d8 <HAL_DMAEx_List_LinkQ+0x120>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_DMAEx_List_LinkQ+0xaa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a22      	ldr	r2, [pc, #136]	@ (80076dc <HAL_DMAEx_List_LinkQ+0x124>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_DMAEx_List_LinkQ+0xaa>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a20      	ldr	r2, [pc, #128]	@ (80076e0 <HAL_DMAEx_List_LinkQ+0x128>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d101      	bne.n	8007666 <HAL_DMAEx_List_LinkQ+0xae>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <HAL_DMAEx_List_LinkQ+0xb0>
 8007666:	2300      	movs	r3, #0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10b      	bne.n	8007684 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2203      	movs	r2, #3
 800767e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e019      	b.n	80076b8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007688:	2b81      	cmp	r3, #129	@ 0x81
 800768a:	d108      	bne.n	800769e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10d      	bne.n	80076b0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2204      	movs	r2, #4
 8007698:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e00c      	b.n	80076b8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d004      	beq.n	80076b0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2204      	movs	r2, #4
 80076aa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e003      	b.n	80076b8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40020650 	.word	0x40020650
 80076c8:	50020650 	.word	0x50020650
 80076cc:	400206d0 	.word	0x400206d0
 80076d0:	500206d0 	.word	0x500206d0
 80076d4:	40020750 	.word	0x40020750
 80076d8:	50020750 	.word	0x50020750
 80076dc:	400207d0 	.word	0x400207d0
 80076e0:	500207d0 	.word	0x500207d0

080076e4 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_DMAEx_ConfigTrigger+0x16>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e023      	b.n	8007746 <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b01      	cmp	r3, #1
 8007708:	d115      	bne.n	8007736 <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007710:	f023 735f 	bic.w	r3, r3, #58458112	@ 0x37c0000
 8007714:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	6851      	ldr	r1, [r2, #4]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	4311      	orrs	r1, r2
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	6892      	ldr	r2, [r2, #8]
 8007726:	0412      	lsls	r2, r2, #16
 8007728:	4311      	orrs	r1, r2
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	430b      	orrs	r3, r1
 8007730:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	e007      	b.n	8007746 <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2240      	movs	r2, #64	@ 0x40
 800773a:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	0c1b      	lsrs	r3, r3, #16
 8007762:	b2db      	uxtb	r3, r3
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a85      	ldr	r2, [pc, #532]	@ (80079a0 <DMA_List_Init+0x230>)
 800778a:	4293      	cmp	r3, r2
 800778c:	f000 80a0 	beq.w	80078d0 <DMA_List_Init+0x160>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a83      	ldr	r2, [pc, #524]	@ (80079a4 <DMA_List_Init+0x234>)
 8007796:	4293      	cmp	r3, r2
 8007798:	f000 809a 	beq.w	80078d0 <DMA_List_Init+0x160>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a81      	ldr	r2, [pc, #516]	@ (80079a8 <DMA_List_Init+0x238>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	f000 8094 	beq.w	80078d0 <DMA_List_Init+0x160>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a7f      	ldr	r2, [pc, #508]	@ (80079ac <DMA_List_Init+0x23c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	f000 808e 	beq.w	80078d0 <DMA_List_Init+0x160>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a7d      	ldr	r2, [pc, #500]	@ (80079b0 <DMA_List_Init+0x240>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	f000 8088 	beq.w	80078d0 <DMA_List_Init+0x160>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a7b      	ldr	r2, [pc, #492]	@ (80079b4 <DMA_List_Init+0x244>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	f000 8082 	beq.w	80078d0 <DMA_List_Init+0x160>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a79      	ldr	r2, [pc, #484]	@ (80079b8 <DMA_List_Init+0x248>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d07c      	beq.n	80078d0 <DMA_List_Init+0x160>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a78      	ldr	r2, [pc, #480]	@ (80079bc <DMA_List_Init+0x24c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d077      	beq.n	80078d0 <DMA_List_Init+0x160>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a76      	ldr	r2, [pc, #472]	@ (80079c0 <DMA_List_Init+0x250>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d072      	beq.n	80078d0 <DMA_List_Init+0x160>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a75      	ldr	r2, [pc, #468]	@ (80079c4 <DMA_List_Init+0x254>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d06d      	beq.n	80078d0 <DMA_List_Init+0x160>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a73      	ldr	r2, [pc, #460]	@ (80079c8 <DMA_List_Init+0x258>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d068      	beq.n	80078d0 <DMA_List_Init+0x160>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a72      	ldr	r2, [pc, #456]	@ (80079cc <DMA_List_Init+0x25c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d063      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a70      	ldr	r2, [pc, #448]	@ (80079d0 <DMA_List_Init+0x260>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d05e      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a6f      	ldr	r2, [pc, #444]	@ (80079d4 <DMA_List_Init+0x264>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d059      	beq.n	80078d0 <DMA_List_Init+0x160>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a6d      	ldr	r2, [pc, #436]	@ (80079d8 <DMA_List_Init+0x268>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d054      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a6c      	ldr	r2, [pc, #432]	@ (80079dc <DMA_List_Init+0x26c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d04f      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a6a      	ldr	r2, [pc, #424]	@ (80079e0 <DMA_List_Init+0x270>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d04a      	beq.n	80078d0 <DMA_List_Init+0x160>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a69      	ldr	r2, [pc, #420]	@ (80079e4 <DMA_List_Init+0x274>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d045      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a67      	ldr	r2, [pc, #412]	@ (80079e8 <DMA_List_Init+0x278>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d040      	beq.n	80078d0 <DMA_List_Init+0x160>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a66      	ldr	r2, [pc, #408]	@ (80079ec <DMA_List_Init+0x27c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d03b      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a64      	ldr	r2, [pc, #400]	@ (80079f0 <DMA_List_Init+0x280>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d036      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a63      	ldr	r2, [pc, #396]	@ (80079f4 <DMA_List_Init+0x284>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d031      	beq.n	80078d0 <DMA_List_Init+0x160>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a61      	ldr	r2, [pc, #388]	@ (80079f8 <DMA_List_Init+0x288>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d02c      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a60      	ldr	r2, [pc, #384]	@ (80079fc <DMA_List_Init+0x28c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d027      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a5e      	ldr	r2, [pc, #376]	@ (8007a00 <DMA_List_Init+0x290>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d022      	beq.n	80078d0 <DMA_List_Init+0x160>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a5d      	ldr	r2, [pc, #372]	@ (8007a04 <DMA_List_Init+0x294>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d01d      	beq.n	80078d0 <DMA_List_Init+0x160>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a5b      	ldr	r2, [pc, #364]	@ (8007a08 <DMA_List_Init+0x298>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d018      	beq.n	80078d0 <DMA_List_Init+0x160>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a5a      	ldr	r2, [pc, #360]	@ (8007a0c <DMA_List_Init+0x29c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <DMA_List_Init+0x160>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a58      	ldr	r2, [pc, #352]	@ (8007a10 <DMA_List_Init+0x2a0>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00e      	beq.n	80078d0 <DMA_List_Init+0x160>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a57      	ldr	r2, [pc, #348]	@ (8007a14 <DMA_List_Init+0x2a4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d009      	beq.n	80078d0 <DMA_List_Init+0x160>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a55      	ldr	r2, [pc, #340]	@ (8007a18 <DMA_List_Init+0x2a8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <DMA_List_Init+0x160>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a54      	ldr	r2, [pc, #336]	@ (8007a1c <DMA_List_Init+0x2ac>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d101      	bne.n	80078d4 <DMA_List_Init+0x164>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <DMA_List_Init+0x166>
 80078d4:	2300      	movs	r3, #0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2200      	movs	r2, #0
 80078fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007908:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2200      	movs	r2, #0
 8007910:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a36      	ldr	r2, [pc, #216]	@ (8007a00 <DMA_List_Init+0x290>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d022      	beq.n	8007972 <DMA_List_Init+0x202>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a34      	ldr	r2, [pc, #208]	@ (8007a04 <DMA_List_Init+0x294>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01d      	beq.n	8007972 <DMA_List_Init+0x202>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a33      	ldr	r2, [pc, #204]	@ (8007a08 <DMA_List_Init+0x298>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d018      	beq.n	8007972 <DMA_List_Init+0x202>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a31      	ldr	r2, [pc, #196]	@ (8007a0c <DMA_List_Init+0x29c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <DMA_List_Init+0x202>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a30      	ldr	r2, [pc, #192]	@ (8007a10 <DMA_List_Init+0x2a0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00e      	beq.n	8007972 <DMA_List_Init+0x202>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a2e      	ldr	r2, [pc, #184]	@ (8007a14 <DMA_List_Init+0x2a4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d009      	beq.n	8007972 <DMA_List_Init+0x202>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a2d      	ldr	r2, [pc, #180]	@ (8007a18 <DMA_List_Init+0x2a8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d004      	beq.n	8007972 <DMA_List_Init+0x202>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a2b      	ldr	r2, [pc, #172]	@ (8007a1c <DMA_List_Init+0x2ac>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d101      	bne.n	8007976 <DMA_List_Init+0x206>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <DMA_List_Init+0x208>
 8007976:	2300      	movs	r3, #0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2200      	movs	r2, #0
 8007982:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2200      	movs	r2, #0
 800798a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2200      	movs	r2, #0
 8007992:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007994:	bf00      	nop
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	40020050 	.word	0x40020050
 80079a4:	50020050 	.word	0x50020050
 80079a8:	400200d0 	.word	0x400200d0
 80079ac:	500200d0 	.word	0x500200d0
 80079b0:	40020150 	.word	0x40020150
 80079b4:	50020150 	.word	0x50020150
 80079b8:	400201d0 	.word	0x400201d0
 80079bc:	500201d0 	.word	0x500201d0
 80079c0:	40020250 	.word	0x40020250
 80079c4:	50020250 	.word	0x50020250
 80079c8:	400202d0 	.word	0x400202d0
 80079cc:	500202d0 	.word	0x500202d0
 80079d0:	40020350 	.word	0x40020350
 80079d4:	50020350 	.word	0x50020350
 80079d8:	400203d0 	.word	0x400203d0
 80079dc:	500203d0 	.word	0x500203d0
 80079e0:	40020450 	.word	0x40020450
 80079e4:	50020450 	.word	0x50020450
 80079e8:	400204d0 	.word	0x400204d0
 80079ec:	500204d0 	.word	0x500204d0
 80079f0:	40020550 	.word	0x40020550
 80079f4:	50020550 	.word	0x50020550
 80079f8:	400205d0 	.word	0x400205d0
 80079fc:	500205d0 	.word	0x500205d0
 8007a00:	40020650 	.word	0x40020650
 8007a04:	50020650 	.word	0x50020650
 8007a08:	400206d0 	.word	0x400206d0
 8007a0c:	500206d0 	.word	0x500206d0
 8007a10:	40020750 	.word	0x40020750
 8007a14:	50020750 	.word	0x50020750
 8007a18:	400207d0 	.word	0x400207d0
 8007a1c:	500207d0 	.word	0x500207d0

08007a20 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007a32:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007a38:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007a3e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007a44:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d017      	beq.n	8007a86 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	051b      	lsls	r3, r3, #20
 8007a6c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007a70:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	3b01      	subs	r3, #1
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007a7e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007a80:	431a      	orrs	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6859      	ldr	r1, [r3, #4]
 8007a8e:	f240 237f 	movw	r3, #639	@ 0x27f
 8007a92:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007a94:	431a      	orrs	r2, r3
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa2:	d10c      	bne.n	8007abe <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d011      	beq.n	8007ad4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	605a      	str	r2, [r3, #4]
 8007abc:	e00a      	b.n	8007ad4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac6:	d105      	bne.n	8007ad4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00f      	beq.n	8007afc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007af4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007af6:	431a      	orrs	r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d04e      	beq.n	8007bb0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	0419      	lsls	r1, r3, #16
 8007b1e:	4b67      	ldr	r3, [pc, #412]	@ (8007cbc <DMA_List_BuildNode+0x29c>)
 8007b20:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007b22:	431a      	orrs	r2, r3
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da06      	bge.n	8007b3e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	e005      	b.n	8007b4a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da06      	bge.n	8007b60 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	609a      	str	r2, [r3, #8]
 8007b5e:	e005      	b.n	8007b6c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da06      	bge.n	8007b82 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	e005      	b.n	8007b8e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da06      	bge.n	8007ba4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	609a      	str	r2, [r3, #8]
 8007ba2:	e005      	b.n	8007bb0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d059      	beq.n	8007c80 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da09      	bge.n	8007be8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd8:	425b      	negs	r3, r3
 8007bda:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	615a      	str	r2, [r3, #20]
 8007be6:	e005      	b.n	8007bf4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bec:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da0d      	bge.n	8007c18 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c00:	425b      	negs	r3, r3
 8007c02:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	695a      	ldr	r2, [r3, #20]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	0419      	lsls	r1, r3, #16
 8007c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007cc0 <DMA_List_BuildNode+0x2a0>)
 8007c0e:	400b      	ands	r3, r1
 8007c10:	431a      	orrs	r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	615a      	str	r2, [r3, #20]
 8007c16:	e009      	b.n	8007c2c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c20:	0419      	lsls	r1, r3, #16
 8007c22:	4b27      	ldr	r3, [pc, #156]	@ (8007cc0 <DMA_List_BuildNode+0x2a0>)
 8007c24:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007c26:	431a      	orrs	r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	da08      	bge.n	8007c46 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c38:	425b      	negs	r3, r3
 8007c3a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	619a      	str	r2, [r3, #24]
 8007c44:	e004      	b.n	8007c50 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c4a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	da0b      	bge.n	8007c70 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5c:	425b      	negs	r3, r3
 8007c5e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	619a      	str	r2, [r3, #24]
 8007c6e:	e007      	b.n	8007c80 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c78:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d006      	beq.n	8007ca2 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007ca0:	e005      	b.n	8007cae <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	621a      	str	r2, [r3, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	07ff0000 	.word	0x07ff0000
 8007cc0:	1fff0000 	.word	0x1fff0000

08007cc4 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0208 	and.w	r2, r3, #8
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0203 	and.w	r2, r3, #3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007d0c:	091b      	lsrs	r3, r3, #4
 8007d0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d12:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007d1c:	0d1b      	lsrs	r3, r3, #20
 8007d1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d22:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4b66      	ldr	r3, [pc, #408]	@ (8007ed4 <DMA_List_GetNodeConfig+0x210>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d5e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d66:	60da      	str	r2, [r3, #12]
 8007d68:	e013      	b.n	8007d92 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d004      	beq.n	8007d8c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	e002      	b.n	8007d92 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8007dba:	0c1b      	lsrs	r3, r3, #16
 8007dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	0c1b      	lsrs	r3, r3, #16
 8007dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007df0:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007df6:	e002      	b.n	8007dfe <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	691a      	ldr	r2, [r3, #16]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d04a      	beq.n	8007eb0 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e24:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007e26:	89fa      	ldrh	r2, [r7, #14]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e38:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007e3a:	89fa      	ldrh	r2, [r7, #14]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e50:	425a      	negs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e66:	425a      	negs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007e72:	89fa      	ldrh	r2, [r7, #14]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	0c1b      	lsrs	r3, r3, #16
 8007e7e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007e80:	89fa      	ldrh	r2, [r7, #14]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d004      	beq.n	8007e9c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e96:	425a      	negs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	da11      	bge.n	8007ec8 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea8:	425a      	negs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007eae:	e00b      	b.n	8007ec8 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	0c002000 	.word	0x0c002000

08007ed8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e00a      	b.n	8007f1a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e004      	b.n	8007f1a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	041b      	lsls	r3, r3, #16
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d001      	beq.n	8007f2a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	e00e      	b.n	8007f76 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e006      	b.n	8007f76 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d001      	beq.n	8007f8c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e00b      	b.n	8007fa4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d001      	beq.n	8007fa2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e000      	b.n	8007fa4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00c      	beq.n	8007fe2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8008008 <DMA_List_GetCLLRNodeInfo+0x58>)
 8007fd2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00f      	beq.n	8007ffa <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2207      	movs	r2, #7
 8007fde:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007fe0:	e00b      	b.n	8007ffa <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4a08      	ldr	r2, [pc, #32]	@ (800800c <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007fec:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2205      	movs	r2, #5
 8007ff8:	601a      	str	r2, [r3, #0]
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	fe010000 	.word	0xfe010000
 800800c:	f8010000 	.word	0xf8010000

08008010 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8008010:	b480      	push	{r7}
 8008012:	b089      	sub	sp, #36	@ 0x24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d142      	bne.n	80080ba <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8008034:	e01d      	b.n	8008072 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d107      	bne.n	800804c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008046:	4013      	ands	r3, r2
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	e00f      	b.n	800806c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	0c1b      	lsrs	r3, r3, #16
 8008056:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	4413      	add	r3, r2
 800805c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008064:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008068:	4013      	ands	r3, r2
 800806a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	3301      	adds	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	429a      	cmp	r2, r3
 800807a:	d3dc      	bcc.n	8008036 <DMA_List_FindNode+0x26>
 800807c:	e029      	b.n	80080d2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d107      	bne.n	8008094 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800808e:	4013      	ands	r3, r2
 8008090:	61bb      	str	r3, [r7, #24]
 8008092:	e00f      	b.n	80080b4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	0c1b      	lsrs	r3, r3, #16
 800809e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	4413      	add	r3, r2
 80080a4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80080ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80080b0:	4013      	ands	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	3301      	adds	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d206      	bcs.n	80080d2 <DMA_List_FindNode+0xc2>
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80080ca:	4013      	ands	r3, r2
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d1d5      	bne.n	800807e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d008      	beq.n	80080ea <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80080de:	4013      	ands	r3, r2
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d001      	beq.n	80080ea <DMA_List_FindNode+0xda>
    {
      return 1U;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e02b      	b.n	8008142 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	0c1b      	lsrs	r3, r3, #16
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	461a      	mov	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00f      	beq.n	8008140 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	461a      	mov	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800812c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8008130:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	0c1b      	lsrs	r3, r3, #16
 8008138:	041b      	lsls	r3, r3, #16
 800813a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3724      	adds	r7, #36	@ 0x24
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008150:	b480      	push	{r7}
 8008152:	b089      	sub	sp, #36	@ 0x24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008162:	e1ba      	b.n	80084da <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	2101      	movs	r1, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	fa01 f303 	lsl.w	r3, r1, r3
 8008170:	4013      	ands	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 81aa 	beq.w	80084d4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a55      	ldr	r2, [pc, #340]	@ (80082d8 <HAL_GPIO_Init+0x188>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d15d      	bne.n	8008244 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800818e:	2201      	movs	r2, #1
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	43db      	mvns	r3, r3
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	4013      	ands	r3, r2
 800819c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f003 0201 	and.w	r2, r3, #1
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80081b8:	4a48      	ldr	r2, [pc, #288]	@ (80082dc <HAL_GPIO_Init+0x18c>)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081c0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80081c2:	4a46      	ldr	r2, [pc, #280]	@ (80082dc <HAL_GPIO_Init+0x18c>)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	4413      	add	r3, r2
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	08da      	lsrs	r2, r3, #3
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	3208      	adds	r2, #8
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	220f      	movs	r2, #15
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	43db      	mvns	r3, r3
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	4013      	ands	r3, r2
 80081f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	220b      	movs	r2, #11
 80081fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	4313      	orrs	r3, r2
 8008204:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	08da      	lsrs	r2, r3, #3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3208      	adds	r2, #8
 800820e:	69f9      	ldr	r1, [r7, #28]
 8008210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	2203      	movs	r2, #3
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	43db      	mvns	r3, r3
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	4013      	ands	r3, r2
 800822a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	2202      	movs	r2, #2
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	4313      	orrs	r3, r2
 800823a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e067      	b.n	8008314 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d003      	beq.n	8008254 <HAL_GPIO_Init+0x104>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b12      	cmp	r3, #18
 8008252:	d145      	bne.n	80082e0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	08da      	lsrs	r2, r3, #3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3208      	adds	r2, #8
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	220f      	movs	r2, #15
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	43db      	mvns	r3, r3
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	4013      	ands	r3, r2
 8008276:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	f003 020f 	and.w	r2, r3, #15
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	4313      	orrs	r3, r2
 8008290:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	08da      	lsrs	r2, r3, #3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3208      	adds	r2, #8
 800829a:	69f9      	ldr	r1, [r7, #28]
 800829c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	2203      	movs	r2, #3
 80082ac:	fa02 f303 	lsl.w	r3, r2, r3
 80082b0:	43db      	mvns	r3, r3
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	4013      	ands	r3, r2
 80082b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f003 0203 	and.w	r2, r3, #3
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e01e      	b.n	8008314 <HAL_GPIO_Init+0x1c4>
 80082d6:	bf00      	nop
 80082d8:	46020000 	.word	0x46020000
 80082dc:	08012898 	.word	0x08012898
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	2203      	movs	r2, #3
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	43db      	mvns	r3, r3
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	4013      	ands	r3, r2
 80082f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f003 0203 	and.w	r2, r3, #3
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	4313      	orrs	r3, r2
 800830c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d00b      	beq.n	8008334 <HAL_GPIO_Init+0x1e4>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d007      	beq.n	8008334 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008328:	2b11      	cmp	r3, #17
 800832a:	d003      	beq.n	8008334 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2b12      	cmp	r3, #18
 8008332:	d130      	bne.n	8008396 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	2203      	movs	r2, #3
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	43db      	mvns	r3, r3
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	4013      	ands	r3, r2
 800834a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	4313      	orrs	r3, r2
 800835c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800836a:	2201      	movs	r2, #1
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	fa02 f303 	lsl.w	r3, r2, r3
 8008372:	43db      	mvns	r3, r3
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	4013      	ands	r3, r2
 8008378:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	091b      	lsrs	r3, r3, #4
 8008380:	f003 0201 	and.w	r2, r3, #1
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	fa02 f303 	lsl.w	r3, r2, r3
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	4313      	orrs	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b03      	cmp	r3, #3
 800839c:	d017      	beq.n	80083ce <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	2203      	movs	r2, #3
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	43db      	mvns	r3, r3
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	4013      	ands	r3, r2
 80083b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	fa02 f303 	lsl.w	r3, r2, r3
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d07c      	beq.n	80084d4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80083da:	4a47      	ldr	r2, [pc, #284]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	089b      	lsrs	r3, r3, #2
 80083e0:	3318      	adds	r3, #24
 80083e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	220f      	movs	r2, #15
 80083f2:	fa02 f303 	lsl.w	r3, r2, r3
 80083f6:	43db      	mvns	r3, r3
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	4013      	ands	r3, r2
 80083fc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	0a9a      	lsrs	r2, r3, #10
 8008402:	4b3e      	ldr	r3, [pc, #248]	@ (80084fc <HAL_GPIO_Init+0x3ac>)
 8008404:	4013      	ands	r3, r2
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	f002 0203 	and.w	r2, r2, #3
 800840c:	00d2      	lsls	r2, r2, #3
 800840e:	4093      	lsls	r3, r2
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	4313      	orrs	r3, r2
 8008414:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8008416:	4938      	ldr	r1, [pc, #224]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	089b      	lsrs	r3, r3, #2
 800841c:	3318      	adds	r3, #24
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8008424:	4b34      	ldr	r3, [pc, #208]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	43db      	mvns	r3, r3
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	4013      	ands	r3, r2
 8008432:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4313      	orrs	r3, r2
 8008446:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8008448:	4a2b      	ldr	r2, [pc, #172]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800844e:	4b2a      	ldr	r3, [pc, #168]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	43db      	mvns	r3, r3
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	4013      	ands	r3, r2
 800845c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8008472:	4a21      	ldr	r2, [pc, #132]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008478:	4b1f      	ldr	r3, [pc, #124]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 800847a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800847e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	43db      	mvns	r3, r3
 8008484:	69fa      	ldr	r2, [r7, #28]
 8008486:	4013      	ands	r3, r2
 8008488:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800849e:	4a16      	ldr	r2, [pc, #88]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80084a6:	4b14      	ldr	r3, [pc, #80]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 80084a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	43db      	mvns	r3, r3
 80084b2:	69fa      	ldr	r2, [r7, #28]
 80084b4:	4013      	ands	r3, r2
 80084b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80084c4:	69fa      	ldr	r2, [r7, #28]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80084cc:	4a0a      	ldr	r2, [pc, #40]	@ (80084f8 <HAL_GPIO_Init+0x3a8>)
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	3301      	adds	r3, #1
 80084d8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	fa22 f303 	lsr.w	r3, r2, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f ae3d 	bne.w	8008164 <HAL_GPIO_Init+0x14>
  }
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	3724      	adds	r7, #36	@ 0x24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	46022000 	.word	0x46022000
 80084fc:	002f7f7f 	.word	0x002f7f7f

08008500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	807b      	strh	r3, [r7, #2]
 800850c:	4613      	mov	r3, r2
 800850e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008510:	787b      	ldrb	r3, [r7, #1]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008516:	887a      	ldrh	r2, [r7, #2]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800851c:	e002      	b.n	8008524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800851e:	887a      	ldrh	r2, [r7, #2]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008542:	887a      	ldrh	r2, [r7, #2]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4013      	ands	r3, r2
 8008548:	041a      	lsls	r2, r3, #16
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	43d9      	mvns	r1, r3
 800854e:	887b      	ldrh	r3, [r7, #2]
 8008550:	400b      	ands	r3, r1
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	619a      	str	r2, [r3, #24]
}
 8008558:	bf00      	nop
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800856e:	4b0f      	ldr	r3, [pc, #60]	@ (80085ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	88fb      	ldrh	r3, [r7, #6]
 8008574:	4013      	ands	r3, r2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d006      	beq.n	8008588 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800857a:	4a0c      	ldr	r2, [pc, #48]	@ (80085ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 f814 	bl	80085b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8008588:	4b08      	ldr	r3, [pc, #32]	@ (80085ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008594:	4a05      	ldr	r2, [pc, #20]	@ (80085ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f812 	bl	80085c6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80085a2:	bf00      	nop
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	46022000 	.word	0x46022000

080085b0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	4603      	mov	r3, r0
 80085ce:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e08d      	b.n	800870a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fa f9ba 	bl	800297c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2224      	movs	r2, #36	@ 0x24
 800860c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0201 	bic.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800862c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800863c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d107      	bne.n	8008656 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008652:	609a      	str	r2, [r3, #8]
 8008654:	e006      	b.n	8008664 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008662:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d108      	bne.n	800867e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800867a:	605a      	str	r2, [r3, #4]
 800867c:	e007      	b.n	800868e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800868c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6812      	ldr	r2, [r2, #0]
 8008698:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800869c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	69d9      	ldr	r1, [r3, #28]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1a      	ldr	r2, [r3, #32]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	461a      	mov	r2, r3
 8008720:	460b      	mov	r3, r1
 8008722:	817b      	strh	r3, [r7, #10]
 8008724:	4613      	mov	r3, r2
 8008726:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b20      	cmp	r3, #32
 8008732:	f040 80da 	bne.w	80088ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800873c:	2b01      	cmp	r3, #1
 800873e:	d101      	bne.n	8008744 <HAL_I2C_Master_Transmit+0x30>
 8008740:	2302      	movs	r3, #2
 8008742:	e0d3      	b.n	80088ec <HAL_I2C_Master_Transmit+0x1d8>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800874c:	f7fb f8ac 	bl	80038a8 <HAL_GetTick>
 8008750:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	2319      	movs	r3, #25
 8008758:	2201      	movs	r2, #1
 800875a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fe7d 	bl	800945e <I2C_WaitOnFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e0be      	b.n	80088ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2221      	movs	r2, #33	@ 0x21
 8008772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2210      	movs	r2, #16
 800877a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	893a      	ldrh	r2, [r7, #8]
 800878e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800879a:	b29b      	uxth	r3, r3
 800879c:	2bff      	cmp	r3, #255	@ 0xff
 800879e:	d90e      	bls.n	80087be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	22ff      	movs	r2, #255	@ 0xff
 80087a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	8979      	ldrh	r1, [r7, #10]
 80087ae:	4b51      	ldr	r3, [pc, #324]	@ (80088f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f001 f814 	bl	80097e4 <I2C_TransferConfig>
 80087bc:	e06c      	b.n	8008898 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	8979      	ldrh	r1, [r7, #10]
 80087d0:	4b48      	ldr	r3, [pc, #288]	@ (80088f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f001 f803 	bl	80097e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80087de:	e05b      	b.n	8008898 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	6a39      	ldr	r1, [r7, #32]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fe93 	bl	8009510 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e07b      	b.n	80088ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d034      	beq.n	8008898 <HAL_I2C_Master_Transmit+0x184>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d130      	bne.n	8008898 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	2200      	movs	r2, #0
 800883e:	2180      	movs	r1, #128	@ 0x80
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fe0c 	bl	800945e <I2C_WaitOnFlagUntilTimeout>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e04d      	b.n	80088ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	2bff      	cmp	r3, #255	@ 0xff
 8008858:	d90e      	bls.n	8008878 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	22ff      	movs	r2, #255	@ 0xff
 800885e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008864:	b2da      	uxtb	r2, r3
 8008866:	8979      	ldrh	r1, [r7, #10]
 8008868:	2300      	movs	r3, #0
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 ffb7 	bl	80097e4 <I2C_TransferConfig>
 8008876:	e00f      	b.n	8008898 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008886:	b2da      	uxtb	r2, r3
 8008888:	8979      	ldrh	r1, [r7, #10]
 800888a:	2300      	movs	r3, #0
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 ffa6 	bl	80097e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d19e      	bne.n	80087e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	6a39      	ldr	r1, [r7, #32]
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fe79 	bl	800959e <I2C_WaitOnSTOPFlagUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e01a      	b.n	80088ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2220      	movs	r2, #32
 80088bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6859      	ldr	r1, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	4b0b      	ldr	r3, [pc, #44]	@ (80088f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80088ca:	400b      	ands	r3, r1
 80088cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e000      	b.n	80088ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80088ea:	2302      	movs	r3, #2
  }
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	80002000 	.word	0x80002000
 80088f8:	fe00e800 	.word	0xfe00e800

080088fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	4798      	blx	r3
  }
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00f      	beq.n	8008972 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008960:	f043 0201 	orr.w	r2, r3, #1
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008970:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00f      	beq.n	800899c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800898a:	f043 0208 	orr.w	r2, r3, #8
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800899a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00f      	beq.n	80089c6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00a      	beq.n	80089c6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b4:	f043 0202 	orr.w	r2, r3, #2
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f003 030b 	and.w	r3, r3, #11
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80089d6:	68f9      	ldr	r1, [r7, #12]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fbe7 	bl	80091ac <I2C_ITError>
  }
}
 80089de:	bf00      	nop
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b086      	sub	sp, #24
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <I2C_Slave_ISR_IT+0x24>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e0e2      	b.n	8008c50 <I2C_Slave_ISR_IT+0x1ea>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d009      	beq.n	8008ab0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008aa6:	6939      	ldr	r1, [r7, #16]
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 f9b5 	bl	8008e18 <I2C_ITSlaveCplt>
 8008aae:	e0ca      	b.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f003 0310 	and.w	r3, r3, #16
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d04b      	beq.n	8008b52 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d046      	beq.n	8008b52 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d128      	bne.n	8008b20 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b28      	cmp	r3, #40	@ 0x28
 8008ad8:	d108      	bne.n	8008aec <I2C_Slave_ISR_IT+0x86>
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ae0:	d104      	bne.n	8008aec <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ae2:	6939      	ldr	r1, [r7, #16]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fb0d 	bl	8009104 <I2C_ITListenCplt>
 8008aea:	e031      	b.n	8008b50 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b29      	cmp	r3, #41	@ 0x29
 8008af6:	d10e      	bne.n	8008b16 <I2C_Slave_ISR_IT+0xb0>
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008afe:	d00a      	beq.n	8008b16 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2210      	movs	r2, #16
 8008b06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fc66 	bl	80093da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f926 	bl	8008d60 <I2C_ITSlaveSeqCplt>
 8008b14:	e01c      	b.n	8008b50 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2210      	movs	r2, #16
 8008b1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008b1e:	e08f      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2210      	movs	r2, #16
 8008b26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b2c:	f043 0204 	orr.w	r2, r3, #4
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <I2C_Slave_ISR_IT+0xdc>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b40:	d17e      	bne.n	8008c40 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b46:	4619      	mov	r1, r3
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fb2f 	bl	80091ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b4e:	e077      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1da>
 8008b50:	e076      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d02f      	beq.n	8008bbc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d02a      	beq.n	8008bbc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d018      	beq.n	8008ba2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d14b      	bne.n	8008c44 <I2C_Slave_ISR_IT+0x1de>
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008bb2:	d047      	beq.n	8008c44 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f8d3 	bl	8008d60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008bba:	e043      	b.n	8008c44 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d009      	beq.n	8008bda <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008bd0:	6939      	ldr	r1, [r7, #16]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 f840 	bl	8008c58 <I2C_ITAddrCplt>
 8008bd8:	e035      	b.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d030      	beq.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d02b      	beq.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d018      	beq.n	8008c2a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008c28:	e00d      	b.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c30:	d002      	beq.n	8008c38 <I2C_Slave_ISR_IT+0x1d2>
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f891 	bl	8008d60 <I2C_ITSlaveSeqCplt>
 8008c3e:	e002      	b.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8008c40:	bf00      	nop
 8008c42:	e000      	b.n	8008c46 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008c44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c6e:	2b28      	cmp	r3, #40	@ 0x28
 8008c70:	d16a      	bne.n	8008d48 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	0c1b      	lsrs	r3, r3, #16
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	0c1b      	lsrs	r3, r3, #16
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008c90:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c9e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008cac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d138      	bne.n	8008d28 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008cb6:	897b      	ldrh	r3, [r7, #10]
 8008cb8:	09db      	lsrs	r3, r3, #7
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	89bb      	ldrh	r3, [r7, #12]
 8008cbe:	4053      	eors	r3, r2
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f003 0306 	and.w	r3, r3, #6
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d11c      	bne.n	8008d04 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008cca:	897b      	ldrh	r3, [r7, #10]
 8008ccc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d13b      	bne.n	8008d58 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2208      	movs	r2, #8
 8008cec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008cf6:	89ba      	ldrh	r2, [r7, #12]
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff fe86 	bl	8008a0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d02:	e029      	b.n	8008d58 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fd9b 	bl	8009848 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d1a:	89ba      	ldrh	r2, [r7, #12]
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fe74 	bl	8008a0e <HAL_I2C_AddrCallback>
}
 8008d26:	e017      	b.n	8008d58 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008d28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fd8b 	bl	8009848 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008d3a:	89ba      	ldrh	r2, [r7, #12]
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff fe64 	bl	8008a0e <HAL_I2C_AddrCallback>
}
 8008d46:	e007      	b.n	8008d58 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008d58:	bf00      	nop
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	e00c      	b.n	8008dae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008dac:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b29      	cmp	r3, #41	@ 0x29
 8008db8:	d112      	bne.n	8008de0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2228      	movs	r2, #40	@ 0x28
 8008dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2221      	movs	r2, #33	@ 0x21
 8008dc6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008dc8:	2101      	movs	r1, #1
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fd3c 	bl	8009848 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fe04 	bl	80089e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008dde:	e017      	b.n	8008e10 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dea:	d111      	bne.n	8008e10 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2228      	movs	r2, #40	@ 0x28
 8008df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2222      	movs	r2, #34	@ 0x22
 8008df8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fd23 	bl	8009848 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fdf5 	bl	80089fa <HAL_I2C_SlaveRxCpltCallback>
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e18:	b590      	push	{r4, r7, lr}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e32:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e3a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2220      	movs	r2, #32
 8008e42:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	2b21      	cmp	r3, #33	@ 0x21
 8008e48:	d002      	beq.n	8008e50 <I2C_ITSlaveCplt+0x38>
 8008e4a:	7afb      	ldrb	r3, [r7, #11]
 8008e4c:	2b29      	cmp	r3, #41	@ 0x29
 8008e4e:	d108      	bne.n	8008e62 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008e50:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fcf7 	bl	8009848 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2221      	movs	r2, #33	@ 0x21
 8008e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e60:	e019      	b.n	8008e96 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e62:	7afb      	ldrb	r3, [r7, #11]
 8008e64:	2b22      	cmp	r3, #34	@ 0x22
 8008e66:	d002      	beq.n	8008e6e <I2C_ITSlaveCplt+0x56>
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e6c:	d108      	bne.n	8008e80 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008e6e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fce8 	bl	8009848 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2222      	movs	r2, #34	@ 0x22
 8008e7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e7e:	e00a      	b.n	8008e96 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	2b28      	cmp	r3, #40	@ 0x28
 8008e84:	d107      	bne.n	8008e96 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008e86:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fcdc 	bl	8009848 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ea4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6859      	ldr	r1, [r3, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	4b92      	ldr	r3, [pc, #584]	@ (80090fc <I2C_ITSlaveCplt+0x2e4>)
 8008eb2:	400b      	ands	r3, r1
 8008eb4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa8f 	bl	80093da <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01c      	beq.n	8008f00 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ed4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d031      	beq.n	8008f42 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ee6:	b29c      	uxth	r4, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fe fc30 	bl	8007752 <HAL_DMAEx_GetFifoLevel>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	4423      	add	r3, r4
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008efe:	e020      	b.n	8008f42 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01b      	beq.n	8008f42 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00f      	beq.n	8008f42 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f2a:	b29c      	uxth	r4, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fc0e 	bl	8007752 <HAL_DMAEx_GetFifoLevel>
 8008f36:	4603      	mov	r3, r0
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	4423      	add	r3, r4
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d020      	beq.n	8008f8e <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f023 0304 	bic.w	r3, r3, #4
 8008f52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00c      	beq.n	8008f8e <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	3b01      	subs	r3, #1
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f9c:	f043 0204 	orr.w	r2, r3, #4
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f003 0310 	and.w	r3, r3, #16
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d049      	beq.n	8009042 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d044      	beq.n	8009042 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d128      	bne.n	8009014 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b28      	cmp	r3, #40	@ 0x28
 8008fcc:	d108      	bne.n	8008fe0 <I2C_ITSlaveCplt+0x1c8>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fd4:	d104      	bne.n	8008fe0 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008fd6:	6979      	ldr	r1, [r7, #20]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f893 	bl	8009104 <I2C_ITListenCplt>
 8008fde:	e030      	b.n	8009042 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b29      	cmp	r3, #41	@ 0x29
 8008fea:	d10e      	bne.n	800900a <I2C_ITSlaveCplt+0x1f2>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ff2:	d00a      	beq.n	800900a <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2210      	movs	r2, #16
 8008ffa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f9ec 	bl	80093da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff feac 	bl	8008d60 <I2C_ITSlaveSeqCplt>
 8009008:	e01b      	b.n	8009042 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2210      	movs	r2, #16
 8009010:	61da      	str	r2, [r3, #28]
 8009012:	e016      	b.n	8009042 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2210      	movs	r2, #16
 800901a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009020:	f043 0204 	orr.w	r2, r3, #4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <I2C_ITSlaveCplt+0x21e>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009034:	d105      	bne.n	8009042 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f8b5 	bl	80091ac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009054:	2b00      	cmp	r3, #0
 8009056:	d010      	beq.n	800907a <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8a4 	bl	80091ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b28      	cmp	r3, #40	@ 0x28
 800906e:	d141      	bne.n	80090f4 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009070:	6979      	ldr	r1, [r7, #20]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f846 	bl	8009104 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009078:	e03c      	b.n	80090f4 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009082:	d014      	beq.n	80090ae <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fe6b 	bl	8008d60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a1c      	ldr	r2, [pc, #112]	@ (8009100 <I2C_ITSlaveCplt+0x2e8>)
 800908e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fcbf 	bl	8008a2a <HAL_I2C_ListenCpltCallback>
}
 80090ac:	e022      	b.n	80090f4 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b22      	cmp	r3, #34	@ 0x22
 80090b8:	d10e      	bne.n	80090d8 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fc92 	bl	80089fa <HAL_I2C_SlaveRxCpltCallback>
}
 80090d6:	e00d      	b.n	80090f4 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fc79 	bl	80089e6 <HAL_I2C_SlaveTxCpltCallback>
}
 80090f4:	bf00      	nop
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd90      	pop	{r4, r7, pc}
 80090fc:	fe00e800 	.word	0xfe00e800
 8009100:	ffff0000 	.word	0xffff0000

08009104 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a25      	ldr	r2, [pc, #148]	@ (80091a8 <I2C_ITListenCplt+0xa4>)
 8009112:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d022      	beq.n	8009180 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	d012      	beq.n	8009180 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009178:	f043 0204 	orr.w	r2, r3, #4
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009180:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fb5f 	bl	8009848 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2210      	movs	r2, #16
 8009190:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff fc45 	bl	8008a2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	ffff0000 	.word	0xffff0000

080091ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091bc:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a6d      	ldr	r2, [pc, #436]	@ (8009380 <I2C_ITError+0x1d4>)
 80091ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	431a      	orrs	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	2b28      	cmp	r3, #40	@ 0x28
 80091e2:	d005      	beq.n	80091f0 <I2C_ITError+0x44>
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b29      	cmp	r3, #41	@ 0x29
 80091e8:	d002      	beq.n	80091f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ee:	d10b      	bne.n	8009208 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80091f0:	2103      	movs	r1, #3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fb28 	bl	8009848 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2228      	movs	r2, #40	@ 0x28
 80091fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a60      	ldr	r2, [pc, #384]	@ (8009384 <I2C_ITError+0x1d8>)
 8009204:	635a      	str	r2, [r3, #52]	@ 0x34
 8009206:	e030      	b.n	800926a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009208:	f248 0103 	movw	r1, #32771	@ 0x8003
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb1b 	bl	8009848 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f8e1 	bl	80093da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b60      	cmp	r3, #96	@ 0x60
 8009222:	d01f      	beq.n	8009264 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b20      	cmp	r3, #32
 8009238:	d114      	bne.n	8009264 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f003 0310 	and.w	r3, r3, #16
 8009244:	2b10      	cmp	r3, #16
 8009246:	d109      	bne.n	800925c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2210      	movs	r2, #16
 800924e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009254:	f043 0204 	orr.w	r2, r3, #4
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2220      	movs	r2, #32
 8009262:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009274:	2b00      	cmp	r3, #0
 8009276:	d039      	beq.n	80092ec <I2C_ITError+0x140>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b11      	cmp	r3, #17
 800927c:	d002      	beq.n	8009284 <I2C_ITError+0xd8>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b21      	cmp	r3, #33	@ 0x21
 8009282:	d133      	bne.n	80092ec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800928e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009292:	d107      	bne.n	80092a4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80092a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fd fa6f 	bl	800678c <HAL_DMA_GetState>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d017      	beq.n	80092e4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b8:	4a33      	ldr	r2, [pc, #204]	@ (8009388 <I2C_ITError+0x1dc>)
 80092ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fd f8d5 	bl	8006478 <HAL_DMA_Abort_IT>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d04d      	beq.n	8009370 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80092de:	4610      	mov	r0, r2
 80092e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092e2:	e045      	b.n	8009370 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f851 	bl	800938c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092ea:	e041      	b.n	8009370 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d039      	beq.n	8009368 <I2C_ITError+0x1bc>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b12      	cmp	r3, #18
 80092f8:	d002      	beq.n	8009300 <I2C_ITError+0x154>
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b22      	cmp	r3, #34	@ 0x22
 80092fe:	d133      	bne.n	8009368 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800930a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800930e:	d107      	bne.n	8009320 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800931e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009324:	4618      	mov	r0, r3
 8009326:	f7fd fa31 	bl	800678c <HAL_DMA_GetState>
 800932a:	4603      	mov	r3, r0
 800932c:	2b01      	cmp	r3, #1
 800932e:	d017      	beq.n	8009360 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009334:	4a14      	ldr	r2, [pc, #80]	@ (8009388 <I2C_ITError+0x1dc>)
 8009336:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd f897 	bl	8006478 <HAL_DMA_Abort_IT>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d011      	beq.n	8009374 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800935a:	4610      	mov	r0, r2
 800935c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800935e:	e009      	b.n	8009374 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f813 	bl	800938c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009366:	e005      	b.n	8009374 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f80f 	bl	800938c <I2C_TreatErrorCallback>
  }
}
 800936e:	e002      	b.n	8009376 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009370:	bf00      	nop
 8009372:	e000      	b.n	8009376 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009374:	bf00      	nop
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	ffff0000 	.word	0xffff0000
 8009384:	08008a67 	.word	0x08008a67
 8009388:	08009423 	.word	0x08009423

0800938c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b60      	cmp	r3, #96	@ 0x60
 800939e:	d10e      	bne.n	80093be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fb4b 	bl	8008a52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093bc:	e009      	b.n	80093d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff fb36 	bl	8008a3e <HAL_I2C_ErrorCallback>
}
 80093d2:	bf00      	nop
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d103      	bne.n	80093f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2200      	movs	r2, #0
 80093f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b01      	cmp	r3, #1
 8009404:	d007      	beq.n	8009416 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0201 	orr.w	r2, r2, #1
 8009414:	619a      	str	r2, [r3, #24]
  }
}
 8009416:	bf00      	nop
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943c:	2200      	movs	r2, #0
 800943e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944c:	2200      	movs	r2, #0
 800944e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff ff9b 	bl	800938c <I2C_TreatErrorCallback>
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	4613      	mov	r3, r2
 800946c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800946e:	e03b      	b.n	80094e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f8d5 	bl	8009624 <I2C_IsErrorOccurred>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e041      	b.n	8009508 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d02d      	beq.n	80094e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948c:	f7fa fa0c 	bl	80038a8 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d302      	bcc.n	80094a2 <I2C_WaitOnFlagUntilTimeout+0x44>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d122      	bne.n	80094e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	699a      	ldr	r2, [r3, #24]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	4013      	ands	r3, r2
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	bf0c      	ite	eq
 80094b2:	2301      	moveq	r3, #1
 80094b4:	2300      	movne	r3, #0
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d113      	bne.n	80094e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c4:	f043 0220 	orr.w	r2, r3, #32
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2220      	movs	r2, #32
 80094d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e00f      	b.n	8009508 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699a      	ldr	r2, [r3, #24]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	4013      	ands	r3, r2
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	bf0c      	ite	eq
 80094f8:	2301      	moveq	r3, #1
 80094fa:	2300      	movne	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	461a      	mov	r2, r3
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	429a      	cmp	r2, r3
 8009504:	d0b4      	beq.n	8009470 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800951c:	e033      	b.n	8009586 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	68b9      	ldr	r1, [r7, #8]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f87e 	bl	8009624 <I2C_IsErrorOccurred>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e031      	b.n	8009596 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d025      	beq.n	8009586 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800953a:	f7fa f9b5 	bl	80038a8 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	d302      	bcc.n	8009550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11a      	bne.n	8009586 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b02      	cmp	r3, #2
 800955c:	d013      	beq.n	8009586 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009562:	f043 0220 	orr.w	r2, r3, #32
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2220      	movs	r2, #32
 800956e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e007      	b.n	8009596 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b02      	cmp	r3, #2
 8009592:	d1c4      	bne.n	800951e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095aa:	e02f      	b.n	800960c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f837 	bl	8009624 <I2C_IsErrorOccurred>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e02d      	b.n	800961c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095c0:	f7fa f972 	bl	80038a8 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d302      	bcc.n	80095d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d11a      	bne.n	800960c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f003 0320 	and.w	r3, r3, #32
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d013      	beq.n	800960c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e8:	f043 0220 	orr.w	r2, r3, #32
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2220      	movs	r2, #32
 80095f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e007      	b.n	800961c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b20      	cmp	r3, #32
 8009618:	d1c8      	bne.n	80095ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	@ 0x28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b00      	cmp	r3, #0
 800964e:	d068      	beq.n	8009722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2210      	movs	r2, #16
 8009656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009658:	e049      	b.n	80096ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009660:	d045      	beq.n	80096ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009662:	f7fa f921 	bl	80038a8 <HAL_GetTick>
 8009666:	4602      	mov	r2, r0
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	429a      	cmp	r2, r3
 8009670:	d302      	bcc.n	8009678 <I2C_IsErrorOccurred+0x54>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d13a      	bne.n	80096ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800968a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800969a:	d121      	bne.n	80096e0 <I2C_IsErrorOccurred+0xbc>
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096a2:	d01d      	beq.n	80096e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80096a4:	7cfb      	ldrb	r3, [r7, #19]
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d01a      	beq.n	80096e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80096ba:	f7fa f8f5 	bl	80038a8 <HAL_GetTick>
 80096be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096c0:	e00e      	b.n	80096e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80096c2:	f7fa f8f1 	bl	80038a8 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b19      	cmp	r3, #25
 80096ce:	d907      	bls.n	80096e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	f043 0320 	orr.w	r3, r3, #32
 80096d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80096de:	e006      	b.n	80096ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d1e9      	bne.n	80096c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b20      	cmp	r3, #32
 80096fa:	d003      	beq.n	8009704 <I2C_IsErrorOccurred+0xe0>
 80096fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0aa      	beq.n	800965a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009708:	2b00      	cmp	r3, #0
 800970a:	d103      	bne.n	8009714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2220      	movs	r2, #32
 8009712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	f043 0304 	orr.w	r3, r3, #4
 800971a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00b      	beq.n	800974c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	f043 0301 	orr.w	r3, r3, #1
 800973a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00b      	beq.n	800976e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	f043 0308 	orr.w	r3, r3, #8
 800975c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	f043 0302 	orr.w	r3, r3, #2
 800977e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01c      	beq.n	80097d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fe1e 	bl	80093da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6859      	ldr	r1, [r3, #4]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	4b0d      	ldr	r3, [pc, #52]	@ (80097e0 <I2C_IsErrorOccurred+0x1bc>)
 80097aa:	400b      	ands	r3, r1
 80097ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	431a      	orrs	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80097d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3728      	adds	r7, #40	@ 0x28
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	fe00e800 	.word	0xfe00e800

080097e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	817b      	strh	r3, [r7, #10]
 80097f2:	4613      	mov	r3, r2
 80097f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097f6:	897b      	ldrh	r3, [r7, #10]
 80097f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097fc:	7a7b      	ldrb	r3, [r7, #9]
 80097fe:	041b      	lsls	r3, r3, #16
 8009800:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	4313      	orrs	r3, r2
 800980e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	0d5b      	lsrs	r3, r3, #21
 800981e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009822:	4b08      	ldr	r3, [pc, #32]	@ (8009844 <I2C_TransferConfig+0x60>)
 8009824:	430b      	orrs	r3, r1
 8009826:	43db      	mvns	r3, r3
 8009828:	ea02 0103 	and.w	r1, r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009836:	bf00      	nop
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	03ff63ff 	.word	0x03ff63ff

08009848 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009858:	887b      	ldrh	r3, [r7, #2]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00f      	beq.n	8009882 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009868:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009876:	2b28      	cmp	r3, #40	@ 0x28
 8009878:	d003      	beq.n	8009882 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009880:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009882:	887b      	ldrh	r3, [r7, #2]
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00f      	beq.n	80098ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009892:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800989a:	b2db      	uxtb	r3, r3
 800989c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80098a0:	2b28      	cmp	r3, #40	@ 0x28
 80098a2:	d003      	beq.n	80098ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80098aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80098ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	da03      	bge.n	80098bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80098ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80098bc:	887b      	ldrh	r3, [r7, #2]
 80098be:	2b10      	cmp	r3, #16
 80098c0:	d103      	bne.n	80098ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80098c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80098ca:	887b      	ldrh	r3, [r7, #2]
 80098cc:	2b20      	cmp	r3, #32
 80098ce:	d103      	bne.n	80098d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f043 0320 	orr.w	r3, r3, #32
 80098d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80098d8:	887b      	ldrh	r3, [r7, #2]
 80098da:	2b40      	cmp	r3, #64	@ 0x40
 80098dc:	d103      	bne.n	80098e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6819      	ldr	r1, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	43da      	mvns	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	400a      	ands	r2, r1
 80098f6:	601a      	str	r2, [r3, #0]
}
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b20      	cmp	r3, #32
 8009918:	d138      	bne.n	800998c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009924:	2302      	movs	r3, #2
 8009926:	e032      	b.n	800998e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2224      	movs	r2, #36	@ 0x24
 8009934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0201 	bic.w	r2, r2, #1
 8009946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6819      	ldr	r1, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0201 	orr.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2220      	movs	r2, #32
 800997c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	e000      	b.n	800998e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800998c:	2302      	movs	r3, #2
  }
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800999a:	b480      	push	{r7}
 800999c:	b085      	sub	sp, #20
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d139      	bne.n	8009a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d101      	bne.n	80099be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80099ba:	2302      	movs	r3, #2
 80099bc:	e033      	b.n	8009a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2224      	movs	r2, #36	@ 0x24
 80099ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0201 	bic.w	r2, r2, #1
 80099dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80099ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0201 	orr.w	r2, r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	e000      	b.n	8009a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a24:	2302      	movs	r3, #2
  }
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
	...

08009a34 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8009a40:	4b0b      	ldr	r3, [pc, #44]	@ (8009a70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	73fb      	strb	r3, [r7, #15]
 8009a50:	e007      	b.n	8009a62 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8009a52:	4b07      	ldr	r3, [pc, #28]	@ (8009a70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f023 0204 	bic.w	r2, r3, #4
 8009a5a:	4905      	ldr	r1, [pc, #20]	@ (8009a70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	600b      	str	r3, [r1, #0]
  }

  return status;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	40030400 	.word	0x40030400

08009a74 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009a74:	b480      	push	{r7}
 8009a76:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <HAL_ICACHE_Enable+0x1c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a04      	ldr	r2, [pc, #16]	@ (8009a90 <HAL_ICACHE_Enable+0x1c>)
 8009a7e:	f043 0301 	orr.w	r3, r3, #1
 8009a82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	40030400 	.word	0x40030400

08009a94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e0bf      	b.n	8009c26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7f9 f84c 	bl	8002b58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699a      	ldr	r2, [r3, #24]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009ad6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6999      	ldr	r1, [r3, #24]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009aec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6899      	ldr	r1, [r3, #8]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	4b4a      	ldr	r3, [pc, #296]	@ (8009c30 <HAL_LTDC_Init+0x19c>)
 8009b08:	400b      	ands	r3, r1
 8009b0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	041b      	lsls	r3, r3, #16
 8009b12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6899      	ldr	r1, [r3, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	699a      	ldr	r2, [r3, #24]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	431a      	orrs	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68d9      	ldr	r1, [r3, #12]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	4b3e      	ldr	r3, [pc, #248]	@ (8009c30 <HAL_LTDC_Init+0x19c>)
 8009b36:	400b      	ands	r3, r1
 8009b38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	041b      	lsls	r3, r3, #16
 8009b40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68d9      	ldr	r1, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a1a      	ldr	r2, [r3, #32]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6919      	ldr	r1, [r3, #16]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4b33      	ldr	r3, [pc, #204]	@ (8009c30 <HAL_LTDC_Init+0x19c>)
 8009b64:	400b      	ands	r3, r1
 8009b66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6c:	041b      	lsls	r3, r3, #16
 8009b6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6919      	ldr	r1, [r3, #16]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6959      	ldr	r1, [r3, #20]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4b27      	ldr	r3, [pc, #156]	@ (8009c30 <HAL_LTDC_Init+0x19c>)
 8009b92:	400b      	ands	r3, r1
 8009b94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	041b      	lsls	r3, r3, #16
 8009b9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6959      	ldr	r1, [r3, #20]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009bba:	021b      	lsls	r3, r3, #8
 8009bbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009bc4:	041b      	lsls	r3, r3, #16
 8009bc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f042 0206 	orr.w	r2, r2, #6
 8009c02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f042 0201 	orr.w	r2, r2, #1
 8009c12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	f000f800 	.word	0xf000f800

08009c34 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f003 0304 	and.w	r3, r3, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d023      	beq.n	8009c9e <HAL_LTDC_IRQHandler+0x6a>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01e      	beq.n	8009c9e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 0204 	bic.w	r2, r2, #4
 8009c6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2204      	movs	r2, #4
 8009c76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c7e:	f043 0201 	orr.w	r2, r3, #1
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f86f 	bl	8009d7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d023      	beq.n	8009cf0 <HAL_LTDC_IRQHandler+0xbc>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01e      	beq.n	8009cf0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0202 	bic.w	r2, r2, #2
 8009cc0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009cd0:	f043 0202 	orr.w	r2, r3, #2
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2204      	movs	r2, #4
 8009cde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f846 	bl	8009d7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d01b      	beq.n	8009d32 <HAL_LTDC_IRQHandler+0xfe>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d016      	beq.n	8009d32 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f82f 	bl	8009d90 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f003 0308 	and.w	r3, r3, #8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d01b      	beq.n	8009d74 <HAL_LTDC_IRQHandler+0x140>
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d016      	beq.n	8009d74 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0208 	bic.w	r2, r2, #8
 8009d54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f818 	bl	8009da4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009d74:	bf00      	nop
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009db8:	b5b0      	push	{r4, r5, r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d101      	bne.n	8009dd2 <HAL_LTDC_ConfigLayer+0x1a>
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e02c      	b.n	8009e2c <HAL_LTDC_ConfigLayer+0x74>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2134      	movs	r1, #52	@ 0x34
 8009de8:	fb01 f303 	mul.w	r3, r1, r3
 8009dec:	4413      	add	r3, r2
 8009dee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	4614      	mov	r4, r2
 8009df6:	461d      	mov	r5, r3
 8009df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 f811 	bl	8009e34 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2201      	movs	r2, #1
 8009e18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bdb0      	pop	{r4, r5, r7, pc}

08009e34 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b089      	sub	sp, #36	@ 0x24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	0c1b      	lsrs	r3, r3, #16
 8009e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e50:	4413      	add	r3, r2
 8009e52:	041b      	lsls	r3, r3, #16
 8009e54:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	01db      	lsls	r3, r3, #7
 8009e60:	4413      	add	r3, r2
 8009e62:	3384      	adds	r3, #132	@ 0x84
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	6812      	ldr	r2, [r2, #0]
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	01d2      	lsls	r2, r2, #7
 8009e70:	440a      	add	r2, r1
 8009e72:	3284      	adds	r2, #132	@ 0x84
 8009e74:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009e78:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	0c1b      	lsrs	r3, r3, #16
 8009e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e8a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e8c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4619      	mov	r1, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	01db      	lsls	r3, r3, #7
 8009e98:	440b      	add	r3, r1
 8009e9a:	3384      	adds	r3, #132	@ 0x84
 8009e9c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009ea2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009eb2:	4413      	add	r3, r2
 8009eb4:	041b      	lsls	r3, r3, #16
 8009eb6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	01db      	lsls	r3, r3, #7
 8009ec2:	4413      	add	r3, r2
 8009ec4:	3384      	adds	r3, #132	@ 0x84
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	4611      	mov	r1, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	01d2      	lsls	r2, r2, #7
 8009ed2:	440a      	add	r2, r1
 8009ed4:	3284      	adds	r2, #132	@ 0x84
 8009ed6:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009eda:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009eea:	4413      	add	r3, r2
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	01db      	lsls	r3, r3, #7
 8009ef8:	440b      	add	r3, r1
 8009efa:	3384      	adds	r3, #132	@ 0x84
 8009efc:	4619      	mov	r1, r3
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	01db      	lsls	r3, r3, #7
 8009f0e:	4413      	add	r3, r2
 8009f10:	3384      	adds	r3, #132	@ 0x84
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	4611      	mov	r1, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	01d2      	lsls	r2, r2, #7
 8009f1e:	440a      	add	r2, r1
 8009f20:	3284      	adds	r2, #132	@ 0x84
 8009f22:	f023 0307 	bic.w	r3, r3, #7
 8009f26:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	01db      	lsls	r3, r3, #7
 8009f32:	4413      	add	r3, r2
 8009f34:	3384      	adds	r3, #132	@ 0x84
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f4e:	041b      	lsls	r3, r3, #16
 8009f50:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	061b      	lsls	r3, r3, #24
 8009f58:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f60:	461a      	mov	r2, r3
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	431a      	orrs	r2, r3
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	01db      	lsls	r3, r3, #7
 8009f74:	440b      	add	r3, r1
 8009f76:	3384      	adds	r3, #132	@ 0x84
 8009f78:	4619      	mov	r1, r3
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	01db      	lsls	r3, r3, #7
 8009f8a:	4413      	add	r3, r2
 8009f8c:	3384      	adds	r3, #132	@ 0x84
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	4611      	mov	r1, r2
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	01d2      	lsls	r2, r2, #7
 8009f9a:	440a      	add	r2, r1
 8009f9c:	3284      	adds	r2, #132	@ 0x84
 8009f9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009fa2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	01db      	lsls	r3, r3, #7
 8009fae:	4413      	add	r3, r2
 8009fb0:	3384      	adds	r3, #132	@ 0x84
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	01db      	lsls	r3, r3, #7
 8009fc4:	4413      	add	r3, r2
 8009fc6:	3384      	adds	r3, #132	@ 0x84
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	6812      	ldr	r2, [r2, #0]
 8009fce:	4611      	mov	r1, r2
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	01d2      	lsls	r2, r2, #7
 8009fd4:	440a      	add	r2, r1
 8009fd6:	3284      	adds	r2, #132	@ 0x84
 8009fd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009fdc:	f023 0307 	bic.w	r3, r3, #7
 8009fe0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	69da      	ldr	r2, [r3, #28]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	6809      	ldr	r1, [r1, #0]
 8009fee:	4608      	mov	r0, r1
 8009ff0:	6879      	ldr	r1, [r7, #4]
 8009ff2:	01c9      	lsls	r1, r1, #7
 8009ff4:	4401      	add	r1, r0
 8009ff6:	3184      	adds	r1, #132	@ 0x84
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	461a      	mov	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	01db      	lsls	r3, r3, #7
 800a006:	4413      	add	r3, r2
 800a008:	3384      	adds	r3, #132	@ 0x84
 800a00a:	461a      	mov	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a010:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d102      	bne.n	800a020 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800a01a:	2304      	movs	r3, #4
 800a01c:	61fb      	str	r3, [r7, #28]
 800a01e:	e01b      	b.n	800a058 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d102      	bne.n	800a02e <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800a028:	2303      	movs	r3, #3
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	e014      	b.n	800a058 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	2b04      	cmp	r3, #4
 800a034:	d00b      	beq.n	800a04e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d007      	beq.n	800a04e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a042:	2b03      	cmp	r3, #3
 800a044:	d003      	beq.n	800a04e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a04a:	2b07      	cmp	r3, #7
 800a04c:	d102      	bne.n	800a054 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800a04e:	2302      	movs	r3, #2
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	e001      	b.n	800a058 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800a054:	2301      	movs	r3, #1
 800a056:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	01db      	lsls	r3, r3, #7
 800a062:	4413      	add	r3, r2
 800a064:	3384      	adds	r3, #132	@ 0x84
 800a066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	6812      	ldr	r2, [r2, #0]
 800a06c:	4611      	mov	r1, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	01d2      	lsls	r2, r2, #7
 800a072:	440a      	add	r2, r1
 800a074:	3284      	adds	r2, #132	@ 0x84
 800a076:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a07a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	69fa      	ldr	r2, [r7, #28]
 800a082:	fb02 f303 	mul.w	r3, r2, r3
 800a086:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6859      	ldr	r1, [r3, #4]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	1acb      	subs	r3, r1, r3
 800a092:	69f9      	ldr	r1, [r7, #28]
 800a094:	fb01 f303 	mul.w	r3, r1, r3
 800a098:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	6809      	ldr	r1, [r1, #0]
 800a09e:	4608      	mov	r0, r1
 800a0a0:	6879      	ldr	r1, [r7, #4]
 800a0a2:	01c9      	lsls	r1, r1, #7
 800a0a4:	4401      	add	r1, r0
 800a0a6:	3184      	adds	r1, #132	@ 0x84
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	01db      	lsls	r3, r3, #7
 800a0b6:	4413      	add	r3, r2
 800a0b8:	3384      	adds	r3, #132	@ 0x84
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	6812      	ldr	r2, [r2, #0]
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	01d2      	lsls	r2, r2, #7
 800a0c6:	440a      	add	r2, r1
 800a0c8:	3284      	adds	r2, #132	@ 0x84
 800a0ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a0ce:	f023 0307 	bic.w	r3, r3, #7
 800a0d2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	01db      	lsls	r3, r3, #7
 800a0de:	4413      	add	r3, r2
 800a0e0:	3384      	adds	r3, #132	@ 0x84
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	01db      	lsls	r3, r3, #7
 800a0f4:	4413      	add	r3, r2
 800a0f6:	3384      	adds	r3, #132	@ 0x84
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	4611      	mov	r1, r2
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	01d2      	lsls	r2, r2, #7
 800a104:	440a      	add	r2, r1
 800a106:	3284      	adds	r2, #132	@ 0x84
 800a108:	f043 0301 	orr.w	r3, r3, #1
 800a10c:	6013      	str	r3, [r2, #0]
}
 800a10e:	bf00      	nop
 800a110:	3724      	adds	r7, #36	@ 0x24
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af02      	add	r7, sp, #8
 800a120:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e0fe      	b.n	800a32a <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d106      	bne.n	800a146 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7f8 ffa3 	bl	800308c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2203      	movs	r2, #3
 800a14a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4618      	mov	r0, r3
 800a154:	f008 f895 	bl	8012282 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7c1a      	ldrb	r2, [r3, #16]
 800a160:	f88d 2000 	strb.w	r2, [sp]
 800a164:	3304      	adds	r3, #4
 800a166:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a168:	f008 f85c 	bl	8012224 <USB_CoreInit>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e0d5      	b.n	800a32a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2100      	movs	r1, #0
 800a184:	4618      	mov	r0, r3
 800a186:	f008 f88d 	bl	80122a4 <USB_SetCurrentMode>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e0c6      	b.n	800a32a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	e04a      	b.n	800a238 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a1a2:	7bfa      	ldrb	r2, [r7, #15]
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	4413      	add	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	440b      	add	r3, r1
 800a1b0:	3315      	adds	r3, #21
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a1b6:	7bfa      	ldrb	r2, [r7, #15]
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3314      	adds	r3, #20
 800a1c6:	7bfa      	ldrb	r2, [r7, #15]
 800a1c8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a1ca:	7bfa      	ldrb	r2, [r7, #15]
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	b298      	uxth	r0, r3
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	332e      	adds	r3, #46	@ 0x2e
 800a1de:	4602      	mov	r2, r0
 800a1e0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a1e2:	7bfa      	ldrb	r2, [r7, #15]
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	4413      	add	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	3318      	adds	r3, #24
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a1f6:	7bfa      	ldrb	r2, [r7, #15]
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	440b      	add	r3, r1
 800a204:	331c      	adds	r3, #28
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a20a:	7bfa      	ldrb	r2, [r7, #15]
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	4613      	mov	r3, r2
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	440b      	add	r3, r1
 800a218:	3320      	adds	r3, #32
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a21e:	7bfa      	ldrb	r2, [r7, #15]
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	4613      	mov	r3, r2
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	3324      	adds	r3, #36	@ 0x24
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	3301      	adds	r3, #1
 800a236:	73fb      	strb	r3, [r7, #15]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	791b      	ldrb	r3, [r3, #4]
 800a23c:	7bfa      	ldrb	r2, [r7, #15]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d3af      	bcc.n	800a1a2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
 800a246:	e044      	b.n	800a2d2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a248:	7bfa      	ldrb	r2, [r7, #15]
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	4613      	mov	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a25a:	2200      	movs	r2, #0
 800a25c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a25e:	7bfa      	ldrb	r2, [r7, #15]
 800a260:	6879      	ldr	r1, [r7, #4]
 800a262:	4613      	mov	r3, r2
 800a264:	00db      	lsls	r3, r3, #3
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	440b      	add	r3, r1
 800a26c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a270:	7bfa      	ldrb	r2, [r7, #15]
 800a272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a274:	7bfa      	ldrb	r2, [r7, #15]
 800a276:	6879      	ldr	r1, [r7, #4]
 800a278:	4613      	mov	r3, r2
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	4413      	add	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	440b      	add	r3, r1
 800a282:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a286:	2200      	movs	r2, #0
 800a288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a28a:	7bfa      	ldrb	r2, [r7, #15]
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	4613      	mov	r3, r2
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	4413      	add	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	440b      	add	r3, r1
 800a298:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a2a0:	7bfa      	ldrb	r2, [r7, #15]
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	440b      	add	r3, r1
 800a2ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a2b6:	7bfa      	ldrb	r2, [r7, #15]
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	4413      	add	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	73fb      	strb	r3, [r7, #15]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	791b      	ldrb	r3, [r3, #4]
 800a2d6:	7bfa      	ldrb	r2, [r7, #15]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d3b5      	bcc.n	800a248 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	7c1a      	ldrb	r2, [r3, #16]
 800a2e4:	f88d 2000 	strb.w	r2, [sp]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2ec:	f008 f826 	bl	801233c <USB_DevInit>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e013      	b.n	800a32a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7b1b      	ldrb	r3, [r3, #12]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d102      	bne.n	800a31e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f80a 	bl	800a332 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4618      	mov	r0, r3
 800a324:	f008 f9f3 	bl	801270e <USB_DevDisconnect>

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a364:	f043 0303 	orr.w	r3, r3, #3
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
	...

0800a37c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a380:	4b05      	ldr	r3, [pc, #20]	@ (800a398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a384:	4a04      	ldr	r2, [pc, #16]	@ (800a398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a386:	f043 0301 	orr.w	r3, r3, #1
 800a38a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800a38c:	bf00      	nop
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	46020800 	.word	0x46020800

0800a39c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800a3a4:	4b39      	ldr	r3, [pc, #228]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a3ac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d10b      	bne.n	800a3ce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3bc:	d905      	bls.n	800a3ca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a3be:	4b33      	ldr	r3, [pc, #204]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	4a32      	ldr	r2, [pc, #200]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3c8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e057      	b.n	800a47e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3d4:	d90a      	bls.n	800a3ec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800a3d6:	4b2d      	ldr	r3, [pc, #180]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3e8:	60d3      	str	r3, [r2, #12]
 800a3ea:	e007      	b.n	800a3fc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800a3ec:	4b27      	ldr	r3, [pc, #156]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a3f4:	4925      	ldr	r1, [pc, #148]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a3fc:	4b24      	ldr	r3, [pc, #144]	@ (800a490 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a24      	ldr	r2, [pc, #144]	@ (800a494 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a402:	fba2 2303 	umull	r2, r3, r2, r3
 800a406:	099b      	lsrs	r3, r3, #6
 800a408:	2232      	movs	r2, #50	@ 0x32
 800a40a:	fb02 f303 	mul.w	r3, r2, r3
 800a40e:	4a21      	ldr	r2, [pc, #132]	@ (800a494 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a410:	fba2 2303 	umull	r2, r3, r2, r3
 800a414:	099b      	lsrs	r3, r3, #6
 800a416:	3301      	adds	r3, #1
 800a418:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a41a:	e002      	b.n	800a422 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3b01      	subs	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a422:	4b1a      	ldr	r3, [pc, #104]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <HAL_PWREx_ControlVoltageScaling+0x98>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1f3      	bne.n	800a41c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d01b      	beq.n	800a472 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a43a:	4b15      	ldr	r3, [pc, #84]	@ (800a490 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a15      	ldr	r2, [pc, #84]	@ (800a494 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a440:	fba2 2303 	umull	r2, r3, r2, r3
 800a444:	099b      	lsrs	r3, r3, #6
 800a446:	2232      	movs	r2, #50	@ 0x32
 800a448:	fb02 f303 	mul.w	r3, r2, r3
 800a44c:	4a11      	ldr	r2, [pc, #68]	@ (800a494 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a44e:	fba2 2303 	umull	r2, r3, r2, r3
 800a452:	099b      	lsrs	r3, r3, #6
 800a454:	3301      	adds	r3, #1
 800a456:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a458:	e002      	b.n	800a460 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a460:	4b0a      	ldr	r3, [pc, #40]	@ (800a48c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f3      	bne.n	800a45a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e000      	b.n	800a47e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	46020800 	.word	0x46020800
 800a490:	20000028 	.word	0x20000028
 800a494:	10624dd3 	.word	0x10624dd3

0800a498 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800a49c:	4b04      	ldr	r3, [pc, #16]	@ (800a4b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800a49e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	46020800 	.word	0x46020800

0800a4b4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a4bc:	4b22      	ldr	r3, [pc, #136]	@ (800a548 <HAL_PWREx_ConfigSupply+0x94>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a22      	ldr	r2, [pc, #136]	@ (800a54c <HAL_PWREx_ConfigSupply+0x98>)
 800a4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c6:	099b      	lsrs	r3, r3, #6
 800a4c8:	2232      	movs	r2, #50	@ 0x32
 800a4ca:	fb02 f303 	mul.w	r3, r2, r3
 800a4ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a54c <HAL_PWREx_ConfigSupply+0x98>)
 800a4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d4:	099b      	lsrs	r3, r3, #6
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d113      	bne.n	800a508 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a4e0:	4b1b      	ldr	r3, [pc, #108]	@ (800a550 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	4a1a      	ldr	r2, [pc, #104]	@ (800a550 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4e6:	f023 0302 	bic.w	r3, r3, #2
 800a4ea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a4ec:	e002      	b.n	800a4f4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a4f4:	4b16      	ldr	r3, [pc, #88]	@ (800a550 <HAL_PWREx_ConfigSupply+0x9c>)
 800a4f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4f8:	f003 0302 	and.w	r3, r3, #2
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d116      	bne.n	800a52e <HAL_PWREx_ConfigSupply+0x7a>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1f3      	bne.n	800a4ee <HAL_PWREx_ConfigSupply+0x3a>
 800a506:	e012      	b.n	800a52e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a508:	4b11      	ldr	r3, [pc, #68]	@ (800a550 <HAL_PWREx_ConfigSupply+0x9c>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	4a10      	ldr	r2, [pc, #64]	@ (800a550 <HAL_PWREx_ConfigSupply+0x9c>)
 800a50e:	f043 0302 	orr.w	r3, r3, #2
 800a512:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a514:	e002      	b.n	800a51c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3b01      	subs	r3, #1
 800a51a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a51c:	4b0c      	ldr	r3, [pc, #48]	@ (800a550 <HAL_PWREx_ConfigSupply+0x9c>)
 800a51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d102      	bne.n	800a52e <HAL_PWREx_ConfigSupply+0x7a>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f3      	bne.n	800a516 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e000      	b.n	800a53a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000028 	.word	0x20000028
 800a54c:	10624dd3 	.word	0x10624dd3
 800a550:	46020800 	.word	0x46020800

0800a554 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800a558:	4b05      	ldr	r3, [pc, #20]	@ (800a570 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	4a04      	ldr	r2, [pc, #16]	@ (800a570 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a55e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a562:	6113      	str	r3, [r2, #16]
}
 800a564:	bf00      	nop
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	46020800 	.word	0x46020800

0800a574 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800a578:	4b05      	ldr	r3, [pc, #20]	@ (800a590 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	4a04      	ldr	r2, [pc, #16]	@ (800a590 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a57e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a582:	6113      	str	r3, [r2, #16]
}
 800a584:	bf00      	nop
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	46020800 	.word	0x46020800

0800a594 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800a598:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <HAL_PWREx_EnableVddA+0x1c>)
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	4a04      	ldr	r2, [pc, #16]	@ (800a5b0 <HAL_PWREx_EnableVddA+0x1c>)
 800a59e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5a2:	6113      	str	r3, [r2, #16]
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	46020800 	.word	0x46020800

0800a5b4 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800a5ba:	f7ff ff6d 	bl	800a498 <HAL_PWREx_GetVoltageRange>
 800a5be:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5c6:	d003      	beq.n	800a5d0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5ce:	d107      	bne.n	800a5e0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800a5d0:	4b06      	ldr	r3, [pc, #24]	@ (800a5ec <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	4a05      	ldr	r2, [pc, #20]	@ (800a5ec <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a5d6:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800a5da:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e000      	b.n	800a5e2 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	46020800 	.word	0x46020800

0800a5f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08e      	sub	sp, #56	@ 0x38
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	f000 bec8 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a60a:	4b99      	ldr	r3, [pc, #612]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	f003 030c 	and.w	r3, r3, #12
 800a612:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a614:	4b96      	ldr	r3, [pc, #600]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 816c 	beq.w	800a904 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <HAL_RCC_OscConfig+0x52>
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	2b0c      	cmp	r3, #12
 800a636:	f040 80de 	bne.w	800a7f6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	f040 80da 	bne.w	800a7f6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d102      	bne.n	800a650 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	f000 bea5 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a654:	4b86      	ldr	r3, [pc, #536]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d004      	beq.n	800a66a <HAL_RCC_OscConfig+0x7a>
 800a660:	4b83      	ldr	r3, [pc, #524]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a668:	e005      	b.n	800a676 <HAL_RCC_OscConfig+0x86>
 800a66a:	4b81      	ldr	r3, [pc, #516]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a66c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a670:	041b      	lsls	r3, r3, #16
 800a672:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a676:	4293      	cmp	r3, r2
 800a678:	d255      	bcs.n	800a726 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a684:	4618      	mov	r0, r3
 800a686:	f001 f9d9 	bl	800ba3c <RCC_SetFlashLatencyFromMSIRange>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	f000 be82 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a696:	4b76      	ldr	r3, [pc, #472]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	4a75      	ldr	r2, [pc, #468]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a69c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6a0:	6093      	str	r3, [r2, #8]
 800a6a2:	4b73      	ldr	r3, [pc, #460]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ae:	4970      	ldr	r1, [pc, #448]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a6bc:	d309      	bcc.n	800a6d2 <HAL_RCC_OscConfig+0xe2>
 800a6be:	4b6c      	ldr	r3, [pc, #432]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f023 021f 	bic.w	r2, r3, #31
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	4969      	ldr	r1, [pc, #420]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60cb      	str	r3, [r1, #12]
 800a6d0:	e07e      	b.n	800a7d0 <HAL_RCC_OscConfig+0x1e0>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da0a      	bge.n	800a6f0 <HAL_RCC_OscConfig+0x100>
 800a6da:	4b65      	ldr	r3, [pc, #404]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	015b      	lsls	r3, r3, #5
 800a6e8:	4961      	ldr	r1, [pc, #388]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60cb      	str	r3, [r1, #12]
 800a6ee:	e06f      	b.n	800a7d0 <HAL_RCC_OscConfig+0x1e0>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6f8:	d30a      	bcc.n	800a710 <HAL_RCC_OscConfig+0x120>
 800a6fa:	4b5d      	ldr	r3, [pc, #372]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	029b      	lsls	r3, r3, #10
 800a708:	4959      	ldr	r1, [pc, #356]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60cb      	str	r3, [r1, #12]
 800a70e:	e05f      	b.n	800a7d0 <HAL_RCC_OscConfig+0x1e0>
 800a710:	4b57      	ldr	r3, [pc, #348]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	03db      	lsls	r3, r3, #15
 800a71e:	4954      	ldr	r1, [pc, #336]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a720:	4313      	orrs	r3, r2
 800a722:	60cb      	str	r3, [r1, #12]
 800a724:	e054      	b.n	800a7d0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a726:	4b52      	ldr	r3, [pc, #328]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	4a51      	ldr	r2, [pc, #324]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a72c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a730:	6093      	str	r3, [r2, #8]
 800a732:	4b4f      	ldr	r3, [pc, #316]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	494c      	ldr	r1, [pc, #304]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a740:	4313      	orrs	r3, r2
 800a742:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a748:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a74c:	d309      	bcc.n	800a762 <HAL_RCC_OscConfig+0x172>
 800a74e:	4b48      	ldr	r3, [pc, #288]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	f023 021f 	bic.w	r2, r3, #31
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	4945      	ldr	r1, [pc, #276]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60cb      	str	r3, [r1, #12]
 800a760:	e028      	b.n	800a7b4 <HAL_RCC_OscConfig+0x1c4>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	da0a      	bge.n	800a780 <HAL_RCC_OscConfig+0x190>
 800a76a:	4b41      	ldr	r3, [pc, #260]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	015b      	lsls	r3, r3, #5
 800a778:	493d      	ldr	r1, [pc, #244]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60cb      	str	r3, [r1, #12]
 800a77e:	e019      	b.n	800a7b4 <HAL_RCC_OscConfig+0x1c4>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a788:	d30a      	bcc.n	800a7a0 <HAL_RCC_OscConfig+0x1b0>
 800a78a:	4b39      	ldr	r3, [pc, #228]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	029b      	lsls	r3, r3, #10
 800a798:	4935      	ldr	r1, [pc, #212]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60cb      	str	r3, [r1, #12]
 800a79e:	e009      	b.n	800a7b4 <HAL_RCC_OscConfig+0x1c4>
 800a7a0:	4b33      	ldr	r3, [pc, #204]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	03db      	lsls	r3, r3, #15
 800a7ae:	4930      	ldr	r1, [pc, #192]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f001 f93c 	bl	800ba3c <RCC_SetFlashLatencyFromMSIRange>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f000 bde5 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a7d0:	f001 f8de 	bl	800b990 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a7d4:	4b27      	ldr	r3, [pc, #156]	@ (800a874 <HAL_RCC_OscConfig+0x284>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f8 ffdb 	bl	8003794 <HAL_InitTick>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800a7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 808a 	beq.w	800a902 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800a7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7f2:	f000 bdd2 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d066      	beq.n	800a8cc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a1b      	ldr	r2, [pc, #108]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a804:	f043 0301 	orr.w	r3, r3, #1
 800a808:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a80a:	f7f9 f84d 	bl	80038a8 <HAL_GetTick>
 800a80e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a810:	e009      	b.n	800a826 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a812:	f7f9 f849 	bl	80038a8 <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d902      	bls.n	800a826 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	f000 bdba 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a826:	4b12      	ldr	r3, [pc, #72]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0ef      	beq.n	800a812 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a832:	4b0f      	ldr	r3, [pc, #60]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	4a0e      	ldr	r2, [pc, #56]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a838:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a83c:	6093      	str	r3, [r2, #8]
 800a83e:	4b0c      	ldr	r3, [pc, #48]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84a:	4909      	ldr	r1, [pc, #36]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a854:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a858:	d30e      	bcc.n	800a878 <HAL_RCC_OscConfig+0x288>
 800a85a:	4b05      	ldr	r3, [pc, #20]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	f023 021f 	bic.w	r2, r3, #31
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	4902      	ldr	r1, [pc, #8]	@ (800a870 <HAL_RCC_OscConfig+0x280>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	60cb      	str	r3, [r1, #12]
 800a86c:	e04a      	b.n	800a904 <HAL_RCC_OscConfig+0x314>
 800a86e:	bf00      	nop
 800a870:	46020c00 	.word	0x46020c00
 800a874:	2000002c 	.word	0x2000002c
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	da0a      	bge.n	800a896 <HAL_RCC_OscConfig+0x2a6>
 800a880:	4b98      	ldr	r3, [pc, #608]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	015b      	lsls	r3, r3, #5
 800a88e:	4995      	ldr	r1, [pc, #596]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a890:	4313      	orrs	r3, r2
 800a892:	60cb      	str	r3, [r1, #12]
 800a894:	e036      	b.n	800a904 <HAL_RCC_OscConfig+0x314>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a89e:	d30a      	bcc.n	800a8b6 <HAL_RCC_OscConfig+0x2c6>
 800a8a0:	4b90      	ldr	r3, [pc, #576]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	029b      	lsls	r3, r3, #10
 800a8ae:	498d      	ldr	r1, [pc, #564]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60cb      	str	r3, [r1, #12]
 800a8b4:	e026      	b.n	800a904 <HAL_RCC_OscConfig+0x314>
 800a8b6:	4b8b      	ldr	r3, [pc, #556]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	03db      	lsls	r3, r3, #15
 800a8c4:	4987      	ldr	r1, [pc, #540]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60cb      	str	r3, [r1, #12]
 800a8ca:	e01b      	b.n	800a904 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a8cc:	4b85      	ldr	r3, [pc, #532]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a84      	ldr	r2, [pc, #528]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a8d2:	f023 0301 	bic.w	r3, r3, #1
 800a8d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a8d8:	f7f8 ffe6 	bl	80038a8 <HAL_GetTick>
 800a8dc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a8de:	e009      	b.n	800a8f4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a8e0:	f7f8 ffe2 	bl	80038a8 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d902      	bls.n	800a8f4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	f000 bd53 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a8f4:	4b7b      	ldr	r3, [pc, #492]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1ef      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x2f0>
 800a900:	e000      	b.n	800a904 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a902:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 808b 	beq.w	800aa28 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	2b08      	cmp	r3, #8
 800a916:	d005      	beq.n	800a924 <HAL_RCC_OscConfig+0x334>
 800a918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91a:	2b0c      	cmp	r3, #12
 800a91c:	d109      	bne.n	800a932 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a920:	2b03      	cmp	r3, #3
 800a922:	d106      	bne.n	800a932 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d17d      	bne.n	800aa28 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	f000 bd34 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a93a:	d106      	bne.n	800a94a <HAL_RCC_OscConfig+0x35a>
 800a93c:	4b69      	ldr	r3, [pc, #420]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a68      	ldr	r2, [pc, #416]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	e041      	b.n	800a9ce <HAL_RCC_OscConfig+0x3de>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a952:	d112      	bne.n	800a97a <HAL_RCC_OscConfig+0x38a>
 800a954:	4b63      	ldr	r3, [pc, #396]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a62      	ldr	r2, [pc, #392]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a95a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	4b60      	ldr	r3, [pc, #384]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a5f      	ldr	r2, [pc, #380]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a966:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	4b5d      	ldr	r3, [pc, #372]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a5c      	ldr	r2, [pc, #368]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	e029      	b.n	800a9ce <HAL_RCC_OscConfig+0x3de>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a982:	d112      	bne.n	800a9aa <HAL_RCC_OscConfig+0x3ba>
 800a984:	4b57      	ldr	r3, [pc, #348]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a56      	ldr	r2, [pc, #344]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a98a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	4b54      	ldr	r3, [pc, #336]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a53      	ldr	r2, [pc, #332]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	4b51      	ldr	r3, [pc, #324]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a50      	ldr	r2, [pc, #320]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	e011      	b.n	800a9ce <HAL_RCC_OscConfig+0x3de>
 800a9aa:	4b4e      	ldr	r3, [pc, #312]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a4d      	ldr	r2, [pc, #308]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	4b4b      	ldr	r3, [pc, #300]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a4a      	ldr	r2, [pc, #296]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9c0:	6013      	str	r3, [r2, #0]
 800a9c2:	4b48      	ldr	r3, [pc, #288]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a47      	ldr	r2, [pc, #284]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a9cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d014      	beq.n	800aa00 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a9d6:	f7f8 ff67 	bl	80038a8 <HAL_GetTick>
 800a9da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9dc:	e009      	b.n	800a9f2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9de:	f7f8 ff63 	bl	80038a8 <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	2b64      	cmp	r3, #100	@ 0x64
 800a9ea:	d902      	bls.n	800a9f2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	f000 bcd4 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9f2:	4b3c      	ldr	r3, [pc, #240]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0ef      	beq.n	800a9de <HAL_RCC_OscConfig+0x3ee>
 800a9fe:	e013      	b.n	800aa28 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800aa00:	f7f8 ff52 	bl	80038a8 <HAL_GetTick>
 800aa04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa06:	e009      	b.n	800aa1c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa08:	f7f8 ff4e 	bl	80038a8 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b64      	cmp	r3, #100	@ 0x64
 800aa14:	d902      	bls.n	800aa1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	f000 bcbf 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa1c:	4b31      	ldr	r3, [pc, #196]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1ef      	bne.n	800aa08 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d05f      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800aa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d005      	beq.n	800aa46 <HAL_RCC_OscConfig+0x456>
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	2b0c      	cmp	r3, #12
 800aa3e:	d114      	bne.n	800aa6a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800aa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d111      	bne.n	800aa6a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f000 bca3 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800aa54:	4b23      	ldr	r3, [pc, #140]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	041b      	lsls	r3, r3, #16
 800aa62:	4920      	ldr	r1, [pc, #128]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa68:	e044      	b.n	800aaf4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d024      	beq.n	800aabc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800aa72:	4b1c      	ldr	r3, [pc, #112]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a1b      	ldr	r2, [pc, #108]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aa78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aa7e:	f7f8 ff13 	bl	80038a8 <HAL_GetTick>
 800aa82:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa84:	e009      	b.n	800aa9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa86:	f7f8 ff0f 	bl	80038a8 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d902      	bls.n	800aa9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	f000 bc80 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa9a:	4b12      	ldr	r3, [pc, #72]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0ef      	beq.n	800aa86 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800aaa6:	4b0f      	ldr	r3, [pc, #60]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	041b      	lsls	r3, r3, #16
 800aab4:	490b      	ldr	r1, [pc, #44]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	610b      	str	r3, [r1, #16]
 800aaba:	e01b      	b.n	800aaf4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800aabc:	4b09      	ldr	r3, [pc, #36]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a08      	ldr	r2, [pc, #32]	@ (800aae4 <HAL_RCC_OscConfig+0x4f4>)
 800aac2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aac6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aac8:	f7f8 feee 	bl	80038a8 <HAL_GetTick>
 800aacc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aace:	e00b      	b.n	800aae8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aad0:	f7f8 feea 	bl	80038a8 <HAL_GetTick>
 800aad4:	4602      	mov	r2, r0
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d904      	bls.n	800aae8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	f000 bc5b 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
 800aae4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aae8:	4baf      	ldr	r3, [pc, #700]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1ed      	bne.n	800aad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80c8 	beq.w	800ac92 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800ab02:	2300      	movs	r3, #0
 800ab04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab08:	4ba7      	ldr	r3, [pc, #668]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ab0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d111      	bne.n	800ab3a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab16:	4ba4      	ldr	r3, [pc, #656]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ab18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab1c:	4aa2      	ldr	r2, [pc, #648]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ab1e:	f043 0304 	orr.w	r3, r3, #4
 800ab22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ab26:	4ba0      	ldr	r3, [pc, #640]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ab28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	617b      	str	r3, [r7, #20]
 800ab32:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800ab34:	2301      	movs	r3, #1
 800ab36:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab3a:	4b9c      	ldr	r3, [pc, #624]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d119      	bne.n	800ab7a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ab46:	4b99      	ldr	r3, [pc, #612]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800ab48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4a:	4a98      	ldr	r2, [pc, #608]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800ab4c:	f043 0301 	orr.w	r3, r3, #1
 800ab50:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab52:	f7f8 fea9 	bl	80038a8 <HAL_GetTick>
 800ab56:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab58:	e009      	b.n	800ab6e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab5a:	f7f8 fea5 	bl	80038a8 <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d902      	bls.n	800ab6e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	f000 bc16 	b.w	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab6e:	4b8f      	ldr	r3, [pc, #572]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800ab70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0ef      	beq.n	800ab5a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d05f      	beq.n	800ac42 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800ab82:	4b89      	ldr	r3, [pc, #548]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ab84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab88:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	699a      	ldr	r2, [r3, #24]
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d037      	beq.n	800ac08 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d006      	beq.n	800abb0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e3f4      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d01b      	beq.n	800abf2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800abba:	4b7b      	ldr	r3, [pc, #492]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800abbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abc0:	4a79      	ldr	r2, [pc, #484]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800abc2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800abc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800abca:	f7f8 fe6d 	bl	80038a8 <HAL_GetTick>
 800abce:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800abd0:	e008      	b.n	800abe4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abd2:	f7f8 fe69 	bl	80038a8 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b05      	cmp	r3, #5
 800abde:	d901      	bls.n	800abe4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e3da      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800abe4:	4b70      	ldr	r3, [pc, #448]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800abe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1ef      	bne.n	800abd2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800abf2:	4b6d      	ldr	r3, [pc, #436]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800abf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abf8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	4969      	ldr	r1, [pc, #420]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac02:	4313      	orrs	r3, r2
 800ac04:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800ac08:	4b67      	ldr	r3, [pc, #412]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac0e:	4a66      	ldr	r2, [pc, #408]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800ac18:	f7f8 fe46 	bl	80038a8 <HAL_GetTick>
 800ac1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800ac1e:	e008      	b.n	800ac32 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac20:	f7f8 fe42 	bl	80038a8 <HAL_GetTick>
 800ac24:	4602      	mov	r2, r0
 800ac26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	d901      	bls.n	800ac32 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e3b3      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800ac32:	4b5d      	ldr	r3, [pc, #372]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0ef      	beq.n	800ac20 <HAL_RCC_OscConfig+0x630>
 800ac40:	e01b      	b.n	800ac7a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800ac42:	4b59      	ldr	r3, [pc, #356]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac48:	4a57      	ldr	r2, [pc, #348]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac4a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800ac4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800ac52:	f7f8 fe29 	bl	80038a8 <HAL_GetTick>
 800ac56:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ac58:	e008      	b.n	800ac6c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac5a:	f7f8 fe25 	bl	80038a8 <HAL_GetTick>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	2b05      	cmp	r3, #5
 800ac66:	d901      	bls.n	800ac6c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e396      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ac6c:	4b4e      	ldr	r3, [pc, #312]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1ef      	bne.n	800ac5a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac7a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d107      	bne.n	800ac92 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac82:	4b49      	ldr	r3, [pc, #292]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac88:	4a47      	ldr	r2, [pc, #284]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ac8a:	f023 0304 	bic.w	r3, r3, #4
 800ac8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0304 	and.w	r3, r3, #4
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 8111 	beq.w	800aec2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800aca0:	2300      	movs	r3, #0
 800aca2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aca6:	4b40      	ldr	r3, [pc, #256]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800aca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d111      	bne.n	800acd8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acb4:	4b3c      	ldr	r3, [pc, #240]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800acb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acba:	4a3b      	ldr	r2, [pc, #236]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800acbc:	f043 0304 	orr.w	r3, r3, #4
 800acc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800acc4:	4b38      	ldr	r3, [pc, #224]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800acc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	613b      	str	r3, [r7, #16]
 800acd0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800acd2:	2301      	movs	r3, #1
 800acd4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800acd8:	4b34      	ldr	r3, [pc, #208]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800acda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acdc:	f003 0301 	and.w	r3, r3, #1
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d118      	bne.n	800ad16 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ace4:	4b31      	ldr	r3, [pc, #196]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800ace6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace8:	4a30      	ldr	r2, [pc, #192]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acf0:	f7f8 fdda 	bl	80038a8 <HAL_GetTick>
 800acf4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800acf6:	e008      	b.n	800ad0a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acf8:	f7f8 fdd6 	bl	80038a8 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d901      	bls.n	800ad0a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e347      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ad0a:	4b28      	ldr	r3, [pc, #160]	@ (800adac <HAL_RCC_OscConfig+0x7bc>)
 800ad0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d0f0      	beq.n	800acf8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01f      	beq.n	800ad62 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 0304 	and.w	r3, r3, #4
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d010      	beq.n	800ad50 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ad2e:	4b1e      	ldr	r3, [pc, #120]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad34:	4a1c      	ldr	r2, [pc, #112]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad36:	f043 0304 	orr.w	r3, r3, #4
 800ad3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad3e:	4b1a      	ldr	r3, [pc, #104]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad44:	4a18      	ldr	r2, [pc, #96]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ad4e:	e018      	b.n	800ad82 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad50:	4b15      	ldr	r3, [pc, #84]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad56:	4a14      	ldr	r2, [pc, #80]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad58:	f043 0301 	orr.w	r3, r3, #1
 800ad5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ad60:	e00f      	b.n	800ad82 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad62:	4b11      	ldr	r3, [pc, #68]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad68:	4a0f      	ldr	r2, [pc, #60]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad6a:	f023 0301 	bic.w	r3, r3, #1
 800ad6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ad72:	4b0d      	ldr	r3, [pc, #52]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad78:	4a0b      	ldr	r2, [pc, #44]	@ (800ada8 <HAL_RCC_OscConfig+0x7b8>)
 800ad7a:	f023 0304 	bic.w	r3, r3, #4
 800ad7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d057      	beq.n	800ae3a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800ad8a:	f7f8 fd8d 	bl	80038a8 <HAL_GetTick>
 800ad8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad90:	e00e      	b.n	800adb0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad92:	f7f8 fd89 	bl	80038a8 <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d905      	bls.n	800adb0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e2f8      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
 800ada8:	46020c00 	.word	0x46020c00
 800adac:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800adb0:	4b9c      	ldr	r3, [pc, #624]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800adb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adb6:	f003 0302 	and.w	r3, r3, #2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0e9      	beq.n	800ad92 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d01b      	beq.n	800ae02 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800adca:	4b96      	ldr	r3, [pc, #600]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800adcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800add0:	4a94      	ldr	r2, [pc, #592]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800add2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800adda:	e00a      	b.n	800adf2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800addc:	f7f8 fd64 	bl	80038a8 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adea:	4293      	cmp	r3, r2
 800adec:	d901      	bls.n	800adf2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e2d3      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800adf2:	4b8c      	ldr	r3, [pc, #560]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800adf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d0ed      	beq.n	800addc <HAL_RCC_OscConfig+0x7ec>
 800ae00:	e053      	b.n	800aeaa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ae02:	4b88      	ldr	r3, [pc, #544]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae08:	4a86      	ldr	r2, [pc, #536]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ae12:	e00a      	b.n	800ae2a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae14:	f7f8 fd48 	bl	80038a8 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d901      	bls.n	800ae2a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e2b7      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ae2a:	4b7e      	ldr	r3, [pc, #504]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1ed      	bne.n	800ae14 <HAL_RCC_OscConfig+0x824>
 800ae38:	e037      	b.n	800aeaa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800ae3a:	f7f8 fd35 	bl	80038a8 <HAL_GetTick>
 800ae3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae40:	e00a      	b.n	800ae58 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae42:	f7f8 fd31 	bl	80038a8 <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d901      	bls.n	800ae58 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e2a0      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae58:	4b72      	ldr	r3, [pc, #456]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae5e:	f003 0302 	and.w	r3, r3, #2
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1ed      	bne.n	800ae42 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800ae66:	4b6f      	ldr	r3, [pc, #444]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01a      	beq.n	800aeaa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ae74:	4b6b      	ldr	r3, [pc, #428]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae7a:	4a6a      	ldr	r2, [pc, #424]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ae84:	e00a      	b.n	800ae9c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae86:	f7f8 fd0f 	bl	80038a8 <HAL_GetTick>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d901      	bls.n	800ae9c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e27e      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ae9c:	4b61      	ldr	r3, [pc, #388]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800ae9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1ed      	bne.n	800ae86 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aeaa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d107      	bne.n	800aec2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aeb2:	4b5c      	ldr	r3, [pc, #368]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800aeb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeb8:	4a5a      	ldr	r2, [pc, #360]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800aeba:	f023 0304 	bic.w	r3, r3, #4
 800aebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d036      	beq.n	800af3c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d019      	beq.n	800af0a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800aed6:	4b53      	ldr	r3, [pc, #332]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a52      	ldr	r2, [pc, #328]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800aedc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aee0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aee2:	f7f8 fce1 	bl	80038a8 <HAL_GetTick>
 800aee6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800aee8:	e008      	b.n	800aefc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aeea:	f7f8 fcdd 	bl	80038a8 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d901      	bls.n	800aefc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e24e      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800aefc:	4b49      	ldr	r3, [pc, #292]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0f0      	beq.n	800aeea <HAL_RCC_OscConfig+0x8fa>
 800af08:	e018      	b.n	800af3c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800af0a:	4b46      	ldr	r3, [pc, #280]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a45      	ldr	r2, [pc, #276]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af14:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800af16:	f7f8 fcc7 	bl	80038a8 <HAL_GetTick>
 800af1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800af1c:	e008      	b.n	800af30 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af1e:	f7f8 fcc3 	bl	80038a8 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e234      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800af30:	4b3c      	ldr	r3, [pc, #240]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1f0      	bne.n	800af1e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af44:	2b00      	cmp	r3, #0
 800af46:	d036      	beq.n	800afb6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d019      	beq.n	800af84 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800af50:	4b34      	ldr	r3, [pc, #208]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a33      	ldr	r2, [pc, #204]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800af5c:	f7f8 fca4 	bl	80038a8 <HAL_GetTick>
 800af60:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800af62:	e008      	b.n	800af76 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800af64:	f7f8 fca0 	bl	80038a8 <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d901      	bls.n	800af76 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	e211      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800af76:	4b2b      	ldr	r3, [pc, #172]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0f0      	beq.n	800af64 <HAL_RCC_OscConfig+0x974>
 800af82:	e018      	b.n	800afb6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800af84:	4b27      	ldr	r3, [pc, #156]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a26      	ldr	r2, [pc, #152]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800af8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800af90:	f7f8 fc8a 	bl	80038a8 <HAL_GetTick>
 800af94:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800af96:	e008      	b.n	800afaa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800af98:	f7f8 fc86 	bl	80038a8 <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d901      	bls.n	800afaa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e1f7      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800afaa:	4b1e      	ldr	r3, [pc, #120]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1f0      	bne.n	800af98 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d07f      	beq.n	800b0c2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d062      	beq.n	800b090 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800afca:	4b16      	ldr	r3, [pc, #88]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	4a15      	ldr	r2, [pc, #84]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800afd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800afd4:	6093      	str	r3, [r2, #8]
 800afd6:	4b13      	ldr	r3, [pc, #76]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe2:	4910      	ldr	r1, [pc, #64]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800aff0:	d309      	bcc.n	800b006 <HAL_RCC_OscConfig+0xa16>
 800aff2:	4b0c      	ldr	r3, [pc, #48]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f023 021f 	bic.w	r2, r3, #31
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	4909      	ldr	r1, [pc, #36]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800b000:	4313      	orrs	r3, r2
 800b002:	60cb      	str	r3, [r1, #12]
 800b004:	e02a      	b.n	800b05c <HAL_RCC_OscConfig+0xa6c>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	da0c      	bge.n	800b028 <HAL_RCC_OscConfig+0xa38>
 800b00e:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	015b      	lsls	r3, r3, #5
 800b01c:	4901      	ldr	r1, [pc, #4]	@ (800b024 <HAL_RCC_OscConfig+0xa34>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	60cb      	str	r3, [r1, #12]
 800b022:	e01b      	b.n	800b05c <HAL_RCC_OscConfig+0xa6c>
 800b024:	46020c00 	.word	0x46020c00
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b030:	d30a      	bcc.n	800b048 <HAL_RCC_OscConfig+0xa58>
 800b032:	4ba1      	ldr	r3, [pc, #644]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	029b      	lsls	r3, r3, #10
 800b040:	499d      	ldr	r1, [pc, #628]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b042:	4313      	orrs	r3, r2
 800b044:	60cb      	str	r3, [r1, #12]
 800b046:	e009      	b.n	800b05c <HAL_RCC_OscConfig+0xa6c>
 800b048:	4b9b      	ldr	r3, [pc, #620]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	03db      	lsls	r3, r3, #15
 800b056:	4998      	ldr	r1, [pc, #608]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b058:	4313      	orrs	r3, r2
 800b05a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800b05c:	4b96      	ldr	r3, [pc, #600]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a95      	ldr	r2, [pc, #596]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b062:	f043 0310 	orr.w	r3, r3, #16
 800b066:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b068:	f7f8 fc1e 	bl	80038a8 <HAL_GetTick>
 800b06c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800b06e:	e008      	b.n	800b082 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800b070:	f7f8 fc1a 	bl	80038a8 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d901      	bls.n	800b082 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e18b      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800b082:	4b8d      	ldr	r3, [pc, #564]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0f0      	beq.n	800b070 <HAL_RCC_OscConfig+0xa80>
 800b08e:	e018      	b.n	800b0c2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800b090:	4b89      	ldr	r3, [pc, #548]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a88      	ldr	r2, [pc, #544]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b096:	f023 0310 	bic.w	r3, r3, #16
 800b09a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b09c:	f7f8 fc04 	bl	80038a8 <HAL_GetTick>
 800b0a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800b0a2:	e008      	b.n	800b0b6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800b0a4:	f7f8 fc00 	bl	80038a8 <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d901      	bls.n	800b0b6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	e171      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800b0b6:	4b80      	ldr	r3, [pc, #512]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1f0      	bne.n	800b0a4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 8166 	beq.w	800b398 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b0d2:	4b79      	ldr	r3, [pc, #484]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f003 030c 	and.w	r3, r3, #12
 800b0da:	2b0c      	cmp	r3, #12
 800b0dc:	f000 80f2 	beq.w	800b2c4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	f040 80c5 	bne.w	800b274 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b0ea:	4b73      	ldr	r3, [pc, #460]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a72      	ldr	r2, [pc, #456]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b0f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b0f6:	f7f8 fbd7 	bl	80038a8 <HAL_GetTick>
 800b0fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b0fc:	e008      	b.n	800b110 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0fe:	f7f8 fbd3 	bl	80038a8 <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d901      	bls.n	800b110 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e144      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b110:	4b69      	ldr	r3, [pc, #420]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1f0      	bne.n	800b0fe <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b11c:	4b66      	ldr	r3, [pc, #408]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b11e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b122:	f003 0304 	and.w	r3, r3, #4
 800b126:	2b00      	cmp	r3, #0
 800b128:	d111      	bne.n	800b14e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800b12a:	4b63      	ldr	r3, [pc, #396]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b12c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b130:	4a61      	ldr	r2, [pc, #388]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b132:	f043 0304 	orr.w	r3, r3, #4
 800b136:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b13a:	4b5f      	ldr	r3, [pc, #380]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b13c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800b148:	2301      	movs	r3, #1
 800b14a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800b14e:	4b5b      	ldr	r3, [pc, #364]	@ (800b2bc <HAL_RCC_OscConfig+0xccc>)
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b156:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b15a:	d102      	bne.n	800b162 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800b15c:	2301      	movs	r3, #1
 800b15e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b162:	4b56      	ldr	r3, [pc, #344]	@ (800b2bc <HAL_RCC_OscConfig+0xccc>)
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	4a55      	ldr	r2, [pc, #340]	@ (800b2bc <HAL_RCC_OscConfig+0xccc>)
 800b168:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b16c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800b16e:	4b52      	ldr	r3, [pc, #328]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b182:	3a01      	subs	r2, #1
 800b184:	0212      	lsls	r2, r2, #8
 800b186:	4311      	orrs	r1, r2
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b18c:	430a      	orrs	r2, r1
 800b18e:	494a      	ldr	r1, [pc, #296]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b190:	4313      	orrs	r3, r2
 800b192:	628b      	str	r3, [r1, #40]	@ 0x28
 800b194:	4b48      	ldr	r3, [pc, #288]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b198:	4b49      	ldr	r3, [pc, #292]	@ (800b2c0 <HAL_RCC_OscConfig+0xcd0>)
 800b19a:	4013      	ands	r3, r2
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b1a0:	3a01      	subs	r2, #1
 800b1a2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b1aa:	3a01      	subs	r2, #1
 800b1ac:	0252      	lsls	r2, r2, #9
 800b1ae:	b292      	uxth	r2, r2
 800b1b0:	4311      	orrs	r1, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b1b6:	3a01      	subs	r2, #1
 800b1b8:	0412      	lsls	r2, r2, #16
 800b1ba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b1be:	4311      	orrs	r1, r2
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b1c4:	3a01      	subs	r2, #1
 800b1c6:	0612      	lsls	r2, r2, #24
 800b1c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	493a      	ldr	r1, [pc, #232]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800b1d4:	4b38      	ldr	r3, [pc, #224]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d8:	4a37      	ldr	r2, [pc, #220]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b1da:	f023 0310 	bic.w	r3, r3, #16
 800b1de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1e4:	4a34      	ldr	r2, [pc, #208]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b1e6:	00db      	lsls	r3, r3, #3
 800b1e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b1ea:	4b33      	ldr	r3, [pc, #204]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ee:	4a32      	ldr	r2, [pc, #200]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b1f0:	f043 0310 	orr.w	r3, r3, #16
 800b1f4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800b1f6:	4b30      	ldr	r3, [pc, #192]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fa:	f023 020c 	bic.w	r2, r3, #12
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b202:	492d      	ldr	r1, [pc, #180]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b204:	4313      	orrs	r3, r2
 800b206:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800b208:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d105      	bne.n	800b21c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b210:	4b2a      	ldr	r3, [pc, #168]	@ (800b2bc <HAL_RCC_OscConfig+0xccc>)
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	4a29      	ldr	r2, [pc, #164]	@ (800b2bc <HAL_RCC_OscConfig+0xccc>)
 800b216:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b21a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800b21c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b220:	2b01      	cmp	r3, #1
 800b222:	d107      	bne.n	800b234 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800b224:	4b24      	ldr	r3, [pc, #144]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b22a:	4a23      	ldr	r2, [pc, #140]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b22c:	f023 0304 	bic.w	r3, r3, #4
 800b230:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800b234:	4b20      	ldr	r3, [pc, #128]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a1f      	ldr	r2, [pc, #124]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b23a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b23e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b240:	f7f8 fb32 	bl	80038a8 <HAL_GetTick>
 800b244:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b248:	f7f8 fb2e 	bl	80038a8 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b02      	cmp	r3, #2
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e09f      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b25a:	4b17      	ldr	r3, [pc, #92]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0f0      	beq.n	800b248 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b266:	4b14      	ldr	r3, [pc, #80]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26a:	4a13      	ldr	r2, [pc, #76]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b26c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b270:	6293      	str	r3, [r2, #40]	@ 0x28
 800b272:	e091      	b.n	800b398 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b274:	4b10      	ldr	r3, [pc, #64]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a0f      	ldr	r2, [pc, #60]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b27a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b27e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b280:	f7f8 fb12 	bl	80038a8 <HAL_GetTick>
 800b284:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b286:	e008      	b.n	800b29a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b288:	f7f8 fb0e 	bl	80038a8 <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	2b02      	cmp	r3, #2
 800b294:	d901      	bls.n	800b29a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e07f      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b29a:	4b07      	ldr	r3, [pc, #28]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1f0      	bne.n	800b288 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800b2a6:	4b04      	ldr	r3, [pc, #16]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2aa:	4a03      	ldr	r2, [pc, #12]	@ (800b2b8 <HAL_RCC_OscConfig+0xcc8>)
 800b2ac:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b2b0:	f023 0303 	bic.w	r3, r3, #3
 800b2b4:	6293      	str	r3, [r2, #40]	@ 0x28
 800b2b6:	e06f      	b.n	800b398 <HAL_RCC_OscConfig+0xda8>
 800b2b8:	46020c00 	.word	0x46020c00
 800b2bc:	46020800 	.word	0x46020800
 800b2c0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800b2c4:	4b37      	ldr	r3, [pc, #220]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b2ca:	4b36      	ldr	r3, [pc, #216]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b2cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ce:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d039      	beq.n	800b34c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	f003 0203 	and.w	r2, r3, #3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d132      	bne.n	800b34c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	0a1b      	lsrs	r3, r3, #8
 800b2ea:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d129      	bne.n	800b34c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b302:	429a      	cmp	r2, r3
 800b304:	d122      	bne.n	800b34c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b310:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b312:	429a      	cmp	r2, r3
 800b314:	d11a      	bne.n	800b34c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	0a5b      	lsrs	r3, r3, #9
 800b31a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b322:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b324:	429a      	cmp	r2, r3
 800b326:	d111      	bne.n	800b34c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	0c1b      	lsrs	r3, r3, #16
 800b32c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b334:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b336:	429a      	cmp	r2, r3
 800b338:	d108      	bne.n	800b34c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	0e1b      	lsrs	r3, r3, #24
 800b33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b346:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b348:	429a      	cmp	r2, r3
 800b34a:	d001      	beq.n	800b350 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e024      	b.n	800b39a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b350:	4b14      	ldr	r3, [pc, #80]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b354:	08db      	lsrs	r3, r3, #3
 800b356:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b35e:	429a      	cmp	r2, r3
 800b360:	d01a      	beq.n	800b398 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800b362:	4b10      	ldr	r3, [pc, #64]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b366:	4a0f      	ldr	r2, [pc, #60]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b368:	f023 0310 	bic.w	r3, r3, #16
 800b36c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b36e:	f7f8 fa9b 	bl	80038a8 <HAL_GetTick>
 800b372:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800b374:	bf00      	nop
 800b376:	f7f8 fa97 	bl	80038a8 <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37e:	4293      	cmp	r3, r2
 800b380:	d0f9      	beq.n	800b376 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b386:	4a07      	ldr	r2, [pc, #28]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b38c:	4b05      	ldr	r3, [pc, #20]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b390:	4a04      	ldr	r2, [pc, #16]	@ (800b3a4 <HAL_RCC_OscConfig+0xdb4>)
 800b392:	f043 0310 	orr.w	r3, r3, #16
 800b396:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3738      	adds	r7, #56	@ 0x38
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	46020c00 	.word	0x46020c00

0800b3a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e1d9      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3bc:	4b9b      	ldr	r3, [pc, #620]	@ (800b62c <HAL_RCC_ClockConfig+0x284>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 030f 	and.w	r3, r3, #15
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d910      	bls.n	800b3ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ca:	4b98      	ldr	r3, [pc, #608]	@ (800b62c <HAL_RCC_ClockConfig+0x284>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f023 020f 	bic.w	r2, r3, #15
 800b3d2:	4996      	ldr	r1, [pc, #600]	@ (800b62c <HAL_RCC_ClockConfig+0x284>)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3da:	4b94      	ldr	r3, [pc, #592]	@ (800b62c <HAL_RCC_ClockConfig+0x284>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d001      	beq.n	800b3ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e1c1      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d010      	beq.n	800b41a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	695a      	ldr	r2, [r3, #20]
 800b3fc:	4b8c      	ldr	r3, [pc, #560]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b404:	429a      	cmp	r2, r3
 800b406:	d908      	bls.n	800b41a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800b408:	4b89      	ldr	r3, [pc, #548]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	695b      	ldr	r3, [r3, #20]
 800b414:	4986      	ldr	r1, [pc, #536]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b416:	4313      	orrs	r3, r2
 800b418:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d012      	beq.n	800b44c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	691a      	ldr	r2, [r3, #16]
 800b42a:	4b81      	ldr	r3, [pc, #516]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	091b      	lsrs	r3, r3, #4
 800b430:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b434:	429a      	cmp	r2, r3
 800b436:	d909      	bls.n	800b44c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b438:	4b7d      	ldr	r3, [pc, #500]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b43a:	6a1b      	ldr	r3, [r3, #32]
 800b43c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	497a      	ldr	r1, [pc, #488]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b448:	4313      	orrs	r3, r2
 800b44a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0304 	and.w	r3, r3, #4
 800b454:	2b00      	cmp	r3, #0
 800b456:	d010      	beq.n	800b47a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68da      	ldr	r2, [r3, #12]
 800b45c:	4b74      	ldr	r3, [pc, #464]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b464:	429a      	cmp	r2, r3
 800b466:	d908      	bls.n	800b47a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b468:	4b71      	ldr	r3, [pc, #452]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	496e      	ldr	r1, [pc, #440]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b476:	4313      	orrs	r3, r2
 800b478:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d010      	beq.n	800b4a8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689a      	ldr	r2, [r3, #8]
 800b48a:	4b69      	ldr	r3, [pc, #420]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	f003 030f 	and.w	r3, r3, #15
 800b492:	429a      	cmp	r2, r3
 800b494:	d908      	bls.n	800b4a8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b496:	4b66      	ldr	r3, [pc, #408]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	f023 020f 	bic.w	r2, r3, #15
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	4963      	ldr	r1, [pc, #396]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 80d2 	beq.w	800b65a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d143      	bne.n	800b54a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4c2:	4b5b      	ldr	r3, [pc, #364]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b4c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d110      	bne.n	800b4f2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b4d0:	4b57      	ldr	r3, [pc, #348]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b4d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4d6:	4a56      	ldr	r2, [pc, #344]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b4d8:	f043 0304 	orr.w	r3, r3, #4
 800b4dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b4e0:	4b53      	ldr	r3, [pc, #332]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b4e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4e6:	f003 0304 	and.w	r3, r3, #4
 800b4ea:	60bb      	str	r3, [r7, #8]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800b4f2:	f7f8 f9d9 	bl	80038a8 <HAL_GetTick>
 800b4f6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800b4f8:	4b4e      	ldr	r3, [pc, #312]	@ (800b634 <HAL_RCC_ClockConfig+0x28c>)
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00f      	beq.n	800b524 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b504:	e008      	b.n	800b518 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800b506:	f7f8 f9cf 	bl	80038a8 <HAL_GetTick>
 800b50a:	4602      	mov	r2, r0
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d901      	bls.n	800b518 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e12b      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b518:	4b46      	ldr	r3, [pc, #280]	@ (800b634 <HAL_RCC_ClockConfig+0x28c>)
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d0f0      	beq.n	800b506 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d107      	bne.n	800b53a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b52a:	4b41      	ldr	r3, [pc, #260]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b52c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b530:	4a3f      	ldr	r2, [pc, #252]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b532:	f023 0304 	bic.w	r3, r3, #4
 800b536:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b53a:	4b3d      	ldr	r3, [pc, #244]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d121      	bne.n	800b58a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e112      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d107      	bne.n	800b562 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b552:	4b37      	ldr	r3, [pc, #220]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d115      	bne.n	800b58a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e106      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d107      	bne.n	800b57a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b56a:	4b31      	ldr	r3, [pc, #196]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0304 	and.w	r3, r3, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	d109      	bne.n	800b58a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e0fa      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b57a:	4b2d      	ldr	r3, [pc, #180]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e0f2      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800b58a:	4b29      	ldr	r3, [pc, #164]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	f023 0203 	bic.w	r2, r3, #3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	4926      	ldr	r1, [pc, #152]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b598:	4313      	orrs	r3, r2
 800b59a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800b59c:	f7f8 f984 	bl	80038a8 <HAL_GetTick>
 800b5a0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d112      	bne.n	800b5d0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b5aa:	e00a      	b.n	800b5c2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5ac:	f7f8 f97c 	bl	80038a8 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e0d6      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b5c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	f003 030c 	and.w	r3, r3, #12
 800b5ca:	2b0c      	cmp	r3, #12
 800b5cc:	d1ee      	bne.n	800b5ac <HAL_RCC_ClockConfig+0x204>
 800b5ce:	e044      	b.n	800b65a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d112      	bne.n	800b5fe <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b5d8:	e00a      	b.n	800b5f0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5da:	f7f8 f965 	bl	80038a8 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d901      	bls.n	800b5f0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e0bf      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	f003 030c 	and.w	r3, r3, #12
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d1ee      	bne.n	800b5da <HAL_RCC_ClockConfig+0x232>
 800b5fc:	e02d      	b.n	800b65a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d123      	bne.n	800b64e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b606:	e00a      	b.n	800b61e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b608:	f7f8 f94e 	bl	80038a8 <HAL_GetTick>
 800b60c:	4602      	mov	r2, r0
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b616:	4293      	cmp	r3, r2
 800b618:	d901      	bls.n	800b61e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e0a8      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b61e:	4b04      	ldr	r3, [pc, #16]	@ (800b630 <HAL_RCC_ClockConfig+0x288>)
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	f003 030c 	and.w	r3, r3, #12
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1ee      	bne.n	800b608 <HAL_RCC_ClockConfig+0x260>
 800b62a:	e016      	b.n	800b65a <HAL_RCC_ClockConfig+0x2b2>
 800b62c:	40022000 	.word	0x40022000
 800b630:	46020c00 	.word	0x46020c00
 800b634:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b638:	f7f8 f936 	bl	80038a8 <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b646:	4293      	cmp	r3, r2
 800b648:	d901      	bls.n	800b64e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e090      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b64e:	4b4a      	ldr	r3, [pc, #296]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	f003 030c 	and.w	r3, r3, #12
 800b656:	2b04      	cmp	r3, #4
 800b658:	d1ee      	bne.n	800b638 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d010      	beq.n	800b688 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	4b43      	ldr	r3, [pc, #268]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	f003 030f 	and.w	r3, r3, #15
 800b672:	429a      	cmp	r2, r3
 800b674:	d208      	bcs.n	800b688 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b676:	4b40      	ldr	r3, [pc, #256]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	f023 020f 	bic.w	r2, r3, #15
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	493d      	ldr	r1, [pc, #244]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b684:	4313      	orrs	r3, r2
 800b686:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b688:	4b3c      	ldr	r3, [pc, #240]	@ (800b77c <HAL_RCC_ClockConfig+0x3d4>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 030f 	and.w	r3, r3, #15
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d210      	bcs.n	800b6b8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b696:	4b39      	ldr	r3, [pc, #228]	@ (800b77c <HAL_RCC_ClockConfig+0x3d4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f023 020f 	bic.w	r2, r3, #15
 800b69e:	4937      	ldr	r1, [pc, #220]	@ (800b77c <HAL_RCC_ClockConfig+0x3d4>)
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6a6:	4b35      	ldr	r3, [pc, #212]	@ (800b77c <HAL_RCC_ClockConfig+0x3d4>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 030f 	and.w	r3, r3, #15
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d001      	beq.n	800b6b8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e05b      	b.n	800b770 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d010      	beq.n	800b6e6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68da      	ldr	r2, [r3, #12]
 800b6c8:	4b2b      	ldr	r3, [pc, #172]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d208      	bcs.n	800b6e6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b6d4:	4b28      	ldr	r3, [pc, #160]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b6d6:	6a1b      	ldr	r3, [r3, #32]
 800b6d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	4925      	ldr	r1, [pc, #148]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f003 0308 	and.w	r3, r3, #8
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d012      	beq.n	800b718 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	691a      	ldr	r2, [r3, #16]
 800b6f6:	4b20      	ldr	r3, [pc, #128]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b6f8:	6a1b      	ldr	r3, [r3, #32]
 800b6fa:	091b      	lsrs	r3, r3, #4
 800b6fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b700:	429a      	cmp	r2, r3
 800b702:	d209      	bcs.n	800b718 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b704:	4b1c      	ldr	r3, [pc, #112]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	4919      	ldr	r1, [pc, #100]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b714:	4313      	orrs	r3, r2
 800b716:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0310 	and.w	r3, r3, #16
 800b720:	2b00      	cmp	r3, #0
 800b722:	d010      	beq.n	800b746 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	695a      	ldr	r2, [r3, #20]
 800b728:	4b13      	ldr	r3, [pc, #76]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b72c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b730:	429a      	cmp	r2, r3
 800b732:	d208      	bcs.n	800b746 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b734:	4b10      	ldr	r3, [pc, #64]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b738:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	490d      	ldr	r1, [pc, #52]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b742:	4313      	orrs	r3, r2
 800b744:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b746:	f000 f821 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800b74a:	4602      	mov	r2, r0
 800b74c:	4b0a      	ldr	r3, [pc, #40]	@ (800b778 <HAL_RCC_ClockConfig+0x3d0>)
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	f003 030f 	and.w	r3, r3, #15
 800b754:	490a      	ldr	r1, [pc, #40]	@ (800b780 <HAL_RCC_ClockConfig+0x3d8>)
 800b756:	5ccb      	ldrb	r3, [r1, r3]
 800b758:	fa22 f303 	lsr.w	r3, r2, r3
 800b75c:	4a09      	ldr	r2, [pc, #36]	@ (800b784 <HAL_RCC_ClockConfig+0x3dc>)
 800b75e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b760:	4b09      	ldr	r3, [pc, #36]	@ (800b788 <HAL_RCC_ClockConfig+0x3e0>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4618      	mov	r0, r3
 800b766:	f7f8 f815 	bl	8003794 <HAL_InitTick>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73fb      	strb	r3, [r7, #15]

  return status;
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	46020c00 	.word	0x46020c00
 800b77c:	40022000 	.word	0x40022000
 800b780:	08012840 	.word	0x08012840
 800b784:	20000028 	.word	0x20000028
 800b788:	2000002c 	.word	0x2000002c

0800b78c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b08b      	sub	sp, #44	@ 0x2c
 800b790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b79a:	4b78      	ldr	r3, [pc, #480]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b79c:	69db      	ldr	r3, [r3, #28]
 800b79e:	f003 030c 	and.w	r3, r3, #12
 800b7a2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7a4:	4b75      	ldr	r3, [pc, #468]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a8:	f003 0303 	and.w	r3, r3, #3
 800b7ac:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d005      	beq.n	800b7c0 <HAL_RCC_GetSysClockFreq+0x34>
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	2b0c      	cmp	r3, #12
 800b7b8:	d121      	bne.n	800b7fe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d11e      	bne.n	800b7fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b7c0:	4b6e      	ldr	r3, [pc, #440]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d107      	bne.n	800b7dc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b7cc:	4b6b      	ldr	r3, [pc, #428]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7d2:	0b1b      	lsrs	r3, r3, #12
 800b7d4:	f003 030f 	and.w	r3, r3, #15
 800b7d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7da:	e005      	b.n	800b7e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b7dc:	4b67      	ldr	r3, [pc, #412]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	0f1b      	lsrs	r3, r3, #28
 800b7e2:	f003 030f 	and.w	r3, r3, #15
 800b7e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b7e8:	4a65      	ldr	r2, [pc, #404]	@ (800b980 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d110      	bne.n	800b81a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b7fc:	e00d      	b.n	800b81a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b7fe:	4b5f      	ldr	r3, [pc, #380]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b800:	69db      	ldr	r3, [r3, #28]
 800b802:	f003 030c 	and.w	r3, r3, #12
 800b806:	2b04      	cmp	r3, #4
 800b808:	d102      	bne.n	800b810 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b80a:	4b5e      	ldr	r3, [pc, #376]	@ (800b984 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b80c:	623b      	str	r3, [r7, #32]
 800b80e:	e004      	b.n	800b81a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b08      	cmp	r3, #8
 800b814:	d101      	bne.n	800b81a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b816:	4b5b      	ldr	r3, [pc, #364]	@ (800b984 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b818:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	2b0c      	cmp	r3, #12
 800b81e:	f040 80a5 	bne.w	800b96c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b822:	4b56      	ldr	r3, [pc, #344]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b82c:	4b53      	ldr	r3, [pc, #332]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b830:	0a1b      	lsrs	r3, r3, #8
 800b832:	f003 030f 	and.w	r3, r3, #15
 800b836:	3301      	adds	r3, #1
 800b838:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b83a:	4b50      	ldr	r3, [pc, #320]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b83e:	091b      	lsrs	r3, r3, #4
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b846:	4b4d      	ldr	r3, [pc, #308]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b84a:	08db      	lsrs	r3, r3, #3
 800b84c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	fb02 f303 	mul.w	r3, r2, r3
 800b856:	ee07 3a90 	vmov	s15, r3
 800b85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	2b02      	cmp	r3, #2
 800b866:	d003      	beq.n	800b870 <HAL_RCC_GetSysClockFreq+0xe4>
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d022      	beq.n	800b8b4 <HAL_RCC_GetSysClockFreq+0x128>
 800b86e:	e043      	b.n	800b8f8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	ee07 3a90 	vmov	s15, r3
 800b876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b988 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b882:	4b3e      	ldr	r3, [pc, #248]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b88a:	ee07 3a90 	vmov	s15, r3
 800b88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b892:	ed97 6a01 	vldr	s12, [r7, #4]
 800b896:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800b98c <HAL_RCC_GetSysClockFreq+0x200>
 800b89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b8a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8b2:	e046      	b.n	800b942 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	ee07 3a90 	vmov	s15, r3
 800b8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8be:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800b988 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b8d6:	ed97 6a01 	vldr	s12, [r7, #4]
 800b8da:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b98c <HAL_RCC_GetSysClockFreq+0x200>
 800b8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b8e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8f6:	e024      	b.n	800b942 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	ee07 3a90 	vmov	s15, r3
 800b8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b910:	4b1a      	ldr	r3, [pc, #104]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b918:	ee07 3a90 	vmov	s15, r3
 800b91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b920:	ed97 6a01 	vldr	s12, [r7, #4]
 800b924:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800b98c <HAL_RCC_GetSysClockFreq+0x200>
 800b928:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b92c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b930:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b934:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b93c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b940:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b942:	4b0e      	ldr	r3, [pc, #56]	@ (800b97c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b946:	0e1b      	lsrs	r3, r3, #24
 800b948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b94c:	3301      	adds	r3, #1
 800b94e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b95a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b95e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b966:	ee17 3a90 	vmov	r3, s15
 800b96a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800b96c:	6a3b      	ldr	r3, [r7, #32]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	372c      	adds	r7, #44	@ 0x2c
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	46020c00 	.word	0x46020c00
 800b980:	08012858 	.word	0x08012858
 800b984:	00f42400 	.word	0x00f42400
 800b988:	4b742400 	.word	0x4b742400
 800b98c:	46000000 	.word	0x46000000

0800b990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b994:	f7ff fefa 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800b998:	4602      	mov	r2, r0
 800b99a:	4b07      	ldr	r3, [pc, #28]	@ (800b9b8 <HAL_RCC_GetHCLKFreq+0x28>)
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	4906      	ldr	r1, [pc, #24]	@ (800b9bc <HAL_RCC_GetHCLKFreq+0x2c>)
 800b9a4:	5ccb      	ldrb	r3, [r1, r3]
 800b9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9aa:	4a05      	ldr	r2, [pc, #20]	@ (800b9c0 <HAL_RCC_GetHCLKFreq+0x30>)
 800b9ac:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b9ae:	4b04      	ldr	r3, [pc, #16]	@ (800b9c0 <HAL_RCC_GetHCLKFreq+0x30>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	46020c00 	.word	0x46020c00
 800b9bc:	08012840 	.word	0x08012840
 800b9c0:	20000028 	.word	0x20000028

0800b9c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b9c8:	f7ff ffe2 	bl	800b990 <HAL_RCC_GetHCLKFreq>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	4b05      	ldr	r3, [pc, #20]	@ (800b9e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b9d0:	6a1b      	ldr	r3, [r3, #32]
 800b9d2:	091b      	lsrs	r3, r3, #4
 800b9d4:	f003 0307 	and.w	r3, r3, #7
 800b9d8:	4903      	ldr	r1, [pc, #12]	@ (800b9e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b9da:	5ccb      	ldrb	r3, [r1, r3]
 800b9dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	46020c00 	.word	0x46020c00
 800b9e8:	08012850 	.word	0x08012850

0800b9ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b9f0:	f7ff ffce 	bl	800b990 <HAL_RCC_GetHCLKFreq>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	4b05      	ldr	r3, [pc, #20]	@ (800ba0c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	0a1b      	lsrs	r3, r3, #8
 800b9fc:	f003 0307 	and.w	r3, r3, #7
 800ba00:	4903      	ldr	r1, [pc, #12]	@ (800ba10 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba02:	5ccb      	ldrb	r3, [r1, r3]
 800ba04:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	46020c00 	.word	0x46020c00
 800ba10:	08012850 	.word	0x08012850

0800ba14 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ba18:	f7ff ffba 	bl	800b990 <HAL_RCC_GetHCLKFreq>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	4b05      	ldr	r3, [pc, #20]	@ (800ba34 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ba20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba22:	091b      	lsrs	r3, r3, #4
 800ba24:	f003 0307 	and.w	r3, r3, #7
 800ba28:	4903      	ldr	r1, [pc, #12]	@ (800ba38 <HAL_RCC_GetPCLK3Freq+0x24>)
 800ba2a:	5ccb      	ldrb	r3, [r1, r3]
 800ba2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	46020c00 	.word	0x46020c00
 800ba38:	08012850 	.word	0x08012850

0800ba3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ba44:	4b3e      	ldr	r3, [pc, #248]	@ (800bb40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba4a:	f003 0304 	and.w	r3, r3, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ba52:	f7fe fd21 	bl	800a498 <HAL_PWREx_GetVoltageRange>
 800ba56:	6178      	str	r0, [r7, #20]
 800ba58:	e019      	b.n	800ba8e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba5a:	4b39      	ldr	r3, [pc, #228]	@ (800bb40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba60:	4a37      	ldr	r2, [pc, #220]	@ (800bb40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba62:	f043 0304 	orr.w	r3, r3, #4
 800ba66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ba6a:	4b35      	ldr	r3, [pc, #212]	@ (800bb40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba70:	f003 0304 	and.w	r3, r3, #4
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ba78:	f7fe fd0e 	bl	800a498 <HAL_PWREx_GetVoltageRange>
 800ba7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ba7e:	4b30      	ldr	r3, [pc, #192]	@ (800bb40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba84:	4a2e      	ldr	r2, [pc, #184]	@ (800bb40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ba86:	f023 0304 	bic.w	r3, r3, #4
 800ba8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba94:	d003      	beq.n	800ba9e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba9c:	d109      	bne.n	800bab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baa4:	d202      	bcs.n	800baac <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800baa6:	2301      	movs	r3, #1
 800baa8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800baaa:	e033      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800baac:	2300      	movs	r3, #0
 800baae:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800bab0:	e030      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bab8:	d208      	bcs.n	800bacc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bac0:	d102      	bne.n	800bac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800bac2:	2303      	movs	r3, #3
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	e025      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e035      	b.n	800bb38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bad2:	d90f      	bls.n	800baf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d109      	bne.n	800baee <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bae0:	d902      	bls.n	800bae8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800bae2:	2300      	movs	r3, #0
 800bae4:	613b      	str	r3, [r7, #16]
 800bae6:	e015      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800bae8:	2301      	movs	r3, #1
 800baea:	613b      	str	r3, [r7, #16]
 800baec:	e012      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800baee:	2300      	movs	r3, #0
 800baf0:	613b      	str	r3, [r7, #16]
 800baf2:	e00f      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bafa:	d109      	bne.n	800bb10 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb02:	d102      	bne.n	800bb0a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800bb04:	2301      	movs	r3, #1
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	e004      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	613b      	str	r3, [r7, #16]
 800bb0e:	e001      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800bb10:	2301      	movs	r3, #1
 800bb12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bb14:	4b0b      	ldr	r3, [pc, #44]	@ (800bb44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f023 020f 	bic.w	r2, r3, #15
 800bb1c:	4909      	ldr	r1, [pc, #36]	@ (800bb44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800bb24:	4b07      	ldr	r3, [pc, #28]	@ (800bb44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 030f 	and.w	r3, r3, #15
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d001      	beq.n	800bb36 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e000      	b.n	800bb38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	46020c00 	.word	0x46020c00
 800bb44:	40022000 	.word	0x40022000

0800bb48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800bb48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb4c:	b0c8      	sub	sp, #288	@ 0x120
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	f002 0401 	and.w	r4, r2, #1
 800bb6c:	2500      	movs	r5, #0
 800bb6e:	ea54 0305 	orrs.w	r3, r4, r5
 800bb72:	d00b      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800bb74:	4bd5      	ldr	r3, [pc, #852]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb7a:	f023 0103 	bic.w	r1, r3, #3
 800bb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb84:	4ad1      	ldr	r2, [pc, #836]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb86:	430b      	orrs	r3, r1
 800bb88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	f002 0802 	and.w	r8, r2, #2
 800bb98:	f04f 0900 	mov.w	r9, #0
 800bb9c:	ea58 0309 	orrs.w	r3, r8, r9
 800bba0:	d00b      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800bba2:	4bca      	ldr	r3, [pc, #808]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bba8:	f023 010c 	bic.w	r1, r3, #12
 800bbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbb2:	4ac6      	ldr	r2, [pc, #792]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbb4:	430b      	orrs	r3, r1
 800bbb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bbba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f002 0a04 	and.w	sl, r2, #4
 800bbc6:	f04f 0b00 	mov.w	fp, #0
 800bbca:	ea5a 030b 	orrs.w	r3, sl, fp
 800bbce:	d00b      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800bbd0:	4bbe      	ldr	r3, [pc, #760]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbd6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bbda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbe0:	4aba      	ldr	r2, [pc, #744]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbe2:	430b      	orrs	r3, r1
 800bbe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bbe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	f002 0308 	and.w	r3, r2, #8
 800bbf4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bbfe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800bc02:	460b      	mov	r3, r1
 800bc04:	4313      	orrs	r3, r2
 800bc06:	d00b      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800bc08:	4bb0      	ldr	r3, [pc, #704]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bc12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc18:	4aac      	ldr	r2, [pc, #688]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bc20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f002 0310 	and.w	r3, r2, #16
 800bc2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bc30:	2300      	movs	r3, #0
 800bc32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bc36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	d00b      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800bc40:	4ba2      	ldr	r3, [pc, #648]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc50:	4a9e      	ldr	r2, [pc, #632]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc52:	430b      	orrs	r3, r1
 800bc54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bc58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bc64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bc6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4313      	orrs	r3, r2
 800bc76:	d00b      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800bc78:	4b94      	ldr	r3, [pc, #592]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bc82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc88:	4a90      	ldr	r2, [pc, #576]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f002 0320 	and.w	r3, r2, #32
 800bc9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bca0:	2300      	movs	r3, #0
 800bca2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bca6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4313      	orrs	r3, r2
 800bcae:	d00b      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800bcb0:	4b86      	ldr	r3, [pc, #536]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bcb6:	f023 0107 	bic.w	r1, r3, #7
 800bcba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcc0:	4a82      	ldr	r2, [pc, #520]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcc2:	430b      	orrs	r3, r1
 800bcc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bcc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bcd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4313      	orrs	r3, r2
 800bce6:	d00b      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800bce8:	4b78      	ldr	r3, [pc, #480]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcee:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800bcf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcf8:	4a74      	ldr	r2, [pc, #464]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcfa:	430b      	orrs	r3, r1
 800bcfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bd0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bd10:	2300      	movs	r3, #0
 800bd12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bd16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	d00b      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800bd20:	4b6a      	ldr	r3, [pc, #424]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bd2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd30:	4a66      	ldr	r2, [pc, #408]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd32:	430b      	orrs	r3, r1
 800bd34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800bd44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4313      	orrs	r3, r2
 800bd56:	d00b      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800bd58:	4b5c      	ldr	r3, [pc, #368]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bd62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd68:	4a58      	ldr	r2, [pc, #352]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd6a:	430b      	orrs	r3, r1
 800bd6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bd7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd80:	2300      	movs	r3, #0
 800bd82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	d00b      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800bd90:	4b4e      	ldr	r3, [pc, #312]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd96:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800bd9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bda0:	4a4a      	ldr	r2, [pc, #296]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bda2:	430b      	orrs	r3, r1
 800bda4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800bda8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bdb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bdbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	d00b      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800bdc8:	4b40      	ldr	r3, [pc, #256]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bdca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdce:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800bdd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdd8:	4a3c      	ldr	r2, [pc, #240]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bdda:	430b      	orrs	r3, r1
 800bddc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800bde0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bdec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bdf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	d00c      	beq.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800be00:	4b32      	ldr	r3, [pc, #200]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be06:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800be0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be12:	4a2e      	ldr	r2, [pc, #184]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be14:	430b      	orrs	r3, r1
 800be16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800be1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be22:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800be26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be2a:	2300      	movs	r3, #0
 800be2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be30:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800be34:	460b      	mov	r3, r1
 800be36:	4313      	orrs	r3, r2
 800be38:	d00c      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800be3a:	4b24      	ldr	r3, [pc, #144]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be40:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800be44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be4c:	4a1f      	ldr	r2, [pc, #124]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be4e:	430b      	orrs	r3, r1
 800be50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800be54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800be60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be64:	2300      	movs	r3, #0
 800be66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be6a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800be6e:	460b      	mov	r3, r1
 800be70:	4313      	orrs	r3, r2
 800be72:	d00c      	beq.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800be74:	4b15      	ldr	r3, [pc, #84]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800be7a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800be7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be86:	4a11      	ldr	r2, [pc, #68]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800be88:	430b      	orrs	r3, r1
 800be8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800be8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800be9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be9e:	2300      	movs	r3, #0
 800bea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bea4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4313      	orrs	r3, r2
 800beac:	d010      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800beae:	4b07      	ldr	r3, [pc, #28]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800beb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800beb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800beb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bec0:	4a02      	ldr	r2, [pc, #8]	@ (800becc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bec2:	430b      	orrs	r3, r1
 800bec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bec8:	e002      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800beca:	bf00      	nop
 800becc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bedc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bee0:	2300      	movs	r3, #0
 800bee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bee6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800beea:	460b      	mov	r3, r1
 800beec:	4313      	orrs	r3, r2
 800beee:	d04c      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800bef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bef8:	2b80      	cmp	r3, #128	@ 0x80
 800befa:	d02d      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800befc:	2b80      	cmp	r3, #128	@ 0x80
 800befe:	d827      	bhi.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bf00:	2b60      	cmp	r3, #96	@ 0x60
 800bf02:	d02b      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800bf04:	2b60      	cmp	r3, #96	@ 0x60
 800bf06:	d823      	bhi.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bf08:	2b40      	cmp	r3, #64	@ 0x40
 800bf0a:	d006      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800bf0c:	2b40      	cmp	r3, #64	@ 0x40
 800bf0e:	d81f      	bhi.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d009      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bf14:	2b20      	cmp	r3, #32
 800bf16:	d011      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800bf18:	e01a      	b.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf1a:	4bc0      	ldr	r3, [pc, #768]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1e:	4abf      	ldr	r2, [pc, #764]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf24:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bf26:	e01a      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bf28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f002 fcd6 	bl	800e8e0 <RCCEx_PLL2_Config>
 800bf34:	4603      	mov	r3, r0
 800bf36:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bf3a:	e010      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bf3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf40:	332c      	adds	r3, #44	@ 0x2c
 800bf42:	4618      	mov	r0, r3
 800bf44:	f002 fd64 	bl	800ea10 <RCCEx_PLL3_Config>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bf4e:	e006      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf56:	e002      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bf58:	bf00      	nop
 800bf5a:	e000      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bf5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10d      	bne.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800bf66:	4bad      	ldr	r3, [pc, #692]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf6c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800bf70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf78:	4aa8      	ldr	r2, [pc, #672]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bf80:	e003      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf82:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf86:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bf8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bf96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bfa0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	d053      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800bfaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bfb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bfb6:	d033      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800bfb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bfbc:	d82c      	bhi.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bfbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfc2:	d02f      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800bfc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfc8:	d826      	bhi.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bfca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfce:	d008      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800bfd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfd4:	d820      	bhi.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00a      	beq.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bfda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfde:	d011      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bfe0:	e01a      	b.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bfe2:	4b8e      	ldr	r3, [pc, #568]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe6:	4a8d      	ldr	r2, [pc, #564]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bfe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bfee:	e01a      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bff4:	3308      	adds	r3, #8
 800bff6:	4618      	mov	r0, r3
 800bff8:	f002 fc72 	bl	800e8e0 <RCCEx_PLL2_Config>
 800bffc:	4603      	mov	r3, r0
 800bffe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c002:	e010      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c008:	332c      	adds	r3, #44	@ 0x2c
 800c00a:	4618      	mov	r0, r3
 800c00c:	f002 fd00 	bl	800ea10 <RCCEx_PLL3_Config>
 800c010:	4603      	mov	r3, r0
 800c012:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c016:	e006      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c01e:	e002      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800c020:	bf00      	nop
 800c022:	e000      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800c024:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c026:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10d      	bne.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800c02e:	4b7b      	ldr	r3, [pc, #492]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c034:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800c038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c03c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c040:	4a76      	ldr	r2, [pc, #472]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c042:	430b      	orrs	r3, r1
 800c044:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c048:	e003      	b.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c04e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800c052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c05e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c062:	2300      	movs	r3, #0
 800c064:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c068:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c06c:	460b      	mov	r3, r1
 800c06e:	4313      	orrs	r3, r2
 800c070:	d046      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800c072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c07a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c07e:	d028      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c080:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c084:	d821      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c08a:	d022      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c08c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c090:	d81b      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c092:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c096:	d01c      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c098:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c09c:	d815      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c09e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0a2:	d008      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800c0a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0a8:	d80f      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d011      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c0ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0b2:	d00e      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c0b4:	e009      	b.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c0b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f002 fc0f 	bl	800e8e0 <RCCEx_PLL2_Config>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c0c8:	e004      	b.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c0d0:	e000      	b.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800c0d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0d4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10d      	bne.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800c0dc:	4b4f      	ldr	r3, [pc, #316]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c0de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0e2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c0ee:	4a4b      	ldr	r2, [pc, #300]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c0f0:	430b      	orrs	r3, r1
 800c0f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c0f6:	e003      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c0fc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800c100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c10c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c110:	2300      	movs	r3, #0
 800c112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c116:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c11a:	460b      	mov	r3, r1
 800c11c:	4313      	orrs	r3, r2
 800c11e:	d03f      	beq.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800c120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c128:	2b04      	cmp	r3, #4
 800c12a:	d81e      	bhi.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800c12c:	a201      	add	r2, pc, #4	@ (adr r2, 800c134 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800c12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c132:	bf00      	nop
 800c134:	0800c173 	.word	0x0800c173
 800c138:	0800c149 	.word	0x0800c149
 800c13c:	0800c157 	.word	0x0800c157
 800c140:	0800c173 	.word	0x0800c173
 800c144:	0800c173 	.word	0x0800c173
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c148:	4b34      	ldr	r3, [pc, #208]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14c:	4a33      	ldr	r2, [pc, #204]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c14e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c152:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c154:	e00e      	b.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c15a:	332c      	adds	r3, #44	@ 0x2c
 800c15c:	4618      	mov	r0, r3
 800c15e:	f002 fc57 	bl	800ea10 <RCCEx_PLL3_Config>
 800c162:	4603      	mov	r3, r0
 800c164:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c168:	e004      	b.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c170:	e000      	b.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800c172:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c174:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10d      	bne.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800c17c:	4b27      	ldr	r3, [pc, #156]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c17e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c182:	f023 0107 	bic.w	r1, r3, #7
 800c186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c18e:	4a23      	ldr	r2, [pc, #140]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c190:	430b      	orrs	r3, r1
 800c192:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c196:	e003      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c198:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c19c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800c1a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c1ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	d04c      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800c1bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1c8:	d02a      	beq.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800c1ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1ce:	d821      	bhi.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c1d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c1d4:	d026      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800c1d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c1da:	d81b      	bhi.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c1dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1e0:	d00e      	beq.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800c1e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1e6:	d815      	bhi.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d01d      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800c1ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1f0:	d110      	bne.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f6:	4a09      	ldr	r2, [pc, #36]	@ (800c21c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c1f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1fc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c1fe:	e014      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c204:	332c      	adds	r3, #44	@ 0x2c
 800c206:	4618      	mov	r0, r3
 800c208:	f002 fc02 	bl	800ea10 <RCCEx_PLL3_Config>
 800c20c:	4603      	mov	r3, r0
 800c20e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c212:	e00a      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c21a:	e006      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800c21c:	46020c00 	.word	0x46020c00
        break;
 800c220:	bf00      	nop
 800c222:	e002      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c224:	bf00      	nop
 800c226:	e000      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c228:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c22a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10d      	bne.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800c232:	4baf      	ldr	r3, [pc, #700]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c238:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c240:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c244:	4aaa      	ldr	r2, [pc, #680]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c246:	430b      	orrs	r3, r1
 800c248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c24c:	e003      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c24e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c252:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c262:	673b      	str	r3, [r7, #112]	@ 0x70
 800c264:	2300      	movs	r3, #0
 800c266:	677b      	str	r3, [r7, #116]	@ 0x74
 800c268:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c26c:	460b      	mov	r3, r1
 800c26e:	4313      	orrs	r3, r2
 800c270:	f000 80b5 	beq.w	800c3de <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c274:	2300      	movs	r3, #0
 800c276:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c27a:	4b9d      	ldr	r3, [pc, #628]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c27c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c280:	f003 0304 	and.w	r3, r3, #4
 800c284:	2b00      	cmp	r3, #0
 800c286:	d113      	bne.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c288:	4b99      	ldr	r3, [pc, #612]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c28a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c28e:	4a98      	ldr	r2, [pc, #608]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c290:	f043 0304 	orr.w	r3, r3, #4
 800c294:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c298:	4b95      	ldr	r3, [pc, #596]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c29a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800c2a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c2b0:	4b90      	ldr	r3, [pc, #576]	@ (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b4:	4a8f      	ldr	r2, [pc, #572]	@ (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2bc:	f7f7 faf4 	bl	80038a8 <HAL_GetTick>
 800c2c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c2c4:	e00b      	b.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2c6:	f7f7 faef 	bl	80038a8 <HAL_GetTick>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d903      	bls.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c2dc:	e005      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c2de:	4b85      	ldr	r3, [pc, #532]	@ (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d0ed      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800c2ea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d165      	bne.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c2f2:	4b7f      	ldr	r3, [pc, #508]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c2f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800c300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d023      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800c308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c30c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800c310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c314:	4293      	cmp	r3, r2
 800c316:	d01b      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c318:	4b75      	ldr	r3, [pc, #468]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c31a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c31e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c322:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c326:	4b72      	ldr	r3, [pc, #456]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c32c:	4a70      	ldr	r2, [pc, #448]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c32e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c336:	4b6e      	ldr	r3, [pc, #440]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c33c:	4a6c      	ldr	r2, [pc, #432]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c33e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c346:	4a6a      	ldr	r2, [pc, #424]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c348:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c34c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d019      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c35c:	f7f7 faa4 	bl	80038a8 <HAL_GetTick>
 800c360:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c364:	e00d      	b.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c366:	f7f7 fa9f 	bl	80038a8 <HAL_GetTick>
 800c36a:	4602      	mov	r2, r0
 800c36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c370:	1ad2      	subs	r2, r2, r3
 800c372:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c376:	429a      	cmp	r2, r3
 800c378:	d903      	bls.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800c37a:	2303      	movs	r3, #3
 800c37c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800c380:	e006      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c382:	4b5b      	ldr	r3, [pc, #364]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d0ea      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800c390:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10d      	bne.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800c398:	4b55      	ldr	r3, [pc, #340]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c39a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c39e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c3aa:	4a51      	ldr	r2, [pc, #324]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c3ac:	430b      	orrs	r3, r1
 800c3ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c3b2:	e008      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c3b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c3b8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800c3bc:	e003      	b.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c3c2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c3c6:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d107      	bne.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3ce:	4b48      	ldr	r3, [pc, #288]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c3d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3d4:	4a46      	ldr	r2, [pc, #280]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c3d6:	f023 0304 	bic.w	r3, r3, #4
 800c3da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800c3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c3ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c3f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	d042      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800c3fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c402:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c406:	d022      	beq.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800c408:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c40c:	d81b      	bhi.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c40e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c412:	d011      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800c414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c418:	d815      	bhi.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d019      	beq.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800c41e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c422:	d110      	bne.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c428:	3308      	adds	r3, #8
 800c42a:	4618      	mov	r0, r3
 800c42c:	f002 fa58 	bl	800e8e0 <RCCEx_PLL2_Config>
 800c430:	4603      	mov	r3, r0
 800c432:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c436:	e00d      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c438:	4b2d      	ldr	r3, [pc, #180]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c43c:	4a2c      	ldr	r2, [pc, #176]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c43e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c442:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c444:	e006      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c44c:	e002      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c44e:	bf00      	nop
 800c450:	e000      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c452:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c454:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10d      	bne.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800c45c:	4b24      	ldr	r3, [pc, #144]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c462:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800c466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c46a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c46e:	4a20      	ldr	r2, [pc, #128]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c470:	430b      	orrs	r3, r1
 800c472:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c476:	e003      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c478:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c47c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c48c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c48e:	2300      	movs	r3, #0
 800c490:	667b      	str	r3, [r7, #100]	@ 0x64
 800c492:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c496:	460b      	mov	r3, r1
 800c498:	4313      	orrs	r3, r2
 800c49a:	d031      	beq.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800c49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4a8:	d00b      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800c4aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4ae:	d804      	bhi.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d008      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800c4b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4b8:	d007      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c4c0:	e004      	b.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c4c2:	bf00      	nop
 800c4c4:	e002      	b.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c4c6:	bf00      	nop
 800c4c8:	e000      	b.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c4ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c4cc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d111      	bne.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800c4d4:	4b06      	ldr	r3, [pc, #24]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c4d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c4da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c4de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4e6:	4a02      	ldr	r2, [pc, #8]	@ (800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c4ee:	e007      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800c4f0:	46020c00 	.word	0x46020c00
 800c4f4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c4fc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800c500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c50c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c50e:	2300      	movs	r3, #0
 800c510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c512:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c516:	460b      	mov	r3, r1
 800c518:	4313      	orrs	r3, r2
 800c51a:	d00c      	beq.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800c51c:	4bb2      	ldr	r3, [pc, #712]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c51e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c522:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800c526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c52a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c52e:	4aae      	ldr	r2, [pc, #696]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c530:	430b      	orrs	r3, r1
 800c532:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800c536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c542:	653b      	str	r3, [r7, #80]	@ 0x50
 800c544:	2300      	movs	r3, #0
 800c546:	657b      	str	r3, [r7, #84]	@ 0x54
 800c548:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c54c:	460b      	mov	r3, r1
 800c54e:	4313      	orrs	r3, r2
 800c550:	d019      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800c552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c556:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c55a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c55e:	d105      	bne.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c560:	4ba1      	ldr	r3, [pc, #644]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c564:	4aa0      	ldr	r2, [pc, #640]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c56a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800c56c:	4b9e      	ldr	r3, [pc, #632]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c56e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c572:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c57a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c57e:	4a9a      	ldr	r2, [pc, #616]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c580:	430b      	orrs	r3, r1
 800c582:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800c586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c592:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c594:	2300      	movs	r3, #0
 800c596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c598:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c59c:	460b      	mov	r3, r1
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	d00c      	beq.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800c5a2:	4b91      	ldr	r3, [pc, #580]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c5a8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c5b4:	4a8c      	ldr	r2, [pc, #560]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5b6:	430b      	orrs	r3, r1
 800c5b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c5c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	d00c      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c5d8:	4b83      	ldr	r3, [pc, #524]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c5de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c5ea:	4a7f      	ldr	r2, [pc, #508]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5ec:	430b      	orrs	r3, r1
 800c5ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c600:	2300      	movs	r3, #0
 800c602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c604:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c608:	460b      	mov	r3, r1
 800c60a:	4313      	orrs	r3, r2
 800c60c:	d00c      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c60e:	4b76      	ldr	r3, [pc, #472]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c614:	f023 0118 	bic.w	r1, r3, #24
 800c618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c61c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c620:	4a71      	ldr	r2, [pc, #452]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c622:	430b      	orrs	r3, r1
 800c624:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800c634:	633b      	str	r3, [r7, #48]	@ 0x30
 800c636:	2300      	movs	r3, #0
 800c638:	637b      	str	r3, [r7, #52]	@ 0x34
 800c63a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c63e:	460b      	mov	r3, r1
 800c640:	4313      	orrs	r3, r2
 800c642:	d032      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800c644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c648:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c64c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c650:	d105      	bne.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c652:	4b65      	ldr	r3, [pc, #404]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c656:	4a64      	ldr	r2, [pc, #400]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c65c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800c65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c662:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c666:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c66a:	d108      	bne.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c670:	3308      	adds	r3, #8
 800c672:	4618      	mov	r0, r3
 800c674:	f002 f934 	bl	800e8e0 <RCCEx_PLL2_Config>
 800c678:	4603      	mov	r3, r0
 800c67a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800c67e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10d      	bne.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c686:	4b58      	ldr	r3, [pc, #352]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c688:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c68c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c694:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c698:	4a53      	ldr	r2, [pc, #332]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c69a:	430b      	orrs	r3, r1
 800c69c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c6a0:	e003      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c6a6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800c6aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	d04a      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800c6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c6ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c6d2:	d01e      	beq.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800c6d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c6d8:	d825      	bhi.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c6da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6de:	d00e      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800c6e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6e4:	d81f      	bhi.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d021      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800c6ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6ee:	d11a      	bne.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6f0:	4b3d      	ldr	r3, [pc, #244]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f4:	4a3c      	ldr	r2, [pc, #240]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c6f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6fa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c6fc:	e018      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c6fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c702:	3308      	adds	r3, #8
 800c704:	4618      	mov	r0, r3
 800c706:	f002 f8eb 	bl	800e8e0 <RCCEx_PLL2_Config>
 800c70a:	4603      	mov	r3, r0
 800c70c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c710:	e00e      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c716:	332c      	adds	r3, #44	@ 0x2c
 800c718:	4618      	mov	r0, r3
 800c71a:	f002 f979 	bl	800ea10 <RCCEx_PLL3_Config>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c724:	e004      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c72c:	e000      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800c72e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c730:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10d      	bne.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800c738:	4b2b      	ldr	r3, [pc, #172]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c73a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c73e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c746:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c74a:	4927      	ldr	r1, [pc, #156]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c74c:	4313      	orrs	r3, r2
 800c74e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c752:	e003      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c754:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c758:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800c75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800c768:	623b      	str	r3, [r7, #32]
 800c76a:	2300      	movs	r3, #0
 800c76c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c76e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c772:	460b      	mov	r3, r1
 800c774:	4313      	orrs	r3, r2
 800c776:	d03d      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800c778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c780:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c784:	d00e      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800c786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c78a:	d815      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d017      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c794:	d110      	bne.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c796:	4b14      	ldr	r3, [pc, #80]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c79a:	4a13      	ldr	r2, [pc, #76]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c79c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c7a2:	e00e      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f002 f898 	bl	800e8e0 <RCCEx_PLL2_Config>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c7b6:	e004      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c7be:	e000      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7c0:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c7c2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d110      	bne.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800c7ca:	4b07      	ldr	r3, [pc, #28]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c7cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7dc:	4902      	ldr	r1, [pc, #8]	@ (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c7e4:	e006      	b.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c7e6:	bf00      	nop
 800c7e8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c7f0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800c7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c800:	61bb      	str	r3, [r7, #24]
 800c802:	2300      	movs	r3, #0
 800c804:	61fb      	str	r3, [r7, #28]
 800c806:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c80a:	460b      	mov	r3, r1
 800c80c:	4313      	orrs	r3, r2
 800c80e:	d00c      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800c810:	4b68      	ldr	r3, [pc, #416]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c816:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c81e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c822:	4964      	ldr	r1, [pc, #400]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c824:	4313      	orrs	r3, r2
 800c826:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	2100      	movs	r1, #0
 800c834:	6139      	str	r1, [r7, #16]
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	617b      	str	r3, [r7, #20]
 800c83c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c840:	460b      	mov	r3, r1
 800c842:	4313      	orrs	r3, r2
 800c844:	d036      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800c846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c84a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00c      	beq.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c856:	d113      	bne.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c85c:	3308      	adds	r3, #8
 800c85e:	4618      	mov	r0, r3
 800c860:	f002 f83e 	bl	800e8e0 <RCCEx_PLL2_Config>
 800c864:	4603      	mov	r3, r0
 800c866:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c86a:	e00d      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c870:	332c      	adds	r3, #44	@ 0x2c
 800c872:	4618      	mov	r0, r3
 800c874:	f002 f8cc 	bl	800ea10 <RCCEx_PLL3_Config>
 800c878:	4603      	mov	r3, r0
 800c87a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c87e:	e003      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c886:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c888:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10d      	bne.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800c890:	4b48      	ldr	r3, [pc, #288]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c892:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c896:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c89a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c89e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c8a2:	4944      	ldr	r1, [pc, #272]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c8aa:	e003      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c8b0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	2100      	movs	r1, #0
 800c8be:	60b9      	str	r1, [r7, #8]
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	d024      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800c8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d108      	bne.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8e0:	332c      	adds	r3, #44	@ 0x2c
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f002 f894 	bl	800ea10 <RCCEx_PLL3_Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800c8ee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10d      	bne.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800c8f6:	4b2f      	ldr	r3, [pc, #188]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c8f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c8fc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c908:	492a      	ldr	r1, [pc, #168]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c910:	e003      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c912:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c916:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800c91a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c922:	2100      	movs	r1, #0
 800c924:	6039      	str	r1, [r7, #0]
 800c926:	f003 0308 	and.w	r3, r3, #8
 800c92a:	607b      	str	r3, [r7, #4]
 800c92c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c930:	460b      	mov	r3, r1
 800c932:	4313      	orrs	r3, r2
 800c934:	d036      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800c936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c93a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c93e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c942:	d00d      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800c944:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c948:	d811      	bhi.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c94a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c94e:	d012      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c954:	d80b      	bhi.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00d      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c95a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c95e:	d106      	bne.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c960:	4b14      	ldr	r3, [pc, #80]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c964:	4a13      	ldr	r2, [pc, #76]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c96a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800c96c:	e004      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c974:	e000      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800c976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c978:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10d      	bne.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800c980:	4b0c      	ldr	r3, [pc, #48]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c986:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c98a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c98e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c992:	4908      	ldr	r1, [pc, #32]	@ (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c994:	4313      	orrs	r3, r2
 800c996:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c99a:	e003      	b.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c99c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c9a0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c9a4:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9b4:	46020c00 	.word	0x46020c00

0800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b089      	sub	sp, #36	@ 0x24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c9c0:	4ba6      	ldr	r3, [pc, #664]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c9ca:	4ba4      	ldr	r3, [pc, #656]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ce:	f003 0303 	and.w	r3, r3, #3
 800c9d2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c9d4:	4ba1      	ldr	r3, [pc, #644]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d8:	0a1b      	lsrs	r3, r3, #8
 800c9da:	f003 030f 	and.w	r3, r3, #15
 800c9de:	3301      	adds	r3, #1
 800c9e0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c9e2:	4b9e      	ldr	r3, [pc, #632]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e6:	091b      	lsrs	r3, r3, #4
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c9ee:	4b9b      	ldr	r3, [pc, #620]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9f2:	08db      	lsrs	r3, r3, #3
 800c9f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	fb02 f303 	mul.w	r3, r2, r3
 800c9fe:	ee07 3a90 	vmov	s15, r3
 800ca02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca06:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b03      	cmp	r3, #3
 800ca0e:	d062      	beq.n	800cad6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	f200 8081 	bhi.w	800cb1a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d024      	beq.n	800ca68 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d17a      	bne.n	800cb1a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	ee07 3a90 	vmov	s15, r3
 800ca2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cc60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800ca32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca36:	4b89      	ldr	r3, [pc, #548]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3e:	ee07 3a90 	vmov	s15, r3
 800ca42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca46:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca4a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cc64 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ca4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ca5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca66:	e08f      	b.n	800cb88 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ca68:	4b7c      	ldr	r3, [pc, #496]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d005      	beq.n	800ca80 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800ca74:	4b79      	ldr	r3, [pc, #484]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	0f1b      	lsrs	r3, r3, #28
 800ca7a:	f003 030f 	and.w	r3, r3, #15
 800ca7e:	e006      	b.n	800ca8e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800ca80:	4b76      	ldr	r3, [pc, #472]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca86:	041b      	lsls	r3, r3, #16
 800ca88:	0f1b      	lsrs	r3, r3, #28
 800ca8a:	f003 030f 	and.w	r3, r3, #15
 800ca8e:	4a76      	ldr	r2, [pc, #472]	@ (800cc68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800ca90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca94:	ee07 3a90 	vmov	s15, r3
 800ca98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	ee07 3a90 	vmov	s15, r3
 800cab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab4:	ed97 6a02 	vldr	s12, [r7, #8]
 800cab8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cc64 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800cabc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cad4:	e058      	b.n	800cb88 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	ee07 3a90 	vmov	s15, r3
 800cadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cc60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800cae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae8:	4b5c      	ldr	r3, [pc, #368]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800caea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf0:	ee07 3a90 	vmov	s15, r3
 800caf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800caf8:	ed97 6a02 	vldr	s12, [r7, #8]
 800cafc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cc64 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800cb00:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb18:	e036      	b.n	800cb88 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cb1a:	4b50      	ldr	r3, [pc, #320]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d005      	beq.n	800cb32 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800cb26:	4b4d      	ldr	r3, [pc, #308]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	0f1b      	lsrs	r3, r3, #28
 800cb2c:	f003 030f 	and.w	r3, r3, #15
 800cb30:	e006      	b.n	800cb40 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800cb32:	4b4a      	ldr	r3, [pc, #296]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	0f1b      	lsrs	r3, r3, #28
 800cb3c:	f003 030f 	and.w	r3, r3, #15
 800cb40:	4a49      	ldr	r2, [pc, #292]	@ (800cc68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800cb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb46:	ee07 3a90 	vmov	s15, r3
 800cb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb66:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb6a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cc64 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800cb6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb86:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800cb88:	4b34      	ldr	r3, [pc, #208]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d017      	beq.n	800cbc4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cb94:	4b31      	ldr	r3, [pc, #196]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cb96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb98:	0a5b      	lsrs	r3, r3, #9
 800cb9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb9e:	ee07 3a90 	vmov	s15, r3
 800cba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800cba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbaa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cbae:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbba:	ee17 2a90 	vmov	r2, s15
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
 800cbc2:	e002      	b.n	800cbca <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800cbca:	4b24      	ldr	r3, [pc, #144]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d017      	beq.n	800cc06 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cbd6:	4b21      	ldr	r3, [pc, #132]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cbd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbda:	0c1b      	lsrs	r3, r3, #16
 800cbdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbe0:	ee07 3a90 	vmov	s15, r3
 800cbe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800cbe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cbf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbfc:	ee17 2a90 	vmov	r2, s15
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	605a      	str	r2, [r3, #4]
 800cc04:	e002      	b.n	800cc0c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800cc0c:	4b13      	ldr	r3, [pc, #76]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d017      	beq.n	800cc48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cc18:	4b10      	ldr	r3, [pc, #64]	@ (800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800cc1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc1c:	0e1b      	lsrs	r3, r3, #24
 800cc1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc22:	ee07 3a90 	vmov	s15, r3
 800cc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800cc2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc2e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800cc32:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc3e:	ee17 2a90 	vmov	r2, s15
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc46:	e002      	b.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	609a      	str	r2, [r3, #8]
}
 800cc4e:	bf00      	nop
 800cc50:	3724      	adds	r7, #36	@ 0x24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	46020c00 	.word	0x46020c00
 800cc60:	4b742400 	.word	0x4b742400
 800cc64:	46000000 	.word	0x46000000
 800cc68:	08012858 	.word	0x08012858

0800cc6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b089      	sub	sp, #36	@ 0x24
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800cc74:	4ba6      	ldr	r3, [pc, #664]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800cc7e:	4ba4      	ldr	r3, [pc, #656]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc82:	f003 0303 	and.w	r3, r3, #3
 800cc86:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800cc88:	4ba1      	ldr	r3, [pc, #644]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8c:	0a1b      	lsrs	r3, r3, #8
 800cc8e:	f003 030f 	and.w	r3, r3, #15
 800cc92:	3301      	adds	r3, #1
 800cc94:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800cc96:	4b9e      	ldr	r3, [pc, #632]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc9a:	091b      	lsrs	r3, r3, #4
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800cca2:	4b9b      	ldr	r3, [pc, #620]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca6:	08db      	lsrs	r3, r3, #3
 800cca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	fb02 f303 	mul.w	r3, r2, r3
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2b03      	cmp	r3, #3
 800ccc2:	d062      	beq.n	800cd8a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	f200 8081 	bhi.w	800cdce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d024      	beq.n	800cd1c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d17a      	bne.n	800cdce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cf14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccea:	4b89      	ldr	r3, [pc, #548]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ccec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccfa:	ed97 6a02 	vldr	s12, [r7, #8]
 800ccfe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd1a:	e08f      	b.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cd1c:	4b7c      	ldr	r3, [pc, #496]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d005      	beq.n	800cd34 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800cd28:	4b79      	ldr	r3, [pc, #484]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	0f1b      	lsrs	r3, r3, #28
 800cd2e:	f003 030f 	and.w	r3, r3, #15
 800cd32:	e006      	b.n	800cd42 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800cd34:	4b76      	ldr	r3, [pc, #472]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd3a:	041b      	lsls	r3, r3, #16
 800cd3c:	0f1b      	lsrs	r3, r3, #28
 800cd3e:	f003 030f 	and.w	r3, r3, #15
 800cd42:	4a76      	ldr	r2, [pc, #472]	@ (800cf1c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd48:	ee07 3a90 	vmov	s15, r3
 800cd4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	ee07 3a90 	vmov	s15, r3
 800cd64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd68:	ed97 6a02 	vldr	s12, [r7, #8]
 800cd6c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cd70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cd80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd88:	e058      	b.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	ee07 3a90 	vmov	s15, r3
 800cd90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd94:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cf14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800cd98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9c:	4b5c      	ldr	r3, [pc, #368]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cda0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda4:	ee07 3a90 	vmov	s15, r3
 800cda8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdac:	ed97 6a02 	vldr	s12, [r7, #8]
 800cdb0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cdb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cdb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cdc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdcc:	e036      	b.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cdce:	4b50      	ldr	r3, [pc, #320]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d005      	beq.n	800cde6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800cdda:	4b4d      	ldr	r3, [pc, #308]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	0f1b      	lsrs	r3, r3, #28
 800cde0:	f003 030f 	and.w	r3, r3, #15
 800cde4:	e006      	b.n	800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800cde6:	4b4a      	ldr	r3, [pc, #296]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cde8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdec:	041b      	lsls	r3, r3, #16
 800cdee:	0f1b      	lsrs	r3, r3, #28
 800cdf0:	f003 030f 	and.w	r3, r3, #15
 800cdf4:	4a49      	ldr	r2, [pc, #292]	@ (800cf1c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	ee07 3a90 	vmov	s15, r3
 800ce08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	ee07 3a90 	vmov	s15, r3
 800ce16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce1e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ce22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ce32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce3a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ce3c:	4b34      	ldr	r3, [pc, #208]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d017      	beq.n	800ce78 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce48:	4b31      	ldr	r3, [pc, #196]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce4c:	0a5b      	lsrs	r3, r3, #9
 800ce4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ce5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce5e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce6e:	ee17 2a90 	vmov	r2, s15
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	e002      	b.n	800ce7e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ce7e:	4b24      	ldr	r3, [pc, #144]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d017      	beq.n	800ceba <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ce8a:	4b21      	ldr	r3, [pc, #132]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ce8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce8e:	0c1b      	lsrs	r3, r3, #16
 800ce90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce94:	ee07 3a90 	vmov	s15, r3
 800ce98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ce9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cea0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cea4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb0:	ee17 2a90 	vmov	r2, s15
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	605a      	str	r2, [r3, #4]
 800ceb8:	e002      	b.n	800cec0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800cec0:	4b13      	ldr	r3, [pc, #76]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d017      	beq.n	800cefc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cecc:	4b10      	ldr	r3, [pc, #64]	@ (800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ced0:	0e1b      	lsrs	r3, r3, #24
 800ced2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ced6:	ee07 3a90 	vmov	s15, r3
 800ceda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800cede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cee2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cee6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cef2:	ee17 2a90 	vmov	r2, s15
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cefa:	e002      	b.n	800cf02 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	609a      	str	r2, [r3, #8]
}
 800cf02:	bf00      	nop
 800cf04:	3724      	adds	r7, #36	@ 0x24
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	46020c00 	.word	0x46020c00
 800cf14:	4b742400 	.word	0x4b742400
 800cf18:	46000000 	.word	0x46000000
 800cf1c:	08012858 	.word	0x08012858

0800cf20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b089      	sub	sp, #36	@ 0x24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800cf28:	4ba6      	ldr	r3, [pc, #664]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf30:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800cf32:	4ba4      	ldr	r3, [pc, #656]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf36:	f003 0303 	and.w	r3, r3, #3
 800cf3a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800cf3c:	4ba1      	ldr	r3, [pc, #644]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf40:	0a1b      	lsrs	r3, r3, #8
 800cf42:	f003 030f 	and.w	r3, r3, #15
 800cf46:	3301      	adds	r3, #1
 800cf48:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800cf4a:	4b9e      	ldr	r3, [pc, #632]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf4e:	091b      	lsrs	r3, r3, #4
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800cf56:	4b9b      	ldr	r3, [pc, #620]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf5a:	08db      	lsrs	r3, r3, #3
 800cf5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	fb02 f303 	mul.w	r3, r2, r3
 800cf66:	ee07 3a90 	vmov	s15, r3
 800cf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf6e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d062      	beq.n	800d03e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	f200 8081 	bhi.w	800d082 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d024      	beq.n	800cfd0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d17a      	bne.n	800d082 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	ee07 3a90 	vmov	s15, r3
 800cf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf96:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800d1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800cf9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9e:	4b89      	ldr	r3, [pc, #548]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa6:	ee07 3a90 	vmov	s15, r3
 800cfaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfae:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfb2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800d1cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cfb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cfba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cfc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfca:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800cfce:	e08f      	b.n	800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cfd0:	4b7c      	ldr	r3, [pc, #496]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d005      	beq.n	800cfe8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800cfdc:	4b79      	ldr	r3, [pc, #484]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	0f1b      	lsrs	r3, r3, #28
 800cfe2:	f003 030f 	and.w	r3, r3, #15
 800cfe6:	e006      	b.n	800cff6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800cfe8:	4b76      	ldr	r3, [pc, #472]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfee:	041b      	lsls	r3, r3, #16
 800cff0:	0f1b      	lsrs	r3, r3, #28
 800cff2:	f003 030f 	and.w	r3, r3, #15
 800cff6:	4a76      	ldr	r2, [pc, #472]	@ (800d1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800cff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cffc:	ee07 3a90 	vmov	s15, r3
 800d000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	ee07 3a90 	vmov	s15, r3
 800d00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	ee07 3a90 	vmov	s15, r3
 800d018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d01c:	ed97 6a02 	vldr	s12, [r7, #8]
 800d020:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800d1cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800d024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d02c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d030:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d034:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d038:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d03c:	e058      	b.n	800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	ee07 3a90 	vmov	s15, r3
 800d044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d048:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800d04c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d050:	4b5c      	ldr	r3, [pc, #368]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d058:	ee07 3a90 	vmov	s15, r3
 800d05c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800d060:	ed97 6a02 	vldr	s12, [r7, #8]
 800d064:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d1cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800d068:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d06c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800d070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d074:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d07c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d080:	e036      	b.n	800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d082:	4b50      	ldr	r3, [pc, #320]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d005      	beq.n	800d09a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800d08e:	4b4d      	ldr	r3, [pc, #308]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	0f1b      	lsrs	r3, r3, #28
 800d094:	f003 030f 	and.w	r3, r3, #15
 800d098:	e006      	b.n	800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800d09a:	4b4a      	ldr	r3, [pc, #296]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d09c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0a0:	041b      	lsls	r3, r3, #16
 800d0a2:	0f1b      	lsrs	r3, r3, #28
 800d0a4:	f003 030f 	and.w	r3, r3, #15
 800d0a8:	4a49      	ldr	r2, [pc, #292]	@ (800d1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800d0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ae:	ee07 3a90 	vmov	s15, r3
 800d0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	ee07 3a90 	vmov	s15, r3
 800d0bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	ee07 3a90 	vmov	s15, r3
 800d0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800d0d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800d1cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800d0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0ee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800d0f0:	4b34      	ldr	r3, [pc, #208]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d017      	beq.n	800d12c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d0fc:	4b31      	ldr	r3, [pc, #196]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d0fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d100:	0a5b      	lsrs	r3, r3, #9
 800d102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800d10e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d112:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d116:	edd7 6a07 	vldr	s13, [r7, #28]
 800d11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d122:	ee17 2a90 	vmov	r2, s15
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	e002      	b.n	800d132 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800d132:	4b24      	ldr	r3, [pc, #144]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d017      	beq.n	800d16e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d13e:	4b21      	ldr	r3, [pc, #132]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d142:	0c1b      	lsrs	r3, r3, #16
 800d144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d148:	ee07 3a90 	vmov	s15, r3
 800d14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800d150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d154:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d158:	edd7 6a07 	vldr	s13, [r7, #28]
 800d15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d164:	ee17 2a90 	vmov	r2, s15
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	605a      	str	r2, [r3, #4]
 800d16c:	e002      	b.n	800d174 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800d174:	4b13      	ldr	r3, [pc, #76]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d017      	beq.n	800d1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d180:	4b10      	ldr	r3, [pc, #64]	@ (800d1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800d182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d184:	0e1b      	lsrs	r3, r3, #24
 800d186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d18a:	ee07 3a90 	vmov	s15, r3
 800d18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800d192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d196:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d19a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d19e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1a6:	ee17 2a90 	vmov	r2, s15
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d1ae:	e002      	b.n	800d1b6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	609a      	str	r2, [r3, #8]
}
 800d1b6:	bf00      	nop
 800d1b8:	3724      	adds	r7, #36	@ 0x24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	46020c00 	.word	0x46020c00
 800d1c8:	4b742400 	.word	0x4b742400
 800d1cc:	46000000 	.word	0x46000000
 800d1d0:	08012858 	.word	0x08012858

0800d1d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08e      	sub	sp, #56	@ 0x38
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800d1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800d1e6:	430b      	orrs	r3, r1
 800d1e8:	d145      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800d1ea:	4ba7      	ldr	r3, [pc, #668]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1f4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800d1f6:	4ba4      	ldr	r3, [pc, #656]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d1f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b02      	cmp	r3, #2
 800d202:	d108      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800d204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d20a:	d104      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800d20c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d210:	637b      	str	r3, [r7, #52]	@ 0x34
 800d212:	f001 bb5a 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800d216:	4b9c      	ldr	r3, [pc, #624]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d21c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d224:	d114      	bne.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d22c:	d110      	bne.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d22e:	4b96      	ldr	r3, [pc, #600]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d23c:	d103      	bne.n	800d246 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800d23e:	23fa      	movs	r3, #250	@ 0xfa
 800d240:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d242:	f001 bb42 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d246:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d24a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d24c:	f001 bb3d 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800d250:	4b8d      	ldr	r3, [pc, #564]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d25c:	d107      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d264:	d103      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800d266:	4b89      	ldr	r3, [pc, #548]	@ (800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800d268:	637b      	str	r3, [r7, #52]	@ 0x34
 800d26a:	f001 bb2e 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800d26e:	2300      	movs	r3, #0
 800d270:	637b      	str	r3, [r7, #52]	@ 0x34
 800d272:	f001 bb2a 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d27a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d27e:	430b      	orrs	r3, r1
 800d280:	d151      	bne.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d282:	4b81      	ldr	r3, [pc, #516]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d284:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d288:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800d28c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	2b80      	cmp	r3, #128	@ 0x80
 800d292:	d035      	beq.n	800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800d294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d296:	2b80      	cmp	r3, #128	@ 0x80
 800d298:	d841      	bhi.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29c:	2b60      	cmp	r3, #96	@ 0x60
 800d29e:	d02a      	beq.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a2:	2b60      	cmp	r3, #96	@ 0x60
 800d2a4:	d83b      	bhi.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a8:	2b40      	cmp	r3, #64	@ 0x40
 800d2aa:	d009      	beq.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ae:	2b40      	cmp	r3, #64	@ 0x40
 800d2b0:	d835      	bhi.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00c      	beq.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ba:	2b20      	cmp	r3, #32
 800d2bc:	d012      	beq.n	800d2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d2be:	e02e      	b.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7ff fb77 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2ce:	f001 bafc 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2d2:	f107 0318 	add.w	r3, r7, #24
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff fcc8 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2e0:	f001 baf3 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2e4:	f107 030c 	add.w	r3, r7, #12
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff fe19 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f2:	f001 baea 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d2f6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d2fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2fc:	f001 bae5 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d300:	4b61      	ldr	r3, [pc, #388]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d30c:	d103      	bne.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800d30e:	4b60      	ldr	r3, [pc, #384]	@ (800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d310:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d312:	f001 bada 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d316:	2300      	movs	r3, #0
 800d318:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d31a:	f001 bad6 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800d31e:	2300      	movs	r3, #0
 800d320:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d322:	f001 bad2 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d32a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d32e:	430b      	orrs	r3, r1
 800d330:	d158      	bne.n	800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d332:	4b55      	ldr	r3, [pc, #340]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d33c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d344:	d03b      	beq.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d34c:	d846      	bhi.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d354:	d02e      	beq.n	800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800d356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d35c:	d83e      	bhi.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d364:	d00b      	beq.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800d366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d36c:	d836      	bhi.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00d      	beq.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d37a:	d012      	beq.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800d37c:	e02e      	b.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d37e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fb18 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d38c:	f001 ba9d 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d390:	f107 0318 	add.w	r3, r7, #24
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff fc69 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d39e:	f001 ba94 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3a2:	f107 030c 	add.w	r3, r7, #12
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7ff fdba 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3b0:	f001 ba8b 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d3b4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d3b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3ba:	f001 ba86 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3be:	4b32      	ldr	r3, [pc, #200]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3ca:	d103      	bne.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800d3cc:	4b30      	ldr	r3, [pc, #192]	@ (800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d3ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d3d0:	f001 ba7b 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3d8:	f001 ba77 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3e0:	f001 ba73 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800d3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3e8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d3ec:	430b      	orrs	r3, r1
 800d3ee:	d126      	bne.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800d3f0:	4b25      	ldr	r3, [pc, #148]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d3f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d3f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d3fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800d3fc:	4b22      	ldr	r3, [pc, #136]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d408:	d106      	bne.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800d40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d103      	bne.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800d410:	4b1f      	ldr	r3, [pc, #124]	@ (800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d412:	637b      	str	r3, [r7, #52]	@ 0x34
 800d414:	f001 ba59 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800d418:	4b1b      	ldr	r3, [pc, #108]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d424:	d107      	bne.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800d426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d42c:	d103      	bne.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800d42e:	4b19      	ldr	r3, [pc, #100]	@ (800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d430:	637b      	str	r3, [r7, #52]	@ 0x34
 800d432:	f001 ba4a 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800d436:	2300      	movs	r3, #0
 800d438:	637b      	str	r3, [r7, #52]	@ 0x34
 800d43a:	f001 ba46 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800d43e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d442:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800d446:	430b      	orrs	r3, r1
 800d448:	d16e      	bne.n	800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d44a:	4b0f      	ldr	r3, [pc, #60]	@ (800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d44c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d450:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d454:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d458:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d45c:	d03d      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d460:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d464:	d85c      	bhi.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d46c:	d014      	beq.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800d46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d474:	d854      	bhi.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d01f      	beq.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d482:	d012      	beq.n	800d4aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d484:	e04c      	b.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d486:	bf00      	nop
 800d488:	46020c00 	.word	0x46020c00
 800d48c:	0007a120 	.word	0x0007a120
 800d490:	00f42400 	.word	0x00f42400
 800d494:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fa8b 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4a6:	f001 ba10 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4aa:	f107 0318 	add.w	r3, r7, #24
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7ff fbdc 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4b8:	f001 ba07 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d4bc:	4ba7      	ldr	r3, [pc, #668]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d4c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4c8:	d103      	bne.n	800d4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800d4ca:	4ba5      	ldr	r3, [pc, #660]	@ (800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d4cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d4ce:	f001 b9fc 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4d6:	f001 b9f8 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d4da:	4ba0      	ldr	r3, [pc, #640]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f003 0320 	and.w	r3, r3, #32
 800d4e2:	2b20      	cmp	r3, #32
 800d4e4:	d118      	bne.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4e6:	4b9d      	ldr	r3, [pc, #628]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d4f2:	4b9a      	ldr	r3, [pc, #616]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	0e1b      	lsrs	r3, r3, #24
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	e006      	b.n	800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d4fe:	4b97      	ldr	r3, [pc, #604]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d504:	041b      	lsls	r3, r3, #16
 800d506:	0e1b      	lsrs	r3, r3, #24
 800d508:	f003 030f 	and.w	r3, r3, #15
 800d50c:	4a95      	ldr	r2, [pc, #596]	@ (800d764 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d512:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d514:	f001 b9d9 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d51c:	f001 b9d5 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d520:	2300      	movs	r3, #0
 800d522:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d524:	f001 b9d1 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d52c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800d530:	430b      	orrs	r3, r1
 800d532:	d17f      	bne.n	800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d534:	4b89      	ldr	r3, [pc, #548]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d53a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d53e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800d540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d542:	2b00      	cmp	r3, #0
 800d544:	d165      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d546:	4b85      	ldr	r3, [pc, #532]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d54c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d550:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800d552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d554:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d558:	d034      	beq.n	800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800d55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d55c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d560:	d853      	bhi.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d568:	d00b      	beq.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800d56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d570:	d84b      	bhi.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d574:	2b00      	cmp	r3, #0
 800d576:	d016      	beq.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800d578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d57a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d57e:	d009      	beq.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d580:	e043      	b.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff fa16 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d590:	f001 b99b 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d594:	f107 0318 	add.w	r3, r7, #24
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fb67 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d5a2:	f001 b992 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d5a6:	4b6d      	ldr	r3, [pc, #436]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d5ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5b2:	d103      	bne.n	800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800d5b4:	4b6a      	ldr	r3, [pc, #424]	@ (800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d5b6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d5b8:	f001 b987 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d5c0:	f001 b983 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d5c4:	4b65      	ldr	r3, [pc, #404]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f003 0320 	and.w	r3, r3, #32
 800d5cc:	2b20      	cmp	r3, #32
 800d5ce:	d118      	bne.n	800d602 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d5d0:	4b62      	ldr	r3, [pc, #392]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d005      	beq.n	800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800d5dc:	4b5f      	ldr	r3, [pc, #380]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	0e1b      	lsrs	r3, r3, #24
 800d5e2:	f003 030f 	and.w	r3, r3, #15
 800d5e6:	e006      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d5e8:	4b5c      	ldr	r3, [pc, #368]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d5ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d5ee:	041b      	lsls	r3, r3, #16
 800d5f0:	0e1b      	lsrs	r3, r3, #24
 800d5f2:	f003 030f 	and.w	r3, r3, #15
 800d5f6:	4a5b      	ldr	r2, [pc, #364]	@ (800d764 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5fc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d5fe:	f001 b964 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d602:	2300      	movs	r3, #0
 800d604:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d606:	f001 b960 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800d60a:	2300      	movs	r3, #0
 800d60c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d60e:	f001 b95c 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d618:	d108      	bne.n	800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d61a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d61e:	4618      	mov	r0, r3
 800d620:	f7ff f9ca 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	637b      	str	r3, [r7, #52]	@ 0x34
 800d628:	f001 b94f 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800d62c:	2300      	movs	r3, #0
 800d62e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d630:	f001 b94b 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800d634:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d638:	1e51      	subs	r1, r2, #1
 800d63a:	430b      	orrs	r3, r1
 800d63c:	d136      	bne.n	800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d63e:	4b47      	ldr	r3, [pc, #284]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d644:	f003 0303 	and.w	r3, r3, #3
 800d648:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d104      	bne.n	800d65a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800d650:	f7fe f9cc 	bl	800b9ec <HAL_RCC_GetPCLK2Freq>
 800d654:	6378      	str	r0, [r7, #52]	@ 0x34
 800d656:	f001 b938 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800d65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d104      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d660:	f7fe f894 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d664:	6378      	str	r0, [r7, #52]	@ 0x34
 800d666:	f001 b930 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d66a:	4b3c      	ldr	r3, [pc, #240]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d676:	d106      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800d678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67a:	2b02      	cmp	r3, #2
 800d67c:	d103      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800d67e:	4b3a      	ldr	r3, [pc, #232]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d680:	637b      	str	r3, [r7, #52]	@ 0x34
 800d682:	f001 b922 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d686:	4b35      	ldr	r3, [pc, #212]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d68c:	f003 0302 	and.w	r3, r3, #2
 800d690:	2b02      	cmp	r3, #2
 800d692:	d107      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d696:	2b03      	cmp	r3, #3
 800d698:	d104      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800d69a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a0:	f001 b913 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a8:	f001 b90f 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800d6ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6b0:	1e91      	subs	r1, r2, #2
 800d6b2:	430b      	orrs	r3, r1
 800d6b4:	d136      	bne.n	800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d6b6:	4b29      	ldr	r3, [pc, #164]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d6b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6bc:	f003 030c 	and.w	r3, r3, #12
 800d6c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d104      	bne.n	800d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d6c8:	f7fe f97c 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800d6cc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6ce:	f001 b8fc 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	2b04      	cmp	r3, #4
 800d6d6:	d104      	bne.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d6d8:	f7fe f858 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d6dc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6de:	f001 b8f4 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d6e2:	4b1e      	ldr	r3, [pc, #120]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6ee:	d106      	bne.n	800d6fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f2:	2b08      	cmp	r3, #8
 800d6f4:	d103      	bne.n	800d6fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800d6f6:	4b1c      	ldr	r3, [pc, #112]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d6f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6fa:	f001 b8e6 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d6fe:	4b17      	ldr	r3, [pc, #92]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d704:	f003 0302 	and.w	r3, r3, #2
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d107      	bne.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800d70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70e:	2b0c      	cmp	r3, #12
 800d710:	d104      	bne.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800d712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d716:	637b      	str	r3, [r7, #52]	@ 0x34
 800d718:	f001 b8d7 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800d71c:	2300      	movs	r3, #0
 800d71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d720:	f001 b8d3 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800d724:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d728:	1f11      	subs	r1, r2, #4
 800d72a:	430b      	orrs	r3, r1
 800d72c:	d13f      	bne.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d72e:	4b0b      	ldr	r3, [pc, #44]	@ (800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d734:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d738:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d104      	bne.n	800d74a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d740:	f7fe f940 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800d744:	6378      	str	r0, [r7, #52]	@ 0x34
 800d746:	f001 b8c0 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800d74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74c:	2b10      	cmp	r3, #16
 800d74e:	d10d      	bne.n	800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d750:	f7fe f81c 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d754:	6378      	str	r0, [r7, #52]	@ 0x34
 800d756:	f001 b8b8 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d75a:	bf00      	nop
 800d75c:	46020c00 	.word	0x46020c00
 800d760:	02dc6c00 	.word	0x02dc6c00
 800d764:	08012858 	.word	0x08012858
 800d768:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d76c:	4ba8      	ldr	r3, [pc, #672]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d778:	d106      	bne.n	800d788 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800d77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77c:	2b20      	cmp	r3, #32
 800d77e:	d103      	bne.n	800d788 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800d780:	4ba4      	ldr	r3, [pc, #656]	@ (800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d782:	637b      	str	r3, [r7, #52]	@ 0x34
 800d784:	f001 b8a1 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d788:	4ba1      	ldr	r3, [pc, #644]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d78a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d78e:	f003 0302 	and.w	r3, r3, #2
 800d792:	2b02      	cmp	r3, #2
 800d794:	d107      	bne.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d798:	2b30      	cmp	r3, #48	@ 0x30
 800d79a:	d104      	bne.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800d79c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7a2:	f001 b892 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7aa:	f001 b88e 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800d7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7b2:	f1a2 0108 	sub.w	r1, r2, #8
 800d7b6:	430b      	orrs	r3, r1
 800d7b8:	d136      	bne.n	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d7ba:	4b95      	ldr	r3, [pc, #596]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d7c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d104      	bne.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d7cc:	f7fe f8fa 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800d7d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d7d2:	f001 b87a 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d8:	2b40      	cmp	r3, #64	@ 0x40
 800d7da:	d104      	bne.n	800d7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d7dc:	f7fd ffd6 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d7e0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d7e2:	f001 b872 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d7e6:	4b8a      	ldr	r3, [pc, #552]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7f2:	d106      	bne.n	800d802 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f6:	2b80      	cmp	r3, #128	@ 0x80
 800d7f8:	d103      	bne.n	800d802 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800d7fa:	4b86      	ldr	r3, [pc, #536]	@ (800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d7fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7fe:	f001 b864 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d802:	4b83      	ldr	r3, [pc, #524]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d808:	f003 0302 	and.w	r3, r3, #2
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d107      	bne.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	2bc0      	cmp	r3, #192	@ 0xc0
 800d814:	d104      	bne.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800d816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d81a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d81c:	f001 b855 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800d820:	2300      	movs	r3, #0
 800d822:	637b      	str	r3, [r7, #52]	@ 0x34
 800d824:	f001 b851 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800d828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d82c:	f1a2 0110 	sub.w	r1, r2, #16
 800d830:	430b      	orrs	r3, r1
 800d832:	d139      	bne.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d834:	4b76      	ldr	r3, [pc, #472]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d83a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d83e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d842:	2b00      	cmp	r3, #0
 800d844:	d104      	bne.n	800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d846:	f7fe f8bd 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800d84a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d84c:	f001 b83d 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800d850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d856:	d104      	bne.n	800d862 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d858:	f7fd ff98 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d85c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d85e:	f001 b834 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d862:	4b6b      	ldr	r3, [pc, #428]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d86a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d86e:	d107      	bne.n	800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d876:	d103      	bne.n	800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800d878:	4b66      	ldr	r3, [pc, #408]	@ (800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d87a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d87c:	f001 b825 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d880:	4b63      	ldr	r3, [pc, #396]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d886:	f003 0302 	and.w	r3, r3, #2
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d108      	bne.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800d88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d890:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d894:	d104      	bne.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800d896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d89a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d89c:	f001 b815 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8a4:	f001 b811 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800d8a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8ac:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800d8b0:	430b      	orrs	r3, r1
 800d8b2:	d139      	bne.n	800d928 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d8b4:	4b56      	ldr	r3, [pc, #344]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d8b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d8ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d8be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d104      	bne.n	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d8c6:	f7fe f87d 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800d8ca:	6378      	str	r0, [r7, #52]	@ 0x34
 800d8cc:	f000 bffd 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8d6:	d104      	bne.n	800d8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d8d8:	f7fd ff58 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d8dc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d8de:	f000 bff4 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d8e2:	4b4b      	ldr	r3, [pc, #300]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8ee:	d107      	bne.n	800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8f6:	d103      	bne.n	800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800d8f8:	4b46      	ldr	r3, [pc, #280]	@ (800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d8fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8fc:	f000 bfe5 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d900:	4b43      	ldr	r3, [pc, #268]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d906:	f003 0302 	and.w	r3, r3, #2
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d108      	bne.n	800d920 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800d90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d910:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d914:	d104      	bne.n	800d920 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800d916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d91a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d91c:	f000 bfd5 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d920:	2300      	movs	r3, #0
 800d922:	637b      	str	r3, [r7, #52]	@ 0x34
 800d924:	f000 bfd1 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800d928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d92c:	f1a2 0120 	sub.w	r1, r2, #32
 800d930:	430b      	orrs	r3, r1
 800d932:	d158      	bne.n	800d9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d934:	4b36      	ldr	r3, [pc, #216]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d93a:	f003 0307 	and.w	r3, r3, #7
 800d93e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d942:	2b00      	cmp	r3, #0
 800d944:	d104      	bne.n	800d950 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800d946:	f7fe f865 	bl	800ba14 <HAL_RCC_GetPCLK3Freq>
 800d94a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d94c:	f000 bfbd 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800d950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d952:	2b01      	cmp	r3, #1
 800d954:	d104      	bne.n	800d960 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d956:	f7fd ff19 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d95a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d95c:	f000 bfb5 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d960:	4b2b      	ldr	r3, [pc, #172]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d96c:	d106      	bne.n	800d97c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800d96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d970:	2b02      	cmp	r3, #2
 800d972:	d103      	bne.n	800d97c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800d974:	4b27      	ldr	r3, [pc, #156]	@ (800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d976:	637b      	str	r3, [r7, #52]	@ 0x34
 800d978:	f000 bfa7 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d97c:	4b24      	ldr	r3, [pc, #144]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d97e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b02      	cmp	r3, #2
 800d988:	d107      	bne.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98c:	2b03      	cmp	r3, #3
 800d98e:	d104      	bne.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800d990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d994:	637b      	str	r3, [r7, #52]	@ 0x34
 800d996:	f000 bf98 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800d99a:	4b1d      	ldr	r3, [pc, #116]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f003 0320 	and.w	r3, r3, #32
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	d11b      	bne.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	d118      	bne.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d9ac:	4b18      	ldr	r3, [pc, #96]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800d9b8:	4b15      	ldr	r3, [pc, #84]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	0e1b      	lsrs	r3, r3, #24
 800d9be:	f003 030f 	and.w	r3, r3, #15
 800d9c2:	e006      	b.n	800d9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800d9c4:	4b12      	ldr	r3, [pc, #72]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d9c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9ca:	041b      	lsls	r3, r3, #16
 800d9cc:	0e1b      	lsrs	r3, r3, #24
 800d9ce:	f003 030f 	and.w	r3, r3, #15
 800d9d2:	4a11      	ldr	r2, [pc, #68]	@ (800da18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9da:	f000 bf76 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9e2:	f000 bf72 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800d9e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9ea:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d9ee:	430b      	orrs	r3, r1
 800d9f0:	d172      	bne.n	800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d9f2:	4b07      	ldr	r3, [pc, #28]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d9f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d9fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da04:	d10a      	bne.n	800da1c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800da06:	f7fd fec1 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800da0a:	6378      	str	r0, [r7, #52]	@ 0x34
 800da0c:	f000 bf5d 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800da10:	46020c00 	.word	0x46020c00
 800da14:	00f42400 	.word	0x00f42400
 800da18:	08012858 	.word	0x08012858
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800da1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da22:	d108      	bne.n	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da24:	f107 0318 	add.w	r3, r7, #24
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff f91f 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	637b      	str	r3, [r7, #52]	@ 0x34
 800da32:	f000 bf4a 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800da36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d104      	bne.n	800da46 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800da3c:	f7fd ffa8 	bl	800b990 <HAL_RCC_GetHCLKFreq>
 800da40:	6378      	str	r0, [r7, #52]	@ 0x34
 800da42:	f000 bf42 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800da4c:	d122      	bne.n	800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da4e:	4bb0      	ldr	r3, [pc, #704]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0320 	and.w	r3, r3, #32
 800da56:	2b20      	cmp	r3, #32
 800da58:	d118      	bne.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da5a:	4bad      	ldr	r3, [pc, #692]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da62:	2b00      	cmp	r3, #0
 800da64:	d005      	beq.n	800da72 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800da66:	4baa      	ldr	r3, [pc, #680]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	0e1b      	lsrs	r3, r3, #24
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	e006      	b.n	800da80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800da72:	4ba7      	ldr	r3, [pc, #668]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da78:	041b      	lsls	r3, r3, #16
 800da7a:	0e1b      	lsrs	r3, r3, #24
 800da7c:	f003 030f 	and.w	r3, r3, #15
 800da80:	4aa4      	ldr	r2, [pc, #656]	@ (800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800da82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da86:	637b      	str	r3, [r7, #52]	@ 0x34
 800da88:	f000 bf1f 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800da8c:	2300      	movs	r3, #0
 800da8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da90:	f000 bf1b 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800da94:	4b9e      	ldr	r3, [pc, #632]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800daa0:	d107      	bne.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800daa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800daa8:	d103      	bne.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800daaa:	4b9b      	ldr	r3, [pc, #620]	@ (800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800daac:	637b      	str	r3, [r7, #52]	@ 0x34
 800daae:	f000 bf0c 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800dab2:	4b97      	ldr	r3, [pc, #604]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800daba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dabe:	d107      	bne.n	800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800dac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dac6:	d103      	bne.n	800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800dac8:	4b93      	ldr	r3, [pc, #588]	@ (800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800daca:	637b      	str	r3, [r7, #52]	@ 0x34
 800dacc:	f000 befd 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800dad0:	2300      	movs	r3, #0
 800dad2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dad4:	f000 bef9 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800dad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dadc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800dae0:	430b      	orrs	r3, r1
 800dae2:	d158      	bne.n	800db96 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800dae4:	4b8a      	ldr	r3, [pc, #552]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800daea:	f003 0307 	and.w	r3, r3, #7
 800daee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800daf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf2:	2b04      	cmp	r3, #4
 800daf4:	d84b      	bhi.n	800db8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800daf6:	a201      	add	r2, pc, #4	@ (adr r2, 800dafc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800daf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dafc:	0800db35 	.word	0x0800db35
 800db00:	0800db11 	.word	0x0800db11
 800db04:	0800db23 	.word	0x0800db23
 800db08:	0800db3f 	.word	0x0800db3f
 800db0c:	0800db49 	.word	0x0800db49
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe ff4f 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800db1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db1e:	f000 bed4 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db22:	f107 030c 	add.w	r3, r7, #12
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff f9fa 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db30:	f000 becb 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800db34:	f7fd ff2c 	bl	800b990 <HAL_RCC_GetHCLKFreq>
 800db38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db3a:	f000 bec6 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800db3e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800db42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db44:	f000 bec1 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800db48:	4b71      	ldr	r3, [pc, #452]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f003 0320 	and.w	r3, r3, #32
 800db50:	2b20      	cmp	r3, #32
 800db52:	d118      	bne.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db54:	4b6e      	ldr	r3, [pc, #440]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d005      	beq.n	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800db60:	4b6b      	ldr	r3, [pc, #428]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	0e1b      	lsrs	r3, r3, #24
 800db66:	f003 030f 	and.w	r3, r3, #15
 800db6a:	e006      	b.n	800db7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800db6c:	4b68      	ldr	r3, [pc, #416]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db72:	041b      	lsls	r3, r3, #16
 800db74:	0e1b      	lsrs	r3, r3, #24
 800db76:	f003 030f 	and.w	r3, r3, #15
 800db7a:	4a66      	ldr	r2, [pc, #408]	@ (800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800db7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800db82:	f000 bea2 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800db86:	2300      	movs	r3, #0
 800db88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db8a:	f000 be9e 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db8e:	2300      	movs	r3, #0
 800db90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db92:	f000 be9a 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800db96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db9a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800db9e:	430b      	orrs	r3, r1
 800dba0:	d167      	bne.n	800dc72 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800dba2:	4b5b      	ldr	r3, [pc, #364]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dba8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800dbac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dbb4:	d036      	beq.n	800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dbbc:	d855      	bhi.n	800dc6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dbc4:	d029      	beq.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dbcc:	d84d      	bhi.n	800dc6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800dbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbd4:	d013      	beq.n	800dbfe <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbdc:	d845      	bhi.n	800dc6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800dbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d015      	beq.n	800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbea:	d13e      	bne.n	800dc6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fe fee1 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbfa:	f000 be66 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbfe:	f107 030c 	add.w	r3, r7, #12
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7ff f98c 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc0c:	f000 be5d 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800dc10:	f7fd febe 	bl	800b990 <HAL_RCC_GetHCLKFreq>
 800dc14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc16:	f000 be58 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800dc1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800dc1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc20:	f000 be53 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dc24:	4b3a      	ldr	r3, [pc, #232]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f003 0320 	and.w	r3, r3, #32
 800dc2c:	2b20      	cmp	r3, #32
 800dc2e:	d118      	bne.n	800dc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dc30:	4b37      	ldr	r3, [pc, #220]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800dc3c:	4b34      	ldr	r3, [pc, #208]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	0e1b      	lsrs	r3, r3, #24
 800dc42:	f003 030f 	and.w	r3, r3, #15
 800dc46:	e006      	b.n	800dc56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800dc48:	4b31      	ldr	r3, [pc, #196]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dc4e:	041b      	lsls	r3, r3, #16
 800dc50:	0e1b      	lsrs	r3, r3, #24
 800dc52:	f003 030f 	and.w	r3, r3, #15
 800dc56:	4a2f      	ldr	r2, [pc, #188]	@ (800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800dc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc5e:	f000 be34 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc66:	f000 be30 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc6e:	f000 be2c 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800dc72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc76:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800dc7a:	430b      	orrs	r3, r1
 800dc7c:	d152      	bne.n	800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800dc7e:	4b24      	ldr	r3, [pc, #144]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dc80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dc84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dc88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d104      	bne.n	800dc9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dc90:	f7fd fe98 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800dc94:	6378      	str	r0, [r7, #52]	@ 0x34
 800dc96:	f000 be18 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dca0:	d104      	bne.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dca2:	f7fd fd73 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800dca6:	6378      	str	r0, [r7, #52]	@ 0x34
 800dca8:	f000 be0f 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800dcac:	4b18      	ldr	r3, [pc, #96]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dcb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcb8:	d107      	bne.n	800dcca <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800dcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcc0:	d103      	bne.n	800dcca <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800dcc2:	4b15      	ldr	r3, [pc, #84]	@ (800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800dcc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcc6:	f000 be00 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800dcca:	4b11      	ldr	r3, [pc, #68]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f003 0320 	and.w	r3, r3, #32
 800dcd2:	2b20      	cmp	r3, #32
 800dcd4:	d122      	bne.n	800dd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dcdc:	d11e      	bne.n	800dd1c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dcde:	4b0c      	ldr	r3, [pc, #48]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d005      	beq.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800dcea:	4b09      	ldr	r3, [pc, #36]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	0e1b      	lsrs	r3, r3, #24
 800dcf0:	f003 030f 	and.w	r3, r3, #15
 800dcf4:	e006      	b.n	800dd04 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800dcf6:	4b06      	ldr	r3, [pc, #24]	@ (800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dcf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dcfc:	041b      	lsls	r3, r3, #16
 800dcfe:	0e1b      	lsrs	r3, r3, #24
 800dd00:	f003 030f 	and.w	r3, r3, #15
 800dd04:	4a03      	ldr	r2, [pc, #12]	@ (800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800dd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd0c:	f000 bddd 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dd10:	46020c00 	.word	0x46020c00
 800dd14:	08012858 	.word	0x08012858
 800dd18:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd20:	f000 bdd3 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800dd24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd28:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800dd2c:	430b      	orrs	r3, r1
 800dd2e:	d14c      	bne.n	800ddca <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800dd30:	4ba8      	ldr	r3, [pc, #672]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dd3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d104      	bne.n	800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dd42:	f7fd fe3f 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800dd46:	6378      	str	r0, [r7, #52]	@ 0x34
 800dd48:	f000 bdbf 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800dd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd52:	d104      	bne.n	800dd5e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dd54:	f7fd fd1a 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800dd58:	6378      	str	r0, [r7, #52]	@ 0x34
 800dd5a:	f000 bdb6 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800dd5e:	4b9d      	ldr	r3, [pc, #628]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd6a:	d107      	bne.n	800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd72:	d103      	bne.n	800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800dd74:	4b98      	ldr	r3, [pc, #608]	@ (800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dd76:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd78:	f000 bda7 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800dd7c:	4b95      	ldr	r3, [pc, #596]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f003 0320 	and.w	r3, r3, #32
 800dd84:	2b20      	cmp	r3, #32
 800dd86:	d11c      	bne.n	800ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800dd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd8e:	d118      	bne.n	800ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dd90:	4b90      	ldr	r3, [pc, #576]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d005      	beq.n	800dda8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800dd9c:	4b8d      	ldr	r3, [pc, #564]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	0e1b      	lsrs	r3, r3, #24
 800dda2:	f003 030f 	and.w	r3, r3, #15
 800dda6:	e006      	b.n	800ddb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800dda8:	4b8a      	ldr	r3, [pc, #552]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ddaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ddae:	041b      	lsls	r3, r3, #16
 800ddb0:	0e1b      	lsrs	r3, r3, #24
 800ddb2:	f003 030f 	and.w	r3, r3, #15
 800ddb6:	4a89      	ldr	r2, [pc, #548]	@ (800dfdc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ddb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddbe:	f000 bd84 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddc6:	f000 bd80 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ddca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ddd2:	430b      	orrs	r3, r1
 800ddd4:	d158      	bne.n	800de88 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ddd6:	4b7f      	ldr	r3, [pc, #508]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ddd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dddc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dde0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde4:	2bc0      	cmp	r3, #192	@ 0xc0
 800dde6:	d028      	beq.n	800de3a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800dde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddea:	2bc0      	cmp	r3, #192	@ 0xc0
 800ddec:	d848      	bhi.n	800de80 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf0:	2b80      	cmp	r3, #128	@ 0x80
 800ddf2:	d00e      	beq.n	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ddf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf6:	2b80      	cmp	r3, #128	@ 0x80
 800ddf8:	d842      	bhi.n	800de80 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d003      	beq.n	800de08 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800de00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de02:	2b40      	cmp	r3, #64	@ 0x40
 800de04:	d014      	beq.n	800de30 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800de06:	e03b      	b.n	800de80 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800de08:	f7fd fe04 	bl	800ba14 <HAL_RCC_GetPCLK3Freq>
 800de0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800de0e:	f000 bd5c 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800de12:	4b70      	ldr	r3, [pc, #448]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de1e:	d103      	bne.n	800de28 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800de20:	4b6d      	ldr	r3, [pc, #436]	@ (800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800de22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800de24:	f000 bd51 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de2c:	f000 bd4d 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800de30:	f7fd fcac 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800de34:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800de36:	f000 bd48 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800de3a:	4b66      	ldr	r3, [pc, #408]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f003 0320 	and.w	r3, r3, #32
 800de42:	2b20      	cmp	r3, #32
 800de44:	d118      	bne.n	800de78 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800de46:	4b63      	ldr	r3, [pc, #396]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d005      	beq.n	800de5e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800de52:	4b60      	ldr	r3, [pc, #384]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	0e1b      	lsrs	r3, r3, #24
 800de58:	f003 030f 	and.w	r3, r3, #15
 800de5c:	e006      	b.n	800de6c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800de5e:	4b5d      	ldr	r3, [pc, #372]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800de64:	041b      	lsls	r3, r3, #16
 800de66:	0e1b      	lsrs	r3, r3, #24
 800de68:	f003 030f 	and.w	r3, r3, #15
 800de6c:	4a5b      	ldr	r2, [pc, #364]	@ (800dfdc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800de6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800de74:	f000 bd29 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800de78:	2300      	movs	r3, #0
 800de7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de7c:	f000 bd25 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800de80:	2300      	movs	r3, #0
 800de82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de84:	f000 bd21 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800de88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de8c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800de90:	430b      	orrs	r3, r1
 800de92:	d14c      	bne.n	800df2e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800de94:	4b4f      	ldr	r3, [pc, #316]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800de96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800de9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800dea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d104      	bne.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dea6:	f7fd fd8d 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800deaa:	6378      	str	r0, [r7, #52]	@ 0x34
 800deac:	f000 bd0d 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800deb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800deb6:	d104      	bne.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800deb8:	f7fd fc68 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800debc:	6378      	str	r0, [r7, #52]	@ 0x34
 800debe:	f000 bd04 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800dec2:	4b44      	ldr	r3, [pc, #272]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800deca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dece:	d107      	bne.n	800dee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800ded0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ded6:	d103      	bne.n	800dee0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800ded8:	4b3f      	ldr	r3, [pc, #252]	@ (800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800deda:	637b      	str	r3, [r7, #52]	@ 0x34
 800dedc:	f000 bcf5 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800dee0:	4b3c      	ldr	r3, [pc, #240]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f003 0320 	and.w	r3, r3, #32
 800dee8:	2b20      	cmp	r3, #32
 800deea:	d11c      	bne.n	800df26 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800def2:	d118      	bne.n	800df26 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800def4:	4b37      	ldr	r3, [pc, #220]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800df00:	4b34      	ldr	r3, [pc, #208]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	0e1b      	lsrs	r3, r3, #24
 800df06:	f003 030f 	and.w	r3, r3, #15
 800df0a:	e006      	b.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800df0c:	4b31      	ldr	r3, [pc, #196]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800df12:	041b      	lsls	r3, r3, #16
 800df14:	0e1b      	lsrs	r3, r3, #24
 800df16:	f003 030f 	and.w	r3, r3, #15
 800df1a:	4a30      	ldr	r2, [pc, #192]	@ (800dfdc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800df1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df20:	637b      	str	r3, [r7, #52]	@ 0x34
 800df22:	f000 bcd2 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800df26:	2300      	movs	r3, #0
 800df28:	637b      	str	r3, [r7, #52]	@ 0x34
 800df2a:	f000 bcce 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800df2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df32:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800df36:	430b      	orrs	r3, r1
 800df38:	d152      	bne.n	800dfe0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800df3a:	4b26      	ldr	r3, [pc, #152]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800df40:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800df44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800df46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d104      	bne.n	800df56 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800df4c:	f7fd fd3a 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800df50:	6378      	str	r0, [r7, #52]	@ 0x34
 800df52:	f000 bcba 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800df56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df5c:	d104      	bne.n	800df68 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800df5e:	f7fd fc15 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800df62:	6378      	str	r0, [r7, #52]	@ 0x34
 800df64:	f000 bcb1 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800df68:	4b1a      	ldr	r3, [pc, #104]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df74:	d107      	bne.n	800df86 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800df76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800df7c:	d103      	bne.n	800df86 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800df7e:	4b16      	ldr	r3, [pc, #88]	@ (800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800df80:	637b      	str	r3, [r7, #52]	@ 0x34
 800df82:	f000 bca2 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800df86:	4b13      	ldr	r3, [pc, #76]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f003 0320 	and.w	r3, r3, #32
 800df8e:	2b20      	cmp	r3, #32
 800df90:	d11c      	bne.n	800dfcc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800df92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800df98:	d118      	bne.n	800dfcc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800df9a:	4b0e      	ldr	r3, [pc, #56]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d005      	beq.n	800dfb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	0e1b      	lsrs	r3, r3, #24
 800dfac:	f003 030f 	and.w	r3, r3, #15
 800dfb0:	e006      	b.n	800dfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800dfb2:	4b08      	ldr	r3, [pc, #32]	@ (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dfb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dfb8:	041b      	lsls	r3, r3, #16
 800dfba:	0e1b      	lsrs	r3, r3, #24
 800dfbc:	f003 030f 	and.w	r3, r3, #15
 800dfc0:	4a06      	ldr	r2, [pc, #24]	@ (800dfdc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfc8:	f000 bc7f 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfd0:	f000 bc7b 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dfd4:	46020c00 	.word	0x46020c00
 800dfd8:	00f42400 	.word	0x00f42400
 800dfdc:	08012858 	.word	0x08012858
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800dfe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfe4:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800dfe8:	430b      	orrs	r3, r1
 800dfea:	d14c      	bne.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800dfec:	4ba6      	ldr	r3, [pc, #664]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dff2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800dff6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800dff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d104      	bne.n	800e008 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dffe:	f7fd fce1 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800e002:	6378      	str	r0, [r7, #52]	@ 0x34
 800e004:	f000 bc61 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800e008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e00e:	d104      	bne.n	800e01a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e010:	f7fd fbbc 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800e014:	6378      	str	r0, [r7, #52]	@ 0x34
 800e016:	f000 bc58 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800e01a:	4b9b      	ldr	r3, [pc, #620]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e026:	d107      	bne.n	800e038 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800e028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e02e:	d103      	bne.n	800e038 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800e030:	4b96      	ldr	r3, [pc, #600]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800e032:	637b      	str	r3, [r7, #52]	@ 0x34
 800e034:	f000 bc49 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800e038:	4b93      	ldr	r3, [pc, #588]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f003 0320 	and.w	r3, r3, #32
 800e040:	2b20      	cmp	r3, #32
 800e042:	d11c      	bne.n	800e07e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e04a:	d118      	bne.n	800e07e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e04c:	4b8e      	ldr	r3, [pc, #568]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800e058:	4b8b      	ldr	r3, [pc, #556]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	0e1b      	lsrs	r3, r3, #24
 800e05e:	f003 030f 	and.w	r3, r3, #15
 800e062:	e006      	b.n	800e072 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800e064:	4b88      	ldr	r3, [pc, #544]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e06a:	041b      	lsls	r3, r3, #16
 800e06c:	0e1b      	lsrs	r3, r3, #24
 800e06e:	f003 030f 	and.w	r3, r3, #15
 800e072:	4a87      	ldr	r2, [pc, #540]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800e074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e078:	637b      	str	r3, [r7, #52]	@ 0x34
 800e07a:	f000 bc26 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800e07e:	2300      	movs	r3, #0
 800e080:	637b      	str	r3, [r7, #52]	@ 0x34
 800e082:	f000 bc22 	b.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800e086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e08a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800e08e:	430b      	orrs	r3, r1
 800e090:	d164      	bne.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800e092:	4b7d      	ldr	r3, [pc, #500]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e09c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800e09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d120      	bne.n	800e0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e0a4:	4b78      	ldr	r3, [pc, #480]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 0320 	and.w	r3, r3, #32
 800e0ac:	2b20      	cmp	r3, #32
 800e0ae:	d117      	bne.n	800e0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e0b0:	4b75      	ldr	r3, [pc, #468]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d005      	beq.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800e0bc:	4b72      	ldr	r3, [pc, #456]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	0e1b      	lsrs	r3, r3, #24
 800e0c2:	f003 030f 	and.w	r3, r3, #15
 800e0c6:	e006      	b.n	800e0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800e0c8:	4b6f      	ldr	r3, [pc, #444]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e0ce:	041b      	lsls	r3, r3, #16
 800e0d0:	0e1b      	lsrs	r3, r3, #24
 800e0d2:	f003 030f 	and.w	r3, r3, #15
 800e0d6:	4a6e      	ldr	r2, [pc, #440]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800e0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0de:	e3f4      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0e4:	e3f1      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800e0e6:	4b68      	ldr	r3, [pc, #416]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e0f4:	d112      	bne.n	800e11c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0fc:	d10e      	bne.n	800e11c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e0fe:	4b62      	ldr	r3, [pc, #392]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e10c:	d102      	bne.n	800e114 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800e10e:	23fa      	movs	r3, #250	@ 0xfa
 800e110:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e112:	e3da      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e114:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e118:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e11a:	e3d6      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800e11c:	4b5a      	ldr	r3, [pc, #360]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e128:	d106      	bne.n	800e138 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800e12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e130:	d102      	bne.n	800e138 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800e132:	4b56      	ldr	r3, [pc, #344]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800e134:	637b      	str	r3, [r7, #52]	@ 0x34
 800e136:	e3c8      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800e138:	4b53      	ldr	r3, [pc, #332]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e13a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e13e:	f003 0302 	and.w	r3, r3, #2
 800e142:	2b02      	cmp	r3, #2
 800e144:	d107      	bne.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800e146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e14c:	d103      	bne.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800e14e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e152:	637b      	str	r3, [r7, #52]	@ 0x34
 800e154:	e3b9      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	637b      	str	r3, [r7, #52]	@ 0x34
 800e15a:	e3b6      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800e15c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e160:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800e164:	430b      	orrs	r3, r1
 800e166:	d164      	bne.n	800e232 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e168:	4b47      	ldr	r3, [pc, #284]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e16a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e16e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e172:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800e174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e176:	2b00      	cmp	r3, #0
 800e178:	d120      	bne.n	800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e17a:	4b43      	ldr	r3, [pc, #268]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f003 0320 	and.w	r3, r3, #32
 800e182:	2b20      	cmp	r3, #32
 800e184:	d117      	bne.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e186:	4b40      	ldr	r3, [pc, #256]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d005      	beq.n	800e19e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800e192:	4b3d      	ldr	r3, [pc, #244]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	0e1b      	lsrs	r3, r3, #24
 800e198:	f003 030f 	and.w	r3, r3, #15
 800e19c:	e006      	b.n	800e1ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800e19e:	4b3a      	ldr	r3, [pc, #232]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e1a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e1a4:	041b      	lsls	r3, r3, #16
 800e1a6:	0e1b      	lsrs	r3, r3, #24
 800e1a8:	f003 030f 	and.w	r3, r3, #15
 800e1ac:	4a38      	ldr	r2, [pc, #224]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800e1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1b4:	e389      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1ba:	e386      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800e1bc:	4b32      	ldr	r3, [pc, #200]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e1be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e1ca:	d112      	bne.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1d2:	d10e      	bne.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1d4:	4b2c      	ldr	r3, [pc, #176]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e1d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1e2:	d102      	bne.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800e1e4:	23fa      	movs	r3, #250	@ 0xfa
 800e1e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1e8:	e36f      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e1ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e1ee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e1f0:	e36b      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800e1f2:	4b25      	ldr	r3, [pc, #148]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e1fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1fe:	d106      	bne.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800e200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e206:	d102      	bne.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800e208:	4b20      	ldr	r3, [pc, #128]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800e20a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e20c:	e35d      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800e20e:	4b1e      	ldr	r3, [pc, #120]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	2b02      	cmp	r3, #2
 800e21a:	d107      	bne.n	800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800e21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e222:	d103      	bne.n	800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800e224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e228:	637b      	str	r3, [r7, #52]	@ 0x34
 800e22a:	e34e      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800e22c:	2300      	movs	r3, #0
 800e22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e230:	e34b      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800e232:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e236:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e23a:	430b      	orrs	r3, r1
 800e23c:	d14e      	bne.n	800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e23e:	4b12      	ldr	r3, [pc, #72]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e244:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800e248:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800e24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d103      	bne.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e250:	f7fd fbb8 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800e254:	6378      	str	r0, [r7, #52]	@ 0x34
 800e256:	e338      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800e258:	4b0b      	ldr	r3, [pc, #44]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e25a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e25e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e266:	d119      	bne.n	800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800e268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e26e:	d115      	bne.n	800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e270:	4b05      	ldr	r3, [pc, #20]	@ (800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e27a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e27e:	d109      	bne.n	800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800e280:	23fa      	movs	r3, #250	@ 0xfa
 800e282:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e284:	e321      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e286:	bf00      	nop
 800e288:	46020c00 	.word	0x46020c00
 800e28c:	00f42400 	.word	0x00f42400
 800e290:	08012858 	.word	0x08012858
      }
      else
      {
        frequency = LSI_VALUE;
 800e294:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e298:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e29a:	e316      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800e29c:	4ba8      	ldr	r3, [pc, #672]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2a8:	d106      	bne.n	800e2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e2b0:	d102      	bne.n	800e2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800e2b2:	4ba4      	ldr	r3, [pc, #656]	@ (800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e2b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2b6:	e308      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800e2b8:	4ba1      	ldr	r3, [pc, #644]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e2be:	f003 0302 	and.w	r3, r3, #2
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d107      	bne.n	800e2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e2cc:	d103      	bne.n	800e2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800e2ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2d4:	e2f9      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2da:	e2f6      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800e2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2e0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800e2e4:	430b      	orrs	r3, r1
 800e2e6:	d12d      	bne.n	800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800e2e8:	4b95      	ldr	r3, [pc, #596]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e2ee:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800e2f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800e2f4:	4b92      	ldr	r3, [pc, #584]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e300:	d105      	bne.n	800e30e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800e302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e304:	2b00      	cmp	r3, #0
 800e306:	d102      	bne.n	800e30e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800e308:	4b8e      	ldr	r3, [pc, #568]	@ (800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e30a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e30c:	e2dd      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e314:	d107      	bne.n	800e326 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fe fb4c 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800e320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e322:	637b      	str	r3, [r7, #52]	@ 0x34
 800e324:	e2d1      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800e326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e32c:	d107      	bne.n	800e33e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e32e:	f107 0318 	add.w	r3, r7, #24
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe fc9a 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e33c:	e2c5      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800e33e:	2300      	movs	r3, #0
 800e340:	637b      	str	r3, [r7, #52]	@ 0x34
 800e342:	e2c2      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800e344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e348:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800e34c:	430b      	orrs	r3, r1
 800e34e:	d156      	bne.n	800e3fe <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e350:	4b7b      	ldr	r3, [pc, #492]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e356:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e35a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e35e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e362:	d028      	beq.n	800e3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800e364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e366:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e36a:	d845      	bhi.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e36e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e372:	d013      	beq.n	800e39c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800e374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e376:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e37a:	d83d      	bhi.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d004      	beq.n	800e38c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800e382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e384:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e388:	d004      	beq.n	800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800e38a:	e035      	b.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800e38c:	f7fd fb2e 	bl	800b9ec <HAL_RCC_GetPCLK2Freq>
 800e390:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e392:	e29a      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e394:	f7fd f9fa 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800e398:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e39a:	e296      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e39c:	4b68      	ldr	r3, [pc, #416]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3a8:	d102      	bne.n	800e3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800e3aa:	4b66      	ldr	r3, [pc, #408]	@ (800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e3ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e3ae:	e28c      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3b4:	e289      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e3b6:	4b62      	ldr	r3, [pc, #392]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f003 0320 	and.w	r3, r3, #32
 800e3be:	2b20      	cmp	r3, #32
 800e3c0:	d117      	bne.n	800e3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e3c2:	4b5f      	ldr	r3, [pc, #380]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d005      	beq.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800e3ce:	4b5c      	ldr	r3, [pc, #368]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	0e1b      	lsrs	r3, r3, #24
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	e006      	b.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800e3da:	4b59      	ldr	r3, [pc, #356]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e3dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e3e0:	041b      	lsls	r3, r3, #16
 800e3e2:	0e1b      	lsrs	r3, r3, #24
 800e3e4:	f003 030f 	and.w	r3, r3, #15
 800e3e8:	4a57      	ldr	r2, [pc, #348]	@ (800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e3f0:	e26b      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3f6:	e268      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3fc:	e265      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800e3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e402:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800e406:	430b      	orrs	r3, r1
 800e408:	d156      	bne.n	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e40a:	4b4d      	ldr	r3, [pc, #308]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e40c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e410:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e414:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e41c:	d028      	beq.n	800e470 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800e41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e420:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e424:	d845      	bhi.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e42c:	d013      	beq.n	800e456 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e434:	d83d      	bhi.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d004      	beq.n	800e446 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800e43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e442:	d004      	beq.n	800e44e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800e444:	e035      	b.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800e446:	f7fd fabd 	bl	800b9c4 <HAL_RCC_GetPCLK1Freq>
 800e44a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e44c:	e23d      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e44e:	f7fd f99d 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800e452:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e454:	e239      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e456:	4b3a      	ldr	r3, [pc, #232]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e45e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e462:	d102      	bne.n	800e46a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800e464:	4b37      	ldr	r3, [pc, #220]	@ (800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e466:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e468:	e22f      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e46a:	2300      	movs	r3, #0
 800e46c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e46e:	e22c      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e470:	4b33      	ldr	r3, [pc, #204]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0320 	and.w	r3, r3, #32
 800e478:	2b20      	cmp	r3, #32
 800e47a:	d117      	bne.n	800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e47c:	4b30      	ldr	r3, [pc, #192]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e484:	2b00      	cmp	r3, #0
 800e486:	d005      	beq.n	800e494 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800e488:	4b2d      	ldr	r3, [pc, #180]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	0e1b      	lsrs	r3, r3, #24
 800e48e:	f003 030f 	and.w	r3, r3, #15
 800e492:	e006      	b.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800e494:	4b2a      	ldr	r3, [pc, #168]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e49a:	041b      	lsls	r3, r3, #16
 800e49c:	0e1b      	lsrs	r3, r3, #24
 800e49e:	f003 030f 	and.w	r3, r3, #15
 800e4a2:	4a29      	ldr	r2, [pc, #164]	@ (800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e4aa:	e20e      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4b0:	e20b      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4b6:	e208      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800e4b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4bc:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800e4c0:	430b      	orrs	r3, r1
 800e4c2:	d17c      	bne.n	800e5be <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e4c4:	4b1e      	ldr	r3, [pc, #120]	@ (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e4c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e4ca:	f003 0318 	and.w	r3, r3, #24
 800e4ce:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d2:	2b18      	cmp	r3, #24
 800e4d4:	d870      	bhi.n	800e5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800e4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e54d 	.word	0x0800e54d
 800e4e0:	0800e5b9 	.word	0x0800e5b9
 800e4e4:	0800e5b9 	.word	0x0800e5b9
 800e4e8:	0800e5b9 	.word	0x0800e5b9
 800e4ec:	0800e5b9 	.word	0x0800e5b9
 800e4f0:	0800e5b9 	.word	0x0800e5b9
 800e4f4:	0800e5b9 	.word	0x0800e5b9
 800e4f8:	0800e5b9 	.word	0x0800e5b9
 800e4fc:	0800e555 	.word	0x0800e555
 800e500:	0800e5b9 	.word	0x0800e5b9
 800e504:	0800e5b9 	.word	0x0800e5b9
 800e508:	0800e5b9 	.word	0x0800e5b9
 800e50c:	0800e5b9 	.word	0x0800e5b9
 800e510:	0800e5b9 	.word	0x0800e5b9
 800e514:	0800e5b9 	.word	0x0800e5b9
 800e518:	0800e5b9 	.word	0x0800e5b9
 800e51c:	0800e55d 	.word	0x0800e55d
 800e520:	0800e5b9 	.word	0x0800e5b9
 800e524:	0800e5b9 	.word	0x0800e5b9
 800e528:	0800e5b9 	.word	0x0800e5b9
 800e52c:	0800e5b9 	.word	0x0800e5b9
 800e530:	0800e5b9 	.word	0x0800e5b9
 800e534:	0800e5b9 	.word	0x0800e5b9
 800e538:	0800e5b9 	.word	0x0800e5b9
 800e53c:	0800e577 	.word	0x0800e577
 800e540:	46020c00 	.word	0x46020c00
 800e544:	00f42400 	.word	0x00f42400
 800e548:	08012858 	.word	0x08012858
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800e54c:	f7fd fa62 	bl	800ba14 <HAL_RCC_GetPCLK3Freq>
 800e550:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e552:	e1ba      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e554:	f7fd f91a 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800e558:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e55a:	e1b6      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e55c:	4b9f      	ldr	r3, [pc, #636]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e568:	d102      	bne.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800e56a:	4b9d      	ldr	r3, [pc, #628]	@ (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e56c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e56e:	e1ac      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e570:	2300      	movs	r3, #0
 800e572:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e574:	e1a9      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e576:	4b99      	ldr	r3, [pc, #612]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f003 0320 	and.w	r3, r3, #32
 800e57e:	2b20      	cmp	r3, #32
 800e580:	d117      	bne.n	800e5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e582:	4b96      	ldr	r3, [pc, #600]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d005      	beq.n	800e59a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800e58e:	4b93      	ldr	r3, [pc, #588]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	0e1b      	lsrs	r3, r3, #24
 800e594:	f003 030f 	and.w	r3, r3, #15
 800e598:	e006      	b.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800e59a:	4b90      	ldr	r3, [pc, #576]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e59c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e5a0:	041b      	lsls	r3, r3, #16
 800e5a2:	0e1b      	lsrs	r3, r3, #24
 800e5a4:	f003 030f 	and.w	r3, r3, #15
 800e5a8:	4a8e      	ldr	r2, [pc, #568]	@ (800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e5b0:	e18b      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5b6:	e188      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5bc:	e185      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800e5be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5c2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800e5c6:	430b      	orrs	r3, r1
 800e5c8:	d155      	bne.n	800e676 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800e5ca:	4b84      	ldr	r3, [pc, #528]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e5cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e5d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e5d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e5dc:	d013      	beq.n	800e606 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800e5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e5e4:	d844      	bhi.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e5ec:	d013      	beq.n	800e616 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e5f4:	d83c      	bhi.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d014      	beq.n	800e626 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800e5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e602:	d014      	beq.n	800e62e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800e604:	e034      	b.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e606:	f107 0318 	add.w	r3, r7, #24
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fb2e 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e614:	e159      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe f9cc 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e624:	e151      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e626:	f7fd f8b1 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800e62a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e62c:	e14d      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e62e:	4b6b      	ldr	r3, [pc, #428]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f003 0320 	and.w	r3, r3, #32
 800e636:	2b20      	cmp	r3, #32
 800e638:	d117      	bne.n	800e66a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e63a:	4b68      	ldr	r3, [pc, #416]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d005      	beq.n	800e652 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800e646:	4b65      	ldr	r3, [pc, #404]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	0e1b      	lsrs	r3, r3, #24
 800e64c:	f003 030f 	and.w	r3, r3, #15
 800e650:	e006      	b.n	800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800e652:	4b62      	ldr	r3, [pc, #392]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e658:	041b      	lsls	r3, r3, #16
 800e65a:	0e1b      	lsrs	r3, r3, #24
 800e65c:	f003 030f 	and.w	r3, r3, #15
 800e660:	4a60      	ldr	r2, [pc, #384]	@ (800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e666:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e668:	e12f      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e66a:	2300      	movs	r3, #0
 800e66c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e66e:	e12c      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e670:	2300      	movs	r3, #0
 800e672:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e674:	e129      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800e676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e67a:	1e59      	subs	r1, r3, #1
 800e67c:	ea52 0301 	orrs.w	r3, r2, r1
 800e680:	d13c      	bne.n	800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800e682:	4b56      	ldr	r3, [pc, #344]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e684:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e688:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e68c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e690:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e694:	d027      	beq.n	800e6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800e696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e698:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e69c:	d82b      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e6a4:	d017      	beq.n	800e6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e6ac:	d823      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d004      	beq.n	800e6be <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e6ba:	d004      	beq.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800e6bc:	e01b      	b.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e6be:	f7fd f865 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800e6c2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e6c4:	e101      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fe f974 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6d4:	e0f9      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6d6:	f107 0318 	add.w	r3, r7, #24
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe fac6 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6e4:	e0f1      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6e6:	f107 030c 	add.w	r3, r7, #12
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fe fc18 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6f4:	e0e9      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6fa:	e0e6      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800e6fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e700:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800e704:	430b      	orrs	r3, r1
 800e706:	d131      	bne.n	800e76c <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800e708:	4b34      	ldr	r3, [pc, #208]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e70a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e70e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e712:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800e714:	4b31      	ldr	r3, [pc, #196]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e71a:	f003 0302 	and.w	r3, r3, #2
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d106      	bne.n	800e730 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800e722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e724:	2b00      	cmp	r3, #0
 800e726:	d103      	bne.n	800e730 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800e728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e72e:	e0cc      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800e730:	4b2a      	ldr	r3, [pc, #168]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e73a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e73e:	d112      	bne.n	800e766 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800e740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e746:	d10e      	bne.n	800e766 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e748:	4b24      	ldr	r3, [pc, #144]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e74a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e74e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e756:	d102      	bne.n	800e75e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800e758:	23fa      	movs	r3, #250	@ 0xfa
 800e75a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e75c:	e0b5      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e75e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e762:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e764:	e0b1      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800e766:	2300      	movs	r3, #0
 800e768:	637b      	str	r3, [r7, #52]	@ 0x34
 800e76a:	e0ae      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800e76c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e770:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e774:	430b      	orrs	r3, r1
 800e776:	d13b      	bne.n	800e7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800e778:	4b18      	ldr	r3, [pc, #96]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e77a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e77e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e782:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800e784:	4b15      	ldr	r3, [pc, #84]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e78c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e790:	d105      	bne.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800e792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e794:	2b00      	cmp	r3, #0
 800e796:	d102      	bne.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800e798:	4b13      	ldr	r3, [pc, #76]	@ (800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800e79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e79c:	e095      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800e79e:	4b0f      	ldr	r3, [pc, #60]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e7a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e7aa:	d106      	bne.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800e7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7b2:	d102      	bne.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800e7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e7ec <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800e7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7b8:	e087      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800e7ba:	4b08      	ldr	r3, [pc, #32]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e7c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7c6:	d106      	bne.n	800e7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e7ce:	d102      	bne.n	800e7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800e7d0:	4b03      	ldr	r3, [pc, #12]	@ (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e7d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7d4:	e079      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7da:	e076      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e7dc:	46020c00 	.word	0x46020c00
 800e7e0:	00f42400 	.word	0x00f42400
 800e7e4:	08012858 	.word	0x08012858
 800e7e8:	02dc6c00 	.word	0x02dc6c00
 800e7ec:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800e7f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7f4:	1e99      	subs	r1, r3, #2
 800e7f6:	ea52 0301 	orrs.w	r3, r2, r1
 800e7fa:	d120      	bne.n	800e83e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800e7fc:	4b35      	ldr	r3, [pc, #212]	@ (800e8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e7fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e806:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d004      	beq.n	800e818 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800e80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e814:	d008      	beq.n	800e828 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800e816:	e00f      	b.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e818:	f107 030c 	add.w	r3, r7, #12
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe fb7f 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e826:	e050      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e828:	f107 0318 	add.w	r3, r7, #24
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fe fa1d 	bl	800cc6c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800e832:	6a3b      	ldr	r3, [r7, #32]
 800e834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e836:	e048      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e838:	2300      	movs	r3, #0
 800e83a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e83c:	e045      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800e83e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e842:	f1a3 0108 	sub.w	r1, r3, #8
 800e846:	ea52 0301 	orrs.w	r3, r2, r1
 800e84a:	d13c      	bne.n	800e8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800e84c:	4b21      	ldr	r3, [pc, #132]	@ (800e8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e84e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e852:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e856:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800e858:	4b1e      	ldr	r3, [pc, #120]	@ (800e8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e864:	d105      	bne.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800e866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d102      	bne.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800e86c:	4b1a      	ldr	r3, [pc, #104]	@ (800e8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800e86e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e870:	e02b      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800e872:	4b18      	ldr	r3, [pc, #96]	@ (800e8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e87a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e87e:	d106      	bne.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800e880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e886:	d102      	bne.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800e888:	4b14      	ldr	r3, [pc, #80]	@ (800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800e88a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e88c:	e01d      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800e88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e894:	d107      	bne.n	800e8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fe f88c 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8a4:	e011      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e8ac:	d108      	bne.n	800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fe f880 	bl	800c9b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ba:	085b      	lsrs	r3, r3, #1
 800e8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8be:	e004      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8c4:	e001      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800e8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3738      	adds	r7, #56	@ 0x38
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	46020c00 	.word	0x46020c00
 800e8d8:	00f42400 	.word	0x00f42400
 800e8dc:	007a1200 	.word	0x007a1200

0800e8e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e8e8:	4b47      	ldr	r3, [pc, #284]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a46      	ldr	r2, [pc, #280]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e8ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e8f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e8f4:	f7f4 ffd8 	bl	80038a8 <HAL_GetTick>
 800e8f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e8fa:	e008      	b.n	800e90e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e8fc:	f7f4 ffd4 	bl	80038a8 <HAL_GetTick>
 800e900:	4602      	mov	r2, r0
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	2b02      	cmp	r3, #2
 800e908:	d901      	bls.n	800e90e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e90a:	2303      	movs	r3, #3
 800e90c:	e077      	b.n	800e9fe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e90e:	4b3e      	ldr	r3, [pc, #248]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1f0      	bne.n	800e8fc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e91a:	4b3b      	ldr	r3, [pc, #236]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e91e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e922:	f023 0303 	bic.w	r3, r3, #3
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	6811      	ldr	r1, [r2, #0]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6852      	ldr	r2, [r2, #4]
 800e92e:	3a01      	subs	r2, #1
 800e930:	0212      	lsls	r2, r2, #8
 800e932:	430a      	orrs	r2, r1
 800e934:	4934      	ldr	r1, [pc, #208]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e936:	4313      	orrs	r3, r2
 800e938:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e93a:	4b33      	ldr	r3, [pc, #204]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e93c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e93e:	4b33      	ldr	r3, [pc, #204]	@ (800ea0c <RCCEx_PLL2_Config+0x12c>)
 800e940:	4013      	ands	r3, r2
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	6892      	ldr	r2, [r2, #8]
 800e946:	3a01      	subs	r2, #1
 800e948:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	68d2      	ldr	r2, [r2, #12]
 800e950:	3a01      	subs	r2, #1
 800e952:	0252      	lsls	r2, r2, #9
 800e954:	b292      	uxth	r2, r2
 800e956:	4311      	orrs	r1, r2
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	6912      	ldr	r2, [r2, #16]
 800e95c:	3a01      	subs	r2, #1
 800e95e:	0412      	lsls	r2, r2, #16
 800e960:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e964:	4311      	orrs	r1, r2
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	6952      	ldr	r2, [r2, #20]
 800e96a:	3a01      	subs	r2, #1
 800e96c:	0612      	lsls	r2, r2, #24
 800e96e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e972:	430a      	orrs	r2, r1
 800e974:	4924      	ldr	r1, [pc, #144]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e976:	4313      	orrs	r3, r2
 800e978:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e97a:	4b23      	ldr	r3, [pc, #140]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e97e:	f023 020c 	bic.w	r2, r3, #12
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	699b      	ldr	r3, [r3, #24]
 800e986:	4920      	ldr	r1, [pc, #128]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e988:	4313      	orrs	r3, r2
 800e98a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e98c:	4b1e      	ldr	r3, [pc, #120]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e98e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a1b      	ldr	r3, [r3, #32]
 800e994:	491c      	ldr	r1, [pc, #112]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e996:	4313      	orrs	r3, r2
 800e998:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e99a:	4b1b      	ldr	r3, [pc, #108]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e99e:	4a1a      	ldr	r2, [pc, #104]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9a0:	f023 0310 	bic.w	r3, r3, #16
 800e9a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e9a6:	4b18      	ldr	r3, [pc, #96]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	69d2      	ldr	r2, [r2, #28]
 800e9b6:	00d2      	lsls	r2, r2, #3
 800e9b8:	4913      	ldr	r1, [pc, #76]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e9be:	4b12      	ldr	r3, [pc, #72]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9c2:	4a11      	ldr	r2, [pc, #68]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9c4:	f043 0310 	orr.w	r3, r3, #16
 800e9c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a0e      	ldr	r2, [pc, #56]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e9d4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e9d6:	f7f4 ff67 	bl	80038a8 <HAL_GetTick>
 800e9da:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e9dc:	e008      	b.n	800e9f0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e9de:	f7f4 ff63 	bl	80038a8 <HAL_GetTick>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	1ad3      	subs	r3, r2, r3
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d901      	bls.n	800e9f0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e006      	b.n	800e9fe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e9f0:	4b05      	ldr	r3, [pc, #20]	@ (800ea08 <RCCEx_PLL2_Config+0x128>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d0f0      	beq.n	800e9de <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800e9fc:	2300      	movs	r3, #0

}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	46020c00 	.word	0x46020c00
 800ea0c:	80800000 	.word	0x80800000

0800ea10 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ea18:	4b47      	ldr	r3, [pc, #284]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a46      	ldr	r2, [pc, #280]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ea1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ea24:	f7f4 ff40 	bl	80038a8 <HAL_GetTick>
 800ea28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea2a:	e008      	b.n	800ea3e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ea2c:	f7f4 ff3c 	bl	80038a8 <HAL_GetTick>
 800ea30:	4602      	mov	r2, r0
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d901      	bls.n	800ea3e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	e077      	b.n	800eb2e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea3e:	4b3e      	ldr	r3, [pc, #248]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d1f0      	bne.n	800ea2c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ea4a:	4b3b      	ldr	r3, [pc, #236]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ea4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ea52:	f023 0303 	bic.w	r3, r3, #3
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	6811      	ldr	r1, [r2, #0]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	6852      	ldr	r2, [r2, #4]
 800ea5e:	3a01      	subs	r2, #1
 800ea60:	0212      	lsls	r2, r2, #8
 800ea62:	430a      	orrs	r2, r1
 800ea64:	4934      	ldr	r1, [pc, #208]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ea66:	4313      	orrs	r3, r2
 800ea68:	630b      	str	r3, [r1, #48]	@ 0x30
 800ea6a:	4b33      	ldr	r3, [pc, #204]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ea6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea6e:	4b33      	ldr	r3, [pc, #204]	@ (800eb3c <RCCEx_PLL3_Config+0x12c>)
 800ea70:	4013      	ands	r3, r2
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	6892      	ldr	r2, [r2, #8]
 800ea76:	3a01      	subs	r2, #1
 800ea78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	68d2      	ldr	r2, [r2, #12]
 800ea80:	3a01      	subs	r2, #1
 800ea82:	0252      	lsls	r2, r2, #9
 800ea84:	b292      	uxth	r2, r2
 800ea86:	4311      	orrs	r1, r2
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	6912      	ldr	r2, [r2, #16]
 800ea8c:	3a01      	subs	r2, #1
 800ea8e:	0412      	lsls	r2, r2, #16
 800ea90:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ea94:	4311      	orrs	r1, r2
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	6952      	ldr	r2, [r2, #20]
 800ea9a:	3a01      	subs	r2, #1
 800ea9c:	0612      	lsls	r2, r2, #24
 800ea9e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800eaa2:	430a      	orrs	r2, r1
 800eaa4:	4924      	ldr	r1, [pc, #144]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800eaaa:	4b23      	ldr	r3, [pc, #140]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eaac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaae:	f023 020c 	bic.w	r2, r3, #12
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	4920      	ldr	r1, [pc, #128]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eab8:	4313      	orrs	r3, r2
 800eaba:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800eabc:	4b1e      	ldr	r3, [pc, #120]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eabe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a1b      	ldr	r3, [r3, #32]
 800eac4:	491c      	ldr	r1, [pc, #112]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eac6:	4313      	orrs	r3, r2
 800eac8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800eaca:	4b1b      	ldr	r3, [pc, #108]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eacc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eace:	4a1a      	ldr	r2, [pc, #104]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ead0:	f023 0310 	bic.w	r3, r3, #16
 800ead4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ead6:	4b18      	ldr	r3, [pc, #96]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800ead8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eade:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	69d2      	ldr	r2, [r2, #28]
 800eae6:	00d2      	lsls	r2, r2, #3
 800eae8:	4913      	ldr	r1, [pc, #76]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eaea:	4313      	orrs	r3, r2
 800eaec:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800eaee:	4b12      	ldr	r3, [pc, #72]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eaf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaf2:	4a11      	ldr	r2, [pc, #68]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eaf4:	f043 0310 	orr.w	r3, r3, #16
 800eaf8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800eafa:	4b0f      	ldr	r3, [pc, #60]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4a0e      	ldr	r2, [pc, #56]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eb00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eb06:	f7f4 fecf 	bl	80038a8 <HAL_GetTick>
 800eb0a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb0c:	e008      	b.n	800eb20 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eb0e:	f7f4 fecb 	bl	80038a8 <HAL_GetTick>
 800eb12:	4602      	mov	r2, r0
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	1ad3      	subs	r3, r2, r3
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d901      	bls.n	800eb20 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	e006      	b.n	800eb2e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb20:	4b05      	ldr	r3, [pc, #20]	@ (800eb38 <RCCEx_PLL3_Config+0x128>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d0f0      	beq.n	800eb0e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	46020c00 	.word	0x46020c00
 800eb3c:	80800000 	.word	0x80800000

0800eb40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d071      	beq.n	800ec36 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7f4 f944 	bl	8002df4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800eb74:	4b32      	ldr	r3, [pc, #200]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	f003 0310 	and.w	r3, r3, #16
 800eb7c:	2b10      	cmp	r3, #16
 800eb7e:	d051      	beq.n	800ec24 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800eb80:	4b2f      	ldr	r3, [pc, #188]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800eb82:	22ca      	movs	r2, #202	@ 0xca
 800eb84:	625a      	str	r2, [r3, #36]	@ 0x24
 800eb86:	4b2e      	ldr	r3, [pc, #184]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800eb88:	2253      	movs	r2, #83	@ 0x53
 800eb8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f88b 	bl	800eca8 <RTC_EnterInitMode>
 800eb92:	4603      	mov	r3, r0
 800eb94:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800eb96:	7bfb      	ldrb	r3, [r7, #15]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d13f      	bne.n	800ec1c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800eb9c:	4b28      	ldr	r3, [pc, #160]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	4a27      	ldr	r2, [pc, #156]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800eba2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800eba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebaa:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800ebac:	4b24      	ldr	r3, [pc, #144]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ebae:	699a      	ldr	r2, [r3, #24]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6859      	ldr	r1, [r3, #4]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	691b      	ldr	r3, [r3, #16]
 800ebb8:	4319      	orrs	r1, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	430b      	orrs	r3, r1
 800ebc0:	491f      	ldr	r1, [pc, #124]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	68da      	ldr	r2, [r3, #12]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	041b      	lsls	r3, r3, #16
 800ebd0:	491b      	ldr	r1, [pc, #108]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800ebd6:	4b1a      	ldr	r3, [pc, #104]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebe6:	430b      	orrs	r3, r1
 800ebe8:	4915      	ldr	r1, [pc, #84]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ebea:	4313      	orrs	r3, r2
 800ebec:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f896 	bl	800ed20 <RTC_ExitInitMode>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800ebf8:	7bfb      	ldrb	r3, [r7, #15]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10e      	bne.n	800ec1c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800ebfe:	4b10      	ldr	r3, [pc, #64]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6a19      	ldr	r1, [r3, #32]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	69db      	ldr	r3, [r3, #28]
 800ec0e:	4319      	orrs	r1, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	430b      	orrs	r3, r1
 800ec16:	490a      	ldr	r1, [pc, #40]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ec1c:	4b08      	ldr	r3, [pc, #32]	@ (800ec40 <HAL_RTC_Init+0x100>)
 800ec1e:	22ff      	movs	r2, #255	@ 0xff
 800ec20:	625a      	str	r2, [r3, #36]	@ 0x24
 800ec22:	e001      	b.n	800ec28 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d103      	bne.n	800ec36 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2201      	movs	r2, #1
 800ec32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	46007800 	.word	0x46007800

0800ec44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ec4c:	4b15      	ldr	r3, [pc, #84]	@ (800eca4 <HAL_RTC_WaitForSynchro+0x60>)
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	4a14      	ldr	r2, [pc, #80]	@ (800eca4 <HAL_RTC_WaitForSynchro+0x60>)
 800ec52:	f023 0320 	bic.w	r3, r3, #32
 800ec56:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ec58:	f7f4 fe26 	bl	80038a8 <HAL_GetTick>
 800ec5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ec5e:	e013      	b.n	800ec88 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ec60:	f7f4 fe22 	bl	80038a8 <HAL_GetTick>
 800ec64:	4602      	mov	r2, r0
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ec6e:	d90b      	bls.n	800ec88 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ec70:	4b0c      	ldr	r3, [pc, #48]	@ (800eca4 <HAL_RTC_WaitForSynchro+0x60>)
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	f003 0320 	and.w	r3, r3, #32
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d10c      	bne.n	800ec96 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2203      	movs	r2, #3
 800ec80:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800ec84:	2303      	movs	r3, #3
 800ec86:	e008      	b.n	800ec9a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ec88:	4b06      	ldr	r3, [pc, #24]	@ (800eca4 <HAL_RTC_WaitForSynchro+0x60>)
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f003 0320 	and.w	r3, r3, #32
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d0e5      	beq.n	800ec60 <HAL_RTC_WaitForSynchro+0x1c>
 800ec94:	e000      	b.n	800ec98 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800ec96:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	46007800 	.word	0x46007800

0800eca8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ecb4:	4b19      	ldr	r3, [pc, #100]	@ (800ed1c <RTC_EnterInitMode+0x74>)
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d128      	bne.n	800ed12 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ecc0:	4b16      	ldr	r3, [pc, #88]	@ (800ed1c <RTC_EnterInitMode+0x74>)
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	4a15      	ldr	r2, [pc, #84]	@ (800ed1c <RTC_EnterInitMode+0x74>)
 800ecc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecca:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800eccc:	f7f4 fdec 	bl	80038a8 <HAL_GetTick>
 800ecd0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ecd2:	e013      	b.n	800ecfc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ecd4:	f7f4 fde8 	bl	80038a8 <HAL_GetTick>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ece2:	d90b      	bls.n	800ecfc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ece4:	4b0d      	ldr	r3, [pc, #52]	@ (800ed1c <RTC_EnterInitMode+0x74>)
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10f      	bne.n	800ed10 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800ecf0:	2303      	movs	r3, #3
 800ecf2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2203      	movs	r2, #3
 800ecf8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ecfc:	4b07      	ldr	r3, [pc, #28]	@ (800ed1c <RTC_EnterInitMode+0x74>)
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d104      	bne.n	800ed12 <RTC_EnterInitMode+0x6a>
 800ed08:	7bfb      	ldrb	r3, [r7, #15]
 800ed0a:	2b03      	cmp	r3, #3
 800ed0c:	d1e2      	bne.n	800ecd4 <RTC_EnterInitMode+0x2c>
 800ed0e:	e000      	b.n	800ed12 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800ed10:	bf00      	nop
        }
      }
    }
  }

  return status;
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	46007800 	.word	0x46007800

0800ed20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ed2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ed98 <RTC_ExitInitMode+0x78>)
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	4a19      	ldr	r2, [pc, #100]	@ (800ed98 <RTC_ExitInitMode+0x78>)
 800ed32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed36:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ed38:	4b17      	ldr	r3, [pc, #92]	@ (800ed98 <RTC_ExitInitMode+0x78>)
 800ed3a:	699b      	ldr	r3, [r3, #24]
 800ed3c:	f003 0320 	and.w	r3, r3, #32
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10c      	bne.n	800ed5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff ff7d 	bl	800ec44 <HAL_RTC_WaitForSynchro>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d01e      	beq.n	800ed8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2203      	movs	r2, #3
 800ed54:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	73fb      	strb	r3, [r7, #15]
 800ed5c:	e017      	b.n	800ed8e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ed5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ed98 <RTC_ExitInitMode+0x78>)
 800ed60:	699b      	ldr	r3, [r3, #24]
 800ed62:	4a0d      	ldr	r2, [pc, #52]	@ (800ed98 <RTC_ExitInitMode+0x78>)
 800ed64:	f023 0320 	bic.w	r3, r3, #32
 800ed68:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff ff6a 	bl	800ec44 <HAL_RTC_WaitForSynchro>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d005      	beq.n	800ed82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2203      	movs	r2, #3
 800ed7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ed7e:	2303      	movs	r3, #3
 800ed80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ed82:	4b05      	ldr	r3, [pc, #20]	@ (800ed98 <RTC_ExitInitMode+0x78>)
 800ed84:	699b      	ldr	r3, [r3, #24]
 800ed86:	4a04      	ldr	r2, [pc, #16]	@ (800ed98 <RTC_ExitInitMode+0x78>)
 800ed88:	f043 0320 	orr.w	r3, r3, #32
 800ed8c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ed8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	46007800 	.word	0x46007800

0800ed9c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	4910      	ldr	r1, [pc, #64]	@ (800edf0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800edb0:	4313      	orrs	r3, r2
 800edb2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	689a      	ldr	r2, [r3, #8]
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	431a      	orrs	r2, r3
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	490c      	ldr	r1, [pc, #48]	@ (800edf4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800edc4:	4313      	orrs	r3, r2
 800edc6:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800edc8:	4b0a      	ldr	r3, [pc, #40]	@ (800edf4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800edca:	6a1b      	ldr	r3, [r3, #32]
 800edcc:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	6919      	ldr	r1, [r3, #16]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	041b      	lsls	r3, r3, #16
 800edda:	430b      	orrs	r3, r1
 800eddc:	4905      	ldr	r1, [pc, #20]	@ (800edf4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800edde:	4313      	orrs	r3, r2
 800ede0:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	46007800 	.word	0x46007800
 800edf4:	46007c00 	.word	0x46007c00

0800edf8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d904      	bls.n	800ee16 <HAL_SAI_InitProtocol+0x1e>
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	3b03      	subs	r3, #3
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d812      	bhi.n	800ee3a <HAL_SAI_InitProtocol+0x42>
 800ee14:	e008      	b.n	800ee28 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 fbed 	bl	800f5fc <SAI_InitI2S>
 800ee22:	4603      	mov	r3, r0
 800ee24:	75fb      	strb	r3, [r7, #23]
      break;
 800ee26:	e00b      	b.n	800ee40 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	68b9      	ldr	r1, [r7, #8]
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f000 fc96 	bl	800f760 <SAI_InitPCM>
 800ee34:	4603      	mov	r3, r0
 800ee36:	75fb      	strb	r3, [r7, #23]
      break;
 800ee38:	e002      	b.n	800ee40 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ee3e:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d104      	bne.n	800ee50 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f000 f808 	bl	800ee5c <HAL_SAI_Init>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ee50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3718      	adds	r7, #24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
	...

0800ee5c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08a      	sub	sp, #40	@ 0x28
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d101      	bne.n	800ee6e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e1ce      	b.n	800f20c <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	d10e      	bne.n	800ee96 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a83      	ldr	r2, [pc, #524]	@ (800f08c <HAL_SAI_Init+0x230>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d107      	bne.n	800ee92 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d103      	bne.n	800ee92 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800ee92:	2301      	movs	r3, #1
 800ee94:	e1ba      	b.n	800f20c <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7f4 f974 	bl	8003198 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 fd0f 	bl	800f8d4 <SAI_Disable>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d001      	beq.n	800eec0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	e1a5      	b.n	800f20c <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d00c      	beq.n	800eeea <HAL_SAI_Init+0x8e>
 800eed0:	2b02      	cmp	r3, #2
 800eed2:	d80d      	bhi.n	800eef0 <HAL_SAI_Init+0x94>
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d002      	beq.n	800eede <HAL_SAI_Init+0x82>
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d003      	beq.n	800eee4 <HAL_SAI_Init+0x88>
 800eedc:	e008      	b.n	800eef0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eee2:	e008      	b.n	800eef6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800eee4:	2310      	movs	r3, #16
 800eee6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eee8:	e005      	b.n	800eef6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800eeea:	2320      	movs	r3, #32
 800eeec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eeee:	e002      	b.n	800eef6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eef4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	2b03      	cmp	r3, #3
 800eefc:	d81d      	bhi.n	800ef3a <HAL_SAI_Init+0xde>
 800eefe:	a201      	add	r2, pc, #4	@ (adr r2, 800ef04 <HAL_SAI_Init+0xa8>)
 800ef00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef04:	0800ef15 	.word	0x0800ef15
 800ef08:	0800ef1b 	.word	0x0800ef1b
 800ef0c:	0800ef23 	.word	0x0800ef23
 800ef10:	0800ef2b 	.word	0x0800ef2b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ef14:	2300      	movs	r3, #0
 800ef16:	61fb      	str	r3, [r7, #28]
      break;
 800ef18:	e012      	b.n	800ef40 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ef1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef1e:	61fb      	str	r3, [r7, #28]
      break;
 800ef20:	e00e      	b.n	800ef40 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ef22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ef26:	61fb      	str	r3, [r7, #28]
      break;
 800ef28:	e00a      	b.n	800ef40 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ef2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ef2e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ef30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef32:	f043 0301 	orr.w	r3, r3, #1
 800ef36:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ef38:	e002      	b.n	800ef40 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	61fb      	str	r3, [r7, #28]
      break;
 800ef3e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a51      	ldr	r2, [pc, #324]	@ (800f08c <HAL_SAI_Init+0x230>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d004      	beq.n	800ef54 <HAL_SAI_Init+0xf8>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a50      	ldr	r2, [pc, #320]	@ (800f090 <HAL_SAI_Init+0x234>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d103      	bne.n	800ef5c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800ef54:	4a4f      	ldr	r2, [pc, #316]	@ (800f094 <HAL_SAI_Init+0x238>)
 800ef56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef58:	6013      	str	r3, [r2, #0]
 800ef5a:	e002      	b.n	800ef62 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ef5c:	4a4e      	ldr	r2, [pc, #312]	@ (800f098 <HAL_SAI_Init+0x23c>)
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef60:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d077      	beq.n	800f05a <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a47      	ldr	r2, [pc, #284]	@ (800f08c <HAL_SAI_Init+0x230>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d004      	beq.n	800ef7e <HAL_SAI_Init+0x122>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a45      	ldr	r2, [pc, #276]	@ (800f090 <HAL_SAI_Init+0x234>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d107      	bne.n	800ef8e <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ef7e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ef82:	f04f 0100 	mov.w	r1, #0
 800ef86:	f7fe f925 	bl	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ef8a:	61b8      	str	r0, [r7, #24]
 800ef8c:	e006      	b.n	800ef9c <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ef8e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ef92:	f04f 0100 	mov.w	r1, #0
 800ef96:	f7fe f91d 	bl	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ef9a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	699b      	ldr	r3, [r3, #24]
 800efa0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800efa4:	d120      	bne.n	800efe8 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efaa:	2b04      	cmp	r3, #4
 800efac:	d102      	bne.n	800efb4 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800efae:	2340      	movs	r3, #64	@ 0x40
 800efb0:	613b      	str	r3, [r7, #16]
 800efb2:	e00a      	b.n	800efca <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efb8:	2b08      	cmp	r3, #8
 800efba:	d103      	bne.n	800efc4 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800efbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efc0:	613b      	str	r3, [r7, #16]
 800efc2:	e002      	b.n	800efca <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efc8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	4613      	mov	r3, r2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	4413      	add	r3, r2
 800efd2:	005b      	lsls	r3, r3, #1
 800efd4:	4619      	mov	r1, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	693a      	ldr	r2, [r7, #16]
 800efdc:	fb02 f303 	mul.w	r3, r2, r3
 800efe0:	fbb1 f3f3 	udiv	r3, r1, r3
 800efe4:	617b      	str	r3, [r7, #20]
 800efe6:	e017      	b.n	800f018 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eff0:	d101      	bne.n	800eff6 <HAL_SAI_Init+0x19a>
 800eff2:	2302      	movs	r3, #2
 800eff4:	e000      	b.n	800eff8 <HAL_SAI_Init+0x19c>
 800eff6:	2301      	movs	r3, #1
 800eff8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800effa:	69ba      	ldr	r2, [r7, #24]
 800effc:	4613      	mov	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	005b      	lsls	r3, r3, #1
 800f004:	4619      	mov	r1, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6a1b      	ldr	r3, [r3, #32]
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	fb02 f303 	mul.w	r3, r2, r3
 800f010:	021b      	lsls	r3, r3, #8
 800f012:	fbb1 f3f3 	udiv	r3, r1, r3
 800f016:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	4a20      	ldr	r2, [pc, #128]	@ (800f09c <HAL_SAI_Init+0x240>)
 800f01c:	fba2 2303 	umull	r2, r3, r2, r3
 800f020:	08da      	lsrs	r2, r3, #3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f026:	6979      	ldr	r1, [r7, #20]
 800f028:	4b1c      	ldr	r3, [pc, #112]	@ (800f09c <HAL_SAI_Init+0x240>)
 800f02a:	fba3 2301 	umull	r2, r3, r3, r1
 800f02e:	08da      	lsrs	r2, r3, #3
 800f030:	4613      	mov	r3, r2
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	4413      	add	r3, r2
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	1aca      	subs	r2, r1, r3
 800f03a:	2a08      	cmp	r2, #8
 800f03c:	d904      	bls.n	800f048 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f04c:	2b04      	cmp	r3, #4
 800f04e:	d104      	bne.n	800f05a <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f054:	085a      	lsrs	r2, r3, #1
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <HAL_SAI_Init+0x20e>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	2b02      	cmp	r3, #2
 800f068:	d109      	bne.n	800f07e <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d101      	bne.n	800f076 <HAL_SAI_Init+0x21a>
 800f072:	2300      	movs	r3, #0
 800f074:	e001      	b.n	800f07a <HAL_SAI_Init+0x21e>
 800f076:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f07a:	623b      	str	r3, [r7, #32]
 800f07c:	e012      	b.n	800f0a4 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f082:	2b01      	cmp	r3, #1
 800f084:	d10c      	bne.n	800f0a0 <HAL_SAI_Init+0x244>
 800f086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f08a:	e00a      	b.n	800f0a2 <HAL_SAI_Init+0x246>
 800f08c:	40015404 	.word	0x40015404
 800f090:	40015424 	.word	0x40015424
 800f094:	40015400 	.word	0x40015400
 800f098:	40015800 	.word	0x40015800
 800f09c:	cccccccd 	.word	0xcccccccd
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	6819      	ldr	r1, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	4b59      	ldr	r3, [pc, #356]	@ (800f214 <HAL_SAI_Init+0x3b8>)
 800f0b0:	400b      	ands	r3, r1
 800f0b2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	6819      	ldr	r1, [r3, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	685a      	ldr	r2, [r3, #4]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0c2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f0c8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0ce:	431a      	orrs	r2, r3
 800f0d0:	6a3b      	ldr	r3, [r7, #32]
 800f0d2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800f0dc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	695b      	ldr	r3, [r3, #20]
 800f0e2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f0e8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ee:	051b      	lsls	r3, r3, #20
 800f0f0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f0f6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	430a      	orrs	r2, r1
 800f104:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	6812      	ldr	r2, [r2, #0]
 800f110:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800f114:	f023 030f 	bic.w	r3, r3, #15
 800f118:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	6859      	ldr	r1, [r3, #4]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	69da      	ldr	r2, [r3, #28]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f128:	431a      	orrs	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f12e:	431a      	orrs	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	430a      	orrs	r2, r1
 800f136:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6899      	ldr	r1, [r3, #8]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	4b35      	ldr	r3, [pc, #212]	@ (800f218 <HAL_SAI_Init+0x3bc>)
 800f144:	400b      	ands	r3, r1
 800f146:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	6899      	ldr	r1, [r3, #8]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f152:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f158:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800f15e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800f164:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f16a:	3b01      	subs	r3, #1
 800f16c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f16e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	430a      	orrs	r2, r1
 800f176:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	68d9      	ldr	r1, [r3, #12]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800f186:	400b      	ands	r3, r1
 800f188:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68d9      	ldr	r1, [r3, #12]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f198:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f19e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f1a0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1a6:	3b01      	subs	r3, #1
 800f1a8:	021b      	lsls	r3, r3, #8
 800f1aa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	430a      	orrs	r2, r1
 800f1b2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a18      	ldr	r2, [pc, #96]	@ (800f21c <HAL_SAI_Init+0x3c0>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d119      	bne.n	800f1f2 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f1be:	4b18      	ldr	r3, [pc, #96]	@ (800f220 <HAL_SAI_Init+0x3c4>)
 800f1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1c2:	4a17      	ldr	r2, [pc, #92]	@ (800f220 <HAL_SAI_Init+0x3c4>)
 800f1c4:	f023 0301 	bic.w	r3, r3, #1
 800f1c8:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d10e      	bne.n	800f1f2 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f1e0:	490f      	ldr	r1, [pc, #60]	@ (800f220 <HAL_SAI_Init+0x3c4>)
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800f1e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f220 <HAL_SAI_Init+0x3c4>)
 800f1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1ea:	4a0d      	ldr	r2, [pc, #52]	@ (800f220 <HAL_SAI_Init+0x3c4>)
 800f1ec:	f043 0301 	orr.w	r3, r3, #1
 800f1f0:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3728      	adds	r7, #40	@ 0x28
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	f005c010 	.word	0xf005c010
 800f218:	fff88000 	.word	0xfff88000
 800f21c:	40015404 	.word	0x40015404
 800f220:	40015400 	.word	0x40015400

0800f224 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b088      	sub	sp, #32
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	4613      	mov	r3, r2
 800f230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f232:	f7f4 fb39 	bl	80038a8 <HAL_GetTick>
 800f236:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d002      	beq.n	800f244 <HAL_SAI_Transmit_DMA+0x20>
 800f23e:	88fb      	ldrh	r3, [r7, #6]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d101      	bne.n	800f248 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	e0e4      	b.n	800f412 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b01      	cmp	r3, #1
 800f252:	f040 80dd 	bne.w	800f410 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d101      	bne.n	800f264 <HAL_SAI_Transmit_DMA+0x40>
 800f260:	2302      	movs	r3, #2
 800f262:	e0d6      	b.n	800f412 <HAL_SAI_Transmit_DMA+0x1ee>
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2201      	movs	r2, #1
 800f268:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	88fa      	ldrh	r2, [r7, #6]
 800f276:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	88fa      	ldrh	r2, [r7, #6]
 800f27e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2212      	movs	r2, #18
 800f28e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f298:	4a60      	ldr	r2, [pc, #384]	@ (800f41c <HAL_SAI_Transmit_DMA+0x1f8>)
 800f29a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2a2:	4a5f      	ldr	r2, [pc, #380]	@ (800f420 <HAL_SAI_Transmit_DMA+0x1fc>)
 800f2a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2ac:	4a5d      	ldr	r2, [pc, #372]	@ (800f424 <HAL_SAI_Transmit_DMA+0x200>)
 800f2ae:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2be:	2b40      	cmp	r3, #64	@ 0x40
 800f2c0:	d106      	bne.n	800f2d0 <HAL_SAI_Transmit_DMA+0xac>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d102      	bne.n	800f2d0 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800f2ca:	88fb      	ldrh	r3, [r7, #6]
 800f2cc:	61bb      	str	r3, [r7, #24]
 800f2ce:	e00a      	b.n	800f2e6 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2d4:	2b80      	cmp	r3, #128	@ 0x80
 800f2d6:	d803      	bhi.n	800f2e0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f2d8:	88fb      	ldrh	r3, [r7, #6]
 800f2da:	005b      	lsls	r3, r3, #1
 800f2dc:	61bb      	str	r3, [r7, #24]
 800f2de:	e002      	b.n	800f2e6 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f2e0:	88fb      	ldrh	r3, [r7, #6]
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d02d      	beq.n	800f352 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d021      	beq.n	800f346 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	69ba      	ldr	r2, [r7, #24]
 800f30e:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f31a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f103 021c 	add.w	r2, r3, #28
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f32e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7f7 ff52 	bl	80071e4 <HAL_DMAEx_List_Start_IT>
 800f340:	4603      	mov	r3, r0
 800f342:	77fb      	strb	r3, [r7, #31]
 800f344:	e014      	b.n	800f370 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f34e:	2301      	movs	r3, #1
 800f350:	e05f      	b.n	800f412 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f35c:	4619      	mov	r1, r3
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	331c      	adds	r3, #28
 800f364:	461a      	mov	r2, r3
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	f7f6 ffaa 	bl	80062c0 <HAL_DMA_Start_IT>
 800f36c:	4603      	mov	r3, r0
 800f36e:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800f370:	7ffb      	ldrb	r3, [r7, #31]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d005      	beq.n	800f382 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f37e:	2301      	movs	r3, #1
 800f380:	e047      	b.n	800f412 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f382:	2100      	movs	r1, #0
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f000 fa6d 	bl	800f864 <SAI_InterruptFlag>
 800f38a:	4601      	mov	r1, r0
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	691a      	ldr	r2, [r3, #16]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f3a8:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f3aa:	e015      	b.n	800f3d8 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f3ac:	f7f4 fa7c 	bl	80038a8 <HAL_GetTick>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f3ba:	d90d      	bls.n	800f3d8 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f3c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800f3d4:	2303      	movs	r3, #3
 800f3d6:	e01c      	b.n	800f412 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	695b      	ldr	r3, [r3, #20]
 800f3de:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d0e2      	beq.n	800f3ac <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d107      	bne.n	800f404 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f402:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f40c:	2300      	movs	r3, #0
 800f40e:	e000      	b.n	800f412 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800f410:	2302      	movs	r3, #2
  }
}
 800f412:	4618      	mov	r0, r3
 800f414:	3720      	adds	r7, #32
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	0800f9a7 	.word	0x0800f9a7
 800f420:	0800f949 	.word	0x0800f949
 800f424:	0800fa3d 	.word	0x0800fa3d

0800f428 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	4613      	mov	r3, r2
 800f434:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d002      	beq.n	800f442 <HAL_SAI_Receive_DMA+0x1a>
 800f43c:	88fb      	ldrh	r3, [r7, #6]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f442:	2301      	movs	r3, #1
 800f444:	e0c6      	b.n	800f5d4 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	2b01      	cmp	r3, #1
 800f450:	f040 80bf 	bne.w	800f5d2 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d101      	bne.n	800f462 <HAL_SAI_Receive_DMA+0x3a>
 800f45e:	2302      	movs	r3, #2
 800f460:	e0b8      	b.n	800f5d4 <HAL_SAI_Receive_DMA+0x1ac>
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	88fa      	ldrh	r2, [r7, #6]
 800f474:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	88fa      	ldrh	r2, [r7, #6]
 800f47c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2222      	movs	r2, #34	@ 0x22
 800f48c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f496:	4a51      	ldr	r2, [pc, #324]	@ (800f5dc <HAL_SAI_Receive_DMA+0x1b4>)
 800f498:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4a0:	4a4f      	ldr	r2, [pc, #316]	@ (800f5e0 <HAL_SAI_Receive_DMA+0x1b8>)
 800f4a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4aa:	4a4e      	ldr	r2, [pc, #312]	@ (800f5e4 <HAL_SAI_Receive_DMA+0x1bc>)
 800f4ac:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f4bc:	2b40      	cmp	r3, #64	@ 0x40
 800f4be:	d106      	bne.n	800f4ce <HAL_SAI_Receive_DMA+0xa6>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d102      	bne.n	800f4ce <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800f4c8:	88fb      	ldrh	r3, [r7, #6]
 800f4ca:	613b      	str	r3, [r7, #16]
 800f4cc:	e00a      	b.n	800f4e4 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f4d2:	2b80      	cmp	r3, #128	@ 0x80
 800f4d4:	d803      	bhi.n	800f4de <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f4d6:	88fb      	ldrh	r3, [r7, #6]
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	613b      	str	r3, [r7, #16]
 800f4dc:	e002      	b.n	800f4e4 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f4de:	88fb      	ldrh	r3, [r7, #6]
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d02d      	beq.n	800f550 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d021      	beq.n	800f544 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	693a      	ldr	r2, [r7, #16]
 800f50c:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f103 021c 	add.w	r2, r3, #28
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f51c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f52c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f538:	4618      	mov	r0, r3
 800f53a:	f7f7 fe53 	bl	80071e4 <HAL_DMAEx_List_Start_IT>
 800f53e:	4603      	mov	r3, r0
 800f540:	75fb      	strb	r3, [r7, #23]
 800f542:	e014      	b.n	800f56e <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2200      	movs	r2, #0
 800f548:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e041      	b.n	800f5d4 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	331c      	adds	r3, #28
 800f55c:	4619      	mov	r1, r3
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f562:	461a      	mov	r2, r3
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	f7f6 feab 	bl	80062c0 <HAL_DMA_Start_IT>
 800f56a:	4603      	mov	r3, r0
 800f56c:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800f56e:	7dfb      	ldrb	r3, [r7, #23]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d005      	beq.n	800f580 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	e029      	b.n	800f5d4 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f580:	2100      	movs	r1, #0
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f000 f96e 	bl	800f864 <SAI_InterruptFlag>
 800f588:	4601      	mov	r1, r0
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	691a      	ldr	r2, [r3, #16]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	430a      	orrs	r2, r1
 800f596:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f5a6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d107      	bne.n	800f5c6 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f5c4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	e000      	b.n	800f5d4 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800f5d2:	2302      	movs	r3, #2
  }
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	0800fa21 	.word	0x0800fa21
 800f5e0:	0800f9c3 	.word	0x0800f9c3
 800f5e4:	0800fa3d 	.word	0x0800fa3d

0800f5e8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b087      	sub	sp, #28
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
 800f608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f60a:	2300      	movs	r3, #0
 800f60c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2200      	movs	r2, #0
 800f612:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2200      	movs	r2, #0
 800f618:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d003      	beq.n	800f62a <SAI_InitI2S+0x2e>
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d103      	bne.n	800f632 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2200      	movs	r2, #0
 800f62e:	651a      	str	r2, [r3, #80]	@ 0x50
 800f630:	e002      	b.n	800f638 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2201      	movs	r2, #1
 800f636:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f63e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f646:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	683a      	ldr	r2, [r7, #0]
 800f652:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	e077      	b.n	800f752 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d107      	bne.n	800f678 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2200      	movs	r2, #0
 800f66c:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f674:	665a      	str	r2, [r3, #100]	@ 0x64
 800f676:	e006      	b.n	800f686 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f67e:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2200      	movs	r2, #0
 800f684:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2b03      	cmp	r3, #3
 800f68a:	d84f      	bhi.n	800f72c <SAI_InitI2S+0x130>
 800f68c:	a201      	add	r2, pc, #4	@ (adr r2, 800f694 <SAI_InitI2S+0x98>)
 800f68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f692:	bf00      	nop
 800f694:	0800f6a5 	.word	0x0800f6a5
 800f698:	0800f6c7 	.word	0x0800f6c7
 800f69c:	0800f6e9 	.word	0x0800f6e9
 800f6a0:	0800f70b 	.word	0x0800f70b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2280      	movs	r2, #128	@ 0x80
 800f6a8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	085b      	lsrs	r3, r3, #1
 800f6ae:	015a      	lsls	r2, r3, #5
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	085b      	lsrs	r3, r3, #1
 800f6b8:	011a      	lsls	r2, r3, #4
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2240      	movs	r2, #64	@ 0x40
 800f6c2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f6c4:	e035      	b.n	800f732 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2280      	movs	r2, #128	@ 0x80
 800f6ca:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	085b      	lsrs	r3, r3, #1
 800f6d0:	019a      	lsls	r2, r3, #6
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	085b      	lsrs	r3, r3, #1
 800f6da:	015a      	lsls	r2, r3, #5
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2280      	movs	r2, #128	@ 0x80
 800f6e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f6e6:	e024      	b.n	800f732 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	22c0      	movs	r2, #192	@ 0xc0
 800f6ec:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	085b      	lsrs	r3, r3, #1
 800f6f2:	019a      	lsls	r2, r3, #6
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	085b      	lsrs	r3, r3, #1
 800f6fc:	015a      	lsls	r2, r3, #5
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2280      	movs	r2, #128	@ 0x80
 800f706:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f708:	e013      	b.n	800f732 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	22e0      	movs	r2, #224	@ 0xe0
 800f70e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	085b      	lsrs	r3, r3, #1
 800f714:	019a      	lsls	r2, r3, #6
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	085b      	lsrs	r3, r3, #1
 800f71e:	015a      	lsls	r2, r3, #5
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2280      	movs	r2, #128	@ 0x80
 800f728:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f72a:	e002      	b.n	800f732 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f72c:	2301      	movs	r3, #1
 800f72e:	75fb      	strb	r3, [r7, #23]
      break;
 800f730:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2b02      	cmp	r3, #2
 800f736:	d10b      	bne.n	800f750 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d102      	bne.n	800f744 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2210      	movs	r2, #16
 800f742:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b02      	cmp	r3, #2
 800f748:	d102      	bne.n	800f750 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2208      	movs	r2, #8
 800f74e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800f750:	7dfb      	ldrb	r3, [r7, #23]
}
 800f752:	4618      	mov	r0, r3
 800f754:	371c      	adds	r7, #28
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop

0800f760 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f760:	b480      	push	{r7}
 800f762:	b087      	sub	sp, #28
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
 800f76c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2200      	movs	r2, #0
 800f77c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d003      	beq.n	800f78e <SAI_InitPCM+0x2e>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	2b02      	cmp	r3, #2
 800f78c:	d103      	bne.n	800f796 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2201      	movs	r2, #1
 800f792:	651a      	str	r2, [r3, #80]	@ 0x50
 800f794:	e002      	b.n	800f79c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2200      	movs	r2, #0
 800f79a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f7a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f7b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7c4:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	2b04      	cmp	r3, #4
 800f7ca:	d103      	bne.n	800f7d4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	659a      	str	r2, [r3, #88]	@ 0x58
 800f7d2:	e002      	b.n	800f7da <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	220d      	movs	r2, #13
 800f7d8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b03      	cmp	r3, #3
 800f7de:	d837      	bhi.n	800f850 <SAI_InitPCM+0xf0>
 800f7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800f7e8 <SAI_InitPCM+0x88>)
 800f7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e6:	bf00      	nop
 800f7e8:	0800f7f9 	.word	0x0800f7f9
 800f7ec:	0800f80f 	.word	0x0800f80f
 800f7f0:	0800f825 	.word	0x0800f825
 800f7f4:	0800f83b 	.word	0x0800f83b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2280      	movs	r2, #128	@ 0x80
 800f7fc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	011a      	lsls	r2, r3, #4
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2240      	movs	r2, #64	@ 0x40
 800f80a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f80c:	e023      	b.n	800f856 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2280      	movs	r2, #128	@ 0x80
 800f812:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	015a      	lsls	r2, r3, #5
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2280      	movs	r2, #128	@ 0x80
 800f820:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f822:	e018      	b.n	800f856 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	22c0      	movs	r2, #192	@ 0xc0
 800f828:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	015a      	lsls	r2, r3, #5
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2280      	movs	r2, #128	@ 0x80
 800f836:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f838:	e00d      	b.n	800f856 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	22e0      	movs	r2, #224	@ 0xe0
 800f83e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2280      	movs	r2, #128	@ 0x80
 800f84c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f84e:	e002      	b.n	800f856 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	75fb      	strb	r3, [r7, #23]
      break;
 800f854:	bf00      	nop
  }

  return status;
 800f856:	7dfb      	ldrb	r3, [r7, #23]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	371c      	adds	r7, #28
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	460b      	mov	r3, r1
 800f86e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f870:	2301      	movs	r3, #1
 800f872:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f874:	78fb      	ldrb	r3, [r7, #3]
 800f876:	2b01      	cmp	r3, #1
 800f878:	d103      	bne.n	800f882 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f043 0308 	orr.w	r3, r3, #8
 800f880:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f886:	2b08      	cmp	r3, #8
 800f888:	d10b      	bne.n	800f8a2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f88e:	2b03      	cmp	r3, #3
 800f890:	d003      	beq.n	800f89a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d103      	bne.n	800f8a2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f043 0310 	orr.w	r3, r3, #16
 800f8a0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	2b03      	cmp	r3, #3
 800f8a8:	d003      	beq.n	800f8b2 <SAI_InterruptFlag+0x4e>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d104      	bne.n	800f8bc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f8b8:	60fb      	str	r3, [r7, #12]
 800f8ba:	e003      	b.n	800f8c4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f043 0304 	orr.w	r3, r3, #4
 800f8c2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
	...

0800f8d4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f8dc:	4b18      	ldr	r3, [pc, #96]	@ (800f940 <SAI_Disable+0x6c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a18      	ldr	r2, [pc, #96]	@ (800f944 <SAI_Disable+0x70>)
 800f8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e6:	0b1b      	lsrs	r3, r3, #12
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f8fe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d10a      	bne.n	800f91c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f90c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800f916:	2303      	movs	r3, #3
 800f918:	72fb      	strb	r3, [r7, #11]
      break;
 800f91a:	e009      	b.n	800f930 <SAI_Disable+0x5c>
    }
    count--;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	3b01      	subs	r3, #1
 800f920:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1e7      	bne.n	800f900 <SAI_Disable+0x2c>

  return status;
 800f930:	7afb      	ldrb	r3, [r7, #11]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3714      	adds	r7, #20
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	20000028 	.word	0x20000028
 800f944:	95cbec1b 	.word	0x95cbec1b

0800f948 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f954:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f95a:	2b81      	cmp	r3, #129	@ 0x81
 800f95c:	d01c      	beq.n	800f998 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f974:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f976:	2100      	movs	r1, #0
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff ff73 	bl	800f864 <SAI_InterruptFlag>
 800f97e:	4603      	mov	r3, r0
 800f980:	43d9      	mvns	r1, r3
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	691a      	ldr	r2, [r3, #16]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	400a      	ands	r2, r1
 800f98e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2201      	movs	r2, #1
 800f994:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7f2 fce3 	bl	8002364 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f99e:	bf00      	nop
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9b2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7f2 fcbf 	bl	8002338 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f9ba:	bf00      	nop
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9ce:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9d4:	2b81      	cmp	r3, #129	@ 0x81
 800f9d6:	d01c      	beq.n	800fa12 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f9e6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f7ff ff36 	bl	800f864 <SAI_InterruptFlag>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	43d9      	mvns	r1, r3
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	691a      	ldr	r2, [r3, #16]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	400a      	ands	r2, r1
 800fa08:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f7f2 fc7a 	bl	800230c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fa18:	bf00      	nop
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7f2 fc56 	bl	80022e0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fa34:	bf00      	nop
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa48:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800fa68:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f7ff ff32 	bl	800f8d4 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2201      	movs	r2, #1
 800fa74:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f7ff fdb1 	bl	800f5e8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fa86:	bf00      	nop
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}

0800fa8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b082      	sub	sp, #8
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d101      	bne.n	800faa0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	e049      	b.n	800fb34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d106      	bne.n	800faba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7f3 fa0b 	bl	8002ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2202      	movs	r2, #2
 800fabe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	3304      	adds	r3, #4
 800faca:	4619      	mov	r1, r3
 800facc:	4610      	mov	r0, r2
 800face:	f000 fb3b 	bl	8010148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2201      	movs	r2, #1
 800fade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2201      	movs	r2, #1
 800fae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2201      	movs	r2, #1
 800faee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2201      	movs	r2, #1
 800faf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2201      	movs	r2, #1
 800fb06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2201      	movs	r2, #1
 800fb16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2201      	movs	r2, #1
 800fb26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb32:	2300      	movs	r3, #0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d001      	beq.n	800fb54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800fb50:	2301      	movs	r3, #1
 800fb52:	e06a      	b.n	800fc2a <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2202      	movs	r2, #2
 800fb58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a35      	ldr	r2, [pc, #212]	@ (800fc38 <HAL_TIM_Base_Start+0xfc>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d040      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a34      	ldr	r2, [pc, #208]	@ (800fc3c <HAL_TIM_Base_Start+0x100>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d03b      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb78:	d036      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fb82:	d031      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a2d      	ldr	r2, [pc, #180]	@ (800fc40 <HAL_TIM_Base_Start+0x104>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d02c      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a2c      	ldr	r2, [pc, #176]	@ (800fc44 <HAL_TIM_Base_Start+0x108>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d027      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a2a      	ldr	r2, [pc, #168]	@ (800fc48 <HAL_TIM_Base_Start+0x10c>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d022      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a29      	ldr	r2, [pc, #164]	@ (800fc4c <HAL_TIM_Base_Start+0x110>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d01d      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a27      	ldr	r2, [pc, #156]	@ (800fc50 <HAL_TIM_Base_Start+0x114>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d018      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a26      	ldr	r2, [pc, #152]	@ (800fc54 <HAL_TIM_Base_Start+0x118>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d013      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a24      	ldr	r2, [pc, #144]	@ (800fc58 <HAL_TIM_Base_Start+0x11c>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d00e      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a23      	ldr	r2, [pc, #140]	@ (800fc5c <HAL_TIM_Base_Start+0x120>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d009      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a21      	ldr	r2, [pc, #132]	@ (800fc60 <HAL_TIM_Base_Start+0x124>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d004      	beq.n	800fbe8 <HAL_TIM_Base_Start+0xac>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a20      	ldr	r2, [pc, #128]	@ (800fc64 <HAL_TIM_Base_Start+0x128>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d115      	bne.n	800fc14 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	689a      	ldr	r2, [r3, #8]
 800fbee:	4b1e      	ldr	r3, [pc, #120]	@ (800fc68 <HAL_TIM_Base_Start+0x12c>)
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b06      	cmp	r3, #6
 800fbf8:	d015      	beq.n	800fc26 <HAL_TIM_Base_Start+0xea>
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc00:	d011      	beq.n	800fc26 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f042 0201 	orr.w	r2, r2, #1
 800fc10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc12:	e008      	b.n	800fc26 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f042 0201 	orr.w	r2, r2, #1
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	e000      	b.n	800fc28 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	40012c00 	.word	0x40012c00
 800fc3c:	50012c00 	.word	0x50012c00
 800fc40:	40000400 	.word	0x40000400
 800fc44:	50000400 	.word	0x50000400
 800fc48:	40000800 	.word	0x40000800
 800fc4c:	50000800 	.word	0x50000800
 800fc50:	40000c00 	.word	0x40000c00
 800fc54:	50000c00 	.word	0x50000c00
 800fc58:	40013400 	.word	0x40013400
 800fc5c:	50013400 	.word	0x50013400
 800fc60:	40014000 	.word	0x40014000
 800fc64:	50014000 	.word	0x50014000
 800fc68:	00010007 	.word	0x00010007

0800fc6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e049      	b.n	800fd12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d106      	bne.n	800fc98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7f3 f8fa 	bl	8002e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2202      	movs	r2, #2
 800fc9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	3304      	adds	r3, #4
 800fca8:	4619      	mov	r1, r3
 800fcaa:	4610      	mov	r0, r2
 800fcac:	f000 fa4c 	bl	8010148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2201      	movs	r2, #1
 800fce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2201      	movs	r2, #1
 800fd04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fd10:	2300      	movs	r3, #0
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3708      	adds	r7, #8
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
	...

0800fd1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d101      	bne.n	800fd3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fd36:	2302      	movs	r3, #2
 800fd38:	e0ff      	b.n	800ff3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2b14      	cmp	r3, #20
 800fd46:	f200 80f0 	bhi.w	800ff2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fd4a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd50:	0800fda5 	.word	0x0800fda5
 800fd54:	0800ff2b 	.word	0x0800ff2b
 800fd58:	0800ff2b 	.word	0x0800ff2b
 800fd5c:	0800ff2b 	.word	0x0800ff2b
 800fd60:	0800fde5 	.word	0x0800fde5
 800fd64:	0800ff2b 	.word	0x0800ff2b
 800fd68:	0800ff2b 	.word	0x0800ff2b
 800fd6c:	0800ff2b 	.word	0x0800ff2b
 800fd70:	0800fe27 	.word	0x0800fe27
 800fd74:	0800ff2b 	.word	0x0800ff2b
 800fd78:	0800ff2b 	.word	0x0800ff2b
 800fd7c:	0800ff2b 	.word	0x0800ff2b
 800fd80:	0800fe67 	.word	0x0800fe67
 800fd84:	0800ff2b 	.word	0x0800ff2b
 800fd88:	0800ff2b 	.word	0x0800ff2b
 800fd8c:	0800ff2b 	.word	0x0800ff2b
 800fd90:	0800fea9 	.word	0x0800fea9
 800fd94:	0800ff2b 	.word	0x0800ff2b
 800fd98:	0800ff2b 	.word	0x0800ff2b
 800fd9c:	0800ff2b 	.word	0x0800ff2b
 800fda0:	0800fee9 	.word	0x0800fee9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	68b9      	ldr	r1, [r7, #8]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 fad2 	bl	8010354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	699a      	ldr	r2, [r3, #24]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f042 0208 	orr.w	r2, r2, #8
 800fdbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	699a      	ldr	r2, [r3, #24]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f022 0204 	bic.w	r2, r2, #4
 800fdce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	6999      	ldr	r1, [r3, #24]
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	691a      	ldr	r2, [r3, #16]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	430a      	orrs	r2, r1
 800fde0:	619a      	str	r2, [r3, #24]
      break;
 800fde2:	e0a5      	b.n	800ff30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68b9      	ldr	r1, [r7, #8]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 fb74 	bl	80104d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	699a      	ldr	r2, [r3, #24]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fdfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	699a      	ldr	r2, [r3, #24]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	6999      	ldr	r1, [r3, #24]
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	021a      	lsls	r2, r3, #8
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	430a      	orrs	r2, r1
 800fe22:	619a      	str	r2, [r3, #24]
      break;
 800fe24:	e084      	b.n	800ff30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	68b9      	ldr	r1, [r7, #8]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f000 fc03 	bl	8010638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	69da      	ldr	r2, [r3, #28]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f042 0208 	orr.w	r2, r2, #8
 800fe40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	69da      	ldr	r2, [r3, #28]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f022 0204 	bic.w	r2, r2, #4
 800fe50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	69d9      	ldr	r1, [r3, #28]
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	691a      	ldr	r2, [r3, #16]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	430a      	orrs	r2, r1
 800fe62:	61da      	str	r2, [r3, #28]
      break;
 800fe64:	e064      	b.n	800ff30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68b9      	ldr	r1, [r7, #8]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f000 fc91 	bl	8010794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	69da      	ldr	r2, [r3, #28]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	69da      	ldr	r2, [r3, #28]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	69d9      	ldr	r1, [r3, #28]
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	691b      	ldr	r3, [r3, #16]
 800fe9c:	021a      	lsls	r2, r3, #8
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	430a      	orrs	r2, r1
 800fea4:	61da      	str	r2, [r3, #28]
      break;
 800fea6:	e043      	b.n	800ff30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68b9      	ldr	r1, [r7, #8]
 800feae:	4618      	mov	r0, r3
 800feb0:	f000 fd20 	bl	80108f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f042 0208 	orr.w	r2, r2, #8
 800fec2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	f022 0204 	bic.w	r2, r2, #4
 800fed2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	691a      	ldr	r2, [r3, #16]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	430a      	orrs	r2, r1
 800fee4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fee6:	e023      	b.n	800ff30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	68b9      	ldr	r1, [r7, #8]
 800feee:	4618      	mov	r0, r3
 800fef0:	f000 fd82 	bl	80109f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ff12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	691b      	ldr	r3, [r3, #16]
 800ff1e:	021a      	lsls	r2, r3, #8
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	430a      	orrs	r2, r1
 800ff26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ff28:	e002      	b.n	800ff30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ff2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ff38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop

0800ff44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d101      	bne.n	800ff60 <HAL_TIM_ConfigClockSource+0x1c>
 800ff5c:	2302      	movs	r3, #2
 800ff5e:	e0e6      	b.n	801012e <HAL_TIM_ConfigClockSource+0x1ea>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2201      	movs	r2, #1
 800ff64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ff7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ff82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4a67      	ldr	r2, [pc, #412]	@ (8010138 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	f000 80b1 	beq.w	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 800ffa0:	4a65      	ldr	r2, [pc, #404]	@ (8010138 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	f200 80b6 	bhi.w	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffa8:	4a64      	ldr	r2, [pc, #400]	@ (801013c <HAL_TIM_ConfigClockSource+0x1f8>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	f000 80a9 	beq.w	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 800ffb0:	4a62      	ldr	r2, [pc, #392]	@ (801013c <HAL_TIM_ConfigClockSource+0x1f8>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	f200 80ae 	bhi.w	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffb8:	4a61      	ldr	r2, [pc, #388]	@ (8010140 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	f000 80a1 	beq.w	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 800ffc0:	4a5f      	ldr	r2, [pc, #380]	@ (8010140 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	f200 80a6 	bhi.w	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffc8:	4a5e      	ldr	r2, [pc, #376]	@ (8010144 <HAL_TIM_ConfigClockSource+0x200>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	f000 8099 	beq.w	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 800ffd0:	4a5c      	ldr	r2, [pc, #368]	@ (8010144 <HAL_TIM_ConfigClockSource+0x200>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	f200 809e 	bhi.w	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ffdc:	f000 8091 	beq.w	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 800ffe0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ffe4:	f200 8096 	bhi.w	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 800ffe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffec:	f000 8089 	beq.w	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 800fff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fff4:	f200 808e 	bhi.w	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 800fff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fffc:	d03e      	beq.n	801007c <HAL_TIM_ConfigClockSource+0x138>
 800fffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010002:	f200 8087 	bhi.w	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 8010006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801000a:	f000 8086 	beq.w	801011a <HAL_TIM_ConfigClockSource+0x1d6>
 801000e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010012:	d87f      	bhi.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 8010014:	2b70      	cmp	r3, #112	@ 0x70
 8010016:	d01a      	beq.n	801004e <HAL_TIM_ConfigClockSource+0x10a>
 8010018:	2b70      	cmp	r3, #112	@ 0x70
 801001a:	d87b      	bhi.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 801001c:	2b60      	cmp	r3, #96	@ 0x60
 801001e:	d050      	beq.n	80100c2 <HAL_TIM_ConfigClockSource+0x17e>
 8010020:	2b60      	cmp	r3, #96	@ 0x60
 8010022:	d877      	bhi.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 8010024:	2b50      	cmp	r3, #80	@ 0x50
 8010026:	d03c      	beq.n	80100a2 <HAL_TIM_ConfigClockSource+0x15e>
 8010028:	2b50      	cmp	r3, #80	@ 0x50
 801002a:	d873      	bhi.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 801002c:	2b40      	cmp	r3, #64	@ 0x40
 801002e:	d058      	beq.n	80100e2 <HAL_TIM_ConfigClockSource+0x19e>
 8010030:	2b40      	cmp	r3, #64	@ 0x40
 8010032:	d86f      	bhi.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 8010034:	2b30      	cmp	r3, #48	@ 0x30
 8010036:	d064      	beq.n	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 8010038:	2b30      	cmp	r3, #48	@ 0x30
 801003a:	d86b      	bhi.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 801003c:	2b20      	cmp	r3, #32
 801003e:	d060      	beq.n	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 8010040:	2b20      	cmp	r3, #32
 8010042:	d867      	bhi.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
 8010044:	2b00      	cmp	r3, #0
 8010046:	d05c      	beq.n	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 8010048:	2b10      	cmp	r3, #16
 801004a:	d05a      	beq.n	8010102 <HAL_TIM_ConfigClockSource+0x1be>
 801004c:	e062      	b.n	8010114 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801005e:	f000 fdcb 	bl	8010bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	68ba      	ldr	r2, [r7, #8]
 8010078:	609a      	str	r2, [r3, #8]
      break;
 801007a:	e04f      	b.n	801011c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801008c:	f000 fdb4 	bl	8010bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	689a      	ldr	r2, [r3, #8]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801009e:	609a      	str	r2, [r3, #8]
      break;
 80100a0:	e03c      	b.n	801011c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80100ae:	461a      	mov	r2, r3
 80100b0:	f000 fd26 	bl	8010b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2150      	movs	r1, #80	@ 0x50
 80100ba:	4618      	mov	r0, r3
 80100bc:	f000 fd7f 	bl	8010bbe <TIM_ITRx_SetConfig>
      break;
 80100c0:	e02c      	b.n	801011c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80100ce:	461a      	mov	r2, r3
 80100d0:	f000 fd45 	bl	8010b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2160      	movs	r1, #96	@ 0x60
 80100da:	4618      	mov	r0, r3
 80100dc:	f000 fd6f 	bl	8010bbe <TIM_ITRx_SetConfig>
      break;
 80100e0:	e01c      	b.n	801011c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80100ee:	461a      	mov	r2, r3
 80100f0:	f000 fd06 	bl	8010b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2140      	movs	r1, #64	@ 0x40
 80100fa:	4618      	mov	r0, r3
 80100fc:	f000 fd5f 	bl	8010bbe <TIM_ITRx_SetConfig>
      break;
 8010100:	e00c      	b.n	801011c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4619      	mov	r1, r3
 801010c:	4610      	mov	r0, r2
 801010e:	f000 fd56 	bl	8010bbe <TIM_ITRx_SetConfig>
      break;
 8010112:	e003      	b.n	801011c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	73fb      	strb	r3, [r7, #15]
      break;
 8010118:	e000      	b.n	801011c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 801011a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801012c:	7bfb      	ldrb	r3, [r7, #15]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	00100070 	.word	0x00100070
 801013c:	00100040 	.word	0x00100040
 8010140:	00100030 	.word	0x00100030
 8010144:	00100020 	.word	0x00100020

08010148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010148:	b480      	push	{r7}
 801014a:	b085      	sub	sp, #20
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	4a6e      	ldr	r2, [pc, #440]	@ (8010314 <TIM_Base_SetConfig+0x1cc>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d02b      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	4a6d      	ldr	r2, [pc, #436]	@ (8010318 <TIM_Base_SetConfig+0x1d0>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d027      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801016e:	d023      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010176:	d01f      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4a68      	ldr	r2, [pc, #416]	@ (801031c <TIM_Base_SetConfig+0x1d4>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d01b      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4a67      	ldr	r2, [pc, #412]	@ (8010320 <TIM_Base_SetConfig+0x1d8>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d017      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	4a66      	ldr	r2, [pc, #408]	@ (8010324 <TIM_Base_SetConfig+0x1dc>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d013      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4a65      	ldr	r2, [pc, #404]	@ (8010328 <TIM_Base_SetConfig+0x1e0>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d00f      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	4a64      	ldr	r2, [pc, #400]	@ (801032c <TIM_Base_SetConfig+0x1e4>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d00b      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4a63      	ldr	r2, [pc, #396]	@ (8010330 <TIM_Base_SetConfig+0x1e8>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d007      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	4a62      	ldr	r2, [pc, #392]	@ (8010334 <TIM_Base_SetConfig+0x1ec>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d003      	beq.n	80101b8 <TIM_Base_SetConfig+0x70>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4a61      	ldr	r2, [pc, #388]	@ (8010338 <TIM_Base_SetConfig+0x1f0>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d108      	bne.n	80101ca <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	68fa      	ldr	r2, [r7, #12]
 80101c6:	4313      	orrs	r3, r2
 80101c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4a51      	ldr	r2, [pc, #324]	@ (8010314 <TIM_Base_SetConfig+0x1cc>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d043      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4a50      	ldr	r2, [pc, #320]	@ (8010318 <TIM_Base_SetConfig+0x1d0>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d03f      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101e0:	d03b      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80101e8:	d037      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4a4b      	ldr	r2, [pc, #300]	@ (801031c <TIM_Base_SetConfig+0x1d4>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d033      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a4a      	ldr	r2, [pc, #296]	@ (8010320 <TIM_Base_SetConfig+0x1d8>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d02f      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4a49      	ldr	r2, [pc, #292]	@ (8010324 <TIM_Base_SetConfig+0x1dc>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d02b      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4a48      	ldr	r2, [pc, #288]	@ (8010328 <TIM_Base_SetConfig+0x1e0>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d027      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4a47      	ldr	r2, [pc, #284]	@ (801032c <TIM_Base_SetConfig+0x1e4>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d023      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4a46      	ldr	r2, [pc, #280]	@ (8010330 <TIM_Base_SetConfig+0x1e8>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d01f      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4a45      	ldr	r2, [pc, #276]	@ (8010334 <TIM_Base_SetConfig+0x1ec>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d01b      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4a44      	ldr	r2, [pc, #272]	@ (8010338 <TIM_Base_SetConfig+0x1f0>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d017      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4a43      	ldr	r2, [pc, #268]	@ (801033c <TIM_Base_SetConfig+0x1f4>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d013      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a42      	ldr	r2, [pc, #264]	@ (8010340 <TIM_Base_SetConfig+0x1f8>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d00f      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a41      	ldr	r2, [pc, #260]	@ (8010344 <TIM_Base_SetConfig+0x1fc>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d00b      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4a40      	ldr	r2, [pc, #256]	@ (8010348 <TIM_Base_SetConfig+0x200>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d007      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a3f      	ldr	r2, [pc, #252]	@ (801034c <TIM_Base_SetConfig+0x204>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d003      	beq.n	801025a <TIM_Base_SetConfig+0x112>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4a3e      	ldr	r2, [pc, #248]	@ (8010350 <TIM_Base_SetConfig+0x208>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d108      	bne.n	801026c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	4313      	orrs	r3, r2
 801026a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	695b      	ldr	r3, [r3, #20]
 8010276:	4313      	orrs	r3, r2
 8010278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	689a      	ldr	r2, [r3, #8]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4a20      	ldr	r2, [pc, #128]	@ (8010314 <TIM_Base_SetConfig+0x1cc>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d023      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4a1f      	ldr	r2, [pc, #124]	@ (8010318 <TIM_Base_SetConfig+0x1d0>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d01f      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4a24      	ldr	r2, [pc, #144]	@ (8010334 <TIM_Base_SetConfig+0x1ec>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d01b      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4a23      	ldr	r2, [pc, #140]	@ (8010338 <TIM_Base_SetConfig+0x1f0>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d017      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4a22      	ldr	r2, [pc, #136]	@ (801033c <TIM_Base_SetConfig+0x1f4>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d013      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4a21      	ldr	r2, [pc, #132]	@ (8010340 <TIM_Base_SetConfig+0x1f8>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d00f      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a20      	ldr	r2, [pc, #128]	@ (8010344 <TIM_Base_SetConfig+0x1fc>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d00b      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4a1f      	ldr	r2, [pc, #124]	@ (8010348 <TIM_Base_SetConfig+0x200>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d007      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4a1e      	ldr	r2, [pc, #120]	@ (801034c <TIM_Base_SetConfig+0x204>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d003      	beq.n	80102e0 <TIM_Base_SetConfig+0x198>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4a1d      	ldr	r2, [pc, #116]	@ (8010350 <TIM_Base_SetConfig+0x208>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d103      	bne.n	80102e8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	691a      	ldr	r2, [r3, #16]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2201      	movs	r2, #1
 80102ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d105      	bne.n	8010306 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	f023 0201 	bic.w	r2, r3, #1
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	611a      	str	r2, [r3, #16]
  }
}
 8010306:	bf00      	nop
 8010308:	3714      	adds	r7, #20
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	40012c00 	.word	0x40012c00
 8010318:	50012c00 	.word	0x50012c00
 801031c:	40000400 	.word	0x40000400
 8010320:	50000400 	.word	0x50000400
 8010324:	40000800 	.word	0x40000800
 8010328:	50000800 	.word	0x50000800
 801032c:	40000c00 	.word	0x40000c00
 8010330:	50000c00 	.word	0x50000c00
 8010334:	40013400 	.word	0x40013400
 8010338:	50013400 	.word	0x50013400
 801033c:	40014000 	.word	0x40014000
 8010340:	50014000 	.word	0x50014000
 8010344:	40014400 	.word	0x40014400
 8010348:	50014400 	.word	0x50014400
 801034c:	40014800 	.word	0x40014800
 8010350:	50014800 	.word	0x50014800

08010354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010354:	b480      	push	{r7}
 8010356:	b087      	sub	sp, #28
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6a1b      	ldr	r3, [r3, #32]
 8010362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6a1b      	ldr	r3, [r3, #32]
 8010368:	f023 0201 	bic.w	r2, r3, #1
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	699b      	ldr	r3, [r3, #24]
 801037a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f023 0303 	bic.w	r3, r3, #3
 801038e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	4313      	orrs	r3, r2
 8010398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	f023 0302 	bic.w	r3, r3, #2
 80103a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	697a      	ldr	r2, [r7, #20]
 80103a8:	4313      	orrs	r3, r2
 80103aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4a40      	ldr	r2, [pc, #256]	@ (80104b0 <TIM_OC1_SetConfig+0x15c>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d023      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a3f      	ldr	r2, [pc, #252]	@ (80104b4 <TIM_OC1_SetConfig+0x160>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d01f      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4a3e      	ldr	r2, [pc, #248]	@ (80104b8 <TIM_OC1_SetConfig+0x164>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d01b      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4a3d      	ldr	r2, [pc, #244]	@ (80104bc <TIM_OC1_SetConfig+0x168>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d017      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a3c      	ldr	r2, [pc, #240]	@ (80104c0 <TIM_OC1_SetConfig+0x16c>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d013      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a3b      	ldr	r2, [pc, #236]	@ (80104c4 <TIM_OC1_SetConfig+0x170>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d00f      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a3a      	ldr	r2, [pc, #232]	@ (80104c8 <TIM_OC1_SetConfig+0x174>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d00b      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a39      	ldr	r2, [pc, #228]	@ (80104cc <TIM_OC1_SetConfig+0x178>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d007      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a38      	ldr	r2, [pc, #224]	@ (80104d0 <TIM_OC1_SetConfig+0x17c>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d003      	beq.n	80103fc <TIM_OC1_SetConfig+0xa8>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4a37      	ldr	r2, [pc, #220]	@ (80104d4 <TIM_OC1_SetConfig+0x180>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d10c      	bne.n	8010416 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	f023 0308 	bic.w	r3, r3, #8
 8010402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	697a      	ldr	r2, [r7, #20]
 801040a:	4313      	orrs	r3, r2
 801040c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	f023 0304 	bic.w	r3, r3, #4
 8010414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a25      	ldr	r2, [pc, #148]	@ (80104b0 <TIM_OC1_SetConfig+0x15c>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d023      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a24      	ldr	r2, [pc, #144]	@ (80104b4 <TIM_OC1_SetConfig+0x160>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d01f      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a23      	ldr	r2, [pc, #140]	@ (80104b8 <TIM_OC1_SetConfig+0x164>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d01b      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4a22      	ldr	r2, [pc, #136]	@ (80104bc <TIM_OC1_SetConfig+0x168>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d017      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4a21      	ldr	r2, [pc, #132]	@ (80104c0 <TIM_OC1_SetConfig+0x16c>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d013      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4a20      	ldr	r2, [pc, #128]	@ (80104c4 <TIM_OC1_SetConfig+0x170>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d00f      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4a1f      	ldr	r2, [pc, #124]	@ (80104c8 <TIM_OC1_SetConfig+0x174>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d00b      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4a1e      	ldr	r2, [pc, #120]	@ (80104cc <TIM_OC1_SetConfig+0x178>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d007      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4a1d      	ldr	r2, [pc, #116]	@ (80104d0 <TIM_OC1_SetConfig+0x17c>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d003      	beq.n	8010466 <TIM_OC1_SetConfig+0x112>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a1c      	ldr	r2, [pc, #112]	@ (80104d4 <TIM_OC1_SetConfig+0x180>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d111      	bne.n	801048a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801046c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	695b      	ldr	r3, [r3, #20]
 801047a:	693a      	ldr	r2, [r7, #16]
 801047c:	4313      	orrs	r3, r2
 801047e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	699b      	ldr	r3, [r3, #24]
 8010484:	693a      	ldr	r2, [r7, #16]
 8010486:	4313      	orrs	r3, r2
 8010488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	693a      	ldr	r2, [r7, #16]
 801048e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	685a      	ldr	r2, [r3, #4]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	697a      	ldr	r2, [r7, #20]
 80104a2:	621a      	str	r2, [r3, #32]
}
 80104a4:	bf00      	nop
 80104a6:	371c      	adds	r7, #28
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr
 80104b0:	40012c00 	.word	0x40012c00
 80104b4:	50012c00 	.word	0x50012c00
 80104b8:	40013400 	.word	0x40013400
 80104bc:	50013400 	.word	0x50013400
 80104c0:	40014000 	.word	0x40014000
 80104c4:	50014000 	.word	0x50014000
 80104c8:	40014400 	.word	0x40014400
 80104cc:	50014400 	.word	0x50014400
 80104d0:	40014800 	.word	0x40014800
 80104d4:	50014800 	.word	0x50014800

080104d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80104d8:	b480      	push	{r7}
 80104da:	b087      	sub	sp, #28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a1b      	ldr	r3, [r3, #32]
 80104e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6a1b      	ldr	r3, [r3, #32]
 80104ec:	f023 0210 	bic.w	r2, r3, #16
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	699b      	ldr	r3, [r3, #24]
 80104fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801050a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	021b      	lsls	r3, r3, #8
 801051a:	68fa      	ldr	r2, [r7, #12]
 801051c:	4313      	orrs	r3, r2
 801051e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	f023 0320 	bic.w	r3, r3, #32
 8010526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	011b      	lsls	r3, r3, #4
 801052e:	697a      	ldr	r2, [r7, #20]
 8010530:	4313      	orrs	r3, r2
 8010532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a36      	ldr	r2, [pc, #216]	@ (8010610 <TIM_OC2_SetConfig+0x138>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d00b      	beq.n	8010554 <TIM_OC2_SetConfig+0x7c>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	4a35      	ldr	r2, [pc, #212]	@ (8010614 <TIM_OC2_SetConfig+0x13c>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d007      	beq.n	8010554 <TIM_OC2_SetConfig+0x7c>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4a34      	ldr	r2, [pc, #208]	@ (8010618 <TIM_OC2_SetConfig+0x140>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d003      	beq.n	8010554 <TIM_OC2_SetConfig+0x7c>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a33      	ldr	r2, [pc, #204]	@ (801061c <TIM_OC2_SetConfig+0x144>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d10d      	bne.n	8010570 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801055a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	697a      	ldr	r2, [r7, #20]
 8010564:	4313      	orrs	r3, r2
 8010566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801056e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4a27      	ldr	r2, [pc, #156]	@ (8010610 <TIM_OC2_SetConfig+0x138>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d023      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	4a26      	ldr	r2, [pc, #152]	@ (8010614 <TIM_OC2_SetConfig+0x13c>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d01f      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4a25      	ldr	r2, [pc, #148]	@ (8010618 <TIM_OC2_SetConfig+0x140>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d01b      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4a24      	ldr	r2, [pc, #144]	@ (801061c <TIM_OC2_SetConfig+0x144>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d017      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4a23      	ldr	r2, [pc, #140]	@ (8010620 <TIM_OC2_SetConfig+0x148>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d013      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	4a22      	ldr	r2, [pc, #136]	@ (8010624 <TIM_OC2_SetConfig+0x14c>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d00f      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4a21      	ldr	r2, [pc, #132]	@ (8010628 <TIM_OC2_SetConfig+0x150>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d00b      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4a20      	ldr	r2, [pc, #128]	@ (801062c <TIM_OC2_SetConfig+0x154>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d007      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4a1f      	ldr	r2, [pc, #124]	@ (8010630 <TIM_OC2_SetConfig+0x158>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d003      	beq.n	80105c0 <TIM_OC2_SetConfig+0xe8>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4a1e      	ldr	r2, [pc, #120]	@ (8010634 <TIM_OC2_SetConfig+0x15c>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d113      	bne.n	80105e8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80105c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80105ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	695b      	ldr	r3, [r3, #20]
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	693a      	ldr	r2, [r7, #16]
 80105d8:	4313      	orrs	r3, r2
 80105da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	699b      	ldr	r3, [r3, #24]
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	693a      	ldr	r2, [r7, #16]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	693a      	ldr	r2, [r7, #16]
 80105ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	685a      	ldr	r2, [r3, #4]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	697a      	ldr	r2, [r7, #20]
 8010600:	621a      	str	r2, [r3, #32]
}
 8010602:	bf00      	nop
 8010604:	371c      	adds	r7, #28
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	40012c00 	.word	0x40012c00
 8010614:	50012c00 	.word	0x50012c00
 8010618:	40013400 	.word	0x40013400
 801061c:	50013400 	.word	0x50013400
 8010620:	40014000 	.word	0x40014000
 8010624:	50014000 	.word	0x50014000
 8010628:	40014400 	.word	0x40014400
 801062c:	50014400 	.word	0x50014400
 8010630:	40014800 	.word	0x40014800
 8010634:	50014800 	.word	0x50014800

08010638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010638:	b480      	push	{r7}
 801063a:	b087      	sub	sp, #28
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6a1b      	ldr	r3, [r3, #32]
 801064c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	69db      	ldr	r3, [r3, #28]
 801065e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801066a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f023 0303 	bic.w	r3, r3, #3
 8010672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	68fa      	ldr	r2, [r7, #12]
 801067a:	4313      	orrs	r3, r2
 801067c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	021b      	lsls	r3, r3, #8
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	4313      	orrs	r3, r2
 8010690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a35      	ldr	r2, [pc, #212]	@ (801076c <TIM_OC3_SetConfig+0x134>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d00b      	beq.n	80106b2 <TIM_OC3_SetConfig+0x7a>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4a34      	ldr	r2, [pc, #208]	@ (8010770 <TIM_OC3_SetConfig+0x138>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d007      	beq.n	80106b2 <TIM_OC3_SetConfig+0x7a>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4a33      	ldr	r2, [pc, #204]	@ (8010774 <TIM_OC3_SetConfig+0x13c>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d003      	beq.n	80106b2 <TIM_OC3_SetConfig+0x7a>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4a32      	ldr	r2, [pc, #200]	@ (8010778 <TIM_OC3_SetConfig+0x140>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d10d      	bne.n	80106ce <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	021b      	lsls	r3, r3, #8
 80106c0:	697a      	ldr	r2, [r7, #20]
 80106c2:	4313      	orrs	r3, r2
 80106c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80106cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	4a26      	ldr	r2, [pc, #152]	@ (801076c <TIM_OC3_SetConfig+0x134>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d023      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4a25      	ldr	r2, [pc, #148]	@ (8010770 <TIM_OC3_SetConfig+0x138>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d01f      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4a24      	ldr	r2, [pc, #144]	@ (8010774 <TIM_OC3_SetConfig+0x13c>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d01b      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4a23      	ldr	r2, [pc, #140]	@ (8010778 <TIM_OC3_SetConfig+0x140>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d017      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4a22      	ldr	r2, [pc, #136]	@ (801077c <TIM_OC3_SetConfig+0x144>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d013      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4a21      	ldr	r2, [pc, #132]	@ (8010780 <TIM_OC3_SetConfig+0x148>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d00f      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	4a20      	ldr	r2, [pc, #128]	@ (8010784 <TIM_OC3_SetConfig+0x14c>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d00b      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4a1f      	ldr	r2, [pc, #124]	@ (8010788 <TIM_OC3_SetConfig+0x150>)
 801070a:	4293      	cmp	r3, r2
 801070c:	d007      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4a1e      	ldr	r2, [pc, #120]	@ (801078c <TIM_OC3_SetConfig+0x154>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d003      	beq.n	801071e <TIM_OC3_SetConfig+0xe6>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4a1d      	ldr	r2, [pc, #116]	@ (8010790 <TIM_OC3_SetConfig+0x158>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d113      	bne.n	8010746 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801072c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	695b      	ldr	r3, [r3, #20]
 8010732:	011b      	lsls	r3, r3, #4
 8010734:	693a      	ldr	r2, [r7, #16]
 8010736:	4313      	orrs	r3, r2
 8010738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	011b      	lsls	r3, r3, #4
 8010740:	693a      	ldr	r2, [r7, #16]
 8010742:	4313      	orrs	r3, r2
 8010744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	68fa      	ldr	r2, [r7, #12]
 8010750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	685a      	ldr	r2, [r3, #4]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	697a      	ldr	r2, [r7, #20]
 801075e:	621a      	str	r2, [r3, #32]
}
 8010760:	bf00      	nop
 8010762:	371c      	adds	r7, #28
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr
 801076c:	40012c00 	.word	0x40012c00
 8010770:	50012c00 	.word	0x50012c00
 8010774:	40013400 	.word	0x40013400
 8010778:	50013400 	.word	0x50013400
 801077c:	40014000 	.word	0x40014000
 8010780:	50014000 	.word	0x50014000
 8010784:	40014400 	.word	0x40014400
 8010788:	50014400 	.word	0x50014400
 801078c:	40014800 	.word	0x40014800
 8010790:	50014800 	.word	0x50014800

08010794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010794:	b480      	push	{r7}
 8010796:	b087      	sub	sp, #28
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6a1b      	ldr	r3, [r3, #32]
 80107a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6a1b      	ldr	r3, [r3, #32]
 80107a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	69db      	ldr	r3, [r3, #28]
 80107ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80107c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80107ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	021b      	lsls	r3, r3, #8
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	4313      	orrs	r3, r2
 80107da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80107e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	031b      	lsls	r3, r3, #12
 80107ea:	697a      	ldr	r2, [r7, #20]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4a36      	ldr	r2, [pc, #216]	@ (80108cc <TIM_OC4_SetConfig+0x138>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d00b      	beq.n	8010810 <TIM_OC4_SetConfig+0x7c>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4a35      	ldr	r2, [pc, #212]	@ (80108d0 <TIM_OC4_SetConfig+0x13c>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d007      	beq.n	8010810 <TIM_OC4_SetConfig+0x7c>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4a34      	ldr	r2, [pc, #208]	@ (80108d4 <TIM_OC4_SetConfig+0x140>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d003      	beq.n	8010810 <TIM_OC4_SetConfig+0x7c>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	4a33      	ldr	r2, [pc, #204]	@ (80108d8 <TIM_OC4_SetConfig+0x144>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d10d      	bne.n	801082c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	031b      	lsls	r3, r3, #12
 801081e:	697a      	ldr	r2, [r7, #20]
 8010820:	4313      	orrs	r3, r2
 8010822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801082a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	4a27      	ldr	r2, [pc, #156]	@ (80108cc <TIM_OC4_SetConfig+0x138>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d023      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	4a26      	ldr	r2, [pc, #152]	@ (80108d0 <TIM_OC4_SetConfig+0x13c>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d01f      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	4a25      	ldr	r2, [pc, #148]	@ (80108d4 <TIM_OC4_SetConfig+0x140>)
 8010840:	4293      	cmp	r3, r2
 8010842:	d01b      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	4a24      	ldr	r2, [pc, #144]	@ (80108d8 <TIM_OC4_SetConfig+0x144>)
 8010848:	4293      	cmp	r3, r2
 801084a:	d017      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	4a23      	ldr	r2, [pc, #140]	@ (80108dc <TIM_OC4_SetConfig+0x148>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d013      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4a22      	ldr	r2, [pc, #136]	@ (80108e0 <TIM_OC4_SetConfig+0x14c>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d00f      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	4a21      	ldr	r2, [pc, #132]	@ (80108e4 <TIM_OC4_SetConfig+0x150>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d00b      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4a20      	ldr	r2, [pc, #128]	@ (80108e8 <TIM_OC4_SetConfig+0x154>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d007      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	4a1f      	ldr	r2, [pc, #124]	@ (80108ec <TIM_OC4_SetConfig+0x158>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d003      	beq.n	801087c <TIM_OC4_SetConfig+0xe8>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4a1e      	ldr	r2, [pc, #120]	@ (80108f0 <TIM_OC4_SetConfig+0x15c>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d113      	bne.n	80108a4 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010882:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801088a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	695b      	ldr	r3, [r3, #20]
 8010890:	019b      	lsls	r3, r3, #6
 8010892:	693a      	ldr	r2, [r7, #16]
 8010894:	4313      	orrs	r3, r2
 8010896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	699b      	ldr	r3, [r3, #24]
 801089c:	019b      	lsls	r3, r3, #6
 801089e:	693a      	ldr	r2, [r7, #16]
 80108a0:	4313      	orrs	r3, r2
 80108a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	693a      	ldr	r2, [r7, #16]
 80108a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	685a      	ldr	r2, [r3, #4]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	697a      	ldr	r2, [r7, #20]
 80108bc:	621a      	str	r2, [r3, #32]
}
 80108be:	bf00      	nop
 80108c0:	371c      	adds	r7, #28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	40012c00 	.word	0x40012c00
 80108d0:	50012c00 	.word	0x50012c00
 80108d4:	40013400 	.word	0x40013400
 80108d8:	50013400 	.word	0x50013400
 80108dc:	40014000 	.word	0x40014000
 80108e0:	50014000 	.word	0x50014000
 80108e4:	40014400 	.word	0x40014400
 80108e8:	50014400 	.word	0x50014400
 80108ec:	40014800 	.word	0x40014800
 80108f0:	50014800 	.word	0x50014800

080108f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b087      	sub	sp, #28
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6a1b      	ldr	r3, [r3, #32]
 8010902:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6a1b      	ldr	r3, [r3, #32]
 8010908:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801091a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	4313      	orrs	r3, r2
 8010930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	041b      	lsls	r3, r3, #16
 8010940:	693a      	ldr	r2, [r7, #16]
 8010942:	4313      	orrs	r3, r2
 8010944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4a21      	ldr	r2, [pc, #132]	@ (80109d0 <TIM_OC5_SetConfig+0xdc>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d023      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	4a20      	ldr	r2, [pc, #128]	@ (80109d4 <TIM_OC5_SetConfig+0xe0>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d01f      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	4a1f      	ldr	r2, [pc, #124]	@ (80109d8 <TIM_OC5_SetConfig+0xe4>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d01b      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4a1e      	ldr	r2, [pc, #120]	@ (80109dc <TIM_OC5_SetConfig+0xe8>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d017      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4a1d      	ldr	r2, [pc, #116]	@ (80109e0 <TIM_OC5_SetConfig+0xec>)
 801096a:	4293      	cmp	r3, r2
 801096c:	d013      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4a1c      	ldr	r2, [pc, #112]	@ (80109e4 <TIM_OC5_SetConfig+0xf0>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d00f      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	4a1b      	ldr	r2, [pc, #108]	@ (80109e8 <TIM_OC5_SetConfig+0xf4>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d00b      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4a1a      	ldr	r2, [pc, #104]	@ (80109ec <TIM_OC5_SetConfig+0xf8>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d007      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4a19      	ldr	r2, [pc, #100]	@ (80109f0 <TIM_OC5_SetConfig+0xfc>)
 801098a:	4293      	cmp	r3, r2
 801098c:	d003      	beq.n	8010996 <TIM_OC5_SetConfig+0xa2>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4a18      	ldr	r2, [pc, #96]	@ (80109f4 <TIM_OC5_SetConfig+0x100>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d109      	bne.n	80109aa <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801099c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	695b      	ldr	r3, [r3, #20]
 80109a2:	021b      	lsls	r3, r3, #8
 80109a4:	697a      	ldr	r2, [r7, #20]
 80109a6:	4313      	orrs	r3, r2
 80109a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	697a      	ldr	r2, [r7, #20]
 80109ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	68fa      	ldr	r2, [r7, #12]
 80109b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	685a      	ldr	r2, [r3, #4]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	693a      	ldr	r2, [r7, #16]
 80109c2:	621a      	str	r2, [r3, #32]
}
 80109c4:	bf00      	nop
 80109c6:	371c      	adds	r7, #28
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr
 80109d0:	40012c00 	.word	0x40012c00
 80109d4:	50012c00 	.word	0x50012c00
 80109d8:	40013400 	.word	0x40013400
 80109dc:	50013400 	.word	0x50013400
 80109e0:	40014000 	.word	0x40014000
 80109e4:	50014000 	.word	0x50014000
 80109e8:	40014400 	.word	0x40014400
 80109ec:	50014400 	.word	0x50014400
 80109f0:	40014800 	.word	0x40014800
 80109f4:	50014800 	.word	0x50014800

080109f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b087      	sub	sp, #28
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6a1b      	ldr	r3, [r3, #32]
 8010a0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	021b      	lsls	r3, r3, #8
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	4313      	orrs	r3, r2
 8010a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	689b      	ldr	r3, [r3, #8]
 8010a44:	051b      	lsls	r3, r3, #20
 8010a46:	693a      	ldr	r2, [r7, #16]
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4a22      	ldr	r2, [pc, #136]	@ (8010ad8 <TIM_OC6_SetConfig+0xe0>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d023      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	4a21      	ldr	r2, [pc, #132]	@ (8010adc <TIM_OC6_SetConfig+0xe4>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d01f      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4a20      	ldr	r2, [pc, #128]	@ (8010ae0 <TIM_OC6_SetConfig+0xe8>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d01b      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	4a1f      	ldr	r2, [pc, #124]	@ (8010ae4 <TIM_OC6_SetConfig+0xec>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d017      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ae8 <TIM_OC6_SetConfig+0xf0>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d013      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4a1d      	ldr	r2, [pc, #116]	@ (8010aec <TIM_OC6_SetConfig+0xf4>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d00f      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8010af0 <TIM_OC6_SetConfig+0xf8>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d00b      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	4a1b      	ldr	r2, [pc, #108]	@ (8010af4 <TIM_OC6_SetConfig+0xfc>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d007      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8010af8 <TIM_OC6_SetConfig+0x100>)
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d003      	beq.n	8010a9c <TIM_OC6_SetConfig+0xa4>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	4a19      	ldr	r2, [pc, #100]	@ (8010afc <TIM_OC6_SetConfig+0x104>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d109      	bne.n	8010ab0 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	695b      	ldr	r3, [r3, #20]
 8010aa8:	029b      	lsls	r3, r3, #10
 8010aaa:	697a      	ldr	r2, [r7, #20]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	697a      	ldr	r2, [r7, #20]
 8010ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	68fa      	ldr	r2, [r7, #12]
 8010aba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	685a      	ldr	r2, [r3, #4]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	693a      	ldr	r2, [r7, #16]
 8010ac8:	621a      	str	r2, [r3, #32]
}
 8010aca:	bf00      	nop
 8010acc:	371c      	adds	r7, #28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	40012c00 	.word	0x40012c00
 8010adc:	50012c00 	.word	0x50012c00
 8010ae0:	40013400 	.word	0x40013400
 8010ae4:	50013400 	.word	0x50013400
 8010ae8:	40014000 	.word	0x40014000
 8010aec:	50014000 	.word	0x50014000
 8010af0:	40014400 	.word	0x40014400
 8010af4:	50014400 	.word	0x50014400
 8010af8:	40014800 	.word	0x40014800
 8010afc:	50014800 	.word	0x50014800

08010b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b087      	sub	sp, #28
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6a1b      	ldr	r3, [r3, #32]
 8010b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6a1b      	ldr	r3, [r3, #32]
 8010b16:	f023 0201 	bic.w	r2, r3, #1
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	699b      	ldr	r3, [r3, #24]
 8010b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	011b      	lsls	r3, r3, #4
 8010b30:	693a      	ldr	r2, [r7, #16]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f023 030a 	bic.w	r3, r3, #10
 8010b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010b3e:	697a      	ldr	r2, [r7, #20]
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	4313      	orrs	r3, r2
 8010b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	693a      	ldr	r2, [r7, #16]
 8010b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	697a      	ldr	r2, [r7, #20]
 8010b50:	621a      	str	r2, [r3, #32]
}
 8010b52:	bf00      	nop
 8010b54:	371c      	adds	r7, #28
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b5e:	b480      	push	{r7}
 8010b60:	b087      	sub	sp, #28
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	60f8      	str	r0, [r7, #12]
 8010b66:	60b9      	str	r1, [r7, #8]
 8010b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6a1b      	ldr	r3, [r3, #32]
 8010b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	6a1b      	ldr	r3, [r3, #32]
 8010b74:	f023 0210 	bic.w	r2, r3, #16
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	699b      	ldr	r3, [r3, #24]
 8010b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	031b      	lsls	r3, r3, #12
 8010b8e:	693a      	ldr	r2, [r7, #16]
 8010b90:	4313      	orrs	r3, r2
 8010b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	011b      	lsls	r3, r3, #4
 8010ba0:	697a      	ldr	r2, [r7, #20]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	693a      	ldr	r2, [r7, #16]
 8010baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	697a      	ldr	r2, [r7, #20]
 8010bb0:	621a      	str	r2, [r3, #32]
}
 8010bb2:	bf00      	nop
 8010bb4:	371c      	adds	r7, #28
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr

08010bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010bbe:	b480      	push	{r7}
 8010bc0:	b085      	sub	sp, #20
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
 8010bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	689b      	ldr	r3, [r3, #8]
 8010bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010bda:	683a      	ldr	r2, [r7, #0]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	4313      	orrs	r3, r2
 8010be0:	f043 0307 	orr.w	r3, r3, #7
 8010be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	609a      	str	r2, [r3, #8]
}
 8010bec:	bf00      	nop
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b087      	sub	sp, #28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	689b      	ldr	r3, [r3, #8]
 8010c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	021a      	lsls	r2, r3, #8
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	431a      	orrs	r2, r3
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	697a      	ldr	r2, [r7, #20]
 8010c22:	4313      	orrs	r3, r2
 8010c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	697a      	ldr	r2, [r7, #20]
 8010c2a:	609a      	str	r2, [r3, #8]
}
 8010c2c:	bf00      	nop
 8010c2e:	371c      	adds	r7, #28
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d101      	bne.n	8010c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c4c:	2302      	movs	r3, #2
 8010c4e:	e097      	b.n	8010d80 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2201      	movs	r2, #1
 8010c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2202      	movs	r2, #2
 8010c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	689b      	ldr	r3, [r3, #8]
 8010c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4a45      	ldr	r2, [pc, #276]	@ (8010d8c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d00e      	beq.n	8010c98 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4a44      	ldr	r2, [pc, #272]	@ (8010d90 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d009      	beq.n	8010c98 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4a42      	ldr	r2, [pc, #264]	@ (8010d94 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d004      	beq.n	8010c98 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4a41      	ldr	r2, [pc, #260]	@ (8010d98 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d108      	bne.n	8010caa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010c9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8010d8c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d040      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a2e      	ldr	r2, [pc, #184]	@ (8010d90 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d03b      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ce4:	d036      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010cee:	d031      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a29      	ldr	r2, [pc, #164]	@ (8010d9c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d02c      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	4a28      	ldr	r2, [pc, #160]	@ (8010da0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d027      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4a26      	ldr	r2, [pc, #152]	@ (8010da4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d022      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4a25      	ldr	r2, [pc, #148]	@ (8010da8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d01d      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a23      	ldr	r2, [pc, #140]	@ (8010dac <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d018      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a22      	ldr	r2, [pc, #136]	@ (8010db0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d013      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4a18      	ldr	r2, [pc, #96]	@ (8010d94 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d00e      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	4a17      	ldr	r2, [pc, #92]	@ (8010d98 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d009      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4a1b      	ldr	r2, [pc, #108]	@ (8010db4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d004      	beq.n	8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8010db8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d10c      	bne.n	8010d6e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	689b      	ldr	r3, [r3, #8]
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	4313      	orrs	r3, r2
 8010d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	68ba      	ldr	r2, [r7, #8]
 8010d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2201      	movs	r2, #1
 8010d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010d7e:	2300      	movs	r3, #0
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3714      	adds	r7, #20
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	40012c00 	.word	0x40012c00
 8010d90:	50012c00 	.word	0x50012c00
 8010d94:	40013400 	.word	0x40013400
 8010d98:	50013400 	.word	0x50013400
 8010d9c:	40000400 	.word	0x40000400
 8010da0:	50000400 	.word	0x50000400
 8010da4:	40000800 	.word	0x40000800
 8010da8:	50000800 	.word	0x50000800
 8010dac:	40000c00 	.word	0x40000c00
 8010db0:	50000c00 	.word	0x50000c00
 8010db4:	40014000 	.word	0x40014000
 8010db8:	50014000 	.word	0x50014000

08010dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d101      	bne.n	8010dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	e042      	b.n	8010e54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d106      	bne.n	8010de6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7f2 f8d1 	bl	8002f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2224      	movs	r2, #36	@ 0x24
 8010dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f022 0201 	bic.w	r2, r2, #1
 8010dfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d002      	beq.n	8010e0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fd02 	bl	8011810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 fb51 	bl	80114b4 <UART_SetConfig>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d101      	bne.n	8010e1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e01b      	b.n	8010e54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	685a      	ldr	r2, [r3, #4]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	689a      	ldr	r2, [r3, #8]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f042 0201 	orr.w	r2, r2, #1
 8010e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 fd81 	bl	8011954 <UART_CheckIdleState>
 8010e52:	4603      	mov	r3, r0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b0ba      	sub	sp, #232	@ 0xe8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	69db      	ldr	r3, [r3, #28]
 8010e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010e82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010e86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010e8a:	4013      	ands	r3, r2
 8010e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d11b      	bne.n	8010ed0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e9c:	f003 0320 	and.w	r3, r3, #32
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d015      	beq.n	8010ed0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ea8:	f003 0320 	and.w	r3, r3, #32
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d105      	bne.n	8010ebc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d009      	beq.n	8010ed0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 82cb 	beq.w	801145c <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	4798      	blx	r3
      }
      return;
 8010ece:	e2c5      	b.n	801145c <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	f000 8123 	beq.w	8011120 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010eda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010ede:	4b8d      	ldr	r3, [pc, #564]	@ (8011114 <HAL_UART_IRQHandler+0x2b8>)
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d106      	bne.n	8010ef4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010ee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010eea:	4b8b      	ldr	r3, [pc, #556]	@ (8011118 <HAL_UART_IRQHandler+0x2bc>)
 8010eec:	4013      	ands	r3, r2
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f000 8116 	beq.w	8011120 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ef8:	f003 0301 	and.w	r3, r3, #1
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d011      	beq.n	8010f24 <HAL_UART_IRQHandler+0xc8>
 8010f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00b      	beq.n	8010f24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2201      	movs	r2, #1
 8010f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f1a:	f043 0201 	orr.w	r2, r3, #1
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f28:	f003 0302 	and.w	r3, r3, #2
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d011      	beq.n	8010f54 <HAL_UART_IRQHandler+0xf8>
 8010f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f34:	f003 0301 	and.w	r3, r3, #1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00b      	beq.n	8010f54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2202      	movs	r2, #2
 8010f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f4a:	f043 0204 	orr.w	r2, r3, #4
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f58:	f003 0304 	and.w	r3, r3, #4
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d011      	beq.n	8010f84 <HAL_UART_IRQHandler+0x128>
 8010f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f64:	f003 0301 	and.w	r3, r3, #1
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d00b      	beq.n	8010f84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2204      	movs	r2, #4
 8010f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f7a:	f043 0202 	orr.w	r2, r3, #2
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f88:	f003 0308 	and.w	r3, r3, #8
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d017      	beq.n	8010fc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f94:	f003 0320 	and.w	r3, r3, #32
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d105      	bne.n	8010fa8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010f9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010fa0:	4b5c      	ldr	r3, [pc, #368]	@ (8011114 <HAL_UART_IRQHandler+0x2b8>)
 8010fa2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00b      	beq.n	8010fc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2208      	movs	r2, #8
 8010fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fb6:	f043 0208 	orr.w	r2, r3, #8
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d012      	beq.n	8010ff2 <HAL_UART_IRQHandler+0x196>
 8010fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010fd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00c      	beq.n	8010ff2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fe8:	f043 0220 	orr.w	r2, r3, #32
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f000 8231 	beq.w	8011460 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011002:	f003 0320 	and.w	r3, r3, #32
 8011006:	2b00      	cmp	r3, #0
 8011008:	d013      	beq.n	8011032 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801100a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801100e:	f003 0320 	and.w	r3, r3, #32
 8011012:	2b00      	cmp	r3, #0
 8011014:	d105      	bne.n	8011022 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801101e:	2b00      	cmp	r3, #0
 8011020:	d007      	beq.n	8011032 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011026:	2b00      	cmp	r3, #0
 8011028:	d003      	beq.n	8011032 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011038:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011046:	2b40      	cmp	r3, #64	@ 0x40
 8011048:	d005      	beq.n	8011056 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801104a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801104e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011052:	2b00      	cmp	r3, #0
 8011054:	d054      	beq.n	8011100 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 fd93 	bl	8011b82 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011066:	2b40      	cmp	r3, #64	@ 0x40
 8011068:	d146      	bne.n	80110f8 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	3308      	adds	r3, #8
 8011070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011078:	e853 3f00 	ldrex	r3, [r3]
 801107c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3308      	adds	r3, #8
 8011092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011096:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801109a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80110a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80110a6:	e841 2300 	strex	r3, r2, [r1]
 80110aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80110ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d1d9      	bne.n	801106a <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d017      	beq.n	80110f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110c6:	4a15      	ldr	r2, [pc, #84]	@ (801111c <HAL_UART_IRQHandler+0x2c0>)
 80110c8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7f5 f9d1 	bl	8006478 <HAL_DMA_Abort_IT>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d019      	beq.n	8011110 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80110ea:	4610      	mov	r0, r2
 80110ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110ee:	e00f      	b.n	8011110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f000 f9c9 	bl	8011488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110f6:	e00b      	b.n	8011110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f9c5 	bl	8011488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110fe:	e007      	b.n	8011110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 f9c1 	bl	8011488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801110e:	e1a7      	b.n	8011460 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011110:	bf00      	nop
    return;
 8011112:	e1a5      	b.n	8011460 <HAL_UART_IRQHandler+0x604>
 8011114:	10000001 	.word	0x10000001
 8011118:	04000120 	.word	0x04000120
 801111c:	08011c4f 	.word	0x08011c4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011124:	2b01      	cmp	r3, #1
 8011126:	f040 8150 	bne.w	80113ca <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801112a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801112e:	f003 0310 	and.w	r3, r3, #16
 8011132:	2b00      	cmp	r3, #0
 8011134:	f000 8149 	beq.w	80113ca <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801113c:	f003 0310 	and.w	r3, r3, #16
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 8142 	beq.w	80113ca <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2210      	movs	r2, #16
 801114c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011158:	2b40      	cmp	r3, #64	@ 0x40
 801115a:	f040 80b8 	bne.w	80112ce <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011168:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801116c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011170:	2b00      	cmp	r3, #0
 8011172:	f000 8177 	beq.w	8011464 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801117c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011180:	429a      	cmp	r2, r3
 8011182:	f080 816f 	bcs.w	8011464 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801118c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011198:	2b81      	cmp	r3, #129	@ 0x81
 801119a:	f000 8087 	beq.w	80112ac <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80111aa:	e853 3f00 	ldrex	r3, [r3]
 80111ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80111b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80111b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80111ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	461a      	mov	r2, r3
 80111c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80111c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80111cc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80111d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80111d8:	e841 2300 	strex	r3, r2, [r1]
 80111dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80111e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1da      	bne.n	801119e <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	3308      	adds	r3, #8
 80111ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80111f2:	e853 3f00 	ldrex	r3, [r3]
 80111f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80111f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80111fa:	f023 0301 	bic.w	r3, r3, #1
 80111fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	3308      	adds	r3, #8
 8011208:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801120c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011210:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011212:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011214:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011218:	e841 2300 	strex	r3, r2, [r1]
 801121c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801121e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1e1      	bne.n	80111e8 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	3308      	adds	r3, #8
 801122a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801122c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801122e:	e853 3f00 	ldrex	r3, [r3]
 8011232:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801123a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	3308      	adds	r3, #8
 8011244:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011248:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801124a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801124c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801124e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011250:	e841 2300 	strex	r3, r2, [r1]
 8011254:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011256:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1e3      	bne.n	8011224 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2220      	movs	r2, #32
 8011260:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011272:	e853 3f00 	ldrex	r3, [r3]
 8011276:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801127a:	f023 0310 	bic.w	r3, r3, #16
 801127e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	461a      	mov	r2, r3
 8011288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801128c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801128e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011290:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011294:	e841 2300 	strex	r3, r2, [r1]
 8011298:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801129a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801129c:	2b00      	cmp	r3, #0
 801129e:	d1e4      	bne.n	801126a <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7f5 f86a 	bl	8006380 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2202      	movs	r2, #2
 80112b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112be:	b29b      	uxth	r3, r3
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	4619      	mov	r1, r3
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 f8e8 	bl	801149c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80112cc:	e0ca      	b.n	8011464 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112da:	b29b      	uxth	r3, r3
 80112dc:	1ad3      	subs	r3, r2, r3
 80112de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f000 80bc 	beq.w	8011468 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80112f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f000 80b7 	beq.w	8011468 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011302:	e853 3f00 	ldrex	r3, [r3]
 8011306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801130a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801130e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801131c:	647b      	str	r3, [r7, #68]	@ 0x44
 801131e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011324:	e841 2300 	strex	r3, r2, [r1]
 8011328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801132a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801132c:	2b00      	cmp	r3, #0
 801132e:	d1e4      	bne.n	80112fa <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3308      	adds	r3, #8
 8011336:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801133a:	e853 3f00 	ldrex	r3, [r3]
 801133e:	623b      	str	r3, [r7, #32]
   return(result);
 8011340:	6a3b      	ldr	r3, [r7, #32]
 8011342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011346:	f023 0301 	bic.w	r3, r3, #1
 801134a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	3308      	adds	r3, #8
 8011354:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011358:	633a      	str	r2, [r7, #48]	@ 0x30
 801135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801135c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801135e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011360:	e841 2300 	strex	r3, r2, [r1]
 8011364:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1e1      	bne.n	8011330 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2220      	movs	r2, #32
 8011370:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2200      	movs	r2, #0
 8011378:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2200      	movs	r2, #0
 801137e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	e853 3f00 	ldrex	r3, [r3]
 801138c:	60fb      	str	r3, [r7, #12]
   return(result);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f023 0310 	bic.w	r3, r3, #16
 8011394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	461a      	mov	r2, r3
 801139e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80113a2:	61fb      	str	r3, [r7, #28]
 80113a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a6:	69b9      	ldr	r1, [r7, #24]
 80113a8:	69fa      	ldr	r2, [r7, #28]
 80113aa:	e841 2300 	strex	r3, r2, [r1]
 80113ae:	617b      	str	r3, [r7, #20]
   return(result);
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1e4      	bne.n	8011380 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2202      	movs	r2, #2
 80113ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80113bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80113c0:	4619      	mov	r1, r3
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 f86a 	bl	801149c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80113c8:	e04e      	b.n	8011468 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80113ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d014      	beq.n	8011400 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80113d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80113da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d105      	bne.n	80113ee <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80113e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d008      	beq.n	8011400 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d03a      	beq.n	801146c <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	4798      	blx	r3
    }
    return;
 80113fe:	e035      	b.n	801146c <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011408:	2b00      	cmp	r3, #0
 801140a:	d009      	beq.n	8011420 <HAL_UART_IRQHandler+0x5c4>
 801140c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011414:	2b00      	cmp	r3, #0
 8011416:	d003      	beq.n	8011420 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 fc2e 	bl	8011c7a <UART_EndTransmit_IT>
    return;
 801141e:	e026      	b.n	801146e <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011428:	2b00      	cmp	r3, #0
 801142a:	d009      	beq.n	8011440 <HAL_UART_IRQHandler+0x5e4>
 801142c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011430:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011434:	2b00      	cmp	r3, #0
 8011436:	d003      	beq.n	8011440 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fc53 	bl	8011ce4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801143e:	e016      	b.n	801146e <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011448:	2b00      	cmp	r3, #0
 801144a:	d010      	beq.n	801146e <HAL_UART_IRQHandler+0x612>
 801144c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011450:	2b00      	cmp	r3, #0
 8011452:	da0c      	bge.n	801146e <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 fc3b 	bl	8011cd0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801145a:	e008      	b.n	801146e <HAL_UART_IRQHandler+0x612>
      return;
 801145c:	bf00      	nop
 801145e:	e006      	b.n	801146e <HAL_UART_IRQHandler+0x612>
    return;
 8011460:	bf00      	nop
 8011462:	e004      	b.n	801146e <HAL_UART_IRQHandler+0x612>
      return;
 8011464:	bf00      	nop
 8011466:	e002      	b.n	801146e <HAL_UART_IRQHandler+0x612>
      return;
 8011468:	bf00      	nop
 801146a:	e000      	b.n	801146e <HAL_UART_IRQHandler+0x612>
    return;
 801146c:	bf00      	nop
  }
}
 801146e:	37e8      	adds	r7, #232	@ 0xe8
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011474:	b480      	push	{r7}
 8011476:	b083      	sub	sp, #12
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801147c:	bf00      	nop
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011490:	bf00      	nop
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	460b      	mov	r3, r1
 80114a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80114b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80114b8:	b094      	sub	sp, #80	@ 0x50
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80114be:	2300      	movs	r3, #0
 80114c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80114c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	4b83      	ldr	r3, [pc, #524]	@ (80116d8 <UART_SetConfig+0x224>)
 80114ca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80114cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ce:	689a      	ldr	r2, [r3, #8]
 80114d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d2:	691b      	ldr	r3, [r3, #16]
 80114d4:	431a      	orrs	r2, r3
 80114d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d8:	695b      	ldr	r3, [r3, #20]
 80114da:	431a      	orrs	r2, r3
 80114dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114de:	69db      	ldr	r3, [r3, #28]
 80114e0:	4313      	orrs	r3, r2
 80114e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80114e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	497c      	ldr	r1, [pc, #496]	@ (80116dc <UART_SetConfig+0x228>)
 80114ec:	4019      	ands	r1, r3
 80114ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114f4:	430b      	orrs	r3, r1
 80114f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80114f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011504:	68d9      	ldr	r1, [r3, #12]
 8011506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	ea40 0301 	orr.w	r3, r0, r1
 801150e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011512:	699b      	ldr	r3, [r3, #24]
 8011514:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	4b6f      	ldr	r3, [pc, #444]	@ (80116d8 <UART_SetConfig+0x224>)
 801151c:	429a      	cmp	r2, r3
 801151e:	d009      	beq.n	8011534 <UART_SetConfig+0x80>
 8011520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	4b6e      	ldr	r3, [pc, #440]	@ (80116e0 <UART_SetConfig+0x22c>)
 8011526:	429a      	cmp	r2, r3
 8011528:	d004      	beq.n	8011534 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	6a1a      	ldr	r2, [r3, #32]
 801152e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011530:	4313      	orrs	r3, r2
 8011532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801153e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8011542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011544:	681a      	ldr	r2, [r3, #0]
 8011546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011548:	430b      	orrs	r3, r1
 801154a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011552:	f023 000f 	bic.w	r0, r3, #15
 8011556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011558:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	ea40 0301 	orr.w	r3, r0, r1
 8011562:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	4b5e      	ldr	r3, [pc, #376]	@ (80116e4 <UART_SetConfig+0x230>)
 801156a:	429a      	cmp	r2, r3
 801156c:	d102      	bne.n	8011574 <UART_SetConfig+0xc0>
 801156e:	2301      	movs	r3, #1
 8011570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011572:	e032      	b.n	80115da <UART_SetConfig+0x126>
 8011574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	4b5b      	ldr	r3, [pc, #364]	@ (80116e8 <UART_SetConfig+0x234>)
 801157a:	429a      	cmp	r2, r3
 801157c:	d102      	bne.n	8011584 <UART_SetConfig+0xd0>
 801157e:	2302      	movs	r3, #2
 8011580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011582:	e02a      	b.n	80115da <UART_SetConfig+0x126>
 8011584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	4b58      	ldr	r3, [pc, #352]	@ (80116ec <UART_SetConfig+0x238>)
 801158a:	429a      	cmp	r2, r3
 801158c:	d102      	bne.n	8011594 <UART_SetConfig+0xe0>
 801158e:	2304      	movs	r3, #4
 8011590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011592:	e022      	b.n	80115da <UART_SetConfig+0x126>
 8011594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011596:	681a      	ldr	r2, [r3, #0]
 8011598:	4b55      	ldr	r3, [pc, #340]	@ (80116f0 <UART_SetConfig+0x23c>)
 801159a:	429a      	cmp	r2, r3
 801159c:	d102      	bne.n	80115a4 <UART_SetConfig+0xf0>
 801159e:	2308      	movs	r3, #8
 80115a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115a2:	e01a      	b.n	80115da <UART_SetConfig+0x126>
 80115a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	4b52      	ldr	r3, [pc, #328]	@ (80116f4 <UART_SetConfig+0x240>)
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d102      	bne.n	80115b4 <UART_SetConfig+0x100>
 80115ae:	2310      	movs	r3, #16
 80115b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115b2:	e012      	b.n	80115da <UART_SetConfig+0x126>
 80115b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	4b4f      	ldr	r3, [pc, #316]	@ (80116f8 <UART_SetConfig+0x244>)
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d103      	bne.n	80115c6 <UART_SetConfig+0x112>
 80115be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80115c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115c4:	e009      	b.n	80115da <UART_SetConfig+0x126>
 80115c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	4b43      	ldr	r3, [pc, #268]	@ (80116d8 <UART_SetConfig+0x224>)
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d102      	bne.n	80115d6 <UART_SetConfig+0x122>
 80115d0:	2320      	movs	r3, #32
 80115d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115d4:	e001      	b.n	80115da <UART_SetConfig+0x126>
 80115d6:	2300      	movs	r3, #0
 80115d8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80115da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	4b3e      	ldr	r3, [pc, #248]	@ (80116d8 <UART_SetConfig+0x224>)
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d005      	beq.n	80115f0 <UART_SetConfig+0x13c>
 80115e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	4b3d      	ldr	r3, [pc, #244]	@ (80116e0 <UART_SetConfig+0x22c>)
 80115ea:	429a      	cmp	r2, r3
 80115ec:	f040 8088 	bne.w	8011700 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80115f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115f2:	2200      	movs	r2, #0
 80115f4:	623b      	str	r3, [r7, #32]
 80115f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80115f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80115fc:	f7fb fdea 	bl	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8011600:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8011602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011604:	2b00      	cmp	r3, #0
 8011606:	f000 80eb 	beq.w	80117e0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801160a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801160e:	4a3b      	ldr	r2, [pc, #236]	@ (80116fc <UART_SetConfig+0x248>)
 8011610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011614:	461a      	mov	r2, r3
 8011616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011618:	fbb3 f3f2 	udiv	r3, r3, r2
 801161c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011620:	685a      	ldr	r2, [r3, #4]
 8011622:	4613      	mov	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	4413      	add	r3, r2
 8011628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801162a:	429a      	cmp	r2, r3
 801162c:	d305      	bcc.n	801163a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801162e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011636:	429a      	cmp	r2, r3
 8011638:	d903      	bls.n	8011642 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011640:	e048      	b.n	80116d4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011644:	2200      	movs	r2, #0
 8011646:	61bb      	str	r3, [r7, #24]
 8011648:	61fa      	str	r2, [r7, #28]
 801164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164e:	4a2b      	ldr	r2, [pc, #172]	@ (80116fc <UART_SetConfig+0x248>)
 8011650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011654:	b29b      	uxth	r3, r3
 8011656:	2200      	movs	r2, #0
 8011658:	613b      	str	r3, [r7, #16]
 801165a:	617a      	str	r2, [r7, #20]
 801165c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011660:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011664:	f7ee fe26 	bl	80002b4 <__aeabi_uldivmod>
 8011668:	4602      	mov	r2, r0
 801166a:	460b      	mov	r3, r1
 801166c:	4610      	mov	r0, r2
 801166e:	4619      	mov	r1, r3
 8011670:	f04f 0200 	mov.w	r2, #0
 8011674:	f04f 0300 	mov.w	r3, #0
 8011678:	020b      	lsls	r3, r1, #8
 801167a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801167e:	0202      	lsls	r2, r0, #8
 8011680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011682:	6849      	ldr	r1, [r1, #4]
 8011684:	0849      	lsrs	r1, r1, #1
 8011686:	2000      	movs	r0, #0
 8011688:	460c      	mov	r4, r1
 801168a:	4605      	mov	r5, r0
 801168c:	eb12 0804 	adds.w	r8, r2, r4
 8011690:	eb43 0905 	adc.w	r9, r3, r5
 8011694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	60bb      	str	r3, [r7, #8]
 801169c:	60fa      	str	r2, [r7, #12]
 801169e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80116a2:	4640      	mov	r0, r8
 80116a4:	4649      	mov	r1, r9
 80116a6:	f7ee fe05 	bl	80002b4 <__aeabi_uldivmod>
 80116aa:	4602      	mov	r2, r0
 80116ac:	460b      	mov	r3, r1
 80116ae:	4613      	mov	r3, r2
 80116b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80116b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80116b8:	d308      	bcc.n	80116cc <UART_SetConfig+0x218>
 80116ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80116c0:	d204      	bcs.n	80116cc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80116c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80116c8:	60da      	str	r2, [r3, #12]
 80116ca:	e003      	b.n	80116d4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80116cc:	2301      	movs	r3, #1
 80116ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80116d2:	e085      	b.n	80117e0 <UART_SetConfig+0x32c>
 80116d4:	e084      	b.n	80117e0 <UART_SetConfig+0x32c>
 80116d6:	bf00      	nop
 80116d8:	46002400 	.word	0x46002400
 80116dc:	cfff69f3 	.word	0xcfff69f3
 80116e0:	56002400 	.word	0x56002400
 80116e4:	40013800 	.word	0x40013800
 80116e8:	40004400 	.word	0x40004400
 80116ec:	40004800 	.word	0x40004800
 80116f0:	40004c00 	.word	0x40004c00
 80116f4:	40005000 	.word	0x40005000
 80116f8:	40006400 	.word	0x40006400
 80116fc:	08012918 	.word	0x08012918
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011702:	69db      	ldr	r3, [r3, #28]
 8011704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011708:	d13c      	bne.n	8011784 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801170a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801170c:	2200      	movs	r2, #0
 801170e:	603b      	str	r3, [r7, #0]
 8011710:	607a      	str	r2, [r7, #4]
 8011712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011716:	f7fb fd5d 	bl	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq>
 801171a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801171c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801171e:	2b00      	cmp	r3, #0
 8011720:	d05e      	beq.n	80117e0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011726:	4a39      	ldr	r2, [pc, #228]	@ (801180c <UART_SetConfig+0x358>)
 8011728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801172c:	461a      	mov	r2, r3
 801172e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011730:	fbb3 f3f2 	udiv	r3, r3, r2
 8011734:	005a      	lsls	r2, r3, #1
 8011736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	085b      	lsrs	r3, r3, #1
 801173c:	441a      	add	r2, r3
 801173e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	fbb2 f3f3 	udiv	r3, r2, r3
 8011746:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801174a:	2b0f      	cmp	r3, #15
 801174c:	d916      	bls.n	801177c <UART_SetConfig+0x2c8>
 801174e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011754:	d212      	bcs.n	801177c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011758:	b29b      	uxth	r3, r3
 801175a:	f023 030f 	bic.w	r3, r3, #15
 801175e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011762:	085b      	lsrs	r3, r3, #1
 8011764:	b29b      	uxth	r3, r3
 8011766:	f003 0307 	and.w	r3, r3, #7
 801176a:	b29a      	uxth	r2, r3
 801176c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801176e:	4313      	orrs	r3, r2
 8011770:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8011772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011778:	60da      	str	r2, [r3, #12]
 801177a:	e031      	b.n	80117e0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801177c:	2301      	movs	r3, #1
 801177e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011782:	e02d      	b.n	80117e0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011786:	2200      	movs	r2, #0
 8011788:	469a      	mov	sl, r3
 801178a:	4693      	mov	fp, r2
 801178c:	4650      	mov	r0, sl
 801178e:	4659      	mov	r1, fp
 8011790:	f7fb fd20 	bl	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8011794:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8011796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011798:	2b00      	cmp	r3, #0
 801179a:	d021      	beq.n	80117e0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801179c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117a0:	4a1a      	ldr	r2, [pc, #104]	@ (801180c <UART_SetConfig+0x358>)
 80117a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117a6:	461a      	mov	r2, r3
 80117a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80117ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	085b      	lsrs	r3, r3, #1
 80117b4:	441a      	add	r2, r3
 80117b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80117be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117c2:	2b0f      	cmp	r3, #15
 80117c4:	d909      	bls.n	80117da <UART_SetConfig+0x326>
 80117c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80117cc:	d205      	bcs.n	80117da <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	60da      	str	r2, [r3, #12]
 80117d8:	e002      	b.n	80117e0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80117da:	2301      	movs	r3, #1
 80117dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80117e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e2:	2201      	movs	r2, #1
 80117e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80117e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ea:	2201      	movs	r2, #1
 80117ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f2:	2200      	movs	r2, #0
 80117f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80117f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f8:	2200      	movs	r2, #0
 80117fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80117fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011800:	4618      	mov	r0, r3
 8011802:	3750      	adds	r7, #80	@ 0x50
 8011804:	46bd      	mov	sp, r7
 8011806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801180a:	bf00      	nop
 801180c:	08012918 	.word	0x08012918

08011810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801181c:	f003 0308 	and.w	r3, r3, #8
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00a      	beq.n	801183a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	430a      	orrs	r2, r1
 8011838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801183e:	f003 0301 	and.w	r3, r3, #1
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00a      	beq.n	801185c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	430a      	orrs	r2, r1
 801185a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011860:	f003 0302 	and.w	r3, r3, #2
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00a      	beq.n	801187e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	430a      	orrs	r2, r1
 801187c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011882:	f003 0304 	and.w	r3, r3, #4
 8011886:	2b00      	cmp	r3, #0
 8011888:	d00a      	beq.n	80118a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	430a      	orrs	r2, r1
 801189e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118a4:	f003 0310 	and.w	r3, r3, #16
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00a      	beq.n	80118c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	689b      	ldr	r3, [r3, #8]
 80118b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	430a      	orrs	r2, r1
 80118c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118c6:	f003 0320 	and.w	r3, r3, #32
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00a      	beq.n	80118e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	430a      	orrs	r2, r1
 80118e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d01a      	beq.n	8011926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	430a      	orrs	r2, r1
 8011904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801190a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801190e:	d10a      	bne.n	8011926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	430a      	orrs	r2, r1
 8011924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801192a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00a      	beq.n	8011948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	430a      	orrs	r2, r1
 8011946:	605a      	str	r2, [r3, #4]
  }
}
 8011948:	bf00      	nop
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b098      	sub	sp, #96	@ 0x60
 8011958:	af02      	add	r7, sp, #8
 801195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011964:	f7f1 ffa0 	bl	80038a8 <HAL_GetTick>
 8011968:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f003 0308 	and.w	r3, r3, #8
 8011974:	2b08      	cmp	r3, #8
 8011976:	d12f      	bne.n	80119d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011978:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011980:	2200      	movs	r2, #0
 8011982:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f000 f88e 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d022      	beq.n	80119d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801199a:	e853 3f00 	ldrex	r3, [r3]
 801199e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80119a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80119a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80119b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80119b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80119b8:	e841 2300 	strex	r3, r2, [r1]
 80119bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80119be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d1e6      	bne.n	8011992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2220      	movs	r2, #32
 80119c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2200      	movs	r2, #0
 80119d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119d4:	2303      	movs	r3, #3
 80119d6:	e063      	b.n	8011aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0304 	and.w	r3, r3, #4
 80119e2:	2b04      	cmp	r3, #4
 80119e4:	d149      	bne.n	8011a7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119ee:	2200      	movs	r2, #0
 80119f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 f857 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 80119fa:	4603      	mov	r3, r0
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d03c      	beq.n	8011a7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a08:	e853 3f00 	ldrex	r3, [r3]
 8011a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a26:	e841 2300 	strex	r3, r2, [r1]
 8011a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1e6      	bne.n	8011a00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	3308      	adds	r3, #8
 8011a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	e853 3f00 	ldrex	r3, [r3]
 8011a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f023 0301 	bic.w	r3, r3, #1
 8011a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	3308      	adds	r3, #8
 8011a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a52:	61fa      	str	r2, [r7, #28]
 8011a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a56:	69b9      	ldr	r1, [r7, #24]
 8011a58:	69fa      	ldr	r2, [r7, #28]
 8011a5a:	e841 2300 	strex	r3, r2, [r1]
 8011a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1e5      	bne.n	8011a32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2220      	movs	r2, #32
 8011a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a76:	2303      	movs	r3, #3
 8011a78:	e012      	b.n	8011aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2220      	movs	r2, #32
 8011a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2220      	movs	r2, #32
 8011a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3758      	adds	r7, #88	@ 0x58
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	603b      	str	r3, [r7, #0]
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ab8:	e04f      	b.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac0:	d04b      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ac2:	f7f1 fef1 	bl	80038a8 <HAL_GetTick>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	69ba      	ldr	r2, [r7, #24]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d302      	bcc.n	8011ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d101      	bne.n	8011adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	e04e      	b.n	8011b7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f003 0304 	and.w	r3, r3, #4
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d037      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	2b80      	cmp	r3, #128	@ 0x80
 8011aee:	d034      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	2b40      	cmp	r3, #64	@ 0x40
 8011af4:	d031      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	69db      	ldr	r3, [r3, #28]
 8011afc:	f003 0308 	and.w	r3, r3, #8
 8011b00:	2b08      	cmp	r3, #8
 8011b02:	d110      	bne.n	8011b26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2208      	movs	r2, #8
 8011b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	f000 f838 	bl	8011b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2208      	movs	r2, #8
 8011b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011b22:	2301      	movs	r3, #1
 8011b24:	e029      	b.n	8011b7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	69db      	ldr	r3, [r3, #28]
 8011b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011b34:	d111      	bne.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f000 f81e 	bl	8011b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	2220      	movs	r2, #32
 8011b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2200      	movs	r2, #0
 8011b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011b56:	2303      	movs	r3, #3
 8011b58:	e00f      	b.n	8011b7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	69da      	ldr	r2, [r3, #28]
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	4013      	ands	r3, r2
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	bf0c      	ite	eq
 8011b6a:	2301      	moveq	r3, #1
 8011b6c:	2300      	movne	r3, #0
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	461a      	mov	r2, r3
 8011b72:	79fb      	ldrb	r3, [r7, #7]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d0a0      	beq.n	8011aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b82:	b480      	push	{r7}
 8011b84:	b095      	sub	sp, #84	@ 0x54
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b92:	e853 3f00 	ldrex	r3, [r3]
 8011b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8011baa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011bb0:	e841 2300 	strex	r3, r2, [r1]
 8011bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d1e6      	bne.n	8011b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	3308      	adds	r3, #8
 8011bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	e853 3f00 	ldrex	r3, [r3]
 8011bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011bd2:	f023 0301 	bic.w	r3, r3, #1
 8011bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	3308      	adds	r3, #8
 8011bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011be8:	e841 2300 	strex	r3, r2, [r1]
 8011bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d1e3      	bne.n	8011bbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d118      	bne.n	8011c2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	e853 3f00 	ldrex	r3, [r3]
 8011c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	f023 0310 	bic.w	r3, r3, #16
 8011c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	461a      	mov	r2, r3
 8011c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c1a:	61bb      	str	r3, [r7, #24]
 8011c1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c1e:	6979      	ldr	r1, [r7, #20]
 8011c20:	69ba      	ldr	r2, [r7, #24]
 8011c22:	e841 2300 	strex	r3, r2, [r1]
 8011c26:	613b      	str	r3, [r7, #16]
   return(result);
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d1e6      	bne.n	8011bfc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2220      	movs	r2, #32
 8011c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011c42:	bf00      	nop
 8011c44:	3754      	adds	r7, #84	@ 0x54
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr

08011c4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011c4e:	b580      	push	{r7, lr}
 8011c50:	b084      	sub	sp, #16
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2200      	movs	r2, #0
 8011c68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7ff fc0b 	bl	8011488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c72:	bf00      	nop
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}

08011c7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b088      	sub	sp, #32
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	e853 3f00 	ldrex	r3, [r3]
 8011c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c96:	61fb      	str	r3, [r7, #28]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	61bb      	str	r3, [r7, #24]
 8011ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca4:	6979      	ldr	r1, [r7, #20]
 8011ca6:	69ba      	ldr	r2, [r7, #24]
 8011ca8:	e841 2300 	strex	r3, r2, [r1]
 8011cac:	613b      	str	r3, [r7, #16]
   return(result);
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1e6      	bne.n	8011c82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2220      	movs	r2, #32
 8011cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7ff fbd6 	bl	8011474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cc8:	bf00      	nop
 8011cca:	3720      	adds	r7, #32
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011cd8:	bf00      	nop
 8011cda:	370c      	adds	r7, #12
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr

08011ce4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011cec:	bf00      	nop
 8011cee:	370c      	adds	r7, #12
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr

08011cf8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d101      	bne.n	8011d0e <HAL_UARTEx_DisableFifoMode+0x16>
 8011d0a:	2302      	movs	r3, #2
 8011d0c:	e027      	b.n	8011d5e <HAL_UARTEx_DisableFifoMode+0x66>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2201      	movs	r2, #1
 8011d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2224      	movs	r2, #36	@ 0x24
 8011d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f022 0201 	bic.w	r2, r2, #1
 8011d34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011d3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2200      	movs	r2, #0
 8011d42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2220      	movs	r2, #32
 8011d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3714      	adds	r7, #20
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b084      	sub	sp, #16
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
 8011d72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d101      	bne.n	8011d82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d7e:	2302      	movs	r3, #2
 8011d80:	e02d      	b.n	8011dde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2201      	movs	r2, #1
 8011d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2224      	movs	r2, #36	@ 0x24
 8011d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f022 0201 	bic.w	r2, r2, #1
 8011da8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	689b      	ldr	r3, [r3, #8]
 8011db0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	683a      	ldr	r2, [r7, #0]
 8011dba:	430a      	orrs	r2, r1
 8011dbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 f850 	bl	8011e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	68fa      	ldr	r2, [r7, #12]
 8011dca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2220      	movs	r2, #32
 8011dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011ddc:	2300      	movs	r3, #0
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3710      	adds	r7, #16
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}

08011de6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b084      	sub	sp, #16
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d101      	bne.n	8011dfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011dfa:	2302      	movs	r3, #2
 8011dfc:	e02d      	b.n	8011e5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2201      	movs	r2, #1
 8011e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2224      	movs	r2, #36	@ 0x24
 8011e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	f022 0201 	bic.w	r2, r2, #1
 8011e24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	683a      	ldr	r2, [r7, #0]
 8011e36:	430a      	orrs	r2, r1
 8011e38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f812 	bl	8011e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	68fa      	ldr	r2, [r7, #12]
 8011e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2220      	movs	r2, #32
 8011e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011e58:	2300      	movs	r3, #0
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3710      	adds	r7, #16
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
	...

08011e64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e64:	b480      	push	{r7}
 8011e66:	b085      	sub	sp, #20
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d108      	bne.n	8011e86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2201      	movs	r2, #1
 8011e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2201      	movs	r2, #1
 8011e80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e84:	e031      	b.n	8011eea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e86:	2308      	movs	r3, #8
 8011e88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e8a:	2308      	movs	r3, #8
 8011e8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	0e5b      	lsrs	r3, r3, #25
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	f003 0307 	and.w	r3, r3, #7
 8011e9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	0f5b      	lsrs	r3, r3, #29
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	f003 0307 	and.w	r3, r3, #7
 8011eac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011eae:	7bbb      	ldrb	r3, [r7, #14]
 8011eb0:	7b3a      	ldrb	r2, [r7, #12]
 8011eb2:	4911      	ldr	r1, [pc, #68]	@ (8011ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8011eb4:	5c8a      	ldrb	r2, [r1, r2]
 8011eb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011eba:	7b3a      	ldrb	r2, [r7, #12]
 8011ebc:	490f      	ldr	r1, [pc, #60]	@ (8011efc <UARTEx_SetNbDataToProcess+0x98>)
 8011ebe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ec0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
 8011ece:	7b7a      	ldrb	r2, [r7, #13]
 8011ed0:	4909      	ldr	r1, [pc, #36]	@ (8011ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8011ed2:	5c8a      	ldrb	r2, [r1, r2]
 8011ed4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ed8:	7b7a      	ldrb	r2, [r7, #13]
 8011eda:	4908      	ldr	r1, [pc, #32]	@ (8011efc <UARTEx_SetNbDataToProcess+0x98>)
 8011edc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ede:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ee2:	b29a      	uxth	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011eea:	bf00      	nop
 8011eec:	3714      	adds	r7, #20
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	08012930 	.word	0x08012930
 8011efc:	08012938 	.word	0x08012938

08011f00 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b086      	sub	sp, #24
 8011f04:	af02      	add	r7, sp, #8
 8011f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011f0c:	f7f1 fccc 	bl	80038a8 <HAL_GetTick>
 8011f10:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d102      	bne.n	8011f1e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011f18:	2301      	movs	r3, #1
 8011f1a:	73fb      	strb	r3, [r7, #15]
 8011f1c:	e137      	b.n	801218e <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	4a76      	ldr	r2, [pc, #472]	@ (80120fc <HAL_XSPI_Init+0x1fc>)
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d008      	beq.n	8011f3a <HAL_XSPI_Init+0x3a>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4a74      	ldr	r2, [pc, #464]	@ (8012100 <HAL_XSPI_Init+0x200>)
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	d003      	beq.n	8011f3a <HAL_XSPI_Init+0x3a>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	4a73      	ldr	r2, [pc, #460]	@ (8012104 <HAL_XSPI_Init+0x204>)
 8011f38:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a72      	ldr	r2, [pc, #456]	@ (8012108 <HAL_XSPI_Init+0x208>)
 8011f40:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	4a6d      	ldr	r2, [pc, #436]	@ (80120fc <HAL_XSPI_Init+0x1fc>)
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	d008      	beq.n	8011f5e <HAL_XSPI_Init+0x5e>
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a6b      	ldr	r2, [pc, #428]	@ (8012100 <HAL_XSPI_Init+0x200>)
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d003      	beq.n	8011f5e <HAL_XSPI_Init+0x5e>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4a6a      	ldr	r2, [pc, #424]	@ (8012104 <HAL_XSPI_Init+0x204>)
 8011f5c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	4a66      	ldr	r2, [pc, #408]	@ (80120fc <HAL_XSPI_Init+0x1fc>)
 8011f64:	4293      	cmp	r3, r2
 8011f66:	d008      	beq.n	8011f7a <HAL_XSPI_Init+0x7a>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a64      	ldr	r2, [pc, #400]	@ (8012100 <HAL_XSPI_Init+0x200>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d003      	beq.n	8011f7a <HAL_XSPI_Init+0x7a>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	4a63      	ldr	r2, [pc, #396]	@ (8012104 <HAL_XSPI_Init+0x204>)
 8011f78:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f040 8102 	bne.w	801218e <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7f0 fc8a 	bl	80028a4 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011f90:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f000 f8ff 	bl	8012198 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	689a      	ldr	r2, [r3, #8]
 8011fa0:	4b5a      	ldr	r3, [pc, #360]	@ (801210c <HAL_XSPI_Init+0x20c>)
 8011fa2:	4013      	ands	r3, r2
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	68d1      	ldr	r1, [r2, #12]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	6912      	ldr	r2, [r2, #16]
 8011fac:	0412      	lsls	r2, r2, #16
 8011fae:	4311      	orrs	r1, r2
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	6952      	ldr	r2, [r2, #20]
 8011fb4:	3a01      	subs	r2, #1
 8011fb6:	0212      	lsls	r2, r2, #8
 8011fb8:	4311      	orrs	r1, r2
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	69d2      	ldr	r2, [r2, #28]
 8011fbe:	4311      	orrs	r1, r2
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	6812      	ldr	r2, [r2, #0]
 8011fc4:	430b      	orrs	r3, r1
 8011fc6:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80120fc <HAL_XSPI_Init+0x1fc>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d00e      	beq.n	8011ff0 <HAL_XSPI_Init+0xf0>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4a4a      	ldr	r2, [pc, #296]	@ (8012100 <HAL_XSPI_Init+0x200>)
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d009      	beq.n	8011ff0 <HAL_XSPI_Init+0xf0>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4a48      	ldr	r2, [pc, #288]	@ (8012104 <HAL_XSPI_Init+0x204>)
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d004      	beq.n	8011ff0 <HAL_XSPI_Init+0xf0>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	4a49      	ldr	r2, [pc, #292]	@ (8012110 <HAL_XSPI_Init+0x210>)
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d10a      	bne.n	8012006 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	f023 0108 	bic.w	r1, r3, #8
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	430a      	orrs	r2, r1
 8012004:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6a1a      	ldr	r2, [r3, #32]
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	430a      	orrs	r2, r1
 801201a:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801202a:	041a      	lsls	r2, r3, #16
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	430a      	orrs	r2, r1
 8012032:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	4a30      	ldr	r2, [pc, #192]	@ (80120fc <HAL_XSPI_Init+0x1fc>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d00e      	beq.n	801205c <HAL_XSPI_Init+0x15c>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4a2f      	ldr	r2, [pc, #188]	@ (8012100 <HAL_XSPI_Init+0x200>)
 8012044:	4293      	cmp	r3, r2
 8012046:	d009      	beq.n	801205c <HAL_XSPI_Init+0x15c>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a2d      	ldr	r2, [pc, #180]	@ (8012104 <HAL_XSPI_Init+0x204>)
 801204e:	4293      	cmp	r3, r2
 8012050:	d004      	beq.n	801205c <HAL_XSPI_Init+0x15c>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4a2e      	ldr	r2, [pc, #184]	@ (8012110 <HAL_XSPI_Init+0x210>)
 8012058:	4293      	cmp	r3, r2
 801205a:	d10a      	bne.n	8012072 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	430a      	orrs	r2, r1
 8012070:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801207a:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	3b01      	subs	r3, #1
 801208c:	021a      	lsls	r2, r3, #8
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	430a      	orrs	r2, r1
 8012094:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	2200      	movs	r2, #0
 80120a0:	2120      	movs	r1, #32
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f000 f887 	bl	80121b6 <XSPI_WaitFlagStateUntilTimeout>
 80120a8:	4603      	mov	r3, r0
 80120aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80120ac:	7bfb      	ldrb	r3, [r7, #15]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d16d      	bne.n	801218e <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	430a      	orrs	r2, r1
 80120c6:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	4a0e      	ldr	r2, [pc, #56]	@ (8012108 <HAL_XSPI_Init+0x208>)
 80120ce:	4293      	cmp	r3, r2
 80120d0:	d004      	beq.n	80120dc <HAL_XSPI_Init+0x1dc>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	4a0f      	ldr	r2, [pc, #60]	@ (8012114 <HAL_XSPI_Init+0x214>)
 80120d8:	4293      	cmp	r3, r2
 80120da:	d11d      	bne.n	8012118 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120e0:	9300      	str	r3, [sp, #0]
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2200      	movs	r2, #0
 80120e6:	2120      	movs	r1, #32
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 f864 	bl	80121b6 <XSPI_WaitFlagStateUntilTimeout>
 80120ee:	4603      	mov	r3, r0
 80120f0:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80120f2:	7bfb      	ldrb	r3, [r7, #15]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d00f      	beq.n	8012118 <HAL_XSPI_Init+0x218>
          {
            return status;
 80120f8:	7bfb      	ldrb	r3, [r7, #15]
 80120fa:	e049      	b.n	8012190 <HAL_XSPI_Init+0x290>
 80120fc:	420d1400 	.word	0x420d1400
 8012100:	520d1400 	.word	0x520d1400
 8012104:	420d2400 	.word	0x420d2400
 8012108:	420d3400 	.word	0x420d3400
 801210c:	f8e0c0fc 	.word	0xf8e0c0fc
 8012110:	520d2400 	.word	0x520d2400
 8012114:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	689a      	ldr	r2, [r3, #8]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	430a      	orrs	r2, r1
 801212c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8012136:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012142:	431a      	orrs	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	430a      	orrs	r2, r1
 801214a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f042 0201 	orr.w	r2, r2, #1
 801215c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	699b      	ldr	r3, [r3, #24]
 8012162:	2b02      	cmp	r3, #2
 8012164:	d107      	bne.n	8012176 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	689a      	ldr	r2, [r3, #8]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f042 0202 	orr.w	r2, r2, #2
 8012174:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801217e:	d103      	bne.n	8012188 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	655a      	str	r2, [r3, #84]	@ 0x54
 8012186:	e002      	b.n	801218e <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2202      	movs	r2, #2
 801218c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 801218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3710      	adds	r7, #16
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 80121a8:	2300      	movs	r3, #0
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	370c      	adds	r7, #12
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr

080121b6 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80121b6:	b580      	push	{r7, lr}
 80121b8:	b084      	sub	sp, #16
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	60f8      	str	r0, [r7, #12]
 80121be:	60b9      	str	r1, [r7, #8]
 80121c0:	603b      	str	r3, [r7, #0]
 80121c2:	4613      	mov	r3, r2
 80121c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80121c6:	e01a      	b.n	80121fe <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ce:	d016      	beq.n	80121fe <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80121d0:	f7f1 fb6a 	bl	80038a8 <HAL_GetTick>
 80121d4:	4602      	mov	r2, r0
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	1ad3      	subs	r3, r2, r3
 80121da:	69ba      	ldr	r2, [r7, #24]
 80121dc:	429a      	cmp	r2, r3
 80121de:	d302      	bcc.n	80121e6 <XSPI_WaitFlagStateUntilTimeout+0x30>
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10b      	bne.n	80121fe <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121ec:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121f2:	f043 0201 	orr.w	r2, r3, #1
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80121fa:	2303      	movs	r3, #3
 80121fc:	e00e      	b.n	801221c <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	6a1a      	ldr	r2, [r3, #32]
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	4013      	ands	r3, r2
 8012208:	2b00      	cmp	r3, #0
 801220a:	bf14      	ite	ne
 801220c:	2301      	movne	r3, #1
 801220e:	2300      	moveq	r3, #0
 8012210:	b2db      	uxtb	r3, r3
 8012212:	461a      	mov	r2, r3
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	429a      	cmp	r2, r3
 8012218:	d1d6      	bne.n	80121c8 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801221a:	2300      	movs	r3, #0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012224:	b084      	sub	sp, #16
 8012226:	b580      	push	{r7, lr}
 8012228:	b084      	sub	sp, #16
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
 801222e:	f107 001c 	add.w	r0, r7, #28
 8012232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8012236:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801223a:	2b03      	cmp	r3, #3
 801223c:	d105      	bne.n	801224a <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f000 fa8e 	bl	801276c <USB_CoreReset>
 8012250:	4603      	mov	r3, r0
 8012252:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8012254:	7fbb      	ldrb	r3, [r7, #30]
 8012256:	2b01      	cmp	r3, #1
 8012258:	d10b      	bne.n	8012272 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	f043 0208 	orr.w	r2, r3, #8
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	689b      	ldr	r3, [r3, #8]
 801226a:	f043 0220 	orr.w	r2, r3, #32
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8012272:	7bfb      	ldrb	r3, [r7, #15]
}
 8012274:	4618      	mov	r0, r3
 8012276:	3710      	adds	r7, #16
 8012278:	46bd      	mov	sp, r7
 801227a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801227e:	b004      	add	sp, #16
 8012280:	4770      	bx	lr

08012282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012282:	b480      	push	{r7}
 8012284:	b083      	sub	sp, #12
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	689b      	ldr	r3, [r3, #8]
 801228e:	f023 0201 	bic.w	r2, r3, #1
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012296:	2300      	movs	r3, #0
}
 8012298:	4618      	mov	r0, r3
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	460b      	mov	r3, r1
 80122ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80122b0:	2300      	movs	r3, #0
 80122b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80122c0:	78fb      	ldrb	r3, [r7, #3]
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d115      	bne.n	80122f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80122d2:	200a      	movs	r0, #10
 80122d4:	f7f1 faf4 	bl	80038c0 <HAL_Delay>
      ms += 10U;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	330a      	adds	r3, #10
 80122dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 fa36 	bl	8012750 <USB_GetMode>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d01e      	beq.n	8012328 <USB_SetCurrentMode+0x84>
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80122ee:	d9f0      	bls.n	80122d2 <USB_SetCurrentMode+0x2e>
 80122f0:	e01a      	b.n	8012328 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80122f2:	78fb      	ldrb	r3, [r7, #3]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d115      	bne.n	8012324 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	68db      	ldr	r3, [r3, #12]
 80122fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012304:	200a      	movs	r0, #10
 8012306:	f7f1 fadb 	bl	80038c0 <HAL_Delay>
      ms += 10U;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	330a      	adds	r3, #10
 801230e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f000 fa1d 	bl	8012750 <USB_GetMode>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d005      	beq.n	8012328 <USB_SetCurrentMode+0x84>
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2bc7      	cmp	r3, #199	@ 0xc7
 8012320:	d9f0      	bls.n	8012304 <USB_SetCurrentMode+0x60>
 8012322:	e001      	b.n	8012328 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012324:	2301      	movs	r3, #1
 8012326:	e005      	b.n	8012334 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2bc8      	cmp	r3, #200	@ 0xc8
 801232c:	d101      	bne.n	8012332 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801232e:	2301      	movs	r3, #1
 8012330:	e000      	b.n	8012334 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012332:	2300      	movs	r3, #0
}
 8012334:	4618      	mov	r0, r3
 8012336:	3710      	adds	r7, #16
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801233c:	b084      	sub	sp, #16
 801233e:	b580      	push	{r7, lr}
 8012340:	b086      	sub	sp, #24
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
 8012346:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801234a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801234e:	2300      	movs	r3, #0
 8012350:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012356:	2300      	movs	r3, #0
 8012358:	613b      	str	r3, [r7, #16]
 801235a:	e009      	b.n	8012370 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	3340      	adds	r3, #64	@ 0x40
 8012362:	009b      	lsls	r3, r3, #2
 8012364:	4413      	add	r3, r2
 8012366:	2200      	movs	r2, #0
 8012368:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	3301      	adds	r3, #1
 801236e:	613b      	str	r3, [r7, #16]
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	2b0e      	cmp	r3, #14
 8012374:	d9f2      	bls.n	801235c <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801237a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012382:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012386:	2b00      	cmp	r3, #0
 8012388:	d11c      	bne.n	80123c4 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	68fa      	ldr	r2, [r7, #12]
 8012394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012398:	f043 0302 	orr.w	r3, r3, #2
 801239c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123ae:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80123c2:	e011      	b.n	80123e8 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80123ee:	461a      	mov	r2, r3
 80123f0:	2300      	movs	r3, #0
 80123f2:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80123f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80123f8:	2b03      	cmp	r3, #3
 80123fa:	d10d      	bne.n	8012418 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80123fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012400:	2b00      	cmp	r3, #0
 8012402:	d104      	bne.n	801240e <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012404:	2100      	movs	r1, #0
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f000 f968 	bl	80126dc <USB_SetDevSpeed>
 801240c:	e008      	b.n	8012420 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801240e:	2101      	movs	r1, #1
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f000 f963 	bl	80126dc <USB_SetDevSpeed>
 8012416:	e003      	b.n	8012420 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012418:	2103      	movs	r1, #3
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f000 f95e 	bl	80126dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012420:	2110      	movs	r1, #16
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f8fa 	bl	801261c <USB_FlushTxFifo>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	d001      	beq.n	8012432 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 f924 	bl	8012680 <USB_FlushRxFifo>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d001      	beq.n	8012442 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 801243e:	2301      	movs	r3, #1
 8012440:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012448:	461a      	mov	r2, r3
 801244a:	2300      	movs	r3, #0
 801244c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012454:	461a      	mov	r2, r3
 8012456:	2300      	movs	r3, #0
 8012458:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012460:	461a      	mov	r2, r3
 8012462:	2300      	movs	r3, #0
 8012464:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012466:	2300      	movs	r3, #0
 8012468:	613b      	str	r3, [r7, #16]
 801246a:	e043      	b.n	80124f4 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	015a      	lsls	r2, r3, #5
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	4413      	add	r3, r2
 8012474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801247e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012482:	d118      	bne.n	80124b6 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d10a      	bne.n	80124a0 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	015a      	lsls	r2, r3, #5
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	4413      	add	r3, r2
 8012492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012496:	461a      	mov	r2, r3
 8012498:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801249c:	6013      	str	r3, [r2, #0]
 801249e:	e013      	b.n	80124c8 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124ac:	461a      	mov	r2, r3
 80124ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80124b2:	6013      	str	r3, [r2, #0]
 80124b4:	e008      	b.n	80124c8 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	015a      	lsls	r2, r3, #5
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	4413      	add	r3, r2
 80124be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124c2:	461a      	mov	r2, r3
 80124c4:	2300      	movs	r3, #0
 80124c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	015a      	lsls	r2, r3, #5
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	4413      	add	r3, r2
 80124d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124d4:	461a      	mov	r2, r3
 80124d6:	2300      	movs	r3, #0
 80124d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	015a      	lsls	r2, r3, #5
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	4413      	add	r3, r2
 80124e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124e6:	461a      	mov	r2, r3
 80124e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80124ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	3301      	adds	r3, #1
 80124f2:	613b      	str	r3, [r7, #16]
 80124f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80124f8:	461a      	mov	r2, r3
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d3b5      	bcc.n	801246c <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012500:	2300      	movs	r3, #0
 8012502:	613b      	str	r3, [r7, #16]
 8012504:	e043      	b.n	801258e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	015a      	lsls	r2, r3, #5
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	4413      	add	r3, r2
 801250e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801251c:	d118      	bne.n	8012550 <USB_DevInit+0x214>
    {
      if (i == 0U)
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d10a      	bne.n	801253a <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	015a      	lsls	r2, r3, #5
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	4413      	add	r3, r2
 801252c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012530:	461a      	mov	r2, r3
 8012532:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012536:	6013      	str	r3, [r2, #0]
 8012538:	e013      	b.n	8012562 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	015a      	lsls	r2, r3, #5
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	4413      	add	r3, r2
 8012542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012546:	461a      	mov	r2, r3
 8012548:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801254c:	6013      	str	r3, [r2, #0]
 801254e:	e008      	b.n	8012562 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	015a      	lsls	r2, r3, #5
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	4413      	add	r3, r2
 8012558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801255c:	461a      	mov	r2, r3
 801255e:	2300      	movs	r3, #0
 8012560:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	015a      	lsls	r2, r3, #5
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	4413      	add	r3, r2
 801256a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801256e:	461a      	mov	r2, r3
 8012570:	2300      	movs	r3, #0
 8012572:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	015a      	lsls	r2, r3, #5
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	4413      	add	r3, r2
 801257c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012580:	461a      	mov	r2, r3
 8012582:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012586:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	3301      	adds	r3, #1
 801258c:	613b      	str	r3, [r7, #16]
 801258e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012592:	461a      	mov	r2, r3
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	4293      	cmp	r3, r2
 8012598:	d3b5      	bcc.n	8012506 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80125a0:	691b      	ldr	r3, [r3, #16]
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80125a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80125ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2200      	movs	r2, #0
 80125b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80125ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80125bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d105      	bne.n	80125d0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	699b      	ldr	r3, [r3, #24]
 80125c8:	f043 0210 	orr.w	r2, r3, #16
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	699a      	ldr	r2, [r3, #24]
 80125d4:	4b10      	ldr	r3, [pc, #64]	@ (8012618 <USB_DevInit+0x2dc>)
 80125d6:	4313      	orrs	r3, r2
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80125dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d005      	beq.n	80125f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	699b      	ldr	r3, [r3, #24]
 80125e8:	f043 0208 	orr.w	r2, r3, #8
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80125f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d107      	bne.n	8012608 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	699b      	ldr	r3, [r3, #24]
 80125fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012600:	f043 0304 	orr.w	r3, r3, #4
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012608:	7dfb      	ldrb	r3, [r7, #23]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3718      	adds	r7, #24
 801260e:	46bd      	mov	sp, r7
 8012610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012614:	b004      	add	sp, #16
 8012616:	4770      	bx	lr
 8012618:	803c3800 	.word	0x803c3800

0801261c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801261c:	b480      	push	{r7}
 801261e:	b085      	sub	sp, #20
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012626:	2300      	movs	r3, #0
 8012628:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	3301      	adds	r3, #1
 801262e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012636:	d901      	bls.n	801263c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012638:	2303      	movs	r3, #3
 801263a:	e01b      	b.n	8012674 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	2b00      	cmp	r3, #0
 8012642:	daf2      	bge.n	801262a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012644:	2300      	movs	r3, #0
 8012646:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	019b      	lsls	r3, r3, #6
 801264c:	f043 0220 	orr.w	r2, r3, #32
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	3301      	adds	r3, #1
 8012658:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012660:	d901      	bls.n	8012666 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012662:	2303      	movs	r3, #3
 8012664:	e006      	b.n	8012674 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	691b      	ldr	r3, [r3, #16]
 801266a:	f003 0320 	and.w	r3, r3, #32
 801266e:	2b20      	cmp	r3, #32
 8012670:	d0f0      	beq.n	8012654 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012672:	2300      	movs	r3, #0
}
 8012674:	4618      	mov	r0, r3
 8012676:	3714      	adds	r7, #20
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012680:	b480      	push	{r7}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	3301      	adds	r3, #1
 8012690:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012698:	d901      	bls.n	801269e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801269a:	2303      	movs	r3, #3
 801269c:	e018      	b.n	80126d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	691b      	ldr	r3, [r3, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	daf2      	bge.n	801268c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80126a6:	2300      	movs	r3, #0
 80126a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2210      	movs	r2, #16
 80126ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	3301      	adds	r3, #1
 80126b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80126bc:	d901      	bls.n	80126c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80126be:	2303      	movs	r3, #3
 80126c0:	e006      	b.n	80126d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	691b      	ldr	r3, [r3, #16]
 80126c6:	f003 0310 	and.w	r3, r3, #16
 80126ca:	2b10      	cmp	r3, #16
 80126cc:	d0f0      	beq.n	80126b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80126ce:	2300      	movs	r3, #0
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3714      	adds	r7, #20
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr

080126dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80126dc:	b480      	push	{r7}
 80126de:	b085      	sub	sp, #20
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	460b      	mov	r3, r1
 80126e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126f2:	681a      	ldr	r2, [r3, #0]
 80126f4:	78fb      	ldrb	r3, [r7, #3]
 80126f6:	68f9      	ldr	r1, [r7, #12]
 80126f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80126fc:	4313      	orrs	r3, r2
 80126fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012700:	2300      	movs	r3, #0
}
 8012702:	4618      	mov	r0, r3
 8012704:	3714      	adds	r7, #20
 8012706:	46bd      	mov	sp, r7
 8012708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270c:	4770      	bx	lr

0801270e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801270e:	b480      	push	{r7}
 8012710:	b085      	sub	sp, #20
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	68fa      	ldr	r2, [r7, #12]
 8012724:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012728:	f023 0303 	bic.w	r3, r3, #3
 801272c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	68fa      	ldr	r2, [r7, #12]
 8012738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801273c:	f043 0302 	orr.w	r3, r3, #2
 8012740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012742:	2300      	movs	r3, #0
}
 8012744:	4618      	mov	r0, r3
 8012746:	3714      	adds	r7, #20
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	695b      	ldr	r3, [r3, #20]
 801275c:	f003 0301 	and.w	r3, r3, #1
}
 8012760:	4618      	mov	r0, r3
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr

0801276c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012774:	2300      	movs	r3, #0
 8012776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	3301      	adds	r3, #1
 801277c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012784:	d901      	bls.n	801278a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012786:	2303      	movs	r3, #3
 8012788:	e01b      	b.n	80127c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	691b      	ldr	r3, [r3, #16]
 801278e:	2b00      	cmp	r3, #0
 8012790:	daf2      	bge.n	8012778 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012792:	2300      	movs	r3, #0
 8012794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	691b      	ldr	r3, [r3, #16]
 801279a:	f043 0201 	orr.w	r2, r3, #1
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	3301      	adds	r3, #1
 80127a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80127ae:	d901      	bls.n	80127b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80127b0:	2303      	movs	r3, #3
 80127b2:	e006      	b.n	80127c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	691b      	ldr	r3, [r3, #16]
 80127b8:	f003 0301 	and.w	r3, r3, #1
 80127bc:	2b01      	cmp	r3, #1
 80127be:	d0f0      	beq.n	80127a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80127c0:	2300      	movs	r3, #0
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3714      	adds	r7, #20
 80127c6:	46bd      	mov	sp, r7
 80127c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127cc:	4770      	bx	lr

080127ce <memset>:
 80127ce:	4402      	add	r2, r0
 80127d0:	4603      	mov	r3, r0
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d100      	bne.n	80127d8 <memset+0xa>
 80127d6:	4770      	bx	lr
 80127d8:	f803 1b01 	strb.w	r1, [r3], #1
 80127dc:	e7f9      	b.n	80127d2 <memset+0x4>
	...

080127e0 <__libc_init_array>:
 80127e0:	b570      	push	{r4, r5, r6, lr}
 80127e2:	4d0d      	ldr	r5, [pc, #52]	@ (8012818 <__libc_init_array+0x38>)
 80127e4:	2600      	movs	r6, #0
 80127e6:	4c0d      	ldr	r4, [pc, #52]	@ (801281c <__libc_init_array+0x3c>)
 80127e8:	1b64      	subs	r4, r4, r5
 80127ea:	10a4      	asrs	r4, r4, #2
 80127ec:	42a6      	cmp	r6, r4
 80127ee:	d109      	bne.n	8012804 <__libc_init_array+0x24>
 80127f0:	4d0b      	ldr	r5, [pc, #44]	@ (8012820 <__libc_init_array+0x40>)
 80127f2:	2600      	movs	r6, #0
 80127f4:	4c0b      	ldr	r4, [pc, #44]	@ (8012824 <__libc_init_array+0x44>)
 80127f6:	f000 f817 	bl	8012828 <_init>
 80127fa:	1b64      	subs	r4, r4, r5
 80127fc:	10a4      	asrs	r4, r4, #2
 80127fe:	42a6      	cmp	r6, r4
 8012800:	d105      	bne.n	801280e <__libc_init_array+0x2e>
 8012802:	bd70      	pop	{r4, r5, r6, pc}
 8012804:	f855 3b04 	ldr.w	r3, [r5], #4
 8012808:	3601      	adds	r6, #1
 801280a:	4798      	blx	r3
 801280c:	e7ee      	b.n	80127ec <__libc_init_array+0xc>
 801280e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012812:	3601      	adds	r6, #1
 8012814:	4798      	blx	r3
 8012816:	e7f2      	b.n	80127fe <__libc_init_array+0x1e>
 8012818:	08012948 	.word	0x08012948
 801281c:	08012948 	.word	0x08012948
 8012820:	08012948 	.word	0x08012948
 8012824:	0801294c 	.word	0x0801294c

08012828 <_init>:
 8012828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801282a:	bf00      	nop
 801282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801282e:	bc08      	pop	{r3}
 8012830:	469e      	mov	lr, r3
 8012832:	4770      	bx	lr

08012834 <_fini>:
 8012834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012836:	bf00      	nop
 8012838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801283a:	bc08      	pop	{r3}
 801283c:	469e      	mov	lr, r3
 801283e:	4770      	bx	lr
